def qemuArchFlag(String arch) {
    switch (arch) {
        case 'armel':   return '--platform=linux/arm/v6'
        case 'armhf':   return '--platform=linux/arm/v7'
        case 'arm64':   return '--platform=linux/arm64'
        case 'ppc64el': return '--platform=linux/ppc64le'
        case 's390x':   return '--platform=linux/s390x'
        default:        return ''
    }
}

def binaryName(String arch) {
    if (arch == 'x86_64') {
        return 'linux-stanc'
    }
    return "linux-${arch}-stanc"
}

def cleanCheckout() {
    retry(3) {
        checkout([
            $class: 'GitSCM',
            branches: scm.branches,
            extensions: [[$class: 'CloneOption', noTags: false]],
            userRemoteConfigs: scm.userRemoteConfigs,
        ])
    }

    sh 'git clean -xffd'
}

pipeline {
    agent none
    parameters {
        string(defaultValue: 'master', name: 'git_branch',
               description: "Please specify a git branch ( develop ), git hash ( aace72b6ccecbb750431c46f418879b325416c7d ), pull request ( PR-123 ), pull request from fork ( PR-123 )")
    }
    options {
        parallelsAlwaysFailFast()
        buildDiscarder(logRotator(numToKeepStr: '20', daysToKeepStr: '30'))
    }
    environment {
        MACOS_SWITCH = 'stanc3-4.14'
    }
    stages {

        stage('Build (Linux)') {
            when {
                beforeAgent true
                allOf {
                    expression { !skipRebuildingBinaries }
                    anyOf { buildingTag(); branch 'master'; expression { params.build_multiarch } }
                }
            }
            matrix {
                axes {
                    axis {
                        name 'ARCHITECTURE'
                        values 'arm64', 'ppc64el', 's390x', 'armhf', 'armel', 'x86_64'
                    }
                }
                stages {
                    stage("Build static binary") {
                        agent {
                            dockerfile {
                                filename 'scripts/docker/static-builder/Dockerfile'
                                dir '.'
                                label 'linux && emulation'
                                args "${qemuArchFlag(ARCHITECTURE)} --group-add=987 --group-add=980 --group-add=988 --entrypoint='' -v /var/run/docker.sock:/var/run/docker.sock"
                                additionalBuildArgs  "${qemuArchFlag(ARCHITECTURE)} --build-arg PUID=\$(id -u) --build-arg PGID=\$(id -g)"
                            }
                        }
                        steps {
                            dir("${env.WORKSPACE}/linux-${ARCHITECTURE}"){
                                cleanCheckout()
                                sh '''
                                    eval $(opam env)
                                    dune subst
                                    dune build --profile static --root=.
                                '''
                                sh "mkdir -p bin && mv `find _build -name stanc.exe` bin/${binaryName(ARCHITECTURE)}"
                                archiveArtifacts 'bin/*'
                            }
                        }
                        post {always { sh "rm -rf ${env.WORKSPACE}/linux-${ARCHITECTURE}/*"}}
                    }
                }
            }
        }

        stage('Build (Other platforms)') {
            parallel {
                stage("Build static Linux x86_64 binary") {
                    agent {
                        dockerfile {
                            filename 'scripts/docker/static-builder/Dockerfile'
                            dir '.'
                            label 'linux && triqs'
                            args '--group-add=987 --group-add=980 --group-add=988 --entrypoint=\'\''
                            additionalBuildArgs  '--build-arg PUID=$(id -u) --build-arg PGID=$(id -g)'
                        }
                    }
                    steps {
                        dir("${env.WORKSPACE}/linux"){
                            cleanCheckout()
                            sh '''
                                eval $(opam env)
                                dune subst
                                dune build --profile static --root=.
                            '''
                            sh "mkdir -p bin && mv `find _build -name stanc.exe` bin/linux-stanc"
                            archiveArtifacts 'bin/*'
                        }
                    }
                    post {always { sh "rm -rf ${env.WORKSPACE}/linux/*"}}
                }

                stage("Build MacOS binaries") {
                    agent none
                    stages {
                        stage("Build MacOS x86 binary") {
                            agent { label 'osx && intel' }
                            steps {
                                dir("${env.WORKSPACE}/osx-x86"){
                                    cleanCheckout()
                                    withEnv(['SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX10.11.sdk', 'MACOSX_DEPLOYMENT_TARGET=10.11']) {
                                        sh '''
                                            export PATH=/Users/jenkins/brew/bin:$PATH
                                            bash -x scripts/install_ocaml.sh "$MACOS_SWITCH"
                                            eval $(opam env --switch="$MACOS_SWITCH" --set-switch)
                                            opam switch list
                                            opam update -y || true
                                            opam pin -y dune 3.6.0 --no-action
                                            bash -x scripts/install_build_deps.sh
                                            dune subst
                                            dune build --root=. --profile release
                                        '''
                                    }
                                    sh "mkdir -p bin && mv `find _build -name stanc.exe` bin/mac-x86-stanc"
                                    stash 'bin/*'
                                }
                            }
                            post { always { sh "rm -rf ${env.WORKSPACE}/osx-x86/*" }}
                        }

                        stage("Build MacOS arm64 binary") {
                            agent { label 'osx && m1' }
                            steps {
                                dir("${env.WORKSPACE}/osx-arm64"){
                                    cleanCheckout()
                                    withEnv(['SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX11.0.sdk', 'MACOSX_DEPLOYMENT_TARGET=11.0']) {
                                        sh '''
                                            export PATH=/Users/jenkins/brew/bin:$PATH
                                            bash -x scripts/install_ocaml.sh "$MACOS_SWITCH"
                                            eval $(opam env --switch="$MACOS_SWITCH" --set-switch)
                                            opam switch list
                                            opam update -y || true
                                            bash -x scripts/install_build_deps.sh
                                            dune subst
                                            dune build --root=. --profile release
                                        '''
                                    }
                                    sh "mkdir -p bin && mv `find _build -name stanc.exe` bin/mac-arm64-stanc"
                                    stash 'bin/*'
                                }
                            }
                            post { always { sh "rm -rf ${env.WORKSPACE}/osx-arm64/*" }}
                        }

                        stage('Build MacOS fat binary') {
                            agent { label 'osx && m1' }
                            steps {
                                dir("${env.WORKSPACE}/osx-universal"){
                                    stash 'bin/*'
                                    stash 'bin/*'
                                    withEnv(['SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX11.0.sdk', 'MACOSX_DEPLOYMENT_TARGET=11.0']) {
                                        sh "lipo -create bin/mac-x86-stanc bin/mac-arm64-stanc -output bin/mac-stanc"
                                    }
                                    sh "lipo -archs bin/mac-stanc"
                                    archiveArtifacts 'bin/*'
                                }
                            }
                            post { always { sh "rm -rf ${env.WORKSPACE}/osx-universal/*" }}
                        }
                    }
                }

                stage("Build stanc.js") {
                    agent {
                        dockerfile {
                            filename 'scripts/docker/ci/Dockerfile'
                            dir '.'
                            label 'linux && triqs'
                            args '--group-add=987 --group-add=980 --group-add=988 --entrypoint=\'\''
                            additionalBuildArgs  '--build-arg PUID=$(id -u) --build-arg PGID=$(id -g)'
                        }
                    }
                    steps {
                        dir("${env.WORKSPACE}/stancjs"){
                            cleanCheckout()
                            sh '''
                                eval $(opam env)
                                dune subst
                                dune build --root=. --profile release src/stancjs
                            '''
                            sh "mkdir -p bin && mv `find _build -name stancjs.bc.js` bin/stanc.js"
                            sh '''
                                eval $(opam env)
                                dune build --force --profile=dev --root=. src/stancjs
                            '''
                            sh "mv `find _build -name stancjs.bc.js` bin/stanc-pretty.js"
                            archiveArtifacts 'bin/*'
                        }
                    }
                    post {always { sh "rm -rf ${env.WORKSPACE}/stancjs/*"}}
                }
                // Cross compiling for windows on debian
                stage("Build Windows binary") {
                    agent {
                        dockerfile {
                            filename 'scripts/docker/ci/Dockerfile'
                            dir '.'
                            label 'linux'
                            args '--group-add=987 --group-add=980 --group-add=988 --entrypoint=\'\''
                            additionalBuildArgs  '--build-arg PUID=$(id -u) --build-arg PGID=$(id -g)'
                        }
                    }
                    steps {
                        dir("${env.WORKSPACE}/windows"){
                            cleanCheckout()
                            sh '''
                                eval $(opam env)
                                dune subst
                                dune build -x windows --root=. --profile release
                            '''
                            sh "mkdir -p bin && mv _build/default.windows/src/stanc/stanc.exe bin/windows-stanc"
                            archiveArtifacts 'bin/*'
                        }
                    }
                    post {always { sh "rm -rf ${env.WORKSPACE}/windows/*"}}
                }
            }
        }
    }
}
