STANC3 RELEASE NOTES
======================================================================

v2.29.2 (25 March 2022)
======================================================================

- Fixed a bug fix with `--O1` when arrays declared in transformed parameters or model were assigned data.
- Added missing signatures for `normal_id_glm_lpdf`.
- Fixed a compilation error with forward declarations.
- Disabled AD level optimizations in `--O1` optimizations.
- MIR pretty printing now always adds ( and ) around the ternary operator ?:

v2.29.1 (2 March 2022)
======================================================================

- Formatting without a | when only one argument is supplied to a distribution.
- Stanc previously would allow you to erroneously assign a function to a different functions name using =, which then failed in C++ compilation. This is now an error.
- Nonlinear transforms of the LHS of a tilde statement now produce warnings in pedantic mode.
- Improved type error messages for operators and tilde statements.

v2.29.0 (14 February 2022)
======================================================================

FEATURES
 - Allow most reserved words in C++ (e.g., `public`) to appear in a stan program; they will be changed by the compiler to `_stan_<reserved word>` in the generated C++. (#962)
 - User defined functions can now be overloaded. Multiple definitions of the same function name are allowed if the arguments are different in each definition.(#1027)
 - Improved error messages for incorrect variable declarations. (#1099)
 - When an unknown identifier is encountered Stan will suggest nearby known names you might have meant (#1024)
 - Extra semicolons in `data` or `parameters` no longer produce syntax errors. (#988)
 - Improved error messages for incomplete probability library calls. (#1021)
 - Added nicer error message when a comment is unterminated at end of input. (#1025)
 - All internal compiler errors now include a link to the stanc3 issues page. (#1028)
 - Improve error messages when a user tries to declare a function argument as a constrained type. (#1030)
 - Replaced the use of the word twiddle with tilde in pedantic warning messages. (#1050)
 - Allow user-defined densities over complex arguments and deeply nested arguments. (#1046)
 - Added optimization layers `--O0` (default), `--O1`, and `--Oexperimental`
 - Turn back on allowing immediately assigned to decls not be NaN initialized at `O1` (#1029)
 - Allows `log_prob_impl` to use Struct of Arrays type for reverse mode autodiff at `O1` (#955)
 - Issue a warning when a user has a model with unreachable statements, such as code following a `return` statement. (#1063)
 - The compiler can now compile or format standalone function definitions in a `.stanfunctions` file. These are compiled as if a normal Stan program was compiled with `stanc3 --standalone-functions` and can be used with `#include` statements in the `functions` block (#1022)
 - The canonicalizer can now have each part enabled seperately. This can be done with commands like `stanc --auto-format --canonicalize=braces,deprecations <model>`. Current options are `deprecations`, `braces`, and `parenthesis`. (#1058)
 - Ensure the canonicalizer properly prints nested if-else statements. (#1055)
 - `--auto-format` no longer prints code which originated from an `#include` directive. This can be re-enabled by using `canonicalize=includes`. (#1069)
 - When using `--auto-format`, the user can now pass `--max-line-length=#` to set the column number at which the formatter will try to break lines. (#1068)
 - Tweak pretty-printing of if-else blocks. (#1008)
 - Canonicalizer now adds brackets around single statements in if-else/for/while. (#1003)
 - Expose `bernoulli_logit_glm_rng` functions. (#1034)
 - lchoose now has the same signatures as binomial_coefficient_log. (#1010)
 - Added `ordered_probit_lpmf(array[] int, real, vector) => real` and `ordered_probit_lpmf(array[] int, real, array[] vector) => real`. (#1073)
 - Added additional `normal_id_glm` signatures. (#1084)
 - Added signatures for `inv_erfc` function. (#1090)
 - Added Differential-Algebraic Equation solver (`dae`, `dae_tol`). (#1092)
 - Added `von_mises_cdf`, `von_mises_lcdf`, von_mises_lccdf`. (#1085)
 - Added `loglogistic_lpdf`, `loglogistic_log`, `loglogistic_rng` and `loglogistic_cdf`. (#1094)
 - Clean up more mutable state in the Javascript interface (#1118)

DEPRECATIONS
 - Added a warning for `matrix^scalar` that points users to `.^` and `matrix_power()`. (#1026)
 - Warn about the following identifiers being reserved in a future version: `array`, `upper`, `lower`, `offset`, `multiplier`. (#1048)
 - The old form of declaring arrays like `real a[5]`, which has been deprecated since 2.26, now issues a warning. (#1072)
 - Marked existing syntax deprecations (e.g., `<-`) as expiring in Stan 2.32.0. (#1044)
 - Deprecate nested multi-indexing on lvalues as it is inconsistent with rvalues.(#1059)

BUGFIXES
 - Fixed an issue that arose during C++ compilation of models that used a variable with the same name as a Stan library function and called that function. (#1011)
 - Fixed a bug where the lexer was allowing illegal variable names which began with an underscore. (#962)
 - Fixed an issue with parser errors 'sticking around' on subsequent runs, which primarily affected the Javascript compiler. (#1074)

DEVELOPER
 - Updated OCaml and build dependencies. (#1019)
 - Create internal developer documentation at https://mc-stan.org/stanc3/stanc/. (#1006)
 - stan2tfp now lives in a seperate repo at stan-dev/stan2tfp. (#1040)
 - Refactored Stan typechecker. (#995)
 - Replaces all references to Docker Hub for andrjohns images with stanorg. (#1017)
 - Move docker to ci-scripts repository. (#1020)
 - Refactored when logic for binaries builds and release. (#1018)
 - Added optimization level flags, debug-* and dump-math-signatures flags to stancjs. (#1082)
 - Compile Tests and Model end-to-end tests run now optionally only when test/integration/good has changed. (#1018)

v2.28.1 (21 October 2021)
======================================================================

- Expose missing arg() function
- Turned off default of allow_uninitialized_decls
- Fixed transform_inits input and output sizes

Note: There are known issues during compilation when calling functions that expect complex arguments with variables of type `int` or `real`.
If this is required, please wrap the arguments with a call to `to_complex()`. This will be addressed in the next release.

v2.28.0 (5 October 2021)
======================================================================

- Int division is now handled by the Warnings module to print this to stderr and to avoid printing to stderr directly (a problem for stanc.js). (#869)
- Correct canonicalizing/auto-formatting of commented Stan programs; comments no longer discarded. (#894)
- Improved error messages when argument types don't match the function signature. (#907)
- A warning is now produced if an empty file is compiled. (#919)
- Stancjs now has `--info` and `--debug-generate-data` options.(#920)
- Added support for `skew_double_exponential` distribution.(#921)
- Reorganized warning system internally.(#922)
- Removed initialization of NA values from objects that are immediately assigned to(#930)
- Added `to_matrix(array[] row_vector) => matrix`. (#931)
- Added build process for arm64, armhf, armel, mips64el, ppc64el and s390x linux architectures. (#936)
- Implemented complex type functionality. (#940)
- Added types used for deducing memory patterns. (#944)
- Removes dune runtest from binary build stage. (#950)
- Provide rough support for non-ASCII characters in string literals. (#952)
- Clean up internal exception handling. (#957)
- Added the ability to write imaginary numbers as literals, such as "3.1i". (#963)
- Added a list of included files to the information provided by `--info`. (#965)
- Tweaked pretty-printing of conditional distribution applications. (#967)
- Better pretty-printing for long constraints. (#970)
- Fix automated builds of non-x86 architectures. (#972)
- Fixed a bug with the conditional operator `?` and the use of vector or matrix expressions. (#977)
- Fixed a typo in the error message displayed when a file cannot be found. (#981)
- Error messages should now always have a trailing newline. (#982)
- Miscellaneous README.md improvements. (#914, #943, #984)

v2.27.0 (2 June 2021)
======================================================================

 - Added the `--info` argument to output a list of functions and distributions used.(#813)
 - Added `ode_ckrk` and `ode_ckrk_tol` to the Stan language.(#828)
 - Cleaned up indexing by using variadic rvalue and assign functions.(#829)
 - Fixed incorrect codegen for mixed-type array expressions.(#830)
 - Added building ARM to our infrastructure.(#832, #833)
 - Made locations_array constexpr and moved curr_statement__ to function scope.(#842, #845)
 - Added range checks.(#849, #521)
 - Consolidated the use of | in cdf functions to match lpdf/lpmf and lccdf functions. Comma version of cdf function is deprecated.(#863)
 - Adds signatures for data-only quantile functions.(#870)
 - Cleanup readability of the C++.(#871)
 - Adds vectorized versions of `fma()`.(#888)
 - Fixed optimizer crash on divide-by-zero expressions.(#891)
 - Added clearing of read/write events for global matrix_cls.(#897)
 - Added  `ode_adjoint_tol_ctl` and improved type printing with variadic ODEs.(#900)

v2.26.1 (15 February 2021)
======================================================================

- Fixed issue with not allowing user-defined _lp functions with a void return type in transformed parameters block.

v2.26.0 (26 January 2021)
======================================================================

 - Added deprecated functions warnings to regular use, and replace in canonicalizer.(#726)
 - Added a small readme for dockerfiles usage locally.(#738)
 - Added `matrix chol2inv(matrix)`.(#740)
 - Added a Github Actions job to build binaries.(#747)
 - Modified code-generation for user-defined functions to accept Eigen expressions.(#752)
 - Added OpenCL support for: bernoulli_lpmf, bernoulli_logit_lpmf, beta_lpdf, beta_proportion_lpdf, binomial_lpmf, cauchy_lpdf, chi_square_lpdf, double_exponential_lpdf, exp_mod_normal_lpdf, exponential_lpdf, frechet_lpdf, gamma_lpdf, gumbel_lpdf, inv_chi_square_lpdf, inv_gamma_lpdf, logistic_lpdf, lognormal_lpdf, neg_binomial_lpmf, neg_binomial_2_lpmf, neg_binomial_2_log_lpmf, normal_lpdf, pareto_lpdf, pareto_type_2_lpdf, poisson_lpmf, poisson_log_lpmf, rayleigh_lpdf, scaled_inv_chi_square_lpdf, skew_normal_lpdf, std_normal_lpdf, student_t_lpdf, uniform_lpdf, weibull_lpdf
 - Allowed `write_array()`, `log_prob()`, and `transform_inits()` to avoid a vector copy and read/write(#761)
 - Added the discrete_range distribution.(#763)
 - Use Eigen comma initializer to avoid copy in vector construction.(#766)
 - Allowed calling lp functions in transformed parameters block.(#767)
 - Fixed multi-dim indexing bug.(#768)
 - Moved the reported location of parsing errors closer to the problematic section.(#771)
 - Fixed a optimization bug in handling of unnormalized distributions.(#778)
 - Added profiling to the Stan language.(#794)
 - Added `linspaced_int_array()`(#796)

v2.25.0 (26 October 2020)
======================================================================

- Improved parser error message on missing semicolon in the data or parameters block.
- Expanded OpenCL (GPU) support for GLMs to now handle parameters for any argument.
- Fix parameter unconstraining bug when the constraints depend on other constrained parameters.
- "offset, "multiplier," "lower," and "upper" are no longer reserved keywords and can be used in the names of identifiers.
- Extended `elt_multiply` (`.*`) and `elt_divide` (`./`) to cases where both inputs are scalars.
- Added support for unnormalized distributions for the `target +=` sytnax.
- Changed the MIR to represent function declarations as Options.
- Variable names are now allowed that shadow math function names.
- Fixed a bug with not recognizing transformed parameters in pedantic mode
- Added vectorised binary functions:
    - bessel_first_kind
    - beta
    - binary_log_loss
    - binomial_coefficient_log
    - choose
    - falling_factorial
    - fdim
    - fmax
    - fmin
    - fmod
    - gamma_p
    - gamma_q
    - hypot
    - lbeta
    - ldexp
    - lmgamma
    - log_diff_exp
    - log_falling_factorial
    - log_inv_logit_diff
    - log_modified_bessel_first_kind
    - log_rising_factorial
    - modified_bessel_first_kind
    - modified_bessel_second_kind
    - lmultiply
    - multiply_log
    - owens_t
    - rising_factorial

Code contributions were made by @andrjohns @nhuurre @rok-cesnovar @rybern and @seantalts 

v2.24.1 (11 August 2020)
======================================================================

Bugfixes:

- added using std::pow to generated code
- fixed code generation for pow()
- added data quantifier to linspaced_* signatures
- fixed code generation for empty matrices

v2.24.0 (28 July 2020)
======================================================================

New functions: 
   `algebra_solver_newton`

   `matrix hmm_hidden_state_prob(matrix, matrix, vector)`
   `int[] hmm_latent_rng(matrix, matrix, vector)`
   `real hmm_marginal(matrix, matrix, vector)`
    
   `T lambert_w0(T)`, for any T
   `T lambert_w1(T)`, for any T
    
   `matrix matrix_power(matrix, int)`
   
   `real multinomial_logit_log(int[], vector)`
   `real multinomial_logit_lpmf(int[], vector)`
   `int[] multinomial_logit_rng(vector, int)`
    
   `ode_adams`, `ode_adams_tol`
   `ode_bdf`, `ode_bdf_tol`
   `ode_rk45`, `ode_rk45_tol`

   `T pow(int, T)`
   `T pow(real, T)`
   `T pow(T, int)`
   `T pow(T, real) `
    (previously only real pow(real, real) was available)

   `T reverse(T)`, where T is vector, row_vector or an array of any type
   
   `matrix identity_matrix(int)`
   `real[] linspaced_array(int, real, real); row_vector linspaced_row_vector(int, real, real); vector linspaced_vector(int, real, real)`
   `int[] one_hot_int_array(int, int); real[] one_hot_array(int, int); row_vector one_hot_row_vector(int, int); vector one_hot_vector(int, int)`
   `int[] ones_int_array(int); real[] ones_array(int); row_vector ones_row_vector(int); vector ones_vector(int)`
   `vector uniform_simplex(int)`
   `int[] zeros_int_array(int); real[] zeros_array(int); row_vector zeros_row_vector(int); vector zeros_vector(int)`


New features:

- pedantic mode
- experimental optimization mode
- new integer division operator `%/%`
- non-scalar values are now allowed in lower, upper, offset and multiplier
- integrate_ode_* functions are now deprecated
- data-only restricted functions now work with parameters in generated quantities
- improved out-of-bounds messages for vectors, matrices
- added checks for invalid literals
- `--allow_undefined` and `--include_paths` are deprecated in favor of `--allow-undefined` and `--include-paths`
- cleaned up the generated model C++ code: model is now final, using statements instead of typedef, better use of inline, use of `.clear()` instead of `.resize(0)`, remove unnecessary functions
- cleaned up the OCaml code: better use of helper functions, removed duplicate functions, better exception messages, replace imperative code for handling Stan Math signatures
- size expressions for parameters and generated quantities are now only evaluated once
- better handle model names that are not C++ friendly (start with numbers, have non-alphanumeric characters)

Bugfixes:
- changed the loop index type to int to prevent issues when using it in expressions with signed numbers
- integer arrays now initialize to the smallest representable integer
- var arrays initialize with a prebuilt dummy var, to not creat new varis
- all map_rect calls are registered when using MPI
- _lpdf/_lpmf functions are now used instead of *_log when generating code for the tilde statements
- single argument distribution do not require the vertical bar anymore (e.g. std_normal_lpdf(x|))
- fixed a bug that caused tilde statements to conflict with userdef functions
- rng functions are no longer allowed in size declarations
- fixed the _lpdf functor struct so that UDF with _log and int argument now compile
- fixed array literal type-checking 
- fixed the error messages for missing input (line number is now displayed properly)
- fixed indexing in transform_init()
- fixed emitting generated quantities only (for gq_writer)
- fixed debug data generator for constrained matrix types and added array value bounds
