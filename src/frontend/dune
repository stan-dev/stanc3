(library
 (name frontend)
 (public_name stanc.frontend)
 (libraries core menhirLib yojson fmt middle stan_math_signatures)
 (instrumentation
  (backend bisect_ppx))
 (modules :standard \ parser_messages_add_type parser_strip_redundant_state)
 (inline_tests)
 (preprocess
  (pps ppx_jane ppx_deriving.fold ppx_deriving.map)))

(ocamllex lexer)

(menhir
 (modules parser)
 (flags :standard --table --strict --require-aliases))

(executable
 (name parser_messages_add_type)
 (modules parser_messages_add_type)
 (libraries str))

(rule
 (with-stdout-to
  parsing_errors.ml
  (pipe-stdout
   (run
    menhir
    --explain
    --strict
    --unused-tokens
    %{dep:parser.mly}
    --compile-errors
    %{dep:parser.messages})
   (run ./parser_messages_add_type.exe))))

(rule
 (with-stdout-to
  parser_new.messages
  (run menhir --list-errors %{dep:parser.mly})))

(rule
 (with-stdout-to
  parser_updated.messages
  (run
   menhir
   %{dep:parser.mly}
   --merge-errors
   %{dep:parser_new.messages}
   --merge-errors
   %{dep:parser.messages})))

(executable
 (name parser_strip_redundant_state)
 (modules parser_strip_redundant_state)
 (libraries str core))

(rule
 (with-stdin-from
  %{dep:parser_updated.messages}
  (with-stdout-to
   parser_updated_trimmed.messages
   (run ./parser_strip_redundant_state.exe))))

(rule
 (alias update_messages)
 (action
  (diff parser.messages parser_updated_trimmed.messages)))

(rule
 (alias runtest)
 (action
  (run
   menhir
   parser.mly
   --compare-errors
   %{dep:parser_new.messages}
   --compare-errors
   %{dep:parser.messages})))
