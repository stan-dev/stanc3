$ node allow-undefined.js
Semantic error in 'string', line 3, column 8 to column 11:
   -------------------------------------------------
     1:  
     2:  functions {
     3:      int foo(real a);
                 ^
     4:  }
     5:  transformed data {
   -------------------------------------------------

Function 'foo' is declared without specifying a definition.

$ node auto-format.js
parameters {
  real y;
}
transformed parameters {
  print("this line is much, much, much ", "too long", " to print on one line");
}
model {
  y ~ std_normal();
}

parameters {
  real y;
}
transformed parameters {
  print("this line is much, much, much ",
        "too long",
        " to print on one line");
}
model {
  y ~ std_normal();
}

$ node basic.js
Semantic error in 'string', line 6, column 4 to column 5:
   -------------------------------------------------
     4:  }
     5:  model {
     6:      z ~ std_normal();
             ^
     7:  }
   -------------------------------------------------

Identifier 'z' not in scope.

$ node canonical.js
parameters {
  real y;
}
model {
  if (y != 0.0) {
    print("y is nonzero ");
  }
  
  y ~ normal(0, 1);
}

parameters {
  real y;
}
model {
  if (y != 0.0) 
    print("y is nonzero ");
  
  y ~ normal(((((((((0)))))))), 1);
}

parameters {
  real y;
}
model {
  if (y) {
    print("y is nonzero ");
  }
  
  y ~ normal(0, 1);
}

$ node data-generation.js
dim(x) = (3, 4)
dim(y) = (5, 2, 4)
dim(z) = (3, 4)
dim(w) = (3)
dim(p) = (4, 3)

$ node debug.js

$ node filename.js
Semantic error in 'good_filename', line 6, column 4 to column 5:
   -------------------------------------------------
     4:  }
     5:  model {
     6:      z ~ std_normal();
             ^
     7:  }
   -------------------------------------------------

Identifier 'z' not in scope.

Semantic error in 'string', line 6, column 4 to column 5:
   -------------------------------------------------
     4:  }
     5:  model {
     6:      z ~ std_normal();
             ^
     7:  }
   -------------------------------------------------

Identifier 'z' not in scope.

$ node functions-only.js
real my_log1p_exp(real x) {
  return log1p_exp(x);
}

real array_fun(array[] real a) {
  return sum(a);
}

real int_array_fun(array[] int a) {
  return sum(a);
}

vector my_vector_mul_by_5(vector x) {
  vector[num_elements(x)] result = x * 5.0;
  return result;
}

int int_only_multiplication(int a, int b) {
  return a * b;
}

real test_lgamma(real x) {
  return lgamma(x);
}

// test special functions
void test_lp(real a) {
  a ~ normal(0, 1);
}

real test_rng(real a) {
  return normal_rng(a, 1);
}

real test_lpdf(real a, real b) {
  return normal_lpdf(a | b, 1);
}
real my_log1p_exp(real x) {
  return log1p_exp(x);
}

real array_fun(array[] real a) {
  return sum(a);
}

real int_array_fun(array[] int a) {
  return sum(a);
}

vector my_vector_mul_by_5(vector x) {
  vector[num_elements(x)] result = x * 5.0;
  return result;
}

int int_only_multiplication(int a, int b) {
  return a * b;
}

real test_lgamma(real x) {
  return lgamma(x);
}

// test special functions
void test_lp(real a) {
  a ~ normal(0, 1);
}

real test_rng(real a) {
  return normal_rng(a, 1);
}

real test_lpdf(real a, real b) {
  return normal_lpdf(a | b, 1);
}
$ node good_after_bad.js
Syntax error in 'string', line 8, column 0 to column 5, parsing error:
   -------------------------------------------------
     6:      y ~ std_normal();
     7:  }
     8:  model {
         ^
     9:      y ~ std_normal();
    10:  }
   -------------------------------------------------

Expected "generated quantities {" or end of file after end of model block.

$ node info.js
{
  "inputs": {
    "a": { "type": "int", "dimensions": 0 },
    "b": { "type": "real", "dimensions": 0 },
    "c": { "type": "real", "dimensions": 1 },
    "d": { "type": "real", "dimensions": 1 },
    "e": { "type": "real", "dimensions": 2 },
    "f": { "type": "int", "dimensions": 1 },
    "g": { "type": "real", "dimensions": 1 },
    "h": { "type": "real", "dimensions": 2 },
    "i": { "type": "real", "dimensions": 3 },
    "j": { "type": "int", "dimensions": 3 }
  },
  "parameters": {
    "l": { "type": "real", "dimensions": 1 },
    "m": { "type": "real", "dimensions": 1 },
    "n": { "type": "real", "dimensions": 1 },
    "o": { "type": "real", "dimensions": 1 },
    "p": { "type": "real", "dimensions": 2 },
    "q": { "type": "real", "dimensions": 2 },
    "r": { "type": "real", "dimensions": 2 },
    "s": { "type": "real", "dimensions": 2 },
    "y": { "type": "real", "dimensions": 0 }
  },
  "transformed parameters": {},
  "generated quantities": {},
  "functions": [],
  "distributions": [],
  "included_files": []
}
$ node math_sigs.js

$ node optimization.js
Semantic error in 'string', line 3, column 8 to column 11:
   -------------------------------------------------
     1:  
     2:  functions {
     3:      int foo(real a);
                 ^
     4:  }
     5:  
   -------------------------------------------------

Function 'foo' is declared without specifying a definition.

"stancflags = --use-opencl --allow-undefined"
$ node pedantic.js
["Warning in 'string', line 7, column 17: Argument 10000 suggests there may be\n    parameters that are not unit scale; consider rescaling with a multiplier\n    (see manual section 22.12).","Warning: The parameter k was declared but was not used in the density\n    calculation."]
[]
["Warning in 'string', line 4, column 9: The variable tt may not have been\n    assigned a value before its use."]
[]
$ node removed.js
Error in 'string', line 3, column 1: Declaration of arrays by placing
    brackets after a variable name was removed in Stan 2.33.0. Instead use
    the array keyword before the type. This can be changed automatically
    using the auto-format flag to stanc
Error in 'string', line 6, column 14: std_normal_log was removed in Stan
    2.33. Use std_normal_lpdf instead. This can be automatically changed
    using the canonicalize flag for stanc

parameters {
  array[10] real y;
}
model {
  target += std_normal_lpdf(y);
}

$ node standalone-functions.js

$ node version.js
%%NAME%% %%VERSION%%
%%NAME%% %%VERSION%%
%%NAME%% %%VERSION%%
$ node warnings.js
[]
["Warning in 'string', line 10, column 11: Found int division:\n      x / w\n    Values will be rounded towards zero. If rounding is not desired you can\n    write\n    the division as\n      x * 1.0 / w\n    If rounding is intended please use the integer division operator %/%."]
