
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace validate_conditional_op_good_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 165> locations_array__ = 
{" (found before start of program)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 97, column 2 to column 10)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 98, column 2 to column 15)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 99, column 2 to column 19)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 100, column 2 to column 17)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 102, column 2 to column 15)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 103, column 2 to column 17)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 104, column 2 to column 20)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 105, column 2 to column 22)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 106, column 2 to column 22)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 107, column 2 to column 24)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 110, column 2 to column 11)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 111, column 2 to column 17)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 112, column 2 to column 17)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 113, column 2 to column 17)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 114, column 2 to column 21)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 115, column 2 to column 21)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 116, column 2 to column 21)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 117, column 2 to column 19)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 118, column 2 to column 19)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 119, column 2 to column 19)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 121, column 2 to column 16)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 122, column 2 to column 16)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 123, column 2 to column 16)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 124, column 2 to column 21)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 125, column 2 to column 21)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 126, column 2 to column 25)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 127, column 2 to column 25)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 128, column 2 to column 25)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 129, column 2 to column 22)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 131, column 2 to column 18)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 132, column 2 to column 18)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 133, column 2 to column 23)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 134, column 2 to column 23)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 135, column 2 to column 23)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 136, column 2 to column 27)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 137, column 2 to column 27)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 138, column 2 to column 25)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 139, column 2 to column 25)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 140, column 2 to column 25)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 142, column 2 to column 24)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 143, column 2 to column 24)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 144, column 2 to column 25)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 145, column 2 to column 25)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 147, column 2 to column 31)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 148, column 2 to column 31)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 149, column 2 to column 31)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 151, column 2 to column 26)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 152, column 2 to column 26)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 153, column 2 to column 26)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 154, column 2 to column 26)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 155, column 2 to column 26)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 156, column 2 to column 26)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 158, column 2 to column 14)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 160, column 2 to column 34)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 162, column 2 to column 31)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 163, column 2 to column 31)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 165, column 2 to column 34)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 167, column 2 to column 32)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 168, column 2 to column 32)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 170, column 2 to column 34)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 172, column 2 to column 32)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 173, column 2 to column 32)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 175, column 2 to column 34)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 177, column 2 to column 32)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 178, column 2 to column 32)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 180, column 2 to column 39)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 182, column 2 to column 37)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 183, column 2 to column 37)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 185, column 2 to column 34)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 187, column 2 to column 31)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 188, column 2 to column 31)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 191, column 4 to column 15)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 192, column 4 to column 28)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 190, column 2 to line 193, column 3)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 206, column 2 to column 10)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 207, column 2 to column 11)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 208, column 2 to column 17)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 209, column 2 to column 17)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 210, column 2 to column 17)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 212, column 2 to column 24)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 213, column 2 to column 24)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 215, column 2 to column 31)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 218, column 4 to column 16)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 219, column 4 to column 30)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 217, column 2 to line 220, column 3)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 197, column 2 to column 19)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 200, column 4 to column 17)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 201, column 4 to column 32)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 199, column 2 to line 202, column 3)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 16, column 2 to column 8)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 17, column 2 to column 9)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 18, column 2 to column 14)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 19, column 2 to column 16)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 20, column 2 to column 14)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 21, column 2 to column 19)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 22, column 2 to column 21)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 23, column 2 to column 18)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 24, column 2 to column 23)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 25, column 2 to column 25)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 26, column 2 to column 16)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 27, column 2 to column 21)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 28, column 2 to column 23)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 31, column 2 to column 9)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 32, column 2 to column 10)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 33, column 2 to column 16)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 34, column 2 to column 16)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 35, column 2 to column 16)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 36, column 2 to column 20)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 37, column 2 to column 20)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 38, column 2 to column 20)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 39, column 2 to column 18)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 40, column 2 to column 18)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 41, column 2 to column 18)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 43, column 2 to column 13)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 44, column 2 to column 15)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 45, column 2 to column 15)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 46, column 2 to column 15)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 47, column 2 to column 20)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 48, column 2 to column 20)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 49, column 2 to column 24)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 50, column 2 to column 24)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 51, column 2 to column 24)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 52, column 2 to column 21)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 54, column 2 to column 16)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 55, column 2 to column 16)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 56, column 2 to column 16)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 57, column 2 to column 17)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 58, column 2 to column 17)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 59, column 2 to column 22)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 60, column 2 to column 22)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 61, column 2 to column 22)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 62, column 2 to column 26)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 63, column 2 to column 26)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 64, column 2 to column 24)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 65, column 2 to column 24)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 66, column 2 to column 24)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 68, column 2 to column 17)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 69, column 2 to column 21)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 71, column 2 to column 25)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 72, column 2 to column 25)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 73, column 2 to column 25)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 74, column 2 to column 24)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 76, column 2 to column 28)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 77, column 2 to column 28)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 78, column 2 to column 28)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 80, column 2 to column 36)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 81, column 2 to column 31)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 82, column 2 to column 31)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 83, column 2 to column 31)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 84, column 2 to column 31)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 85, column 2 to column 31)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 86, column 2 to column 36)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 87, column 2 to column 31)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 90, column 4 to column 14)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 91, column 4 to column 26)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 89, column 2 to line 92, column 3)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 3, column 4 to column 14)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 4, column 4 to column 13)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 5, column 4 to column 27)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 6, column 4 to column 24)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 8, column 4 to column 27)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 9, column 4 to column 27)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 11, column 4 to column 15)",
 " (in './test/integration/good/validate_conditional_op_good.stan', line 2, column 32 to line 12, column 3)"};


template <typename T0__>
stan::promote_args_t<T0__>
foo(const T0__& fa_x, const int& fa_y, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ fl_x = DUMMY_VAR__;
    
    int fl_y = std::numeric_limits<int>::min();
    
    current_statement__ = 159;
    fl_x = (1 ? stan::math::promote_scalar<local_scalar_t__>(fl_x) :
              stan::math::promote_scalar<local_scalar_t__>(fl_y));
    current_statement__ = 160;
    fl_y = (1 ? fl_y : 0);
    current_statement__ = 161;
    fl_x = (1 ? fa_x : fl_x);
    current_statement__ = 162;
    fl_y = (1 ? fa_y : fl_y);
    current_statement__ = 163;
    return 2.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& fa_x, const int& fa_y, std::ostream* pstream__)  const 
{
return foo(fa_x, fa_y, pstream__);
}
};

class validate_conditional_op_good_model final : public model_base_crtp<validate_conditional_op_good_model> {

 private:
  int x;
  double y;
  std::vector<double> ya1;
  std::vector<std::vector<double>> ya2;
  Eigen::Matrix<double, -1, 1> z__;
  std::vector<Eigen::Matrix<double, -1, 1>> za1;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> za2;
  Eigen::Matrix<double, 1, -1> w__;
  std::vector<Eigen::Matrix<double, 1, -1>> wa1;
  std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> wa2;
  Eigen::Matrix<double, -1, -1> m__;
  std::vector<Eigen::Matrix<double, -1, -1>> ma1;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> ma2;
  int tx;
  double ty;
  Eigen::Matrix<double, -1, 1> tza__;
  Eigen::Matrix<double, -1, 1> tzb__;
  Eigen::Matrix<double, -1, 1> tzc__;
  Eigen::Matrix<double, 1, -1> twa__;
  Eigen::Matrix<double, 1, -1> twb__;
  Eigen::Matrix<double, 1, -1> twc__;
  Eigen::Matrix<double, -1, -1> tma__;
  Eigen::Matrix<double, -1, -1> tmb__;
  Eigen::Matrix<double, -1, -1> tmc__;
  std::vector<int> tx1;
  std::vector<double> tya1;
  std::vector<double> tyb1;
  std::vector<double> tyc1;
  std::vector<Eigen::Matrix<double, -1, 1>> tza1;
  std::vector<Eigen::Matrix<double, -1, 1>> tzb1;
  std::vector<Eigen::Matrix<double, 1, -1>> twa1;
  std::vector<Eigen::Matrix<double, 1, -1>> twb1;
  std::vector<Eigen::Matrix<double, 1, -1>> twc1;
  std::vector<Eigen::Matrix<double, -1, -1>> tm1;
  std::vector<std::vector<int>> txa2;
  std::vector<std::vector<int>> txb2;
  std::vector<std::vector<int>> txc2;
  std::vector<std::vector<double>> tya2;
  std::vector<std::vector<double>> tyb2;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> tza2;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> tzb2;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> tzc2;
  std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> twa2;
  std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> twb2;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> tma2;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> tmb2;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> tmc2; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> z{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> w{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> m{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> tza{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> tzb{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> tzc{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> twa{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> twb{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> twc{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> tma{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> tmb{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> tmc{nullptr, 0, 0};
 
 public:
  ~validate_conditional_op_good_model() { }
  
  inline std::string model_name() const final { return "validate_conditional_op_good_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --debug-transformed-mir"};
  }
  
  
  validate_conditional_op_good_model(stan::io::var_context& context__,
                                     unsigned int random_seed__ = 0,
                                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "validate_conditional_op_good_model_namespace::validate_conditional_op_good_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 90;
      context__.validate_dims("data initialization","x","int",
           std::vector<size_t>{});
      x = std::numeric_limits<int>::min();
      
      current_statement__ = 90;
      x = context__.vals_i("x")[(1 - 1)];
      current_statement__ = 91;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{});
      y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 91;
      y = context__.vals_r("y")[(1 - 1)];
      current_statement__ = 92;
      context__.validate_dims("data initialization","ya1","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      ya1 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 92;
      ya1 = context__.vals_r("ya1");
      current_statement__ = 93;
      context__.validate_dims("data initialization","ya2","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(2)});
      ya2 = std::vector<std::vector<double>>(2, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> ya2_flat__;
        current_statement__ = 93;
        ya2_flat__ = context__.vals_r("ya2");
        current_statement__ = 93;
        pos__ = 1;
        current_statement__ = 93;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 93;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 93;
            assign(ya2, ya2_flat__[(pos__ - 1)],
              "assigning variable ya2", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 93;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 94;
      context__.validate_dims("data initialization","z","double",
           std::vector<size_t>{static_cast<size_t>(5)});
      z__ = Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN());
      new (&z) Eigen::Map<Eigen::Matrix<double, -1, 1>>(z__.data(), 5);
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 94;
        z_flat__ = context__.vals_r("z");
        current_statement__ = 94;
        pos__ = 1;
        current_statement__ = 94;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 94;
          assign(z, z_flat__[(pos__ - 1)],
            "assigning variable z", index_uni(sym1__));
          current_statement__ = 94;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 95;
      context__.validate_dims("data initialization","za1","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(5)});
      za1 = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> za1_flat__;
        current_statement__ = 95;
        za1_flat__ = context__.vals_r("za1");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 95;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 95;
            assign(za1, za1_flat__[(pos__ - 1)],
              "assigning variable za1", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 95;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 96;
      context__.validate_dims("data initialization","za2","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(2), static_cast<size_t>(5)});
      za2 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> za2_flat__;
        current_statement__ = 96;
        za2_flat__ = context__.vals_r("za2");
        current_statement__ = 96;
        pos__ = 1;
        current_statement__ = 96;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 96;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 96;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 96;
              assign(za2, za2_flat__[(pos__ - 1)],
                "assigning variable za2", index_uni(sym3__),
                                            index_uni(sym2__),
                                            index_uni(sym1__));
              current_statement__ = 96;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 97;
      context__.validate_dims("data initialization","w","double",
           std::vector<size_t>{static_cast<size_t>(6)});
      w__ = Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN());
      new (&w) Eigen::Map<Eigen::Matrix<double, 1, -1>>(w__.data(), 6);
      
      {
        std::vector<local_scalar_t__> w_flat__;
        current_statement__ = 97;
        w_flat__ = context__.vals_r("w");
        current_statement__ = 97;
        pos__ = 1;
        current_statement__ = 97;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 97;
          assign(w, w_flat__[(pos__ - 1)],
            "assigning variable w", index_uni(sym1__));
          current_statement__ = 97;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 98;
      context__.validate_dims("data initialization","wa1","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(6)});
      wa1 = std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> wa1_flat__;
        current_statement__ = 98;
        wa1_flat__ = context__.vals_r("wa1");
        current_statement__ = 98;
        pos__ = 1;
        current_statement__ = 98;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 98;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 98;
            assign(wa1, wa1_flat__[(pos__ - 1)],
              "assigning variable wa1", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 98;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 99;
      context__.validate_dims("data initialization","wa2","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(2), static_cast<size_t>(6)});
      wa2 = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(2, std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> wa2_flat__;
        current_statement__ = 99;
        wa2_flat__ = context__.vals_r("wa2");
        current_statement__ = 99;
        pos__ = 1;
        current_statement__ = 99;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 99;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 99;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 99;
              assign(wa2, wa2_flat__[(pos__ - 1)],
                "assigning variable wa2", index_uni(sym3__),
                                            index_uni(sym2__),
                                            index_uni(sym1__));
              current_statement__ = 99;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 100;
      context__.validate_dims("data initialization","m","double",
           std::vector<size_t>{static_cast<size_t>(5),
            static_cast<size_t>(6)});
      m__ = Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN());
      new (&m) Eigen::Map<Eigen::Matrix<double, -1, -1>>(m__.data(), 5, 6);
      
      {
        std::vector<local_scalar_t__> m_flat__;
        current_statement__ = 100;
        m_flat__ = context__.vals_r("m");
        current_statement__ = 100;
        pos__ = 1;
        current_statement__ = 100;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 100;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 100;
            assign(m, m_flat__[(pos__ - 1)],
              "assigning variable m", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 100;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 101;
      context__.validate_dims("data initialization","ma1","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(5), static_cast<size_t>(6)});
      ma1 = std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> ma1_flat__;
        current_statement__ = 101;
        ma1_flat__ = context__.vals_r("ma1");
        current_statement__ = 101;
        pos__ = 1;
        current_statement__ = 101;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 101;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 101;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 101;
              assign(ma1, ma1_flat__[(pos__ - 1)],
                "assigning variable ma1", index_uni(sym3__),
                                            index_uni(sym2__),
                                            index_uni(sym1__));
              current_statement__ = 101;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 102;
      context__.validate_dims("data initialization","ma2","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(2), static_cast<size_t>(5),
            static_cast<size_t>(6)});
      ma2 = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(2, std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> ma2_flat__;
        current_statement__ = 102;
        ma2_flat__ = context__.vals_r("ma2");
        current_statement__ = 102;
        pos__ = 1;
        current_statement__ = 102;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 102;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 102;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 102;
              for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                current_statement__ = 102;
                assign(ma2, ma2_flat__[(pos__ - 1)],
                  "assigning variable ma2", index_uni(sym4__),
                                              index_uni(sym3__),
                                              index_uni(sym2__),
                                              index_uni(sym1__));
                current_statement__ = 102;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 103;
      tx = std::numeric_limits<int>::min();
      
      current_statement__ = 104;
      ty = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 105;
      tza__ = Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN());
      new (&tza) Eigen::Map<Eigen::Matrix<double, -1, 1>>(tza__.data(), 5);
      stan::math::initialize_fill(tza, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 106;
      tzb__ = Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN());
      new (&tzb) Eigen::Map<Eigen::Matrix<double, -1, 1>>(tzb__.data(), 5);
      stan::math::initialize_fill(tzb, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 107;
      tzc__ = Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN());
      new (&tzc) Eigen::Map<Eigen::Matrix<double, -1, 1>>(tzc__.data(), 5);
      stan::math::initialize_fill(tzc, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 108;
      twa__ = Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN());
      new (&twa) Eigen::Map<Eigen::Matrix<double, 1, -1>>(twa__.data(), 6);
      stan::math::initialize_fill(twa, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 109;
      twb__ = Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN());
      new (&twb) Eigen::Map<Eigen::Matrix<double, 1, -1>>(twb__.data(), 6);
      stan::math::initialize_fill(twb, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 110;
      twc__ = Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN());
      new (&twc) Eigen::Map<Eigen::Matrix<double, 1, -1>>(twc__.data(), 6);
      stan::math::initialize_fill(twc, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 111;
      tma__ = Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN());
      new (&tma) Eigen::Map<Eigen::Matrix<double, -1, -1>>(tma__.data(), 5, 6);
      stan::math::initialize_fill(tma, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 112;
      tmb__ = Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN());
      new (&tmb) Eigen::Map<Eigen::Matrix<double, -1, -1>>(tmb__.data(), 5, 6);
      stan::math::initialize_fill(tmb, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 113;
      tmc__ = Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN());
      new (&tmc) Eigen::Map<Eigen::Matrix<double, -1, -1>>(tmc__.data(), 5, 6);
      stan::math::initialize_fill(tmc, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 114;
      tx1 = std::vector<int>(2, std::numeric_limits<int>::min());
      
      current_statement__ = 115;
      tya1 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 116;
      tyb1 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 117;
      tyc1 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 118;
      tza1 = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(tza1, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 119;
      tzb1 = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(tzb1, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 120;
      twa1 = std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(twa1, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 121;
      twb1 = std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(twb1, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 122;
      twc1 = std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(twc1, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 123;
      tm1 = std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(tm1, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 124;
      txa2 = std::vector<std::vector<int>>(2, std::vector<int>(3, std::numeric_limits<int>::min()));
      
      
      current_statement__ = 125;
      txb2 = std::vector<std::vector<int>>(2, std::vector<int>(3, std::numeric_limits<int>::min()));
      
      
      current_statement__ = 126;
      txc2 = std::vector<std::vector<int>>(2, std::vector<int>(3, std::numeric_limits<int>::min()));
      
      
      current_statement__ = 127;
      tya2 = std::vector<std::vector<double>>(2, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 128;
      tyb2 = std::vector<std::vector<double>>(2, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 129;
      tza2 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(tza2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 130;
      tzb2 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(tzb2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 131;
      tzc2 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(tzc2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 132;
      twa2 = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(2, std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(twa2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 133;
      twb2 = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(2, std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(twb2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 134;
      tma2 = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(2, std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(tma2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 135;
      tmb2 = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(2, std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(tmb2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 136;
      tmc2 = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(2, std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(tmc2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 137;
      tx = (1 ? 2 : 3);
      current_statement__ = 138;
      ty = (1 ? 2.0 : 3.0);
      current_statement__ = 139;
      tx = (logical_lt(x, 100) ? x : 100);
      current_statement__ = 140;
      ty = (logical_gt(y, 100) ? stan::math::promote_scalar<double>(100) :
              stan::math::promote_scalar<double>(y));
      current_statement__ = 141;
      ty = (logical_lt(y, 100) ? stan::math::promote_scalar<double>(y) :
              stan::math::promote_scalar<double>(100));
      current_statement__ = 142;
      ty = (logical_lt(y, 100) ? y : ty);
      current_statement__ = 143;
      assign(tzc, (logical_lt(x, 100) ? tza : tzb), "assigning variable tzc");
      current_statement__ = 144;
      assign(twc, (logical_lt(x, 100) ? twa : twb), "assigning variable twc");
      current_statement__ = 145;
      assign(tmc, (logical_lt(x, 100) ? tma : tmb), "assigning variable tmc");
      current_statement__ = 146;
      assign(tx1,
        (logical_lt(x, 100) ? rvalue(txa2, "txa2", index_uni(1)) :
           rvalue(txb2, "txb2", index_uni(2))), "assigning variable tx1");
      current_statement__ = 147;
      assign(txc2, (logical_lt(x, 100) ? txa2 : txb2),
        "assigning variable txc2");
      current_statement__ = 148;
      assign(tyc1, (logical_lt(x, 100) ? tya1 : tyb1),
        "assigning variable tyc1");
      current_statement__ = 149;
      assign(tya2, (logical_lt(x, 100) ? tya2 : tyb2),
        "assigning variable tya2");
      current_statement__ = 150;
      assign(twc1, (logical_lt(x, 100) ? twa1 : twb1),
        "assigning variable twc1");
      current_statement__ = 151;
      assign(twa2, (logical_lt(x, 100) ? twa2 : twb2),
        "assigning variable twa2");
      current_statement__ = 152;
      assign(tm1,
        (logical_lt(x, 100) ? rvalue(tma2, "tma2", index_uni(1)) :
           rvalue(tmb2, "tmb2", index_uni(1))), "assigning variable tm1");
      current_statement__ = 153;
      assign(tma2, (logical_lt(x, 100) ? tma2 : tmb2),
        "assigning variable tma2");
      {
        double abcd = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 155;
        abcd = (1 ? abcd : 2.0);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 5 + 6 + (5 * 6) + 2 + (2 * 2) + (2 * 5)
       + (2 * 2 * 5) + (2 * 5 * 6) + (2 * 2 * 5 * 6);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "validate_conditional_op_good_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ py = DUMMY_VAR__;
      
      current_statement__ = 1;
      py = in__.template read<local_scalar_t__>();
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> pz = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 2;
      pz = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(
             5);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>> pw = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>(Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 3;
      pw = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>>(
             6);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>> pm = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 4;
      pm = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(
             5, 6);
      std::vector<local_scalar_t__> pya1 = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
                                           
      
      current_statement__ = 5;
      pya1 = in__.template read<std::vector<local_scalar_t__>>(2);
      std::vector<std::vector<local_scalar_t__>> pya2 = std::vector<std::vector<local_scalar_t__>>(2, std::vector<local_scalar_t__>(2, DUMMY_VAR__));
                                                        
      
      current_statement__ = 6;
      pya2 = in__.template read<std::vector<std::vector<local_scalar_t__>>>(
               2, 2);
      stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> pza1 = 
      std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 7;
      pza1 = in__.template read<stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
               2, 5);
      stan::conditional_var_value_t<local_scalar_t__, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> pza2 = 
      std::vector<std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>>(2, std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()))));
      
      
      current_statement__ = 8;
      pza2 = in__.template read<stan::conditional_var_value_t<local_scalar_t__, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>>(
               2, 2, 5);
      stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> pma1 = 
      std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 9;
      pma1 = in__.template read<stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>(
               2, 5, 6);
      stan::conditional_var_value_t<local_scalar_t__, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>> pma2 = 
      std::vector<std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>>(2, std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN()))));
      
      
      current_statement__ = 10;
      pma2 = in__.template read<stan::conditional_var_value_t<local_scalar_t__, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>>(
               2, 2, 5, 6);
      local_scalar_t__ tpy = DUMMY_VAR__;
      
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> tpza = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()));
      
      
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> tpzb = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()));
      
      
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> tpzc = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()));
      
      
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>> tpwa = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>(Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN()));
      
      
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>> tpwb = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>(Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN()));
      
      
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>> tpwc = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>(Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN()));
      
      
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>> tpma = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN()));
      
      
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>> tpmb = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN()));
      
      
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>> tpmc = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN()));
      
      
      std::vector<local_scalar_t__> tpya1 = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
                                            
      
      std::vector<local_scalar_t__> tpyb1 = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
                                            
      
      std::vector<local_scalar_t__> tpyc1 = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
                                            
      
      stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> tpza1 = 
      std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN())));
      
      
      stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> tpzb1 = 
      std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN())));
      
      
      stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> tpwa1 = 
      std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>(Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN())));
      
      
      stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> tpwb1 = 
      std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>(Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN())));
      
      
      stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> tpwc1 = 
      std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>(Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN())));
      
      
      stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> tpm1 = 
      std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN())));
      
      
      std::vector<std::vector<local_scalar_t__>> tpya2 = std::vector<std::vector<local_scalar_t__>>(2, std::vector<local_scalar_t__>(2, DUMMY_VAR__));
                                                         
      
      std::vector<std::vector<local_scalar_t__>> tpyb2 = std::vector<std::vector<local_scalar_t__>>(2, std::vector<local_scalar_t__>(2, DUMMY_VAR__));
                                                         
      
      stan::conditional_var_value_t<local_scalar_t__, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> tpza2 = 
      std::vector<std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>>(2, std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()))));
      
      
      stan::conditional_var_value_t<local_scalar_t__, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> tpzb2 = 
      std::vector<std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>>(2, std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()))));
      
      
      stan::conditional_var_value_t<local_scalar_t__, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> tpzc2 = 
      std::vector<std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>>(2, std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()))));
      
      
      stan::conditional_var_value_t<local_scalar_t__, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>> tpwa2 = 
      std::vector<std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>>>(2, std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>(Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN()))));
      
      
      stan::conditional_var_value_t<local_scalar_t__, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>> tpwb2 = 
      std::vector<std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>>>(2, std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>(Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN()))));
      
      
      stan::conditional_var_value_t<local_scalar_t__, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>> tpma2 = 
      std::vector<std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>>(2, std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN()))));
      
      
      stan::conditional_var_value_t<local_scalar_t__, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>> tpmb2 = 
      std::vector<std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>>(2, std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN()))));
      
      
      stan::conditional_var_value_t<local_scalar_t__, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>> tpmc2 = 
      std::vector<std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>>(2, std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(2, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN()))));
      
      
      current_statement__ = 40;
      tpy = (logical_lt(y, 100) ? stan::math::promote_scalar<double>(x) :
               stan::math::promote_scalar<double>(y));
      current_statement__ = 41;
      tpy = (logical_lt(y, 100) ? stan::math::promote_scalar<double>(y) :
               stan::math::promote_scalar<double>(x));
      current_statement__ = 42;
      tpy = (logical_lt(y, 100) ?
               stan::math::promote_scalar<local_scalar_t__>(y) :
               stan::math::promote_scalar<local_scalar_t__>(py));
      current_statement__ = 43;
      tpy = (logical_lt(y, 100) ?
               stan::math::promote_scalar<local_scalar_t__>(x) :
               stan::math::promote_scalar<local_scalar_t__>(py));
      current_statement__ = 44;
      assign(tpzc, (logical_lt(x, 100) ? tpza : tpzb),
        "assigning variable tpzc");
      current_statement__ = 45;
      assign(tpwc, (logical_lt(x, 100) ? tpwa : tpwb),
        "assigning variable tpwc");
      current_statement__ = 46;
      assign(tpmc, (logical_lt(x, 100) ? tpma : tpmb),
        "assigning variable tpmc");
      current_statement__ = 47;
      assign(tpzc,
        (logical_lt(x, 100) ? stan::math::promote_scalar<local_scalar_t__>(z)
           : stan::math::promote_scalar<local_scalar_t__>(pz)),
        "assigning variable tpzc");
      current_statement__ = 48;
      assign(tpzc,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(pz) :
           stan::math::promote_scalar<local_scalar_t__>(z)),
        "assigning variable tpzc");
      current_statement__ = 49;
      assign(tpwc,
        (logical_lt(x, 100) ? stan::math::promote_scalar<local_scalar_t__>(w)
           : stan::math::promote_scalar<local_scalar_t__>(pw)),
        "assigning variable tpwc");
      current_statement__ = 50;
      assign(tpwc,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(pw) :
           stan::math::promote_scalar<local_scalar_t__>(w)),
        "assigning variable tpwc");
      current_statement__ = 51;
      assign(tpmc,
        (logical_lt(x, 100) ? stan::math::promote_scalar<local_scalar_t__>(m)
           : stan::math::promote_scalar<local_scalar_t__>(pm)),
        "assigning variable tpmc");
      current_statement__ = 52;
      assign(tpmc,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(pm) :
           stan::math::promote_scalar<local_scalar_t__>(m)),
        "assigning variable tpmc");
      current_statement__ = 53;
      assign(tpyc1, ya1, "assigning variable tpyc1");
      current_statement__ = 54;
      assign(tpyc1, (logical_lt(x, 100) ? tpya1 : tpyb1),
        "assigning variable tpyc1");
      current_statement__ = 55;
      assign(tpyc1,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(ya1) :
           stan::math::promote_scalar<local_scalar_t__>(pya1)),
        "assigning variable tpyc1");
      current_statement__ = 56;
      assign(tpyc1,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(pya1) :
           stan::math::promote_scalar<local_scalar_t__>(ya1)),
        "assigning variable tpyc1");
      current_statement__ = 57;
      assign(tpya2, (logical_lt(x, 100) ? tpya2 : tpyb2),
        "assigning variable tpya2");
      current_statement__ = 58;
      assign(tpya2,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(ya2) :
           stan::math::promote_scalar<local_scalar_t__>(tpyb2)),
        "assigning variable tpya2");
      current_statement__ = 59;
      assign(tpya2,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(tpya2) :
           stan::math::promote_scalar<local_scalar_t__>(ya2)),
        "assigning variable tpya2");
      current_statement__ = 60;
      assign(tpwc1, (logical_lt(x, 100) ? tpwa1 : tpwb1),
        "assigning variable tpwc1");
      current_statement__ = 61;
      assign(tpwc1,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(wa1) :
           stan::math::promote_scalar<local_scalar_t__>(tpwb1)),
        "assigning variable tpwc1");
      current_statement__ = 62;
      assign(tpwc1,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(tpwb1) :
           stan::math::promote_scalar<local_scalar_t__>(wa1)),
        "assigning variable tpwc1");
      current_statement__ = 63;
      assign(tpwa2, (logical_lt(x, 100) ? tpwa2 : tpwb2),
        "assigning variable tpwa2");
      current_statement__ = 64;
      assign(tpwa2,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(wa2) :
           stan::math::promote_scalar<local_scalar_t__>(tpwb2)),
        "assigning variable tpwa2");
      current_statement__ = 65;
      assign(tpwa2,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(tpwb2) :
           stan::math::promote_scalar<local_scalar_t__>(wa2)),
        "assigning variable tpwa2");
      current_statement__ = 66;
      assign(tpm1,
        (logical_lt(x, 100) ? rvalue(tpma2, "tpma2", index_uni(1)) :
           rvalue(tpmb2, "tpmb2", index_uni(1))), "assigning variable tpm1");
      current_statement__ = 67;
      assign(tpm1,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(rvalue(ma2, "ma2",
                                                          index_uni(1))) :
           stan::math::promote_scalar<local_scalar_t__>(rvalue(tpmb2,
                                                          "tpmb2",
                                                          index_uni(1)))),
        "assigning variable tpm1");
      current_statement__ = 68;
      assign(tpm1,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(rvalue(tpmb2,
                                                          "tpmb2",
                                                          index_uni(1))) :
           stan::math::promote_scalar<local_scalar_t__>(rvalue(ma2, "ma2",
                                                          index_uni(1)))),
        "assigning variable tpm1");
      current_statement__ = 69;
      assign(tpma2, (logical_lt(x, 100) ? tpma2 : tpmb2),
        "assigning variable tpma2");
      current_statement__ = 70;
      assign(tpma2,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(ma2) :
           stan::math::promote_scalar<local_scalar_t__>(pma2)),
        "assigning variable tpma2");
      current_statement__ = 71;
      assign(tpma2,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(pma2) :
           stan::math::promote_scalar<local_scalar_t__>(ma2)),
        "assigning variable tpma2");
      {
        local_scalar_t__ abcde = DUMMY_VAR__;
        
        current_statement__ = 73;
        abcde = (1 ? stan::math::promote_scalar<local_scalar_t__>(abcde) :
                   stan::math::promote_scalar<local_scalar_t__>(2.0));
      }
      {
        current_statement__ = 86;
        lp_accum__.add(normal_lpdf<propto__>(py, 0, 1));
        {
          local_scalar_t__ abcdefg = DUMMY_VAR__;
          
          current_statement__ = 88;
          abcdefg = (1 ?
                       stan::math::promote_scalar<local_scalar_t__>(abcdefg)
                       : stan::math::promote_scalar<local_scalar_t__>(2.0));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "validate_conditional_op_good_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double py = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      py = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> pz = Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN());
                                        
      
      current_statement__ = 2;
      pz = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(5);
      Eigen::Matrix<double, 1, -1> pw = Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN());
                                        
      
      current_statement__ = 3;
      pw = in__.template read<Eigen::Matrix<local_scalar_t__, 1, -1>>(6);
      Eigen::Matrix<double, -1, -1> pm = Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN());
                                         
      
      current_statement__ = 4;
      pm = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(5, 6);
      std::vector<double> pya1 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
                                 
      
      current_statement__ = 5;
      pya1 = in__.template read<std::vector<local_scalar_t__>>(2);
      std::vector<std::vector<double>> pya2 = std::vector<std::vector<double>>(2, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
                                              
      
      current_statement__ = 6;
      pya2 = in__.template read<std::vector<std::vector<local_scalar_t__>>>(
               2, 2);
      std::vector<Eigen::Matrix<double, -1, 1>> pza1 = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()));
                                                       
      
      current_statement__ = 7;
      pza1 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
               2, 5);
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> pza2 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN())));
                                                                    
      
      current_statement__ = 8;
      pza2 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
               2, 2, 5);
      std::vector<Eigen::Matrix<double, -1, -1>> pma1 = std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN()));
                                                        
      
      current_statement__ = 9;
      pma1 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(
               2, 5, 6);
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> pma2 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(2, std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 10;
      pma2 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>(
               2, 2, 5, 6);
      double tpy = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> tpza = Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN());
                                          
      
      Eigen::Matrix<double, -1, 1> tpzb = Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN());
                                          
      
      Eigen::Matrix<double, -1, 1> tpzc = Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN());
                                          
      
      Eigen::Matrix<double, 1, -1> tpwa = Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN());
                                          
      
      Eigen::Matrix<double, 1, -1> tpwb = Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN());
                                          
      
      Eigen::Matrix<double, 1, -1> tpwc = Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN());
                                          
      
      Eigen::Matrix<double, -1, -1> tpma = Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN());
                                           
      
      Eigen::Matrix<double, -1, -1> tpmb = Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN());
                                           
      
      Eigen::Matrix<double, -1, -1> tpmc = Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN());
                                           
      
      std::vector<double> tpya1 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
                                  
      
      std::vector<double> tpyb1 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
                                  
      
      std::vector<double> tpyc1 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
                                  
      
      std::vector<Eigen::Matrix<double, -1, 1>> tpza1 = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()));
                                                        
      
      std::vector<Eigen::Matrix<double, -1, 1>> tpzb1 = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()));
                                                        
      
      std::vector<Eigen::Matrix<double, 1, -1>> tpwa1 = std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN()));
                                                        
      
      std::vector<Eigen::Matrix<double, 1, -1>> tpwb1 = std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN()));
                                                        
      
      std::vector<Eigen::Matrix<double, 1, -1>> tpwc1 = std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN()));
                                                        
      
      std::vector<Eigen::Matrix<double, -1, -1>> tpm1 = std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN()));
                                                        
      
      std::vector<std::vector<double>> tpya2 = std::vector<std::vector<double>>(2, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
                                               
      
      std::vector<std::vector<double>> tpyb2 = std::vector<std::vector<double>>(2, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
                                               
      
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> tpza2 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN())));
      
      
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> tpzb2 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN())));
      
      
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> tpzc2 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN())));
      
      
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> tpwa2 = 
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(2, std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN())));
      
      
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> tpwb2 = 
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(2, std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN())));
      
      
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> tpma2 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(2, std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN())));
      
      
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> tpmb2 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(2, std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN())));
      
      
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> tpmc2 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(2, std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN())));
      
      
      vars__.emplace_back(py);
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(pz[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        vars__.emplace_back(pw[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          vars__.emplace_back(
            rvalue(pm, "pm", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(pya1[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(pya2[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(pza1[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            vars__.emplace_back(
              pza2[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            vars__.emplace_back(
              rvalue(pma1, "pma1",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
              vars__.emplace_back(
                rvalue(pma2, "pma2",
                  index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                    index_uni(sym1__)));
            }
          }
        }
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 40;
      tpy = (logical_lt(y, 100) ? stan::math::promote_scalar<double>(x) :
               stan::math::promote_scalar<double>(y));
      current_statement__ = 41;
      tpy = (logical_lt(y, 100) ? stan::math::promote_scalar<double>(y) :
               stan::math::promote_scalar<double>(x));
      current_statement__ = 42;
      tpy = (logical_lt(y, 100) ?
               stan::math::promote_scalar<local_scalar_t__>(y) :
               stan::math::promote_scalar<local_scalar_t__>(py));
      current_statement__ = 43;
      tpy = (logical_lt(y, 100) ?
               stan::math::promote_scalar<local_scalar_t__>(x) :
               stan::math::promote_scalar<local_scalar_t__>(py));
      current_statement__ = 44;
      assign(tpzc, (logical_lt(x, 100) ? tpza : tpzb),
        "assigning variable tpzc");
      current_statement__ = 45;
      assign(tpwc, (logical_lt(x, 100) ? tpwa : tpwb),
        "assigning variable tpwc");
      current_statement__ = 46;
      assign(tpmc, (logical_lt(x, 100) ? tpma : tpmb),
        "assigning variable tpmc");
      current_statement__ = 47;
      assign(tpzc,
        (logical_lt(x, 100) ? stan::math::promote_scalar<local_scalar_t__>(z)
           : stan::math::promote_scalar<local_scalar_t__>(pz)),
        "assigning variable tpzc");
      current_statement__ = 48;
      assign(tpzc,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(pz) :
           stan::math::promote_scalar<local_scalar_t__>(z)),
        "assigning variable tpzc");
      current_statement__ = 49;
      assign(tpwc,
        (logical_lt(x, 100) ? stan::math::promote_scalar<local_scalar_t__>(w)
           : stan::math::promote_scalar<local_scalar_t__>(pw)),
        "assigning variable tpwc");
      current_statement__ = 50;
      assign(tpwc,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(pw) :
           stan::math::promote_scalar<local_scalar_t__>(w)),
        "assigning variable tpwc");
      current_statement__ = 51;
      assign(tpmc,
        (logical_lt(x, 100) ? stan::math::promote_scalar<local_scalar_t__>(m)
           : stan::math::promote_scalar<local_scalar_t__>(pm)),
        "assigning variable tpmc");
      current_statement__ = 52;
      assign(tpmc,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(pm) :
           stan::math::promote_scalar<local_scalar_t__>(m)),
        "assigning variable tpmc");
      current_statement__ = 53;
      assign(tpyc1, ya1, "assigning variable tpyc1");
      current_statement__ = 54;
      assign(tpyc1, (logical_lt(x, 100) ? tpya1 : tpyb1),
        "assigning variable tpyc1");
      current_statement__ = 55;
      assign(tpyc1,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(ya1) :
           stan::math::promote_scalar<local_scalar_t__>(pya1)),
        "assigning variable tpyc1");
      current_statement__ = 56;
      assign(tpyc1,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(pya1) :
           stan::math::promote_scalar<local_scalar_t__>(ya1)),
        "assigning variable tpyc1");
      current_statement__ = 57;
      assign(tpya2, (logical_lt(x, 100) ? tpya2 : tpyb2),
        "assigning variable tpya2");
      current_statement__ = 58;
      assign(tpya2,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(ya2) :
           stan::math::promote_scalar<local_scalar_t__>(tpyb2)),
        "assigning variable tpya2");
      current_statement__ = 59;
      assign(tpya2,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(tpya2) :
           stan::math::promote_scalar<local_scalar_t__>(ya2)),
        "assigning variable tpya2");
      current_statement__ = 60;
      assign(tpwc1, (logical_lt(x, 100) ? tpwa1 : tpwb1),
        "assigning variable tpwc1");
      current_statement__ = 61;
      assign(tpwc1,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(wa1) :
           stan::math::promote_scalar<local_scalar_t__>(tpwb1)),
        "assigning variable tpwc1");
      current_statement__ = 62;
      assign(tpwc1,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(tpwb1) :
           stan::math::promote_scalar<local_scalar_t__>(wa1)),
        "assigning variable tpwc1");
      current_statement__ = 63;
      assign(tpwa2, (logical_lt(x, 100) ? tpwa2 : tpwb2),
        "assigning variable tpwa2");
      current_statement__ = 64;
      assign(tpwa2,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(wa2) :
           stan::math::promote_scalar<local_scalar_t__>(tpwb2)),
        "assigning variable tpwa2");
      current_statement__ = 65;
      assign(tpwa2,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(tpwb2) :
           stan::math::promote_scalar<local_scalar_t__>(wa2)),
        "assigning variable tpwa2");
      current_statement__ = 66;
      assign(tpm1,
        (logical_lt(x, 100) ? rvalue(tpma2, "tpma2", index_uni(1)) :
           rvalue(tpmb2, "tpmb2", index_uni(1))), "assigning variable tpm1");
      current_statement__ = 67;
      assign(tpm1,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(rvalue(ma2, "ma2",
                                                          index_uni(1))) :
           stan::math::promote_scalar<local_scalar_t__>(rvalue(tpmb2,
                                                          "tpmb2",
                                                          index_uni(1)))),
        "assigning variable tpm1");
      current_statement__ = 68;
      assign(tpm1,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(rvalue(tpmb2,
                                                          "tpmb2",
                                                          index_uni(1))) :
           stan::math::promote_scalar<local_scalar_t__>(rvalue(ma2, "ma2",
                                                          index_uni(1)))),
        "assigning variable tpm1");
      current_statement__ = 69;
      assign(tpma2, (logical_lt(x, 100) ? tpma2 : tpmb2),
        "assigning variable tpma2");
      current_statement__ = 70;
      assign(tpma2,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(ma2) :
           stan::math::promote_scalar<local_scalar_t__>(pma2)),
        "assigning variable tpma2");
      current_statement__ = 71;
      assign(tpma2,
        (logical_lt(x, 100) ?
           stan::math::promote_scalar<local_scalar_t__>(pma2) :
           stan::math::promote_scalar<local_scalar_t__>(ma2)),
        "assigning variable tpma2");
      {
        double abcde = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 73;
        abcde = (1 ? stan::math::promote_scalar<local_scalar_t__>(abcde) :
                   stan::math::promote_scalar<local_scalar_t__>(2.0));
      }
      if (emit_transformed_parameters__) {
        vars__.emplace_back(tpy);
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          vars__.emplace_back(tpza[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          vars__.emplace_back(tpzb[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          vars__.emplace_back(tpzc[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          vars__.emplace_back(tpwa[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          vars__.emplace_back(tpwb[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          vars__.emplace_back(tpwc[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            vars__.emplace_back(
              rvalue(tpma, "tpma", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            vars__.emplace_back(
              rvalue(tpmb, "tpmb", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            vars__.emplace_back(
              rvalue(tpmc, "tpmc", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(tpya1[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(tpyb1[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(tpyc1[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            vars__.emplace_back(tpza1[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            vars__.emplace_back(tpzb1[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            vars__.emplace_back(tpwa1[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            vars__.emplace_back(tpwb1[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            vars__.emplace_back(tpwc1[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              vars__.emplace_back(
                rvalue(tpm1, "tpm1",
                  index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            vars__.emplace_back(tpya2[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            vars__.emplace_back(tpyb2[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              vars__.emplace_back(
                tpza2[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              vars__.emplace_back(
                tpzb2[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              vars__.emplace_back(
                tpzc2[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              vars__.emplace_back(
                tpwa2[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              vars__.emplace_back(
                tpwb2[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                vars__.emplace_back(
                  rvalue(tpma2, "tpma2",
                    index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                      index_uni(sym1__)));
              }
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                vars__.emplace_back(
                  rvalue(tpmb2, "tpmb2",
                    index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                      index_uni(sym1__)));
              }
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                vars__.emplace_back(
                  rvalue(tpmc2, "tpmc2",
                    index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                      index_uni(sym1__)));
              }
            }
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      int gqx = std::numeric_limits<int>::min();
      
      double gqy = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> gqza = Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN());
                                          
      
      Eigen::Matrix<double, -1, 1> gqzb = Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN());
                                          
      
      Eigen::Matrix<double, -1, 1> gqzc = Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN());
                                          
      
      current_statement__ = 80;
      gqy = (logical_lt(y, 100) ? stan::math::promote_scalar<double>(x) :
               stan::math::promote_scalar<double>(y));
      current_statement__ = 81;
      gqy = (logical_lt(y, 100) ? stan::math::promote_scalar<double>(y) :
               stan::math::promote_scalar<double>(x));
      current_statement__ = 82;
      assign(gqzc, (logical_lt(x, 100) ? gqza : gqzb),
        "assigning variable gqzc");
      {
        double abcdef = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 84;
        abcdef = (1 ? abcdef : 2.0);
      }
      vars__.emplace_back(gqx);
      vars__.emplace_back(gqy);
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(gqza[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(gqzb[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(gqzc[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double py = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      py = context__.vals_r("py")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> pz = Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN());
                                        
      
      {
        std::vector<local_scalar_t__> pz_flat__;
        current_statement__ = 2;
        pz_flat__ = context__.vals_r("pz");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 2;
          assign(pz, pz_flat__[(pos__ - 1)],
            "assigning variable pz", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, 1, -1> pw = Eigen::Matrix<double, 1, -1>::Constant(6, std::numeric_limits<double>::quiet_NaN());
                                        
      
      {
        std::vector<local_scalar_t__> pw_flat__;
        current_statement__ = 3;
        pw_flat__ = context__.vals_r("pw");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 3;
          assign(pw, pw_flat__[(pos__ - 1)],
            "assigning variable pw", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, -1> pm = Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN());
                                         
      
      {
        std::vector<local_scalar_t__> pm_flat__;
        current_statement__ = 4;
        pm_flat__ = context__.vals_r("pm");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 4;
            assign(pm, pm_flat__[(pos__ - 1)],
              "assigning variable pm", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 4;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<double> pya1 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
                                 
      
      current_statement__ = 5;
      pya1 = context__.vals_r("pya1");
      std::vector<std::vector<double>> pya2 = std::vector<std::vector<double>>(2, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
                                              
      
      {
        std::vector<local_scalar_t__> pya2_flat__;
        current_statement__ = 6;
        pya2_flat__ = context__.vals_r("pya2");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 6;
            assign(pya2, pya2_flat__[(pos__ - 1)],
              "assigning variable pya2", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<Eigen::Matrix<double, -1, 1>> pza1 = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN()));
                                                       
      
      {
        std::vector<local_scalar_t__> pza1_flat__;
        current_statement__ = 7;
        pza1_flat__ = context__.vals_r("pza1");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 7;
            assign(pza1, pza1_flat__[(pos__ - 1)],
              "assigning variable pza1", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> pza2 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(5, std::numeric_limits<double>::quiet_NaN())));
                                                                    
      
      {
        std::vector<local_scalar_t__> pza2_flat__;
        current_statement__ = 8;
        pza2_flat__ = context__.vals_r("pza2");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 8;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 8;
              assign(pza2, pza2_flat__[(pos__ - 1)],
                "assigning variable pza2", index_uni(sym3__),
                                             index_uni(sym2__),
                                             index_uni(sym1__));
              current_statement__ = 8;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<Eigen::Matrix<double, -1, -1>> pma1 = std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN()));
                                                        
      
      {
        std::vector<local_scalar_t__> pma1_flat__;
        current_statement__ = 9;
        pma1_flat__ = context__.vals_r("pma1");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 9;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 9;
              assign(pma1, pma1_flat__[(pos__ - 1)],
                "assigning variable pma1", index_uni(sym3__),
                                             index_uni(sym2__),
                                             index_uni(sym1__));
              current_statement__ = 9;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> pma2 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(2, std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(5, 6, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> pma2_flat__;
        current_statement__ = 10;
        pma2_flat__ = context__.vals_r("pma2");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          current_statement__ = 10;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 10;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 10;
              for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                current_statement__ = 10;
                assign(pma2, pma2_flat__[(pos__ - 1)],
                  "assigning variable pma2", index_uni(sym4__),
                                               index_uni(sym3__),
                                               index_uni(sym2__),
                                               index_uni(sym1__));
                current_statement__ = 10;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      vars__.emplace_back(py);
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(pz[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        vars__.emplace_back(pw[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          vars__.emplace_back(
            rvalue(pm, "pm", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(pya1[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(pya2[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          vars__.emplace_back(pza1[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
            vars__.emplace_back(
              pza2[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 6; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
            vars__.emplace_back(
              rvalue(pma1, "pma1",
                index_uni(sym1__), index_uni(sym3__), index_uni(sym2__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 6; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= 5; ++sym4__) {
              vars__.emplace_back(
                rvalue(pma2, "pma2",
                  index_uni(sym1__), index_uni(sym2__), index_uni(sym4__),
                    index_uni(sym3__)));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"py", "pz", "pw", "pm", "pya1",
      "pya2", "pza1", "pza2", "pma1", "pma2", "tpy", "tpza", "tpzb", "tpzc",
      "tpwa", "tpwb", "tpwc", "tpma", "tpmb", "tpmc", "tpya1", "tpyb1",
      "tpyc1", "tpza1", "tpzb1", "tpwa1", "tpwb1", "tpwc1", "tpm1", "tpya2",
      "tpyb2", "tpza2", "tpzb2", "tpzc2", "tpwa2", "tpwb2", "tpma2", "tpmb2",
      "tpmc2", "gqx", "gqy", "gqza", "gqzb", "gqzc"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2),
                          static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(5),
                          static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2),
                          static_cast<size_t>(5), static_cast<size_t>(6)},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(5),
                          static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2),
                          static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2),
                          static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2),
                          static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2),
                          static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2),
                          static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2),
                          static_cast<size_t>(5), static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2),
                          static_cast<size_t>(5), static_cast<size_t>(6)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2),
                          static_cast<size_t>(5), static_cast<size_t>(6)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(5)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "py");
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pz" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pya1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pya2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pza1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "pza2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "pma1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "pma2" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "tpy");
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpza" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpzb" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpzc" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpwa" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpwb" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpwc" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpmb" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpmc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpya1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpyb1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpyc1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpza1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpzb1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpwa1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpwb1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpwc1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpm1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpya2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpyb2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpza2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpzb2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpzc2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpwa2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpwb2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tpma2" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tpmb2" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tpmc2" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "gqx");
      param_names__.emplace_back(std::string() + "gqy");
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gqza" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gqzb" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gqzc" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "py");
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pz" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pw" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pya1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pya2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pza1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "pza2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "pma1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "pma2" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "tpy");
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpza" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpzb" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpzc" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpwa" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpwb" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpwc" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpmb" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpmc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpya1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpyb1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpyc1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpza1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpzb1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpwa1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpwb1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpwc1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpm1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpya2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpyb2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpza2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpzb2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpzc2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpwa2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpwb2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tpma2" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tpmb2" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tpmc2" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "gqx");
      param_names__.emplace_back(std::string() + "gqy");
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gqza" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gqzb" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gqzc" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"py\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pz\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"parameters\"},{\"name\":\"pw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "},\"block\":\"parameters\"},{\"name\":\"pm\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "},\"block\":\"parameters\"},{\"name\":\"pya1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pya2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"pza1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}},\"block\":\"parameters\"},{\"name\":\"pza2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}}},\"block\":\"parameters\"},{\"name\":\"pma1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "}},\"block\":\"parameters\"},{\"name\":\"pma2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "}}},\"block\":\"parameters\"},{\"name\":\"tpy\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tpza\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpzb\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpzc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpwa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpwb\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpwc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpmb\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpmc\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpya1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tpyb1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tpyc1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tpza1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpzb1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpwa1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpwb1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpwc1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpm1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpya2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpyb2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpza2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpzb2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpzc2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpwa2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpwb2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpma2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpmb2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpmc2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"gqx\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"gqy\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gqza\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"generated_quantities\"},{\"name\":\"gqzb\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"generated_quantities\"},{\"name\":\"gqzc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"py\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pz\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"parameters\"},{\"name\":\"pw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "},\"block\":\"parameters\"},{\"name\":\"pm\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "},\"block\":\"parameters\"},{\"name\":\"pya1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pya2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"pza1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}},\"block\":\"parameters\"},{\"name\":\"pza2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}}},\"block\":\"parameters\"},{\"name\":\"pma1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "}},\"block\":\"parameters\"},{\"name\":\"pma2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "}}},\"block\":\"parameters\"},{\"name\":\"tpy\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tpza\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpzb\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpzc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpwa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpwb\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpwc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpmb\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpmc\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpya1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tpyb1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tpyc1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tpza1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpzb1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpwa1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpwb1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpwc1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpm1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpya2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpyb2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpza2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpzb2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpzc2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpwa2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpwb2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(6) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpma2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpmb2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpmc2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(6) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"gqx\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"gqy\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gqza\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"generated_quantities\"},{\"name\":\"gqzb\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"generated_quantities\"},{\"name\":\"gqzc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = validate_conditional_op_good_model_namespace::validate_conditional_op_good_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return validate_conditional_op_good_model_namespace::profiles__;
}

#endif


