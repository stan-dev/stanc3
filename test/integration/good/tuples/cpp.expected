  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp arrays-tuples-nested.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace arrays_tuples_nested_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 15> locations_array__ =
  {" (found before start of program)",
  " (in 'arrays-tuples-nested.stan', line 12, column 2 to column 38)",
  " (in 'arrays-tuples-nested.stan', line 13, column 2 to column 52)",
  " (in 'arrays-tuples-nested.stan', line 14, column 2 to column 64)",
  " (in 'arrays-tuples-nested.stan', line 15, column 2 to column 84)",
  " (in 'arrays-tuples-nested.stan', line 16, column 2 to column 87)",
  " (in 'arrays-tuples-nested.stan', line 17, column 2 to column 78)",
  " (in 'arrays-tuples-nested.stan', line 18, column 2 to line 19, column 81)",
  " (in 'arrays-tuples-nested.stan', line 2, column 2 to column 35)",
  " (in 'arrays-tuples-nested.stan', line 3, column 2 to column 49)",
  " (in 'arrays-tuples-nested.stan', line 4, column 2 to column 58)",
  " (in 'arrays-tuples-nested.stan', line 5, column 2 to column 80)",
  " (in 'arrays-tuples-nested.stan', line 6, column 2 to column 80)",
  " (in 'arrays-tuples-nested.stan', line 7, column 2 to column 75)",
  " (in 'arrays-tuples-nested.stan', line 8, column 2 to line 9, column 79)"};
class arrays_tuples_nested_model final : public model_base_crtp<arrays_tuples_nested_model> {
 private:
  std::tuple<std::vector<double>, int> basic;
  std::tuple<int, std::tuple<double, Eigen::Matrix<double,-1,1>>> tuple_tuple;
  std::vector<
    std::tuple<int, std::vector<double>, Eigen::Matrix<double,-1,1>>>
    arr_tuple;
  std::tuple<std::vector<double>, int,
    std::vector<std::tuple<double, std::vector<int>>>> tuple_arr_tuple;
  std::vector<
    std::tuple<double, int,
      std::tuple<double, std::tuple<int, Eigen::Matrix<double,-1,1>>>>>
    arr_tuple_tuple;
  std::vector<
    std::tuple<int,
      std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>>>
    arr_tuple_arr_tuple;
  std::vector<
    std::tuple<int,
      std::vector<
        std::tuple<double,
          std::vector<
            std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>>>>>>
    very_deep;
 public:
  ~arrays_tuples_nested_model() {}
  arrays_tuples_nested_model(stan::io::var_context& context__, unsigned int
                             random_seed__ = 0, std::ostream*
                             pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "arrays_tuples_nested_model_namespace::arrays_tuples_nested_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 8;
      context__.validate_dims("data initialization", "basic.1", "double",
        std::vector<size_t>{static_cast<size_t>(10)});
      context__.validate_dims("data initialization", "basic.2", "int",
        std::vector<size_t>{});
      basic = std::tuple<std::vector<double>, int>{std::vector<double>(10,
                                                     std::numeric_limits<double>::quiet_NaN(
                                                       )),
                std::numeric_limits<int>::min()};
      current_statement__ = 8;
      std::get<0>(basic) = context__.vals_r("basic.1");
      std::get<1>(basic) = context__.vals_i("basic.2")[(1 - 1)];
      current_statement__ = 9;
      context__.validate_dims("data initialization", "tuple_tuple.1", "int",
        std::vector<size_t>{});
      context__.validate_dims("data initialization", "tuple_tuple.2.1",
        "double", std::vector<size_t>{});
      context__.validate_dims("data initialization", "tuple_tuple.2.2",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      tuple_tuple = std::tuple<int,
                      std::tuple<double, Eigen::Matrix<double,-1,1>>>{
                      std::numeric_limits<int>::min(),
                      std::tuple<double, Eigen::Matrix<double,-1,1>>{
                        std::numeric_limits<double>::quiet_NaN(),
                        Eigen::Matrix<double,-1,1>::Constant(2,
                          std::numeric_limits<double>::quiet_NaN())}};
      current_statement__ = 9;
      std::get<0>(tuple_tuple) = context__.vals_i("tuple_tuple.1")[(1 - 1)];
      std::get<0>(std::get<1>(tuple_tuple)) = context__.vals_r("tuple_tuple.2.1")[(1
        - 1)];
      {
        std::vector<local_scalar_t__> tuple_tuple_dot_2_dot_2_flat__;
        tuple_tuple_dot_2_dot_2_flat__ = context__.vals_r("tuple_tuple.2.2");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(std::get<1>(std::get<1>(tuple_tuple)),
            tuple_tuple_dot_2_dot_2_flat__[(pos__ - 1)],
            "assigning variable tuple_tuple.2.2",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 10;
      context__.validate_dims("data initialization", "arr_tuple.1", "int",
        std::vector<size_t>{static_cast<size_t>(3)});
      context__.validate_dims("data initialization", "arr_tuple.2", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4)});
      context__.validate_dims("data initialization", "arr_tuple.3", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3)});
      arr_tuple = std::vector<
                    std::tuple<int, std::vector<double>,
                      Eigen::Matrix<double,-1,1>>>(3,
                    std::tuple<int, std::vector<double>,
                      Eigen::Matrix<double,-1,1>>{std::numeric_limits<int>::min(
                                                    ),
                      std::vector<double>(4,
                        std::numeric_limits<double>::quiet_NaN()),
                      Eigen::Matrix<double,-1,1>::Constant(3,
                        std::numeric_limits<double>::quiet_NaN())});
      {
        std::vector<int> arr_tuple_dot_1_flat__;
        current_statement__ = 10;
        arr_tuple_dot_1_flat__ = context__.vals_i("arr_tuple.1");
        int arr_tuple_dot_1_flat__pos__;
        arr_tuple_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__> arr_tuple_dot_2_flat__;
        current_statement__ = 10;
        arr_tuple_dot_2_flat__ = context__.vals_r("arr_tuple.2");
        int arr_tuple_dot_2_flat__pos__;
        arr_tuple_dot_2_flat__pos__ = 1;
        std::vector<local_scalar_t__> arr_tuple_dot_3_flat__;
        current_statement__ = 10;
        arr_tuple_dot_3_flat__ = context__.vals_r("arr_tuple.3");
        int arr_tuple_dot_3_flat__pos__;
        arr_tuple_dot_3_flat__pos__ = 1;
        int arr_tuple_dot_1_temp__ = std::numeric_limits<int>::min();
        std::vector<double> arr_tuple_dot_2_temp__ =
          std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
        Eigen::Matrix<double,-1,1> arr_tuple_dot_3_temp__ =
          Eigen::Matrix<double,-1,1>::Constant(3,
            std::numeric_limits<double>::quiet_NaN());
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          arr_tuple_dot_1_temp__ = arr_tuple_dot_1_flat__[(arr_tuple_dot_1_flat__pos__
            - 1)];
          arr_tuple_dot_1_flat__pos__ = (arr_tuple_dot_1_flat__pos__ + 1);
          stan::model::assign(arr_tuple_dot_2_temp__,
            stan::model::rvalue(arr_tuple_dot_2_flat__,
              "arr_tuple_dot_2_flat__",
              stan::model::index_min_max(arr_tuple_dot_2_flat__pos__,
                ((arr_tuple_dot_2_flat__pos__ + 4) - 1))),
            "assigning variable arr_tuple_dot_2_temp__");
          arr_tuple_dot_2_flat__pos__ = (arr_tuple_dot_2_flat__pos__ + 4);
          {
            std::vector<local_scalar_t__> arr_tuple_dot_3_temp___flat__;
            stan::model::assign(arr_tuple_dot_3_temp___flat__,
              stan::model::rvalue(arr_tuple_dot_3_flat__,
                "arr_tuple_dot_3_flat__",
                stan::model::index_min_max(arr_tuple_dot_3_flat__pos__,
                  ((arr_tuple_dot_3_flat__pos__ + 3) - 1))),
              "assigning variable arr_tuple_dot_3_temp___flat__");
            pos__ = 1;
            for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
              stan::model::assign(arr_tuple_dot_3_temp__,
                arr_tuple_dot_3_temp___flat__[(pos__ - 1)],
                "assigning variable arr_tuple_dot_3_temp__",
                stan::model::index_uni(sym2__));
              pos__ = (pos__ + 1);
            }
            arr_tuple_dot_3_flat__pos__ = (arr_tuple_dot_3_flat__pos__ + 3);
          }
          stan::model::assign(arr_tuple,
            std::tuple<int, std::vector<double>, Eigen::Matrix<double,-1,1>>(arr_tuple_dot_1_temp__,
              arr_tuple_dot_2_temp__, arr_tuple_dot_3_temp__),
            "assigning variable arr_tuple", stan::model::index_uni(sym1__));
        }
      }
      current_statement__ = 11;
      context__.validate_dims("data initialization", "tuple_arr_tuple.1",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      context__.validate_dims("data initialization", "tuple_arr_tuple.2",
        "int", std::vector<size_t>{});
      context__.validate_dims("data initialization", "tuple_arr_tuple.3.1",
        "double", std::vector<size_t>{static_cast<size_t>(3)});
      context__.validate_dims("data initialization", "tuple_arr_tuple.3.2",
        "int",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4)});
      tuple_arr_tuple = std::tuple<std::vector<double>, int,
                          std::vector<std::tuple<double, std::vector<int>>>>{
                          std::vector<double>(2,
                            std::numeric_limits<double>::quiet_NaN()),
                          std::numeric_limits<int>::min(),
                          std::vector<std::tuple<double, std::vector<int>>>(3,
                            std::tuple<double, std::vector<int>>{std::numeric_limits<double>::quiet_NaN(
                                                                   ),
                              std::vector<int>(4,
                                std::numeric_limits<int>::min())})};
      current_statement__ = 11;
      std::get<0>(tuple_arr_tuple) = context__.vals_r("tuple_arr_tuple.1");
      std::get<1>(tuple_arr_tuple) = context__.vals_i("tuple_arr_tuple.2")[(1
        - 1)];
      {
        std::vector<local_scalar_t__> tuple_arr_tuple_dot_3_dot_1_flat__;
        tuple_arr_tuple_dot_3_dot_1_flat__ = context__.vals_r("tuple_arr_tuple.3.1");
        int tuple_arr_tuple_dot_3_dot_1_flat__pos__;
        tuple_arr_tuple_dot_3_dot_1_flat__pos__ = 1;
        std::vector<int> tuple_arr_tuple_dot_3_dot_2_flat__;
        tuple_arr_tuple_dot_3_dot_2_flat__ = context__.vals_i("tuple_arr_tuple.3.2");
        int tuple_arr_tuple_dot_3_dot_2_flat__pos__;
        tuple_arr_tuple_dot_3_dot_2_flat__pos__ = 1;
        double tuple_arr_tuple_dot_3_dot_1_temp__ =
          std::numeric_limits<double>::quiet_NaN();
        std::vector<int> tuple_arr_tuple_dot_3_dot_2_temp__ =
          std::vector<int>(4, std::numeric_limits<int>::min());
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          tuple_arr_tuple_dot_3_dot_1_temp__ = tuple_arr_tuple_dot_3_dot_1_flat__[(tuple_arr_tuple_dot_3_dot_1_flat__pos__
            - 1)];
          tuple_arr_tuple_dot_3_dot_1_flat__pos__ = (tuple_arr_tuple_dot_3_dot_1_flat__pos__
            + 1);
          stan::model::assign(tuple_arr_tuple_dot_3_dot_2_temp__,
            stan::model::rvalue(tuple_arr_tuple_dot_3_dot_2_flat__,
              "tuple_arr_tuple_dot_3_dot_2_flat__",
              stan::model::index_min_max(
                tuple_arr_tuple_dot_3_dot_2_flat__pos__,
                ((tuple_arr_tuple_dot_3_dot_2_flat__pos__ + 4) - 1))),
            "assigning variable tuple_arr_tuple_dot_3_dot_2_temp__");
          tuple_arr_tuple_dot_3_dot_2_flat__pos__ = (tuple_arr_tuple_dot_3_dot_2_flat__pos__
            + 4);
          stan::model::assign(std::get<2>(tuple_arr_tuple),
            std::tuple<double, std::vector<int>>(tuple_arr_tuple_dot_3_dot_1_temp__,
              tuple_arr_tuple_dot_3_dot_2_temp__),
            "assigning variable tuple_arr_tuple.3",
            stan::model::index_uni(sym1__));
        }
      }
      current_statement__ = 12;
      context__.validate_dims("data initialization", "arr_tuple_tuple.1",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      context__.validate_dims("data initialization", "arr_tuple_tuple.2",
        "int", std::vector<size_t>{static_cast<size_t>(2)});
      context__.validate_dims("data initialization", "arr_tuple_tuple.3.1",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      context__.validate_dims("data initialization", "arr_tuple_tuple.3.2.1",
        "int", std::vector<size_t>{static_cast<size_t>(2)});
      context__.validate_dims("data initialization", "arr_tuple_tuple.3.2.2",
        "double",
        std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(4)});
      arr_tuple_tuple = std::vector<
                          std::tuple<double, int,
                            std::tuple<double,
                              std::tuple<int, Eigen::Matrix<double,-1,1>>>>>(2,
                          std::tuple<double, int,
                            std::tuple<double,
                              std::tuple<int, Eigen::Matrix<double,-1,1>>>>{
                            std::numeric_limits<double>::quiet_NaN(),
                            std::numeric_limits<int>::min(),
                            std::tuple<double,
                              std::tuple<int, Eigen::Matrix<double,-1,1>>>{
                              std::numeric_limits<double>::quiet_NaN(),
                              std::tuple<int, Eigen::Matrix<double,-1,1>>{
                                std::numeric_limits<int>::min(),
                                Eigen::Matrix<double,-1,1>::Constant(4,
                                  std::numeric_limits<double>::quiet_NaN())}}});
      {
        std::vector<local_scalar_t__> arr_tuple_tuple_dot_1_flat__;
        current_statement__ = 12;
        arr_tuple_tuple_dot_1_flat__ = context__.vals_r("arr_tuple_tuple.1");
        int arr_tuple_tuple_dot_1_flat__pos__;
        arr_tuple_tuple_dot_1_flat__pos__ = 1;
        std::vector<int> arr_tuple_tuple_dot_2_flat__;
        current_statement__ = 12;
        arr_tuple_tuple_dot_2_flat__ = context__.vals_i("arr_tuple_tuple.2");
        int arr_tuple_tuple_dot_2_flat__pos__;
        arr_tuple_tuple_dot_2_flat__pos__ = 1;
        std::vector<local_scalar_t__> arr_tuple_tuple_dot_3_dot_1_flat__;
        current_statement__ = 12;
        arr_tuple_tuple_dot_3_dot_1_flat__ = context__.vals_r("arr_tuple_tuple.3.1");
        int arr_tuple_tuple_dot_3_dot_1_flat__pos__;
        arr_tuple_tuple_dot_3_dot_1_flat__pos__ = 1;
        std::vector<int> arr_tuple_tuple_dot_3_dot_2_dot_1_flat__;
        current_statement__ = 12;
        arr_tuple_tuple_dot_3_dot_2_dot_1_flat__ = context__.vals_i("arr_tuple_tuple.3.2.1");
        int arr_tuple_tuple_dot_3_dot_2_dot_1_flat__pos__;
        arr_tuple_tuple_dot_3_dot_2_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__>
          arr_tuple_tuple_dot_3_dot_2_dot_2_flat__;
        current_statement__ = 12;
        arr_tuple_tuple_dot_3_dot_2_dot_2_flat__ = context__.vals_r("arr_tuple_tuple.3.2.2");
        int arr_tuple_tuple_dot_3_dot_2_dot_2_flat__pos__;
        arr_tuple_tuple_dot_3_dot_2_dot_2_flat__pos__ = 1;
        double arr_tuple_tuple_dot_1_temp__ =
          std::numeric_limits<double>::quiet_NaN();
        int arr_tuple_tuple_dot_2_temp__ = std::numeric_limits<int>::min();
        std::tuple<double, std::tuple<int, Eigen::Matrix<double,-1,1>>>
          arr_tuple_tuple_dot_3_temp__ =
          std::tuple<double, std::tuple<int, Eigen::Matrix<double,-1,1>>>{
            std::numeric_limits<double>::quiet_NaN(),
            std::tuple<int, Eigen::Matrix<double,-1,1>>{std::numeric_limits<int>::min(
                                                          ),
              Eigen::Matrix<double,-1,1>::Constant(4,
                std::numeric_limits<double>::quiet_NaN())}};
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          arr_tuple_tuple_dot_1_temp__ = arr_tuple_tuple_dot_1_flat__[(arr_tuple_tuple_dot_1_flat__pos__
            - 1)];
          arr_tuple_tuple_dot_1_flat__pos__ = (arr_tuple_tuple_dot_1_flat__pos__
            + 1);
          arr_tuple_tuple_dot_2_temp__ = arr_tuple_tuple_dot_2_flat__[(arr_tuple_tuple_dot_2_flat__pos__
            - 1)];
          arr_tuple_tuple_dot_2_flat__pos__ = (arr_tuple_tuple_dot_2_flat__pos__
            + 1);
          stan::model::assign(std::get<0>(arr_tuple_tuple_dot_3_temp__),
            arr_tuple_tuple_dot_3_dot_1_flat__[(arr_tuple_tuple_dot_3_dot_1_flat__pos__
            - 1)], "assigning variable arr_tuple_tuple_dot_3_temp__.1");
          arr_tuple_tuple_dot_3_dot_1_flat__pos__ = (arr_tuple_tuple_dot_3_dot_1_flat__pos__
            + 1);
          stan::model::assign(
            std::get<0>(std::get<1>(arr_tuple_tuple_dot_3_temp__)),
            arr_tuple_tuple_dot_3_dot_2_dot_1_flat__[(arr_tuple_tuple_dot_3_dot_2_dot_1_flat__pos__
            - 1)], "assigning variable arr_tuple_tuple_dot_3_temp__.2.1");
          arr_tuple_tuple_dot_3_dot_2_dot_1_flat__pos__ = (arr_tuple_tuple_dot_3_dot_2_dot_1_flat__pos__
            + 1);
          {
            std::vector<local_scalar_t__>
              arr_tuple_tuple_dot_3_temp___dot_2_dot_2_flat__;
            stan::model::assign(
              arr_tuple_tuple_dot_3_temp___dot_2_dot_2_flat__,
              stan::model::rvalue(arr_tuple_tuple_dot_3_dot_2_dot_2_flat__,
                "arr_tuple_tuple_dot_3_dot_2_dot_2_flat__",
                stan::model::index_min_max(
                  arr_tuple_tuple_dot_3_dot_2_dot_2_flat__pos__,
                  ((arr_tuple_tuple_dot_3_dot_2_dot_2_flat__pos__ + 4) - 1))),
              "assigning variable arr_tuple_tuple_dot_3_temp___dot_2_dot_2_flat__");
            pos__ = 1;
            for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
              stan::model::assign(
                std::get<1>(std::get<1>(arr_tuple_tuple_dot_3_temp__)),
                arr_tuple_tuple_dot_3_temp___dot_2_dot_2_flat__[(pos__ - 1)],
                "assigning variable arr_tuple_tuple_dot_3_temp__.2.2",
                stan::model::index_uni(sym2__));
              pos__ = (pos__ + 1);
            }
            arr_tuple_tuple_dot_3_dot_2_dot_2_flat__pos__ = (arr_tuple_tuple_dot_3_dot_2_dot_2_flat__pos__
              + 4);
          }
          stan::model::assign(arr_tuple_tuple,
            std::tuple<double, int,
              std::tuple<double, std::tuple<int, Eigen::Matrix<double,-1,1>>>>(arr_tuple_tuple_dot_1_temp__,
              arr_tuple_tuple_dot_2_temp__, arr_tuple_tuple_dot_3_temp__),
            "assigning variable arr_tuple_tuple",
            stan::model::index_uni(sym1__));
        }
      }
      current_statement__ = 13;
      context__.validate_dims("data initialization", "arr_tuple_arr_tuple.1",
        "int", std::vector<size_t>{static_cast<size_t>(3)});
      context__.validate_dims("data initialization",
        "arr_tuple_arr_tuple.2.1", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4)});
      context__.validate_dims("data initialization",
        "arr_tuple_arr_tuple.2.2", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4),
          static_cast<size_t>(5)});
      arr_tuple_arr_tuple = std::vector<
                              std::tuple<int,
                                std::vector<
                                  std::tuple<double,
                                    Eigen::Matrix<double,-1,1>>>>>(3,
                              std::tuple<int,
                                std::vector<
                                  std::tuple<double,
                                    Eigen::Matrix<double,-1,1>>>>{std::numeric_limits<int>::min(
                                                                    ),
                                std::vector<
                                  std::tuple<double,
                                    Eigen::Matrix<double,-1,1>>>(4,
                                  std::tuple<double,
                                    Eigen::Matrix<double,-1,1>>{std::numeric_limits<double>::quiet_NaN(
                                                                  ),
                                    Eigen::Matrix<double,-1,1>::Constant(5,
                                      std::numeric_limits<double>::quiet_NaN())})});
      {
        std::vector<int> arr_tuple_arr_tuple_dot_1_flat__;
        current_statement__ = 13;
        arr_tuple_arr_tuple_dot_1_flat__ = context__.vals_i("arr_tuple_arr_tuple.1");
        int arr_tuple_arr_tuple_dot_1_flat__pos__;
        arr_tuple_arr_tuple_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__> arr_tuple_arr_tuple_dot_2_dot_1_flat__;
        current_statement__ = 13;
        arr_tuple_arr_tuple_dot_2_dot_1_flat__ = context__.vals_r("arr_tuple_arr_tuple.2.1");
        int arr_tuple_arr_tuple_dot_2_dot_1_flat__pos__;
        arr_tuple_arr_tuple_dot_2_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__> arr_tuple_arr_tuple_dot_2_dot_2_flat__;
        current_statement__ = 13;
        arr_tuple_arr_tuple_dot_2_dot_2_flat__ = context__.vals_r("arr_tuple_arr_tuple.2.2");
        int arr_tuple_arr_tuple_dot_2_dot_2_flat__pos__;
        arr_tuple_arr_tuple_dot_2_dot_2_flat__pos__ = 1;
        int arr_tuple_arr_tuple_dot_1_temp__ =
          std::numeric_limits<int>::min();
        std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>
          arr_tuple_arr_tuple_dot_2_temp__ =
          std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>(4,
            std::tuple<double, Eigen::Matrix<double,-1,1>>{std::numeric_limits<double>::quiet_NaN(
                                                             ),
              Eigen::Matrix<double,-1,1>::Constant(5,
                std::numeric_limits<double>::quiet_NaN())});
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          arr_tuple_arr_tuple_dot_1_temp__ = arr_tuple_arr_tuple_dot_1_flat__[(arr_tuple_arr_tuple_dot_1_flat__pos__
            - 1)];
          arr_tuple_arr_tuple_dot_1_flat__pos__ = (arr_tuple_arr_tuple_dot_1_flat__pos__
            + 1);
          {
            double arr_tuple_arr_tuple_dot_2_dot_1_temp__ =
              std::numeric_limits<double>::quiet_NaN();
            Eigen::Matrix<double,-1,1>
              arr_tuple_arr_tuple_dot_2_dot_2_temp__ =
              Eigen::Matrix<double,-1,1>::Constant(5,
                std::numeric_limits<double>::quiet_NaN());
            for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
              arr_tuple_arr_tuple_dot_2_dot_1_temp__ = arr_tuple_arr_tuple_dot_2_dot_1_flat__[(arr_tuple_arr_tuple_dot_2_dot_1_flat__pos__
                - 1)];
              arr_tuple_arr_tuple_dot_2_dot_1_flat__pos__ = (arr_tuple_arr_tuple_dot_2_dot_1_flat__pos__
                + 1);
              {
                std::vector<local_scalar_t__>
                  arr_tuple_arr_tuple_dot_2_dot_2_temp___flat__;
                stan::model::assign(
                  arr_tuple_arr_tuple_dot_2_dot_2_temp___flat__,
                  stan::model::rvalue(arr_tuple_arr_tuple_dot_2_dot_2_flat__,
                    "arr_tuple_arr_tuple_dot_2_dot_2_flat__",
                    stan::model::index_min_max(
                      arr_tuple_arr_tuple_dot_2_dot_2_flat__pos__,
                      ((arr_tuple_arr_tuple_dot_2_dot_2_flat__pos__ + 5) - 1))),
                  "assigning variable arr_tuple_arr_tuple_dot_2_dot_2_temp___flat__");
                pos__ = 1;
                for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                  stan::model::assign(arr_tuple_arr_tuple_dot_2_dot_2_temp__,
                    arr_tuple_arr_tuple_dot_2_dot_2_temp___flat__[(pos__ -
                    1)],
                    "assigning variable arr_tuple_arr_tuple_dot_2_dot_2_temp__",
                    stan::model::index_uni(sym3__));
                  pos__ = (pos__ + 1);
                }
                arr_tuple_arr_tuple_dot_2_dot_2_flat__pos__ = (arr_tuple_arr_tuple_dot_2_dot_2_flat__pos__
                  + 5);
              }
              stan::model::assign(arr_tuple_arr_tuple_dot_2_temp__,
                std::tuple<double, Eigen::Matrix<double,-1,1>>(arr_tuple_arr_tuple_dot_2_dot_1_temp__,
                  arr_tuple_arr_tuple_dot_2_dot_2_temp__),
                "assigning variable arr_tuple_arr_tuple_dot_2_temp__",
                stan::model::index_uni(sym2__));
            }
          }
          stan::model::assign(arr_tuple_arr_tuple,
            std::tuple<int,
              std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>>(arr_tuple_arr_tuple_dot_1_temp__,
              arr_tuple_arr_tuple_dot_2_temp__),
            "assigning variable arr_tuple_arr_tuple",
            stan::model::index_uni(sym1__));
        }
      }
      current_statement__ = 14;
      context__.validate_dims("data initialization", "very_deep.1", "int",
        std::vector<size_t>{static_cast<size_t>(3)});
      context__.validate_dims("data initialization", "very_deep.2.1",
        "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4)});
      context__.validate_dims("data initialization", "very_deep.2.2.1",
        "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4),
          static_cast<size_t>(5), static_cast<size_t>(2)});
      context__.validate_dims("data initialization", "very_deep.2.2.2",
        "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4),
          static_cast<size_t>(5), static_cast<size_t>(6),
          static_cast<size_t>(7)});
      very_deep = std::vector<
                    std::tuple<int,
                      std::vector<
                        std::tuple<double,
                          std::vector<
                            std::tuple<std::complex<double>,
                              Eigen::Matrix<double,-1,-1>>>>>>>(3,
                    std::tuple<int,
                      std::vector<
                        std::tuple<double,
                          std::vector<
                            std::tuple<std::complex<double>,
                              Eigen::Matrix<double,-1,-1>>>>>>{std::numeric_limits<int>::min(
                                                                 ),
                      std::vector<
                        std::tuple<double,
                          std::vector<
                            std::tuple<std::complex<double>,
                              Eigen::Matrix<double,-1,-1>>>>>(4,
                        std::tuple<double,
                          std::vector<
                            std::tuple<std::complex<double>,
                              Eigen::Matrix<double,-1,-1>>>>{std::numeric_limits<double>::quiet_NaN(
                                                               ),
                          std::vector<
                            std::tuple<std::complex<double>,
                              Eigen::Matrix<double,-1,-1>>>(5,
                            std::tuple<std::complex<double>,
                              Eigen::Matrix<double,-1,-1>>{std::complex<double>(
                                                             std::numeric_limits<double>::quiet_NaN(
                                                               ),
                                                             std::numeric_limits<double>::quiet_NaN(
                                                               )),
                              Eigen::Matrix<double,-1,-1>::Constant(6, 7,
                                std::numeric_limits<double>::quiet_NaN())})})});
      {
        std::vector<int> very_deep_dot_1_flat__;
        current_statement__ = 14;
        very_deep_dot_1_flat__ = context__.vals_i("very_deep.1");
        int very_deep_dot_1_flat__pos__;
        very_deep_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__> very_deep_dot_2_dot_1_flat__;
        current_statement__ = 14;
        very_deep_dot_2_dot_1_flat__ = context__.vals_r("very_deep.2.1");
        int very_deep_dot_2_dot_1_flat__pos__;
        very_deep_dot_2_dot_1_flat__pos__ = 1;
        std::vector<std::complex<local_scalar_t__>>
          very_deep_dot_2_dot_2_dot_1_flat__;
        current_statement__ = 14;
        very_deep_dot_2_dot_2_dot_1_flat__ = context__.vals_c("very_deep.2.2.1");
        int very_deep_dot_2_dot_2_dot_1_flat__pos__;
        very_deep_dot_2_dot_2_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__> very_deep_dot_2_dot_2_dot_2_flat__;
        current_statement__ = 14;
        very_deep_dot_2_dot_2_dot_2_flat__ = context__.vals_r("very_deep.2.2.2");
        int very_deep_dot_2_dot_2_dot_2_flat__pos__;
        very_deep_dot_2_dot_2_dot_2_flat__pos__ = 1;
        int very_deep_dot_1_temp__ = std::numeric_limits<int>::min();
        std::vector<
          std::tuple<double,
            std::vector<
              std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>>>>
          very_deep_dot_2_temp__ =
          std::vector<
            std::tuple<double,
              std::vector<
                std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>>>>(4,
            std::tuple<double,
              std::vector<
                std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>>>{
              std::numeric_limits<double>::quiet_NaN(),
              std::vector<
                std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>>(5,
                std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>{
                  std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                    std::numeric_limits<double>::quiet_NaN()),
                  Eigen::Matrix<double,-1,-1>::Constant(6, 7,
                    std::numeric_limits<double>::quiet_NaN())})});
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          very_deep_dot_1_temp__ = very_deep_dot_1_flat__[(very_deep_dot_1_flat__pos__
            - 1)];
          very_deep_dot_1_flat__pos__ = (very_deep_dot_1_flat__pos__ + 1);
          {
            double very_deep_dot_2_dot_1_temp__ =
              std::numeric_limits<double>::quiet_NaN();
            std::vector<
              std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>>
              very_deep_dot_2_dot_2_temp__ =
              std::vector<
                std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>>(5,
                std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>{
                  std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                    std::numeric_limits<double>::quiet_NaN()),
                  Eigen::Matrix<double,-1,-1>::Constant(6, 7,
                    std::numeric_limits<double>::quiet_NaN())});
            for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
              very_deep_dot_2_dot_1_temp__ = very_deep_dot_2_dot_1_flat__[(very_deep_dot_2_dot_1_flat__pos__
                - 1)];
              very_deep_dot_2_dot_1_flat__pos__ = (very_deep_dot_2_dot_1_flat__pos__
                + 1);
              {
                std::complex<double> very_deep_dot_2_dot_2_dot_1_temp__ =
                  std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                    std::numeric_limits<double>::quiet_NaN());
                Eigen::Matrix<double,-1,-1>
                  very_deep_dot_2_dot_2_dot_2_temp__ =
                  Eigen::Matrix<double,-1,-1>::Constant(6, 7,
                    std::numeric_limits<double>::quiet_NaN());
                for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                  very_deep_dot_2_dot_2_dot_1_temp__ = very_deep_dot_2_dot_2_dot_1_flat__[(very_deep_dot_2_dot_2_dot_1_flat__pos__
                    - 1)];
                  very_deep_dot_2_dot_2_dot_1_flat__pos__ = (very_deep_dot_2_dot_2_dot_1_flat__pos__
                    + 2);
                  {
                    std::vector<local_scalar_t__>
                      very_deep_dot_2_dot_2_dot_2_temp___flat__;
                    stan::model::assign(
                      very_deep_dot_2_dot_2_dot_2_temp___flat__,
                      stan::model::rvalue(very_deep_dot_2_dot_2_dot_2_flat__,
                        "very_deep_dot_2_dot_2_dot_2_flat__",
                        stan::model::index_min_max(
                          very_deep_dot_2_dot_2_dot_2_flat__pos__,
                          ((very_deep_dot_2_dot_2_dot_2_flat__pos__ + (6 *
                          7)) - 1))),
                      "assigning variable very_deep_dot_2_dot_2_dot_2_temp___flat__");
                    pos__ = 1;
                    for (int sym4__ = 1; sym4__ <= 7; ++sym4__) {
                      for (int sym5__ = 1; sym5__ <= 6; ++sym5__) {
                        stan::model::assign(
                          very_deep_dot_2_dot_2_dot_2_temp__,
                          very_deep_dot_2_dot_2_dot_2_temp___flat__[(pos__ -
                          1)],
                          "assigning variable very_deep_dot_2_dot_2_dot_2_temp__",
                          stan::model::index_uni(sym5__),
                          stan::model::index_uni(sym4__));
                        pos__ = (pos__ + 1);
                      }
                    }
                    very_deep_dot_2_dot_2_dot_2_flat__pos__ = (very_deep_dot_2_dot_2_dot_2_flat__pos__
                      + (6 * 7));
                  }
                  stan::model::assign(very_deep_dot_2_dot_2_temp__,
                    std::tuple<std::complex<double>,
                      Eigen::Matrix<double,-1,-1>>(very_deep_dot_2_dot_2_dot_1_temp__,
                      very_deep_dot_2_dot_2_dot_2_temp__),
                    "assigning variable very_deep_dot_2_dot_2_temp__",
                    stan::model::index_uni(sym3__));
                }
              }
              stan::model::assign(very_deep_dot_2_temp__,
                std::tuple<double,
                  std::vector<
                    std::tuple<std::complex<double>,
                      Eigen::Matrix<double,-1,-1>>>>(very_deep_dot_2_dot_1_temp__,
                  very_deep_dot_2_dot_2_temp__),
                "assigning variable very_deep_dot_2_temp__",
                stan::model::index_uni(sym2__));
            }
          }
          stan::model::assign(very_deep,
            std::tuple<int,
              std::vector<
                std::tuple<double,
                  std::vector<
                    std::tuple<std::complex<double>,
                      Eigen::Matrix<double,-1,-1>>>>>>(very_deep_dot_1_temp__,
              very_deep_dot_2_temp__), "assigning variable very_deep",
            stan::model::index_uni(sym1__));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (10 + 1) + (1 + (1 + 2)) + (3 * ((2 + 4) + 3)) + ((2 +
      1) + (3 * (1 + 4))) + (2 * ((1 + 1) + (1 + (2 + 4)))) + (3 * (1 + (4 *
      (1 + 5)))) + (3 * (1 + (4 * (1 + (5 * (2 + (6 * 7)))))));
  }
  inline std::string model_name() const final {
    return "arrays_tuples_nested_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "arrays_tuples_nested_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<std::vector<local_scalar_t__>, local_scalar_t__> basic_p =
        std::tuple<std::vector<local_scalar_t__>, local_scalar_t__>{std::vector<
                                                                    local_scalar_t__>(10,
                                                                    DUMMY_VAR__),
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(basic_p) = in__.template read<
                               std::vector<local_scalar_t__>>(10);
      current_statement__ = 1;
      std::get<1>(basic_p) = in__.template read<local_scalar_t__>();
      std::tuple<local_scalar_t__,
        std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>>
        tuple_tuple_p =
        std::tuple<local_scalar_t__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>>{DUMMY_VAR__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>{DUMMY_VAR__,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__)}};
      current_statement__ = 2;
      std::get<0>(tuple_tuple_p) = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      std::get<0>(std::get<1>(tuple_tuple_p)) = in__.template read<
                                                  local_scalar_t__>();
      current_statement__ = 2;
      std::get<1>(std::get<1>(tuple_tuple_p)) = in__.template read<
                                                  Eigen::Matrix<local_scalar_t__,-1,1>>(2);
      std::vector<
        std::tuple<std::complex<local_scalar_t__>,
          std::vector<local_scalar_t__>,
          Eigen::Matrix<local_scalar_t__,-1,1>>> arr_tuple_p =
        std::vector<
          std::tuple<std::complex<local_scalar_t__>,
            std::vector<local_scalar_t__>,
            Eigen::Matrix<local_scalar_t__,-1,1>>>(3,
          std::tuple<std::complex<local_scalar_t__>,
            std::vector<local_scalar_t__>,
            Eigen::Matrix<local_scalar_t__,-1,1>>{std::complex<local_scalar_t__>(DUMMY_VAR__,
                                                    DUMMY_VAR__),
            std::vector<local_scalar_t__>(4, DUMMY_VAR__),
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__)});
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 3;
        std::get<0>(arr_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                   std::complex<local_scalar_t__>>();
        current_statement__ = 3;
        std::get<1>(arr_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                   std::vector<
                                                     local_scalar_t__>>(4);
        current_statement__ = 3;
        std::get<2>(arr_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                   Eigen::Matrix<local_scalar_t__,-1,1>>(3);
      }
      std::tuple<std::vector<local_scalar_t__>, local_scalar_t__,
        std::vector<
          std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>>>
        tuple_arr_tuple_p =
        std::tuple<std::vector<local_scalar_t__>, local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>>>{
          std::vector<local_scalar_t__>(2, DUMMY_VAR__), DUMMY_VAR__,
          std::vector<
            std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>>(3,
            std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>{DUMMY_VAR__,
              std::vector<local_scalar_t__>(4, DUMMY_VAR__)})};
      current_statement__ = 4;
      std::get<0>(tuple_arr_tuple_p) = in__.template read<
                                         std::vector<local_scalar_t__>>(2);
      current_statement__ = 4;
      std::get<1>(tuple_arr_tuple_p) = in__.template read<local_scalar_t__>();
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 4;
        std::get<0>(std::get<2>(tuple_arr_tuple_p)[(sym1__ - 1)]) = in__.template read<
                                                                    local_scalar_t__>();
        current_statement__ = 4;
        std::get<1>(std::get<2>(tuple_arr_tuple_p)[(sym1__ - 1)]) = in__.template read<
                                                                    std::vector<
                                                                    local_scalar_t__>>(4);
      }
      std::vector<
        std::tuple<local_scalar_t__, local_scalar_t__,
          std::tuple<local_scalar_t__,
            std::tuple<std::complex<local_scalar_t__>,
              Eigen::Matrix<local_scalar_t__,-1,1>>>>> arr_tuple_tuple_p =
        std::vector<
          std::tuple<local_scalar_t__, local_scalar_t__,
            std::tuple<local_scalar_t__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>>(2,
          std::tuple<local_scalar_t__, local_scalar_t__,
            std::tuple<local_scalar_t__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>{DUMMY_VAR__,
            DUMMY_VAR__,
            std::tuple<local_scalar_t__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>>{DUMMY_VAR__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>{std::complex<local_scalar_t__>(DUMMY_VAR__,
                                                        DUMMY_VAR__),
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4,
                  DUMMY_VAR__)}}});
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 5;
        std::get<0>(arr_tuple_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                         local_scalar_t__>();
        current_statement__ = 5;
        std::get<1>(arr_tuple_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                         local_scalar_t__>();
        current_statement__ = 5;
        std::get<0>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)])) = in__.template read<
                                                                    local_scalar_t__>();
        current_statement__ = 5;
        std::get<0>(std::get<1>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)]))) = 
          in__.template read<std::complex<local_scalar_t__>>();
        current_statement__ = 5;
        std::get<1>(std::get<1>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)]))) = 
          in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(4);
      }
      std::vector<
        std::tuple<local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>>>>
        arr_tuple_arr_tuple_p =
        std::vector<
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>>(3,
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>{DUMMY_VAR__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>>(4,
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>{DUMMY_VAR__,
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(5,
                  DUMMY_VAR__)})});
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 6;
        std::get<0>(arr_tuple_arr_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                             local_scalar_t__>();
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          current_statement__ = 6;
          std::get<0>(
            std::get<1>(arr_tuple_arr_tuple_p[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read<local_scalar_t__>();
          current_statement__ = 6;
          std::get<1>(
            std::get<1>(arr_tuple_arr_tuple_p[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(5);
        }
      }
      std::vector<
        std::tuple<local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__,
              std::vector<
                std::tuple<std::complex<local_scalar_t__>,
                  Eigen::Matrix<local_scalar_t__,-1,-1>>>>>>> very_deep_p =
        std::vector<
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>>>>(3,
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>>>{DUMMY_VAR__,
            std::vector<
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>>(4,
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>{DUMMY_VAR__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>(5,
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>{std::complex<local_scalar_t__>(DUMMY_VAR__,
                                                             DUMMY_VAR__),
                    Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(6, 7,
                      DUMMY_VAR__)})})});
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 7;
        std::get<0>(very_deep_p[(sym1__ - 1)]) = in__.template read<
                                                   local_scalar_t__>();
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          current_statement__ = 7;
          std::get<0>(std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read<local_scalar_t__>();
          current_statement__ = 7;
          for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
            current_statement__ = 7;
            std::get<0>(
              std::get<1>(std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ -
                1)])[(sym3__ - 1)]) = in__.template read<
                                        std::complex<local_scalar_t__>>();
            current_statement__ = 7;
            std::get<1>(
              std::get<1>(std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ -
                1)])[(sym3__ - 1)]) = in__.template read<
                                        Eigen::Matrix<local_scalar_t__,-1,-1>>(6,
                                        7);
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "arrays_tuples_nested_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<std::vector<local_scalar_t__>, local_scalar_t__> basic_p =
        std::tuple<std::vector<local_scalar_t__>, local_scalar_t__>{std::vector<
                                                                    local_scalar_t__>(10,
                                                                    DUMMY_VAR__),
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(basic_p) = in__.template read<
                               std::vector<local_scalar_t__>>(10);
      current_statement__ = 1;
      std::get<1>(basic_p) = in__.template read<local_scalar_t__>();
      std::tuple<local_scalar_t__,
        std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>>
        tuple_tuple_p =
        std::tuple<local_scalar_t__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>>{DUMMY_VAR__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>{DUMMY_VAR__,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__)}};
      current_statement__ = 2;
      std::get<0>(tuple_tuple_p) = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      std::get<0>(std::get<1>(tuple_tuple_p)) = in__.template read<
                                                  local_scalar_t__>();
      current_statement__ = 2;
      std::get<1>(std::get<1>(tuple_tuple_p)) = in__.template read<
                                                  Eigen::Matrix<local_scalar_t__,-1,1>>(2);
      std::vector<
        std::tuple<std::complex<local_scalar_t__>,
          std::vector<local_scalar_t__>,
          Eigen::Matrix<local_scalar_t__,-1,1>>> arr_tuple_p =
        std::vector<
          std::tuple<std::complex<local_scalar_t__>,
            std::vector<local_scalar_t__>,
            Eigen::Matrix<local_scalar_t__,-1,1>>>(3,
          std::tuple<std::complex<local_scalar_t__>,
            std::vector<local_scalar_t__>,
            Eigen::Matrix<local_scalar_t__,-1,1>>{std::complex<local_scalar_t__>(DUMMY_VAR__,
                                                    DUMMY_VAR__),
            std::vector<local_scalar_t__>(4, DUMMY_VAR__),
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__)});
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 3;
        std::get<0>(arr_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                   std::complex<local_scalar_t__>>();
        current_statement__ = 3;
        std::get<1>(arr_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                   std::vector<
                                                     local_scalar_t__>>(4);
        current_statement__ = 3;
        std::get<2>(arr_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                   Eigen::Matrix<local_scalar_t__,-1,1>>(3);
      }
      std::tuple<std::vector<local_scalar_t__>, local_scalar_t__,
        std::vector<
          std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>>>
        tuple_arr_tuple_p =
        std::tuple<std::vector<local_scalar_t__>, local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>>>{
          std::vector<local_scalar_t__>(2, DUMMY_VAR__), DUMMY_VAR__,
          std::vector<
            std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>>(3,
            std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>{DUMMY_VAR__,
              std::vector<local_scalar_t__>(4, DUMMY_VAR__)})};
      current_statement__ = 4;
      std::get<0>(tuple_arr_tuple_p) = in__.template read<
                                         std::vector<local_scalar_t__>>(2);
      current_statement__ = 4;
      std::get<1>(tuple_arr_tuple_p) = in__.template read<local_scalar_t__>();
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 4;
        std::get<0>(std::get<2>(tuple_arr_tuple_p)[(sym1__ - 1)]) = in__.template read<
                                                                    local_scalar_t__>();
        current_statement__ = 4;
        std::get<1>(std::get<2>(tuple_arr_tuple_p)[(sym1__ - 1)]) = in__.template read<
                                                                    std::vector<
                                                                    local_scalar_t__>>(4);
      }
      std::vector<
        std::tuple<local_scalar_t__, local_scalar_t__,
          std::tuple<local_scalar_t__,
            std::tuple<std::complex<local_scalar_t__>,
              Eigen::Matrix<local_scalar_t__,-1,1>>>>> arr_tuple_tuple_p =
        std::vector<
          std::tuple<local_scalar_t__, local_scalar_t__,
            std::tuple<local_scalar_t__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>>(2,
          std::tuple<local_scalar_t__, local_scalar_t__,
            std::tuple<local_scalar_t__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>{DUMMY_VAR__,
            DUMMY_VAR__,
            std::tuple<local_scalar_t__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>>{DUMMY_VAR__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>{std::complex<local_scalar_t__>(DUMMY_VAR__,
                                                        DUMMY_VAR__),
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4,
                  DUMMY_VAR__)}}});
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 5;
        std::get<0>(arr_tuple_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                         local_scalar_t__>();
        current_statement__ = 5;
        std::get<1>(arr_tuple_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                         local_scalar_t__>();
        current_statement__ = 5;
        std::get<0>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)])) = in__.template read<
                                                                    local_scalar_t__>();
        current_statement__ = 5;
        std::get<0>(std::get<1>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)]))) = 
          in__.template read<std::complex<local_scalar_t__>>();
        current_statement__ = 5;
        std::get<1>(std::get<1>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)]))) = 
          in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(4);
      }
      std::vector<
        std::tuple<local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>>>>
        arr_tuple_arr_tuple_p =
        std::vector<
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>>(3,
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>{DUMMY_VAR__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>>(4,
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>{DUMMY_VAR__,
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(5,
                  DUMMY_VAR__)})});
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 6;
        std::get<0>(arr_tuple_arr_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                             local_scalar_t__>();
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          current_statement__ = 6;
          std::get<0>(
            std::get<1>(arr_tuple_arr_tuple_p[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read<local_scalar_t__>();
          current_statement__ = 6;
          std::get<1>(
            std::get<1>(arr_tuple_arr_tuple_p[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(5);
        }
      }
      std::vector<
        std::tuple<local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__,
              std::vector<
                std::tuple<std::complex<local_scalar_t__>,
                  Eigen::Matrix<local_scalar_t__,-1,-1>>>>>>> very_deep_p =
        std::vector<
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>>>>(3,
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>>>{DUMMY_VAR__,
            std::vector<
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>>(4,
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>{DUMMY_VAR__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>(5,
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>{std::complex<local_scalar_t__>(DUMMY_VAR__,
                                                             DUMMY_VAR__),
                    Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(6, 7,
                      DUMMY_VAR__)})})});
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 7;
        std::get<0>(very_deep_p[(sym1__ - 1)]) = in__.template read<
                                                   local_scalar_t__>();
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          current_statement__ = 7;
          std::get<0>(std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read<local_scalar_t__>();
          current_statement__ = 7;
          for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
            current_statement__ = 7;
            std::get<0>(
              std::get<1>(std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ -
                1)])[(sym3__ - 1)]) = in__.template read<
                                        std::complex<local_scalar_t__>>();
            current_statement__ = 7;
            std::get<1>(
              std::get<1>(std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ -
                1)])[(sym3__ - 1)]) = in__.template read<
                                        Eigen::Matrix<local_scalar_t__,-1,-1>>(6,
                                        7);
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "arrays_tuples_nested_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<std::vector<double>, double> basic_p =
        std::tuple<std::vector<double>, double>{std::vector<double>(10,
                                                  std::numeric_limits<double>::quiet_NaN(
                                                    )),
          std::numeric_limits<double>::quiet_NaN()};
      current_statement__ = 1;
      std::get<0>(basic_p) = in__.template read<
                               std::vector<local_scalar_t__>>(10);
      current_statement__ = 1;
      std::get<1>(basic_p) = in__.template read<local_scalar_t__>();
      std::tuple<double, std::tuple<double, Eigen::Matrix<double,-1,1>>>
        tuple_tuple_p =
        std::tuple<double, std::tuple<double, Eigen::Matrix<double,-1,1>>>{
          std::numeric_limits<double>::quiet_NaN(),
          std::tuple<double, Eigen::Matrix<double,-1,1>>{std::numeric_limits<double>::quiet_NaN(
                                                           ),
            Eigen::Matrix<double,-1,1>::Constant(2,
              std::numeric_limits<double>::quiet_NaN())}};
      current_statement__ = 2;
      std::get<0>(tuple_tuple_p) = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      std::get<0>(std::get<1>(tuple_tuple_p)) = in__.template read<
                                                  local_scalar_t__>();
      current_statement__ = 2;
      std::get<1>(std::get<1>(tuple_tuple_p)) = in__.template read<
                                                  Eigen::Matrix<local_scalar_t__,-1,1>>(2);
      std::vector<
        std::tuple<std::complex<double>, std::vector<double>,
          Eigen::Matrix<double,-1,1>>> arr_tuple_p =
        std::vector<
          std::tuple<std::complex<double>, std::vector<double>,
            Eigen::Matrix<double,-1,1>>>(3,
          std::tuple<std::complex<double>, std::vector<double>,
            Eigen::Matrix<double,-1,1>>{std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                                               ),
                                          std::numeric_limits<double>::quiet_NaN(
                                            )),
            std::vector<double>(4, std::numeric_limits<double>::quiet_NaN()),
            Eigen::Matrix<double,-1,1>::Constant(3,
              std::numeric_limits<double>::quiet_NaN())});
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 3;
        std::get<0>(arr_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                   std::complex<local_scalar_t__>>();
        current_statement__ = 3;
        std::get<1>(arr_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                   std::vector<
                                                     local_scalar_t__>>(4);
        current_statement__ = 3;
        std::get<2>(arr_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                   Eigen::Matrix<local_scalar_t__,-1,1>>(3);
      }
      std::tuple<std::vector<double>, double,
        std::vector<std::tuple<double, std::vector<double>>>>
        tuple_arr_tuple_p =
        std::tuple<std::vector<double>, double,
          std::vector<std::tuple<double, std::vector<double>>>>{std::vector<
                                                                  double>(2,
                                                                  std::numeric_limits<double>::quiet_NaN(
                                                                    )),
          std::numeric_limits<double>::quiet_NaN(),
          std::vector<std::tuple<double, std::vector<double>>>(3,
            std::tuple<double, std::vector<double>>{std::numeric_limits<double>::quiet_NaN(
                                                      ),
              std::vector<double>(4,
                std::numeric_limits<double>::quiet_NaN())})};
      current_statement__ = 4;
      std::get<0>(tuple_arr_tuple_p) = in__.template read<
                                         std::vector<local_scalar_t__>>(2);
      current_statement__ = 4;
      std::get<1>(tuple_arr_tuple_p) = in__.template read<local_scalar_t__>();
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 4;
        std::get<0>(std::get<2>(tuple_arr_tuple_p)[(sym1__ - 1)]) = in__.template read<
                                                                    local_scalar_t__>();
        current_statement__ = 4;
        std::get<1>(std::get<2>(tuple_arr_tuple_p)[(sym1__ - 1)]) = in__.template read<
                                                                    std::vector<
                                                                    local_scalar_t__>>(4);
      }
      std::vector<
        std::tuple<double, double,
          std::tuple<double,
            std::tuple<std::complex<double>, Eigen::Matrix<double,-1,1>>>>>
        arr_tuple_tuple_p =
        std::vector<
          std::tuple<double, double,
            std::tuple<double,
              std::tuple<std::complex<double>, Eigen::Matrix<double,-1,1>>>>>(2,
          std::tuple<double, double,
            std::tuple<double,
              std::tuple<std::complex<double>, Eigen::Matrix<double,-1,1>>>>{
            std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN(),
            std::tuple<double,
              std::tuple<std::complex<double>, Eigen::Matrix<double,-1,1>>>{
              std::numeric_limits<double>::quiet_NaN(),
              std::tuple<std::complex<double>, Eigen::Matrix<double,-1,1>>{
                std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                  std::numeric_limits<double>::quiet_NaN()),
                Eigen::Matrix<double,-1,1>::Constant(4,
                  std::numeric_limits<double>::quiet_NaN())}}});
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 5;
        std::get<0>(arr_tuple_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                         local_scalar_t__>();
        current_statement__ = 5;
        std::get<1>(arr_tuple_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                         local_scalar_t__>();
        current_statement__ = 5;
        std::get<0>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)])) = in__.template read<
                                                                    local_scalar_t__>();
        current_statement__ = 5;
        std::get<0>(std::get<1>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)]))) = 
          in__.template read<std::complex<local_scalar_t__>>();
        current_statement__ = 5;
        std::get<1>(std::get<1>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)]))) = 
          in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(4);
      }
      std::vector<
        std::tuple<double,
          std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>>>
        arr_tuple_arr_tuple_p =
        std::vector<
          std::tuple<double,
            std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>>>(3,
          std::tuple<double,
            std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>>{
            std::numeric_limits<double>::quiet_NaN(),
            std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>(4,
              std::tuple<double, Eigen::Matrix<double,-1,1>>{std::numeric_limits<double>::quiet_NaN(
                                                               ),
                Eigen::Matrix<double,-1,1>::Constant(5,
                  std::numeric_limits<double>::quiet_NaN())})});
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 6;
        std::get<0>(arr_tuple_arr_tuple_p[(sym1__ - 1)]) = in__.template read<
                                                             local_scalar_t__>();
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          current_statement__ = 6;
          std::get<0>(
            std::get<1>(arr_tuple_arr_tuple_p[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read<local_scalar_t__>();
          current_statement__ = 6;
          std::get<1>(
            std::get<1>(arr_tuple_arr_tuple_p[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(5);
        }
      }
      std::vector<
        std::tuple<double,
          std::vector<
            std::tuple<double,
              std::vector<
                std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>>>>>>
        very_deep_p =
        std::vector<
          std::tuple<double,
            std::vector<
              std::tuple<double,
                std::vector<
                  std::tuple<std::complex<double>,
                    Eigen::Matrix<double,-1,-1>>>>>>>(3,
          std::tuple<double,
            std::vector<
              std::tuple<double,
                std::vector<
                  std::tuple<std::complex<double>,
                    Eigen::Matrix<double,-1,-1>>>>>>{std::numeric_limits<double>::quiet_NaN(
                                                       ),
            std::vector<
              std::tuple<double,
                std::vector<
                  std::tuple<std::complex<double>,
                    Eigen::Matrix<double,-1,-1>>>>>(4,
              std::tuple<double,
                std::vector<
                  std::tuple<std::complex<double>,
                    Eigen::Matrix<double,-1,-1>>>>{std::numeric_limits<double>::quiet_NaN(
                                                     ),
                std::vector<
                  std::tuple<std::complex<double>,
                    Eigen::Matrix<double,-1,-1>>>(5,
                  std::tuple<std::complex<double>,
                    Eigen::Matrix<double,-1,-1>>{std::complex<double>(
                                                   std::numeric_limits<double>::quiet_NaN(
                                                     ),
                                                   std::numeric_limits<double>::quiet_NaN(
                                                     )),
                    Eigen::Matrix<double,-1,-1>::Constant(6, 7,
                      std::numeric_limits<double>::quiet_NaN())})})});
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 7;
        std::get<0>(very_deep_p[(sym1__ - 1)]) = in__.template read<
                                                   local_scalar_t__>();
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          current_statement__ = 7;
          std::get<0>(std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read<local_scalar_t__>();
          current_statement__ = 7;
          for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
            current_statement__ = 7;
            std::get<0>(
              std::get<1>(std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ -
                1)])[(sym3__ - 1)]) = in__.template read<
                                        std::complex<local_scalar_t__>>();
            current_statement__ = 7;
            std::get<1>(
              std::get<1>(std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ -
                1)])[(sym3__ - 1)]) = in__.template read<
                                        Eigen::Matrix<local_scalar_t__,-1,-1>>(6,
                                        7);
          }
        }
      }
      out__.write(std::get<0>(basic_p));
      out__.write(std::get<1>(basic_p));
      out__.write(std::get<0>(tuple_tuple_p));
      out__.write(std::get<0>(std::get<1>(tuple_tuple_p)));
      out__.write(std::get<1>(std::get<1>(tuple_tuple_p)));
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        out__.write(std::get<0>(arr_tuple_p[(sym1__ - 1)]));
        out__.write(std::get<1>(arr_tuple_p[(sym1__ - 1)]));
        out__.write(std::get<2>(arr_tuple_p[(sym1__ - 1)]));
      }
      out__.write(std::get<0>(tuple_arr_tuple_p));
      out__.write(std::get<1>(tuple_arr_tuple_p));
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        out__.write(std::get<0>(std::get<2>(tuple_arr_tuple_p)[(sym1__ - 1)]));
        out__.write(std::get<1>(std::get<2>(tuple_arr_tuple_p)[(sym1__ - 1)]));
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        out__.write(std::get<0>(arr_tuple_tuple_p[(sym1__ - 1)]));
        out__.write(std::get<1>(arr_tuple_tuple_p[(sym1__ - 1)]));
        out__.write(std::get<0>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)])));
        out__.write(std::get<0>(
                      std::get<1>(
                        std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)]))));
        out__.write(std::get<1>(
                      std::get<1>(
                        std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)]))));
      }
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        out__.write(std::get<0>(arr_tuple_arr_tuple_p[(sym1__ - 1)]));
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          out__.write(std::get<0>(
                        std::get<1>(arr_tuple_arr_tuple_p[(sym1__ - 1)])[(sym2__
                        - 1)]));
          out__.write(std::get<1>(
                        std::get<1>(arr_tuple_arr_tuple_p[(sym1__ - 1)])[(sym2__
                        - 1)]));
        }
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        out__.write(std::get<0>(very_deep_p[(sym1__ - 1)]));
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          out__.write(std::get<0>(
                        std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ - 1)]));
          current_statement__ = 7;
          for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
            out__.write(std::get<0>(
                          std::get<1>(
                            std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ -
                            1)])[(sym3__ - 1)]));
            out__.write(std::get<1>(
                          std::get<1>(
                            std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ -
                            1)])[(sym3__ - 1)]));
          }
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      std::tuple<std::vector<local_scalar_t__>, local_scalar_t__> basic_p =
        std::tuple<std::vector<local_scalar_t__>, local_scalar_t__>{std::vector<
                                                                    local_scalar_t__>(10,
                                                                    DUMMY_VAR__),
          DUMMY_VAR__};
      current_statement__ = 1;
      stan::model::assign(std::get<0>(basic_p),
        in__.read<std::vector<local_scalar_t__>>(10),
        "assigning variable basic_p.1");
      current_statement__ = 1;
      std::get<1>(basic_p) = in__.read<local_scalar_t__>();
      out__.write(std::get<0>(basic_p));
      out__.write(std::get<1>(basic_p));
      std::tuple<local_scalar_t__,
        std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>>
        tuple_tuple_p =
        std::tuple<local_scalar_t__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>>{DUMMY_VAR__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>{DUMMY_VAR__,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__)}};
      current_statement__ = 2;
      std::get<0>(tuple_tuple_p) = in__.read<local_scalar_t__>();
      current_statement__ = 2;
      std::get<0>(std::get<1>(tuple_tuple_p)) = in__.read<local_scalar_t__>();
      current_statement__ = 2;
      stan::model::assign(std::get<1>(std::get<1>(tuple_tuple_p)),
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(2),
        "assigning variable tuple_tuple_p.2.2");
      out__.write(std::get<0>(tuple_tuple_p));
      out__.write(std::get<0>(std::get<1>(tuple_tuple_p)));
      out__.write(std::get<1>(std::get<1>(tuple_tuple_p)));
      std::vector<
        std::tuple<std::complex<local_scalar_t__>,
          std::vector<local_scalar_t__>,
          Eigen::Matrix<local_scalar_t__,-1,1>>> arr_tuple_p =
        std::vector<
          std::tuple<std::complex<local_scalar_t__>,
            std::vector<local_scalar_t__>,
            Eigen::Matrix<local_scalar_t__,-1,1>>>(3,
          std::tuple<std::complex<local_scalar_t__>,
            std::vector<local_scalar_t__>,
            Eigen::Matrix<local_scalar_t__,-1,1>>{std::complex<local_scalar_t__>(DUMMY_VAR__,
                                                    DUMMY_VAR__),
            std::vector<local_scalar_t__>(4, DUMMY_VAR__),
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__)});
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 3;
        std::get<0>(arr_tuple_p[(sym1__ - 1)]) = in__.read<
                                                   std::complex<local_scalar_t__>>();
        current_statement__ = 3;
        stan::model::assign(std::get<1>(arr_tuple_p[(sym1__ - 1)]),
          in__.read<std::vector<local_scalar_t__>>(4),
          "assigning variable arr_tuple_p.2");
        current_statement__ = 3;
        stan::model::assign(std::get<2>(arr_tuple_p[(sym1__ - 1)]),
          in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(3),
          "assigning variable arr_tuple_p.3");
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        out__.write(std::get<0>(arr_tuple_p[(sym1__ - 1)]));
        out__.write(std::get<1>(arr_tuple_p[(sym1__ - 1)]));
        out__.write(std::get<2>(arr_tuple_p[(sym1__ - 1)]));
      }
      std::tuple<std::vector<local_scalar_t__>, local_scalar_t__,
        std::vector<
          std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>>>
        tuple_arr_tuple_p =
        std::tuple<std::vector<local_scalar_t__>, local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>>>{
          std::vector<local_scalar_t__>(2, DUMMY_VAR__), DUMMY_VAR__,
          std::vector<
            std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>>(3,
            std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>{DUMMY_VAR__,
              std::vector<local_scalar_t__>(4, DUMMY_VAR__)})};
      current_statement__ = 4;
      stan::model::assign(std::get<0>(tuple_arr_tuple_p),
        in__.read<std::vector<local_scalar_t__>>(2),
        "assigning variable tuple_arr_tuple_p.1");
      current_statement__ = 4;
      std::get<1>(tuple_arr_tuple_p) = in__.read<local_scalar_t__>();
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 4;
        std::get<0>(std::get<2>(tuple_arr_tuple_p)[(sym1__ - 1)]) = in__.read<
                                                                    local_scalar_t__>();
        current_statement__ = 4;
        stan::model::assign(
          std::get<1>(std::get<2>(tuple_arr_tuple_p)[(sym1__ - 1)]),
          in__.read<std::vector<local_scalar_t__>>(4),
          "assigning variable tuple_arr_tuple_p.3.2");
      }
      out__.write(std::get<0>(tuple_arr_tuple_p));
      out__.write(std::get<1>(tuple_arr_tuple_p));
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        out__.write(std::get<0>(std::get<2>(tuple_arr_tuple_p)[(sym1__ - 1)]));
        out__.write(std::get<1>(std::get<2>(tuple_arr_tuple_p)[(sym1__ - 1)]));
      }
      std::vector<
        std::tuple<local_scalar_t__, local_scalar_t__,
          std::tuple<local_scalar_t__,
            std::tuple<std::complex<local_scalar_t__>,
              Eigen::Matrix<local_scalar_t__,-1,1>>>>> arr_tuple_tuple_p =
        std::vector<
          std::tuple<local_scalar_t__, local_scalar_t__,
            std::tuple<local_scalar_t__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>>(2,
          std::tuple<local_scalar_t__, local_scalar_t__,
            std::tuple<local_scalar_t__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>{DUMMY_VAR__,
            DUMMY_VAR__,
            std::tuple<local_scalar_t__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>>{DUMMY_VAR__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>{std::complex<local_scalar_t__>(DUMMY_VAR__,
                                                        DUMMY_VAR__),
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4,
                  DUMMY_VAR__)}}});
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 5;
        std::get<0>(arr_tuple_tuple_p[(sym1__ - 1)]) = in__.read<
                                                         local_scalar_t__>();
        current_statement__ = 5;
        std::get<1>(arr_tuple_tuple_p[(sym1__ - 1)]) = in__.read<
                                                         local_scalar_t__>();
        current_statement__ = 5;
        std::get<0>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)])) = in__.read<
                                                                    local_scalar_t__>();
        current_statement__ = 5;
        std::get<0>(std::get<1>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)]))) = 
          in__.read<std::complex<local_scalar_t__>>();
        current_statement__ = 5;
        stan::model::assign(
          std::get<1>(
            std::get<1>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)]))),
          in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(4),
          "assigning variable arr_tuple_tuple_p.3.2.2");
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        out__.write(std::get<0>(arr_tuple_tuple_p[(sym1__ - 1)]));
        out__.write(std::get<1>(arr_tuple_tuple_p[(sym1__ - 1)]));
        out__.write(std::get<0>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)])));
        out__.write(std::get<0>(
                      std::get<1>(
                        std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)]))));
        out__.write(std::get<1>(
                      std::get<1>(
                        std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)]))));
      }
      std::vector<
        std::tuple<local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>>>>
        arr_tuple_arr_tuple_p =
        std::vector<
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>>(3,
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>{DUMMY_VAR__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>>(4,
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>{DUMMY_VAR__,
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(5,
                  DUMMY_VAR__)})});
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 6;
        std::get<0>(arr_tuple_arr_tuple_p[(sym1__ - 1)]) = in__.read<
                                                             local_scalar_t__>();
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          current_statement__ = 6;
          std::get<0>(
            std::get<1>(arr_tuple_arr_tuple_p[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.read<local_scalar_t__>();
          current_statement__ = 6;
          stan::model::assign(
            std::get<1>(
              std::get<1>(arr_tuple_arr_tuple_p[(sym1__ - 1)])[(sym2__ - 1)]),
            in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(5),
            "assigning variable arr_tuple_arr_tuple_p.2.2");
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        out__.write(std::get<0>(arr_tuple_arr_tuple_p[(sym1__ - 1)]));
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          out__.write(std::get<0>(
                        std::get<1>(arr_tuple_arr_tuple_p[(sym1__ - 1)])[(sym2__
                        - 1)]));
          out__.write(std::get<1>(
                        std::get<1>(arr_tuple_arr_tuple_p[(sym1__ - 1)])[(sym2__
                        - 1)]));
        }
      }
      std::vector<
        std::tuple<local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__,
              std::vector<
                std::tuple<std::complex<local_scalar_t__>,
                  Eigen::Matrix<local_scalar_t__,-1,-1>>>>>>> very_deep_p =
        std::vector<
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>>>>(3,
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>>>{DUMMY_VAR__,
            std::vector<
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>>(4,
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>{DUMMY_VAR__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>(5,
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>{std::complex<local_scalar_t__>(DUMMY_VAR__,
                                                             DUMMY_VAR__),
                    Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(6, 7,
                      DUMMY_VAR__)})})});
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 7;
        std::get<0>(very_deep_p[(sym1__ - 1)]) = in__.read<
                                                   local_scalar_t__>();
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          current_statement__ = 7;
          std::get<0>(std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.read<local_scalar_t__>();
          current_statement__ = 7;
          for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
            current_statement__ = 7;
            std::get<0>(
              std::get<1>(std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ -
                1)])[(sym3__ - 1)]) = in__.read<
                                        std::complex<local_scalar_t__>>();
            current_statement__ = 7;
            stan::model::assign(
              std::get<1>(
                std::get<1>(std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ -
                  1)])[(sym3__ - 1)]),
              in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(6, 7),
              "assigning variable very_deep_p.2.2.2");
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        out__.write(std::get<0>(very_deep_p[(sym1__ - 1)]));
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          out__.write(std::get<0>(
                        std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ - 1)]));
          for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
            out__.write(std::get<0>(
                          std::get<1>(
                            std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ -
                            1)])[(sym3__ - 1)]));
            out__.write(std::get<1>(
                          std::get<1>(
                            std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ -
                            1)])[(sym3__ - 1)]));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "basic_p.1",
        "double", std::vector<size_t>{static_cast<size_t>(10)});
      context__.validate_dims("parameter initialization", "basic_p.2",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "tuple_tuple_p.1",
        "double", std::vector<size_t>{});
      context__.validate_dims("parameter initialization",
        "tuple_tuple_p.2.1", "double", std::vector<size_t>{});
      context__.validate_dims("parameter initialization",
        "tuple_tuple_p.2.2", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "arr_tuple_p.1",
        "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(2)});
      context__.validate_dims("parameter initialization", "arr_tuple_p.2",
        "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4)});
      context__.validate_dims("parameter initialization", "arr_tuple_p.3",
        "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization",
        "tuple_arr_tuple_p.1", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      context__.validate_dims("parameter initialization",
        "tuple_arr_tuple_p.2", "double", std::vector<size_t>{});
      context__.validate_dims("parameter initialization",
        "tuple_arr_tuple_p.3.1", "double",
        std::vector<size_t>{static_cast<size_t>(3)});
      context__.validate_dims("parameter initialization",
        "tuple_arr_tuple_p.3.2", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization",
        "arr_tuple_tuple_p.1", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      context__.validate_dims("parameter initialization",
        "arr_tuple_tuple_p.2", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      context__.validate_dims("parameter initialization",
        "arr_tuple_tuple_p.3.1", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      context__.validate_dims("parameter initialization",
        "arr_tuple_tuple_p.3.2.1", "double",
        std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)});
      context__.validate_dims("parameter initialization",
        "arr_tuple_tuple_p.3.2.2", "double",
        std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(4)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization",
        "arr_tuple_arr_tuple_p.1", "double",
        std::vector<size_t>{static_cast<size_t>(3)});
      context__.validate_dims("parameter initialization",
        "arr_tuple_arr_tuple_p.2.1", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4)});
      context__.validate_dims("parameter initialization",
        "arr_tuple_arr_tuple_p.2.2", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4),
          static_cast<size_t>(5)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "very_deep_p.1",
        "double", std::vector<size_t>{static_cast<size_t>(3)});
      context__.validate_dims("parameter initialization", "very_deep_p.2.1",
        "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4)});
      context__.validate_dims("parameter initialization",
        "very_deep_p.2.2.1", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4),
          static_cast<size_t>(5), static_cast<size_t>(2)});
      context__.validate_dims("parameter initialization",
        "very_deep_p.2.2.2", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4),
          static_cast<size_t>(5), static_cast<size_t>(6),
          static_cast<size_t>(7)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::tuple<std::vector<local_scalar_t__>, local_scalar_t__> basic_p =
        std::tuple<std::vector<local_scalar_t__>, local_scalar_t__>{std::vector<
                                                                    local_scalar_t__>(10,
                                                                    DUMMY_VAR__),
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(basic_p) = context__.vals_r("basic_p.1");
      std::get<1>(basic_p) = context__.vals_r("basic_p.2")[(1 - 1)];
      out__.write(std::get<0>(basic_p));
      out__.write(std::get<1>(basic_p));
      std::tuple<local_scalar_t__,
        std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>>
        tuple_tuple_p =
        std::tuple<local_scalar_t__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>>{DUMMY_VAR__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>{DUMMY_VAR__,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__)}};
      current_statement__ = 2;
      std::get<0>(tuple_tuple_p) = context__.vals_r("tuple_tuple_p.1")[(1 -
        1)];
      std::get<0>(std::get<1>(tuple_tuple_p)) = context__.vals_r("tuple_tuple_p.2.1")[(1
        - 1)];
      {
        std::vector<local_scalar_t__> tuple_tuple_p_dot_2_dot_2_flat__;
        tuple_tuple_p_dot_2_dot_2_flat__ = context__.vals_r("tuple_tuple_p.2.2");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(std::get<1>(std::get<1>(tuple_tuple_p)),
            tuple_tuple_p_dot_2_dot_2_flat__[(pos__ - 1)],
            "assigning variable tuple_tuple_p.2.2",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(std::get<0>(tuple_tuple_p));
      out__.write(std::get<0>(std::get<1>(tuple_tuple_p)));
      out__.write(std::get<1>(std::get<1>(tuple_tuple_p)));
      std::vector<
        std::tuple<std::complex<local_scalar_t__>,
          std::vector<local_scalar_t__>,
          Eigen::Matrix<local_scalar_t__,-1,1>>> arr_tuple_p =
        std::vector<
          std::tuple<std::complex<local_scalar_t__>,
            std::vector<local_scalar_t__>,
            Eigen::Matrix<local_scalar_t__,-1,1>>>(3,
          std::tuple<std::complex<local_scalar_t__>,
            std::vector<local_scalar_t__>,
            Eigen::Matrix<local_scalar_t__,-1,1>>{std::complex<local_scalar_t__>(DUMMY_VAR__,
                                                    DUMMY_VAR__),
            std::vector<local_scalar_t__>(4, DUMMY_VAR__),
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__)});
      {
        std::vector<std::complex<local_scalar_t__>> arr_tuple_p_dot_1_flat__;
        current_statement__ = 3;
        arr_tuple_p_dot_1_flat__ = context__.vals_c("arr_tuple_p.1");
        int arr_tuple_p_dot_1_flat__pos__;
        arr_tuple_p_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__> arr_tuple_p_dot_2_flat__;
        current_statement__ = 3;
        arr_tuple_p_dot_2_flat__ = context__.vals_r("arr_tuple_p.2");
        int arr_tuple_p_dot_2_flat__pos__;
        arr_tuple_p_dot_2_flat__pos__ = 1;
        std::vector<local_scalar_t__> arr_tuple_p_dot_3_flat__;
        current_statement__ = 3;
        arr_tuple_p_dot_3_flat__ = context__.vals_r("arr_tuple_p.3");
        int arr_tuple_p_dot_3_flat__pos__;
        arr_tuple_p_dot_3_flat__pos__ = 1;
        std::complex<double> arr_tuple_p_dot_1_temp__ =
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN());
        std::vector<double> arr_tuple_p_dot_2_temp__ =
          std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
        Eigen::Matrix<double,-1,1> arr_tuple_p_dot_3_temp__ =
          Eigen::Matrix<double,-1,1>::Constant(3,
            std::numeric_limits<double>::quiet_NaN());
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          arr_tuple_p_dot_1_temp__ = arr_tuple_p_dot_1_flat__[(arr_tuple_p_dot_1_flat__pos__
            - 1)];
          arr_tuple_p_dot_1_flat__pos__ = (arr_tuple_p_dot_1_flat__pos__ +
            2);
          stan::model::assign(arr_tuple_p_dot_2_temp__,
            stan::model::rvalue(arr_tuple_p_dot_2_flat__,
              "arr_tuple_p_dot_2_flat__",
              stan::model::index_min_max(arr_tuple_p_dot_2_flat__pos__,
                ((arr_tuple_p_dot_2_flat__pos__ + 4) - 1))),
            "assigning variable arr_tuple_p_dot_2_temp__");
          arr_tuple_p_dot_2_flat__pos__ = (arr_tuple_p_dot_2_flat__pos__ +
            4);
          {
            std::vector<local_scalar_t__> arr_tuple_p_dot_3_temp___flat__;
            stan::model::assign(arr_tuple_p_dot_3_temp___flat__,
              stan::model::rvalue(arr_tuple_p_dot_3_flat__,
                "arr_tuple_p_dot_3_flat__",
                stan::model::index_min_max(arr_tuple_p_dot_3_flat__pos__,
                  ((arr_tuple_p_dot_3_flat__pos__ + 3) - 1))),
              "assigning variable arr_tuple_p_dot_3_temp___flat__");
            pos__ = 1;
            for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
              stan::model::assign(arr_tuple_p_dot_3_temp__,
                arr_tuple_p_dot_3_temp___flat__[(pos__ - 1)],
                "assigning variable arr_tuple_p_dot_3_temp__",
                stan::model::index_uni(sym2__));
              pos__ = (pos__ + 1);
            }
            arr_tuple_p_dot_3_flat__pos__ = (arr_tuple_p_dot_3_flat__pos__ +
              3);
          }
          stan::model::assign(arr_tuple_p,
            std::tuple<std::complex<double>, std::vector<double>,
              Eigen::Matrix<double,-1,1>>(arr_tuple_p_dot_1_temp__,
              arr_tuple_p_dot_2_temp__, arr_tuple_p_dot_3_temp__),
            "assigning variable arr_tuple_p", stan::model::index_uni(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        out__.write(std::get<0>(arr_tuple_p[(sym1__ - 1)]));
        out__.write(std::get<1>(arr_tuple_p[(sym1__ - 1)]));
        out__.write(std::get<2>(arr_tuple_p[(sym1__ - 1)]));
      }
      std::tuple<std::vector<local_scalar_t__>, local_scalar_t__,
        std::vector<
          std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>>>
        tuple_arr_tuple_p =
        std::tuple<std::vector<local_scalar_t__>, local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>>>{
          std::vector<local_scalar_t__>(2, DUMMY_VAR__), DUMMY_VAR__,
          std::vector<
            std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>>(3,
            std::tuple<local_scalar_t__, std::vector<local_scalar_t__>>{DUMMY_VAR__,
              std::vector<local_scalar_t__>(4, DUMMY_VAR__)})};
      current_statement__ = 4;
      std::get<0>(tuple_arr_tuple_p) = context__.vals_r("tuple_arr_tuple_p.1");
      std::get<1>(tuple_arr_tuple_p) = context__.vals_r("tuple_arr_tuple_p.2")[(1
        - 1)];
      {
        std::vector<local_scalar_t__> tuple_arr_tuple_p_dot_3_dot_1_flat__;
        tuple_arr_tuple_p_dot_3_dot_1_flat__ = context__.vals_r("tuple_arr_tuple_p.3.1");
        int tuple_arr_tuple_p_dot_3_dot_1_flat__pos__;
        tuple_arr_tuple_p_dot_3_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__> tuple_arr_tuple_p_dot_3_dot_2_flat__;
        tuple_arr_tuple_p_dot_3_dot_2_flat__ = context__.vals_r("tuple_arr_tuple_p.3.2");
        int tuple_arr_tuple_p_dot_3_dot_2_flat__pos__;
        tuple_arr_tuple_p_dot_3_dot_2_flat__pos__ = 1;
        double tuple_arr_tuple_p_dot_3_dot_1_temp__ =
          std::numeric_limits<double>::quiet_NaN();
        std::vector<double> tuple_arr_tuple_p_dot_3_dot_2_temp__ =
          std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          tuple_arr_tuple_p_dot_3_dot_1_temp__ = tuple_arr_tuple_p_dot_3_dot_1_flat__[(tuple_arr_tuple_p_dot_3_dot_1_flat__pos__
            - 1)];
          tuple_arr_tuple_p_dot_3_dot_1_flat__pos__ = (tuple_arr_tuple_p_dot_3_dot_1_flat__pos__
            + 1);
          stan::model::assign(tuple_arr_tuple_p_dot_3_dot_2_temp__,
            stan::model::rvalue(tuple_arr_tuple_p_dot_3_dot_2_flat__,
              "tuple_arr_tuple_p_dot_3_dot_2_flat__",
              stan::model::index_min_max(
                tuple_arr_tuple_p_dot_3_dot_2_flat__pos__,
                ((tuple_arr_tuple_p_dot_3_dot_2_flat__pos__ + 4) - 1))),
            "assigning variable tuple_arr_tuple_p_dot_3_dot_2_temp__");
          tuple_arr_tuple_p_dot_3_dot_2_flat__pos__ = (tuple_arr_tuple_p_dot_3_dot_2_flat__pos__
            + 4);
          stan::model::assign(std::get<2>(tuple_arr_tuple_p),
            std::tuple<double, std::vector<double>>(tuple_arr_tuple_p_dot_3_dot_1_temp__,
              tuple_arr_tuple_p_dot_3_dot_2_temp__),
            "assigning variable tuple_arr_tuple_p.3",
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(std::get<0>(tuple_arr_tuple_p));
      out__.write(std::get<1>(tuple_arr_tuple_p));
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        out__.write(std::get<0>(std::get<2>(tuple_arr_tuple_p)[(sym1__ - 1)]));
        out__.write(std::get<1>(std::get<2>(tuple_arr_tuple_p)[(sym1__ - 1)]));
      }
      std::vector<
        std::tuple<local_scalar_t__, local_scalar_t__,
          std::tuple<local_scalar_t__,
            std::tuple<std::complex<local_scalar_t__>,
              Eigen::Matrix<local_scalar_t__,-1,1>>>>> arr_tuple_tuple_p =
        std::vector<
          std::tuple<local_scalar_t__, local_scalar_t__,
            std::tuple<local_scalar_t__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>>(2,
          std::tuple<local_scalar_t__, local_scalar_t__,
            std::tuple<local_scalar_t__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>{DUMMY_VAR__,
            DUMMY_VAR__,
            std::tuple<local_scalar_t__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>>{DUMMY_VAR__,
              std::tuple<std::complex<local_scalar_t__>,
                Eigen::Matrix<local_scalar_t__,-1,1>>{std::complex<local_scalar_t__>(DUMMY_VAR__,
                                                        DUMMY_VAR__),
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4,
                  DUMMY_VAR__)}}});
      {
        std::vector<local_scalar_t__> arr_tuple_tuple_p_dot_1_flat__;
        current_statement__ = 5;
        arr_tuple_tuple_p_dot_1_flat__ = context__.vals_r("arr_tuple_tuple_p.1");
        int arr_tuple_tuple_p_dot_1_flat__pos__;
        arr_tuple_tuple_p_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__> arr_tuple_tuple_p_dot_2_flat__;
        current_statement__ = 5;
        arr_tuple_tuple_p_dot_2_flat__ = context__.vals_r("arr_tuple_tuple_p.2");
        int arr_tuple_tuple_p_dot_2_flat__pos__;
        arr_tuple_tuple_p_dot_2_flat__pos__ = 1;
        std::vector<local_scalar_t__> arr_tuple_tuple_p_dot_3_dot_1_flat__;
        current_statement__ = 5;
        arr_tuple_tuple_p_dot_3_dot_1_flat__ = context__.vals_r("arr_tuple_tuple_p.3.1");
        int arr_tuple_tuple_p_dot_3_dot_1_flat__pos__;
        arr_tuple_tuple_p_dot_3_dot_1_flat__pos__ = 1;
        std::vector<std::complex<local_scalar_t__>>
          arr_tuple_tuple_p_dot_3_dot_2_dot_1_flat__;
        current_statement__ = 5;
        arr_tuple_tuple_p_dot_3_dot_2_dot_1_flat__ = context__.vals_c("arr_tuple_tuple_p.3.2.1");
        int arr_tuple_tuple_p_dot_3_dot_2_dot_1_flat__pos__;
        arr_tuple_tuple_p_dot_3_dot_2_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__>
          arr_tuple_tuple_p_dot_3_dot_2_dot_2_flat__;
        current_statement__ = 5;
        arr_tuple_tuple_p_dot_3_dot_2_dot_2_flat__ = context__.vals_r("arr_tuple_tuple_p.3.2.2");
        int arr_tuple_tuple_p_dot_3_dot_2_dot_2_flat__pos__;
        arr_tuple_tuple_p_dot_3_dot_2_dot_2_flat__pos__ = 1;
        double arr_tuple_tuple_p_dot_1_temp__ =
          std::numeric_limits<double>::quiet_NaN();
        double arr_tuple_tuple_p_dot_2_temp__ =
          std::numeric_limits<double>::quiet_NaN();
        std::tuple<double,
          std::tuple<std::complex<double>, Eigen::Matrix<double,-1,1>>>
          arr_tuple_tuple_p_dot_3_temp__ =
          std::tuple<double,
            std::tuple<std::complex<double>, Eigen::Matrix<double,-1,1>>>{
            std::numeric_limits<double>::quiet_NaN(),
            std::tuple<std::complex<double>, Eigen::Matrix<double,-1,1>>{
              std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                std::numeric_limits<double>::quiet_NaN()),
              Eigen::Matrix<double,-1,1>::Constant(4,
                std::numeric_limits<double>::quiet_NaN())}};
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          arr_tuple_tuple_p_dot_1_temp__ = arr_tuple_tuple_p_dot_1_flat__[(arr_tuple_tuple_p_dot_1_flat__pos__
            - 1)];
          arr_tuple_tuple_p_dot_1_flat__pos__ = (arr_tuple_tuple_p_dot_1_flat__pos__
            + 1);
          arr_tuple_tuple_p_dot_2_temp__ = arr_tuple_tuple_p_dot_2_flat__[(arr_tuple_tuple_p_dot_2_flat__pos__
            - 1)];
          arr_tuple_tuple_p_dot_2_flat__pos__ = (arr_tuple_tuple_p_dot_2_flat__pos__
            + 1);
          stan::model::assign(std::get<0>(arr_tuple_tuple_p_dot_3_temp__),
            arr_tuple_tuple_p_dot_3_dot_1_flat__[(arr_tuple_tuple_p_dot_3_dot_1_flat__pos__
            - 1)], "assigning variable arr_tuple_tuple_p_dot_3_temp__.1");
          arr_tuple_tuple_p_dot_3_dot_1_flat__pos__ = (arr_tuple_tuple_p_dot_3_dot_1_flat__pos__
            + 1);
          stan::model::assign(
            std::get<0>(std::get<1>(arr_tuple_tuple_p_dot_3_temp__)),
            arr_tuple_tuple_p_dot_3_dot_2_dot_1_flat__[(arr_tuple_tuple_p_dot_3_dot_2_dot_1_flat__pos__
            - 1)], "assigning variable arr_tuple_tuple_p_dot_3_temp__.2.1");
          arr_tuple_tuple_p_dot_3_dot_2_dot_1_flat__pos__ = (arr_tuple_tuple_p_dot_3_dot_2_dot_1_flat__pos__
            + 2);
          {
            std::vector<local_scalar_t__>
              arr_tuple_tuple_p_dot_3_temp___dot_2_dot_2_flat__;
            stan::model::assign(
              arr_tuple_tuple_p_dot_3_temp___dot_2_dot_2_flat__,
              stan::model::rvalue(arr_tuple_tuple_p_dot_3_dot_2_dot_2_flat__,
                "arr_tuple_tuple_p_dot_3_dot_2_dot_2_flat__",
                stan::model::index_min_max(
                  arr_tuple_tuple_p_dot_3_dot_2_dot_2_flat__pos__,
                  ((arr_tuple_tuple_p_dot_3_dot_2_dot_2_flat__pos__ + 4) - 1))),
              "assigning variable arr_tuple_tuple_p_dot_3_temp___dot_2_dot_2_flat__");
            pos__ = 1;
            for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
              stan::model::assign(
                std::get<1>(std::get<1>(arr_tuple_tuple_p_dot_3_temp__)),
                arr_tuple_tuple_p_dot_3_temp___dot_2_dot_2_flat__[(pos__ -
                1)], "assigning variable arr_tuple_tuple_p_dot_3_temp__.2.2",
                stan::model::index_uni(sym2__));
              pos__ = (pos__ + 1);
            }
            arr_tuple_tuple_p_dot_3_dot_2_dot_2_flat__pos__ = (arr_tuple_tuple_p_dot_3_dot_2_dot_2_flat__pos__
              + 4);
          }
          stan::model::assign(arr_tuple_tuple_p,
            std::tuple<double, double,
              std::tuple<double,
                std::tuple<std::complex<double>, Eigen::Matrix<double,-1,1>>>>(arr_tuple_tuple_p_dot_1_temp__,
              arr_tuple_tuple_p_dot_2_temp__, arr_tuple_tuple_p_dot_3_temp__),
            "assigning variable arr_tuple_tuple_p",
            stan::model::index_uni(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        out__.write(std::get<0>(arr_tuple_tuple_p[(sym1__ - 1)]));
        out__.write(std::get<1>(arr_tuple_tuple_p[(sym1__ - 1)]));
        out__.write(std::get<0>(std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)])));
        out__.write(std::get<0>(
                      std::get<1>(
                        std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)]))));
        out__.write(std::get<1>(
                      std::get<1>(
                        std::get<2>(arr_tuple_tuple_p[(sym1__ - 1)]))));
      }
      std::vector<
        std::tuple<local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>>>>
        arr_tuple_arr_tuple_p =
        std::vector<
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>>(3,
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>>>{DUMMY_VAR__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>>(4,
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>{DUMMY_VAR__,
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(5,
                  DUMMY_VAR__)})});
      {
        std::vector<local_scalar_t__> arr_tuple_arr_tuple_p_dot_1_flat__;
        current_statement__ = 6;
        arr_tuple_arr_tuple_p_dot_1_flat__ = context__.vals_r("arr_tuple_arr_tuple_p.1");
        int arr_tuple_arr_tuple_p_dot_1_flat__pos__;
        arr_tuple_arr_tuple_p_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__>
          arr_tuple_arr_tuple_p_dot_2_dot_1_flat__;
        current_statement__ = 6;
        arr_tuple_arr_tuple_p_dot_2_dot_1_flat__ = context__.vals_r("arr_tuple_arr_tuple_p.2.1");
        int arr_tuple_arr_tuple_p_dot_2_dot_1_flat__pos__;
        arr_tuple_arr_tuple_p_dot_2_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__>
          arr_tuple_arr_tuple_p_dot_2_dot_2_flat__;
        current_statement__ = 6;
        arr_tuple_arr_tuple_p_dot_2_dot_2_flat__ = context__.vals_r("arr_tuple_arr_tuple_p.2.2");
        int arr_tuple_arr_tuple_p_dot_2_dot_2_flat__pos__;
        arr_tuple_arr_tuple_p_dot_2_dot_2_flat__pos__ = 1;
        double arr_tuple_arr_tuple_p_dot_1_temp__ =
          std::numeric_limits<double>::quiet_NaN();
        std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>
          arr_tuple_arr_tuple_p_dot_2_temp__ =
          std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>(4,
            std::tuple<double, Eigen::Matrix<double,-1,1>>{std::numeric_limits<double>::quiet_NaN(
                                                             ),
              Eigen::Matrix<double,-1,1>::Constant(5,
                std::numeric_limits<double>::quiet_NaN())});
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          arr_tuple_arr_tuple_p_dot_1_temp__ = arr_tuple_arr_tuple_p_dot_1_flat__[(arr_tuple_arr_tuple_p_dot_1_flat__pos__
            - 1)];
          arr_tuple_arr_tuple_p_dot_1_flat__pos__ = (arr_tuple_arr_tuple_p_dot_1_flat__pos__
            + 1);
          {
            double arr_tuple_arr_tuple_p_dot_2_dot_1_temp__ =
              std::numeric_limits<double>::quiet_NaN();
            Eigen::Matrix<double,-1,1>
              arr_tuple_arr_tuple_p_dot_2_dot_2_temp__ =
              Eigen::Matrix<double,-1,1>::Constant(5,
                std::numeric_limits<double>::quiet_NaN());
            for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
              arr_tuple_arr_tuple_p_dot_2_dot_1_temp__ = arr_tuple_arr_tuple_p_dot_2_dot_1_flat__[(arr_tuple_arr_tuple_p_dot_2_dot_1_flat__pos__
                - 1)];
              arr_tuple_arr_tuple_p_dot_2_dot_1_flat__pos__ = (arr_tuple_arr_tuple_p_dot_2_dot_1_flat__pos__
                + 1);
              {
                std::vector<local_scalar_t__>
                  arr_tuple_arr_tuple_p_dot_2_dot_2_temp___flat__;
                stan::model::assign(
                  arr_tuple_arr_tuple_p_dot_2_dot_2_temp___flat__,
                  stan::model::rvalue(
                    arr_tuple_arr_tuple_p_dot_2_dot_2_flat__,
                    "arr_tuple_arr_tuple_p_dot_2_dot_2_flat__",
                    stan::model::index_min_max(
                      arr_tuple_arr_tuple_p_dot_2_dot_2_flat__pos__,
                      ((arr_tuple_arr_tuple_p_dot_2_dot_2_flat__pos__ + 5) -
                      1))),
                  "assigning variable arr_tuple_arr_tuple_p_dot_2_dot_2_temp___flat__");
                pos__ = 1;
                for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                  stan::model::assign(
                    arr_tuple_arr_tuple_p_dot_2_dot_2_temp__,
                    arr_tuple_arr_tuple_p_dot_2_dot_2_temp___flat__[(pos__ -
                    1)],
                    "assigning variable arr_tuple_arr_tuple_p_dot_2_dot_2_temp__",
                    stan::model::index_uni(sym3__));
                  pos__ = (pos__ + 1);
                }
                arr_tuple_arr_tuple_p_dot_2_dot_2_flat__pos__ = (arr_tuple_arr_tuple_p_dot_2_dot_2_flat__pos__
                  + 5);
              }
              stan::model::assign(arr_tuple_arr_tuple_p_dot_2_temp__,
                std::tuple<double, Eigen::Matrix<double,-1,1>>(arr_tuple_arr_tuple_p_dot_2_dot_1_temp__,
                  arr_tuple_arr_tuple_p_dot_2_dot_2_temp__),
                "assigning variable arr_tuple_arr_tuple_p_dot_2_temp__",
                stan::model::index_uni(sym2__));
            }
          }
          stan::model::assign(arr_tuple_arr_tuple_p,
            std::tuple<double,
              std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>>(arr_tuple_arr_tuple_p_dot_1_temp__,
              arr_tuple_arr_tuple_p_dot_2_temp__),
            "assigning variable arr_tuple_arr_tuple_p",
            stan::model::index_uni(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        out__.write(std::get<0>(arr_tuple_arr_tuple_p[(sym1__ - 1)]));
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          out__.write(std::get<0>(
                        std::get<1>(arr_tuple_arr_tuple_p[(sym1__ - 1)])[(sym2__
                        - 1)]));
          out__.write(std::get<1>(
                        std::get<1>(arr_tuple_arr_tuple_p[(sym1__ - 1)])[(sym2__
                        - 1)]));
        }
      }
      std::vector<
        std::tuple<local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__,
              std::vector<
                std::tuple<std::complex<local_scalar_t__>,
                  Eigen::Matrix<local_scalar_t__,-1,-1>>>>>>> very_deep_p =
        std::vector<
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>>>>(3,
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>>>{DUMMY_VAR__,
            std::vector<
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>>(4,
              std::tuple<local_scalar_t__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>>{DUMMY_VAR__,
                std::vector<
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>>(5,
                  std::tuple<std::complex<local_scalar_t__>,
                    Eigen::Matrix<local_scalar_t__,-1,-1>>{std::complex<local_scalar_t__>(DUMMY_VAR__,
                                                             DUMMY_VAR__),
                    Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(6, 7,
                      DUMMY_VAR__)})})});
      {
        std::vector<local_scalar_t__> very_deep_p_dot_1_flat__;
        current_statement__ = 7;
        very_deep_p_dot_1_flat__ = context__.vals_r("very_deep_p.1");
        int very_deep_p_dot_1_flat__pos__;
        very_deep_p_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__> very_deep_p_dot_2_dot_1_flat__;
        current_statement__ = 7;
        very_deep_p_dot_2_dot_1_flat__ = context__.vals_r("very_deep_p.2.1");
        int very_deep_p_dot_2_dot_1_flat__pos__;
        very_deep_p_dot_2_dot_1_flat__pos__ = 1;
        std::vector<std::complex<local_scalar_t__>>
          very_deep_p_dot_2_dot_2_dot_1_flat__;
        current_statement__ = 7;
        very_deep_p_dot_2_dot_2_dot_1_flat__ = context__.vals_c("very_deep_p.2.2.1");
        int very_deep_p_dot_2_dot_2_dot_1_flat__pos__;
        very_deep_p_dot_2_dot_2_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__> very_deep_p_dot_2_dot_2_dot_2_flat__;
        current_statement__ = 7;
        very_deep_p_dot_2_dot_2_dot_2_flat__ = context__.vals_r("very_deep_p.2.2.2");
        int very_deep_p_dot_2_dot_2_dot_2_flat__pos__;
        very_deep_p_dot_2_dot_2_dot_2_flat__pos__ = 1;
        double very_deep_p_dot_1_temp__ =
          std::numeric_limits<double>::quiet_NaN();
        std::vector<
          std::tuple<double,
            std::vector<
              std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>>>>
          very_deep_p_dot_2_temp__ =
          std::vector<
            std::tuple<double,
              std::vector<
                std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>>>>(4,
            std::tuple<double,
              std::vector<
                std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>>>{
              std::numeric_limits<double>::quiet_NaN(),
              std::vector<
                std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>>(5,
                std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>{
                  std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                    std::numeric_limits<double>::quiet_NaN()),
                  Eigen::Matrix<double,-1,-1>::Constant(6, 7,
                    std::numeric_limits<double>::quiet_NaN())})});
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          very_deep_p_dot_1_temp__ = very_deep_p_dot_1_flat__[(very_deep_p_dot_1_flat__pos__
            - 1)];
          very_deep_p_dot_1_flat__pos__ = (very_deep_p_dot_1_flat__pos__ +
            1);
          {
            double very_deep_p_dot_2_dot_1_temp__ =
              std::numeric_limits<double>::quiet_NaN();
            std::vector<
              std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>>
              very_deep_p_dot_2_dot_2_temp__ =
              std::vector<
                std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>>(5,
                std::tuple<std::complex<double>, Eigen::Matrix<double,-1,-1>>{
                  std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                    std::numeric_limits<double>::quiet_NaN()),
                  Eigen::Matrix<double,-1,-1>::Constant(6, 7,
                    std::numeric_limits<double>::quiet_NaN())});
            for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
              very_deep_p_dot_2_dot_1_temp__ = very_deep_p_dot_2_dot_1_flat__[(very_deep_p_dot_2_dot_1_flat__pos__
                - 1)];
              very_deep_p_dot_2_dot_1_flat__pos__ = (very_deep_p_dot_2_dot_1_flat__pos__
                + 1);
              {
                std::complex<double> very_deep_p_dot_2_dot_2_dot_1_temp__ =
                  std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                    std::numeric_limits<double>::quiet_NaN());
                Eigen::Matrix<double,-1,-1>
                  very_deep_p_dot_2_dot_2_dot_2_temp__ =
                  Eigen::Matrix<double,-1,-1>::Constant(6, 7,
                    std::numeric_limits<double>::quiet_NaN());
                for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                  very_deep_p_dot_2_dot_2_dot_1_temp__ = very_deep_p_dot_2_dot_2_dot_1_flat__[(very_deep_p_dot_2_dot_2_dot_1_flat__pos__
                    - 1)];
                  very_deep_p_dot_2_dot_2_dot_1_flat__pos__ = (very_deep_p_dot_2_dot_2_dot_1_flat__pos__
                    + 2);
                  {
                    std::vector<local_scalar_t__>
                      very_deep_p_dot_2_dot_2_dot_2_temp___flat__;
                    stan::model::assign(
                      very_deep_p_dot_2_dot_2_dot_2_temp___flat__,
                      stan::model::rvalue(
                        very_deep_p_dot_2_dot_2_dot_2_flat__,
                        "very_deep_p_dot_2_dot_2_dot_2_flat__",
                        stan::model::index_min_max(
                          very_deep_p_dot_2_dot_2_dot_2_flat__pos__,
                          ((very_deep_p_dot_2_dot_2_dot_2_flat__pos__ + (6 *
                          7)) - 1))),
                      "assigning variable very_deep_p_dot_2_dot_2_dot_2_temp___flat__");
                    pos__ = 1;
                    for (int sym4__ = 1; sym4__ <= 7; ++sym4__) {
                      for (int sym5__ = 1; sym5__ <= 6; ++sym5__) {
                        stan::model::assign(
                          very_deep_p_dot_2_dot_2_dot_2_temp__,
                          very_deep_p_dot_2_dot_2_dot_2_temp___flat__[(pos__
                          - 1)],
                          "assigning variable very_deep_p_dot_2_dot_2_dot_2_temp__",
                          stan::model::index_uni(sym5__),
                          stan::model::index_uni(sym4__));
                        pos__ = (pos__ + 1);
                      }
                    }
                    very_deep_p_dot_2_dot_2_dot_2_flat__pos__ = (very_deep_p_dot_2_dot_2_dot_2_flat__pos__
                      + (6 * 7));
                  }
                  stan::model::assign(very_deep_p_dot_2_dot_2_temp__,
                    std::tuple<std::complex<double>,
                      Eigen::Matrix<double,-1,-1>>(very_deep_p_dot_2_dot_2_dot_1_temp__,
                      very_deep_p_dot_2_dot_2_dot_2_temp__),
                    "assigning variable very_deep_p_dot_2_dot_2_temp__",
                    stan::model::index_uni(sym3__));
                }
              }
              stan::model::assign(very_deep_p_dot_2_temp__,
                std::tuple<double,
                  std::vector<
                    std::tuple<std::complex<double>,
                      Eigen::Matrix<double,-1,-1>>>>(very_deep_p_dot_2_dot_1_temp__,
                  very_deep_p_dot_2_dot_2_temp__),
                "assigning variable very_deep_p_dot_2_temp__",
                stan::model::index_uni(sym2__));
            }
          }
          stan::model::assign(very_deep_p,
            std::tuple<double,
              std::vector<
                std::tuple<double,
                  std::vector<
                    std::tuple<std::complex<double>,
                      Eigen::Matrix<double,-1,-1>>>>>>(very_deep_p_dot_1_temp__,
              very_deep_p_dot_2_temp__), "assigning variable very_deep_p",
            stan::model::index_uni(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        out__.write(std::get<0>(very_deep_p[(sym1__ - 1)]));
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          out__.write(std::get<0>(
                        std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ - 1)]));
          for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
            out__.write(std::get<0>(
                          std::get<1>(
                            std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ -
                            1)])[(sym3__ - 1)]));
            out__.write(std::get<1>(
                          std::get<1>(
                            std::get<1>(very_deep_p[(sym1__ - 1)])[(sym2__ -
                            1)])[(sym3__ - 1)]));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"basic_p.1", "basic_p.2",
                "tuple_tuple_p.1", "tuple_tuple_p.2.1", "tuple_tuple_p.2.2",
                "arr_tuple_p.1", "arr_tuple_p.2", "arr_tuple_p.3",
                "tuple_arr_tuple_p.1", "tuple_arr_tuple_p.2",
                "tuple_arr_tuple_p.3.1", "tuple_arr_tuple_p.3.2",
                "arr_tuple_tuple_p.1", "arr_tuple_tuple_p.2",
                "arr_tuple_tuple_p.3.1", "arr_tuple_tuple_p.3.2.1",
                "arr_tuple_tuple_p.3.2.2", "arr_tuple_arr_tuple_p.1",
                "arr_tuple_arr_tuple_p.2.1", "arr_tuple_arr_tuple_p.2.2",
                "very_deep_p.1", "very_deep_p.2.1", "very_deep_p.2.2.1",
                "very_deep_p.2.2.2"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    10)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(3),
                  static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(3),
                  static_cast<size_t>(4)},
                std::vector<size_t>{static_cast<size_t>(3),
                  static_cast<size_t>(3)},
                std::vector<size_t>{static_cast<size_t>(2)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(3)},
                std::vector<size_t>{static_cast<size_t>(3),
                  static_cast<size_t>(4)},
                std::vector<size_t>{static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(2),
                  static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(2),
                  static_cast<size_t>(4)},
                std::vector<size_t>{static_cast<size_t>(3)},
                std::vector<size_t>{static_cast<size_t>(3),
                  static_cast<size_t>(4)},
                std::vector<size_t>{static_cast<size_t>(3),
                  static_cast<size_t>(4), static_cast<size_t>(5)},
                std::vector<size_t>{static_cast<size_t>(3)},
                std::vector<size_t>{static_cast<size_t>(3),
                  static_cast<size_t>(4)},
                std::vector<size_t>{static_cast<size_t>(3),
                  static_cast<size_t>(4), static_cast<size_t>(5),
                  static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(3),
                  static_cast<size_t>(4), static_cast<size_t>(5),
                  static_cast<size_t>(6), static_cast<size_t>(7)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
      param_names__.emplace_back(std::string() + "basic_p" + ':' +
        std::to_string(1) + '.' + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "basic_p" + ':' +
      std::to_string(2));
    param_names__.emplace_back(std::string() + "tuple_tuple_p" + ':' +
      std::to_string(1));
    param_names__.emplace_back(std::string() + "tuple_tuple_p" + ':' +
      std::to_string(2) + ':' + std::to_string(1));
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "tuple_tuple_p" + ':' +
        std::to_string(2) + ':' + std::to_string(2) + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      param_names__.emplace_back(std::string() + "arr_tuple_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(1) + '.' + "real");
      param_names__.emplace_back(std::string() + "arr_tuple_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(1) + '.' + "imag");
      for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
        param_names__.emplace_back(std::string() + "arr_tuple_p" + '.' +
          std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
          std::to_string(sym2__));
      }
      for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
        param_names__.emplace_back(std::string() + "arr_tuple_p" + '.' +
          std::to_string(sym1__) + ':' + std::to_string(3) + '.' +
          std::to_string(sym2__));
      }
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "tuple_arr_tuple_p" + ':' +
        std::to_string(1) + '.' + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "tuple_arr_tuple_p" + ':' +
      std::to_string(2));
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      param_names__.emplace_back(std::string() + "tuple_arr_tuple_p" + ':' +
        std::to_string(3) + '.' + std::to_string(sym1__) + ':' +
        std::to_string(1));
      for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
        param_names__.emplace_back(std::string() + "tuple_arr_tuple_p" + ':'
          + std::to_string(3) + '.' + std::to_string(sym1__) + ':' +
          std::to_string(2) + '.' + std::to_string(sym2__));
      }
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "arr_tuple_tuple_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(1));
      param_names__.emplace_back(std::string() + "arr_tuple_tuple_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(2));
      param_names__.emplace_back(std::string() + "arr_tuple_tuple_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(3) + ':' +
        std::to_string(1));
      param_names__.emplace_back(std::string() + "arr_tuple_tuple_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(3) + ':' +
        std::to_string(2) + ':' + std::to_string(1) + '.' + "real");
      param_names__.emplace_back(std::string() + "arr_tuple_tuple_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(3) + ':' +
        std::to_string(2) + ':' + std::to_string(1) + '.' + "imag");
      for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
        param_names__.emplace_back(std::string() + "arr_tuple_tuple_p" + '.'
          + std::to_string(sym1__) + ':' + std::to_string(3) + ':' +
          std::to_string(2) + ':' + std::to_string(2) + '.' +
          std::to_string(sym2__));
      }
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      param_names__.emplace_back(std::string() + "arr_tuple_arr_tuple_p" +
        '.' + std::to_string(sym1__) + ':' + std::to_string(1));
      for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
        param_names__.emplace_back(std::string() + "arr_tuple_arr_tuple_p" +
          '.' + std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
          std::to_string(sym2__) + ':' + std::to_string(1));
        for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
          param_names__.emplace_back(std::string() + "arr_tuple_arr_tuple_p"
            + '.' + std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym2__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym3__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      param_names__.emplace_back(std::string() + "very_deep_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(1));
      for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
        param_names__.emplace_back(std::string() + "very_deep_p" + '.' +
          std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
          std::to_string(sym2__) + ':' + std::to_string(1));
        for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
          param_names__.emplace_back(std::string() + "very_deep_p" + '.' +
            std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym2__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym3__) + ':' + std::to_string(1) + '.' + "real");
          param_names__.emplace_back(std::string() + "very_deep_p" + '.' +
            std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym2__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym3__) + ':' + std::to_string(1) + '.' + "imag");
          for (int sym4__ = 1; sym4__ <= 7; ++sym4__) {
            for (int sym5__ = 1; sym5__ <= 6; ++sym5__) {
              param_names__.emplace_back(std::string() + "very_deep_p" + '.'
                + std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
                std::to_string(sym2__) + ':' + std::to_string(2) + '.' +
                std::to_string(sym3__) + ':' + std::to_string(2) + '.' +
                std::to_string(sym5__) + '.' + std::to_string(sym4__));
            }
          }
        }
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
      param_names__.emplace_back(std::string() + "basic_p" + ':' +
        std::to_string(1) + '.' + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "basic_p" + ':' +
      std::to_string(2));
    param_names__.emplace_back(std::string() + "tuple_tuple_p" + ':' +
      std::to_string(1));
    param_names__.emplace_back(std::string() + "tuple_tuple_p" + ':' +
      std::to_string(2) + ':' + std::to_string(1));
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "tuple_tuple_p" + ':' +
        std::to_string(2) + ':' + std::to_string(2) + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      param_names__.emplace_back(std::string() + "arr_tuple_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(1) + '.' + "real");
      param_names__.emplace_back(std::string() + "arr_tuple_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(1) + '.' + "imag");
      for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
        param_names__.emplace_back(std::string() + "arr_tuple_p" + '.' +
          std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
          std::to_string(sym2__));
      }
      for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
        param_names__.emplace_back(std::string() + "arr_tuple_p" + '.' +
          std::to_string(sym1__) + ':' + std::to_string(3) + '.' +
          std::to_string(sym2__));
      }
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "tuple_arr_tuple_p" + ':' +
        std::to_string(1) + '.' + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "tuple_arr_tuple_p" + ':' +
      std::to_string(2));
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      param_names__.emplace_back(std::string() + "tuple_arr_tuple_p" + ':' +
        std::to_string(3) + '.' + std::to_string(sym1__) + ':' +
        std::to_string(1));
      for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
        param_names__.emplace_back(std::string() + "tuple_arr_tuple_p" + ':'
          + std::to_string(3) + '.' + std::to_string(sym1__) + ':' +
          std::to_string(2) + '.' + std::to_string(sym2__));
      }
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "arr_tuple_tuple_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(1));
      param_names__.emplace_back(std::string() + "arr_tuple_tuple_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(2));
      param_names__.emplace_back(std::string() + "arr_tuple_tuple_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(3) + ':' +
        std::to_string(1));
      param_names__.emplace_back(std::string() + "arr_tuple_tuple_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(3) + ':' +
        std::to_string(2) + ':' + std::to_string(1) + '.' + "real");
      param_names__.emplace_back(std::string() + "arr_tuple_tuple_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(3) + ':' +
        std::to_string(2) + ':' + std::to_string(1) + '.' + "imag");
      for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
        param_names__.emplace_back(std::string() + "arr_tuple_tuple_p" + '.'
          + std::to_string(sym1__) + ':' + std::to_string(3) + ':' +
          std::to_string(2) + ':' + std::to_string(2) + '.' +
          std::to_string(sym2__));
      }
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      param_names__.emplace_back(std::string() + "arr_tuple_arr_tuple_p" +
        '.' + std::to_string(sym1__) + ':' + std::to_string(1));
      for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
        param_names__.emplace_back(std::string() + "arr_tuple_arr_tuple_p" +
          '.' + std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
          std::to_string(sym2__) + ':' + std::to_string(1));
        for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
          param_names__.emplace_back(std::string() + "arr_tuple_arr_tuple_p"
            + '.' + std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym2__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym3__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      param_names__.emplace_back(std::string() + "very_deep_p" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(1));
      for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
        param_names__.emplace_back(std::string() + "very_deep_p" + '.' +
          std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
          std::to_string(sym2__) + ':' + std::to_string(1));
        for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
          param_names__.emplace_back(std::string() + "very_deep_p" + '.' +
            std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym2__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym3__) + ':' + std::to_string(1) + '.' + "real");
          param_names__.emplace_back(std::string() + "very_deep_p" + '.' +
            std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym2__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym3__) + ':' + std::to_string(1) + '.' + "imag");
          for (int sym4__ = 1; sym4__ <= 7; ++sym4__) {
            for (int sym5__ = 1; sym5__ <= 6; ++sym5__) {
              param_names__.emplace_back(std::string() + "very_deep_p" + '.'
                + std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
                std::to_string(sym2__) + ':' + std::to_string(2) + '.' +
                std::to_string(sym3__) + ':' + std::to_string(2) + '.' +
                std::to_string(sym5__) + '.' + std::to_string(sym4__));
            }
          }
        }
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"basic_p\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"array\",\"length\":" + std::to_string(10) + ",\"element_type\":{\"name\":\"real\"}},{\"name\":\"real\"}]},\"block\":\"parameters\"},{\"name\":\"tuple_tuple_p\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}]}]},\"block\":\"parameters\"},{\"name\":\"arr_tuple_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"3\",\"element_types\":[{\"name\":\"complex\"},{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},{\"name\":\"vector\",\"length\":" + std::to_string(3) + "}]}},\"block\":\"parameters\"},{\"name\":\"tuple_arr_tuple_p\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"3\",\"element_types\":[{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}}]}}]},\"block\":\"parameters\"},{\"name\":\"arr_tuple_tuple_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"3\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"real\"},{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"complex\"},{\"name\":\"vector\",\"length\":" + std::to_string(4) + "}]}]}]}},\"block\":\"parameters\"},{\"name\":\"arr_tuple_arr_tuple_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}]}}]}},\"block\":\"parameters\"},{\"name\":\"very_deep_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"complex\"},{\"name\":\"matrix\",\"rows\":" + std::to_string(6) + ",\"cols\":" + std::to_string(7) + "}]}}]}}]}},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"basic_p\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"array\",\"length\":" + std::to_string(10) + ",\"element_type\":{\"name\":\"real\"}},{\"name\":\"real\"}]},\"block\":\"parameters\"},{\"name\":\"tuple_tuple_p\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}]}]},\"block\":\"parameters\"},{\"name\":\"arr_tuple_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"3\",\"element_types\":[{\"name\":\"complex\"},{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},{\"name\":\"vector\",\"length\":" + std::to_string(3) + "}]}},\"block\":\"parameters\"},{\"name\":\"tuple_arr_tuple_p\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"3\",\"element_types\":[{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}}]}}]},\"block\":\"parameters\"},{\"name\":\"arr_tuple_tuple_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"3\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"real\"},{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"complex\"},{\"name\":\"vector\",\"length\":" + std::to_string(4) + "}]}]}]}},\"block\":\"parameters\"},{\"name\":\"arr_tuple_arr_tuple_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"vector\",\"length\":" + std::to_string(5) + "}]}}]}},\"block\":\"parameters\"},{\"name\":\"very_deep_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"complex\"},{\"name\":\"matrix\",\"rows\":" + std::to_string(6) + ",\"cols\":" + std::to_string(7) + "}]}}]}}]}},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((10 + 1) + (1 + (1 + 2))) + (3 * ((2 +
      4) + 3))) + ((2 + 1) + (3 * (1 + 4)))) + (2 * ((1 + 1) + (1 + (2 +
      4))))) + (3 * (1 + (4 * (1 + 5))))) + (3 * (1 + (4 * (1 + (5 * (2 + (6
      * 7))))))));
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((10 + 1) + (1 + (1 + 2))) + (3 * ((2 +
      4) + 3))) + ((2 + 1) + (3 * (1 + 4)))) + (2 * ((1 + 1) + (1 + (2 +
      4))))) + (3 * (1 + (4 * (1 + 5))))) + (3 * (1 + (4 * (1 + (5 * (2 + (6
      * 7))))))));
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = arrays_tuples_nested_model_namespace::arrays_tuples_nested_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return arrays_tuples_nested_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp infer_tuple_ad.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace infer_tuple_ad_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 3> locations_array__ =
  {" (found before start of program)",
  " (in 'infer_tuple_ad.stan', line 2, column 2 to column 9)",
  " (in 'infer_tuple_ad.stan', line 5, column 2 to column 47)"};
class infer_tuple_ad_model final : public model_base_crtp<infer_tuple_ad_model> {
 private:
  
 public:
  ~infer_tuple_ad_model() {}
  infer_tuple_ad_model(stan::io::var_context& context__, unsigned int
                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "infer_tuple_ad_model_namespace::infer_tuple_ad_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    num_params_r__ = 1;
  }
  inline std::string model_name() const final {
    return "infer_tuple_ad_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "infer_tuple_ad_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ x = DUMMY_VAR__;
      current_statement__ = 1;
      x = in__.template read<local_scalar_t__>();
      {
        std::vector<std::tuple<local_scalar_t__, local_scalar_t__>> z =
          std::vector<std::tuple<local_scalar_t__, local_scalar_t__>>(2,
            std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
              DUMMY_VAR__});
        current_statement__ = 2;
        stan::model::assign(z,
          std::vector<std::tuple<local_scalar_t__, local_scalar_t__>>{
            std::forward_as_tuple(1, x), std::forward_as_tuple(x, 1)},
          "assigning variable z");
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "infer_tuple_ad_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ x = DUMMY_VAR__;
      current_statement__ = 1;
      x = in__.template read<local_scalar_t__>();
      {
        std::vector<std::tuple<local_scalar_t__, local_scalar_t__>> z =
          std::vector<std::tuple<local_scalar_t__, local_scalar_t__>>(2,
            std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
              DUMMY_VAR__});
        current_statement__ = 2;
        stan::model::assign(z,
          std::vector<std::tuple<local_scalar_t__, local_scalar_t__>>{
            std::forward_as_tuple(1, x), std::forward_as_tuple(x, 1)},
          "assigning variable z");
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "infer_tuple_ad_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double x = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      x = in__.template read<local_scalar_t__>();
      out__.write(x);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ x = DUMMY_VAR__;
      current_statement__ = 1;
      x = in__.read<local_scalar_t__>();
      out__.write(x);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "x", "double",
        std::vector<size_t>{});
      local_scalar_t__ x = DUMMY_VAR__;
      current_statement__ = 1;
      x = context__.vals_r("x")[(1 - 1)];
      out__.write(x);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"x"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "x");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "x");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 1;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 1;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = infer_tuple_ad_model_namespace::infer_tuple_ad_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return infer_tuple_ad_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp simple.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace simple_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 3> locations_array__ =
  {" (found before start of program)",
  " (in 'simple.stan', line 2, column 2 to column 33)",
  " (in 'simple.stan', line 3, column 2 to column 13)"};
class simple_model final : public model_base_crtp<simple_model> {
 private:
  std::tuple<double, int> x;
 public:
  ~simple_model() {}
  simple_model(stan::io::var_context& context__, unsigned int
               random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "simple_model_namespace::simple_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 1;
      x = std::tuple<double, int>{std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<int>::min()};
      current_statement__ = 1;
      stan::model::assign(x, std::forward_as_tuple(3.14, 2),
        "assigning variable x");
      current_statement__ = 2;
      if (pstream__) {
        stan::math::stan_print(pstream__, std::get<0>(x));
        *(pstream__) << std::endl;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "simple_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "simple_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "simple_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "simple_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = simple_model_namespace::simple_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return simple_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp simple2.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace simple2_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 3> locations_array__ =
  {" (found before start of program)",
  " (in 'simple2.stan', line 2, column 2 to column 50)",
  " (in 'simple2.stan', line 3, column 2 to column 16)"};
class simple2_model final : public model_base_crtp<simple2_model> {
 private:
  std::tuple<std::vector<double>, int> x;
 public:
  ~simple2_model() {}
  simple2_model(stan::io::var_context& context__, unsigned int
                random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "simple2_model_namespace::simple2_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 1;
      x = std::tuple<std::vector<double>, int>{std::vector<double>(2,
                                                 std::numeric_limits<double>::quiet_NaN(
                                                   )),
            std::numeric_limits<int>::min()};
      current_statement__ = 1;
      stan::model::assign(x,
        std::tuple<std::vector<double>, int>(std::vector<double>{1.01, 3.14},
          2), "assigning variable x");
      current_statement__ = 2;
      if (pstream__) {
        stan::math::stan_print(pstream__,
          stan::model::rvalue(std::get<0>(x), "x.1",
            stan::model::index_uni(2)));
        *(pstream__) << std::endl;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "simple2_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "simple2_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "simple2_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "simple2_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = simple2_model_namespace::simple2_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return simple2_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp simple3.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace simple3_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 3> locations_array__ =
  {" (found before start of program)",
  " (in 'simple3.stan', line 2, column 2 to line 4, column 39)",
  " (in 'simple3.stan', line 5, column 2 to column 16)"};
class simple3_model final : public model_base_crtp<simple3_model> {
 private:
  std::tuple<std::vector<std::vector<double>>, int> x;
 public:
  ~simple3_model() {}
  simple3_model(stan::io::var_context& context__, unsigned int
                random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "simple3_model_namespace::simple3_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 1;
      x = std::tuple<std::vector<std::vector<double>>, int>{std::vector<
                                                              std::vector<
                                                                double>>(2,
                                                              std::vector<
                                                                double>(3,
                                                                std::numeric_limits<double>::quiet_NaN(
                                                                  ))),
            std::numeric_limits<int>::min()};
      current_statement__ = 1;
      stan::model::assign(x,
        std::tuple<std::vector<std::vector<double>>, int>(std::vector<
                                                            std::vector<
                                                              double>>{
                                                            std::vector<
                                                              double>{1.01,
                                                              3.14},
                                                            std::vector<
                                                              double>{1.01,
                                                              3.14},
                                                            std::vector<
                                                              double>{1.01,
                                                              3.14}}, 2),
        "assigning variable x");
      current_statement__ = 2;
      if (pstream__) {
        stan::math::stan_print(pstream__,
          stan::model::rvalue(std::get<0>(x), "x.1",
            stan::model::index_uni(2)));
        *(pstream__) << std::endl;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "simple3_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "simple3_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "simple3_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "simple3_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = simple3_model_namespace::simple3_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return simple3_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple-constraints-data.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_constraints_data_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 4> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple-constraints-data.stan', line 2, column 2 to column 60)",
  " (in 'tuple-constraints-data.stan', line 3, column 2 to column 51)",
  " (in 'tuple-constraints-data.stan', line 4, column 2 to column 48)"};
class tuple_constraints_data_model final : public model_base_crtp<tuple_constraints_data_model> {
 private:
  std::tuple<int, std::tuple<double, int>> y;
  std::tuple<int, double, Eigen::Matrix<double,-1,1>> x;
  std::vector<std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>> z;
 public:
  ~tuple_constraints_data_model() {}
  tuple_constraints_data_model(stan::io::var_context& context__, unsigned int
                               random_seed__ = 0, std::ostream*
                               pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_constraints_data_model_namespace::tuple_constraints_data_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 1;
      context__.validate_dims("data initialization", "y.1", "int",
        std::vector<size_t>{});
      context__.validate_dims("data initialization", "y.2.1", "double",
        std::vector<size_t>{});
      context__.validate_dims("data initialization", "y.2.2", "int",
        std::vector<size_t>{});
      y = std::tuple<int, std::tuple<double, int>>{std::numeric_limits<int>::min(
                                                     ),
            std::tuple<double, int>{std::numeric_limits<double>::quiet_NaN(),
              std::numeric_limits<int>::min()}};
      current_statement__ = 1;
      std::get<0>(y) = context__.vals_i("y.1")[(1 - 1)];
      std::get<0>(std::get<1>(y)) = context__.vals_r("y.2.1")[(1 - 1)];
      std::get<1>(std::get<1>(y)) = context__.vals_i("y.2.2")[(1 - 1)];
      current_statement__ = 1;
      stan::math::check_greater_or_equal(function__, "y.1", std::get<0>(y), 0);
      current_statement__ = 1;
      stan::math::check_greater_or_equal(function__, "y.2.1",
        std::get<0>(std::get<1>(y)), 1);
      current_statement__ = 1;
      stan::math::check_less_or_equal(function__, "y.2.2",
        std::get<1>(std::get<1>(y)), 2);
      current_statement__ = 2;
      context__.validate_dims("data initialization", "x.1", "int",
        std::vector<size_t>{});
      context__.validate_dims("data initialization", "x.2", "double",
        std::vector<size_t>{});
      context__.validate_dims("data initialization", "x.3", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      x = std::tuple<int, double, Eigen::Matrix<double,-1,1>>{std::numeric_limits<int>::min(
                                                                ),
            std::numeric_limits<double>::quiet_NaN(),
            Eigen::Matrix<double,-1,1>::Constant(2,
              std::numeric_limits<double>::quiet_NaN())};
      current_statement__ = 2;
      std::get<0>(x) = context__.vals_i("x.1")[(1 - 1)];
      std::get<1>(x) = context__.vals_r("x.2")[(1 - 1)];
      {
        std::vector<local_scalar_t__> x_dot_3_flat__;
        x_dot_3_flat__ = context__.vals_r("x.3");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(std::get<2>(x), x_dot_3_flat__[(pos__ - 1)],
            "assigning variable x.3", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 2;
      stan::math::check_greater_or_equal(function__, "x.1", std::get<0>(x), 0);
      current_statement__ = 2;
      stan::math::check_greater_or_equal(function__, "x.2", std::get<1>(x), 1);
      current_statement__ = 2;
      stan::math::check_simplex(function__, "x.3", std::get<2>(x));
      current_statement__ = 3;
      context__.validate_dims("data initialization", "z.1", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(2)});
      context__.validate_dims("data initialization", "z.2", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(2),
          static_cast<size_t>(4)});
      z = std::vector<
            std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>>(3,
            std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>(2,
              std::tuple<double, Eigen::Matrix<double,-1,1>>{std::numeric_limits<double>::quiet_NaN(
                                                               ),
                Eigen::Matrix<double,-1,1>::Constant(4,
                  std::numeric_limits<double>::quiet_NaN())}));
      {
        std::vector<local_scalar_t__> z_dot_1_flat__;
        current_statement__ = 3;
        z_dot_1_flat__ = context__.vals_r("z.1");
        int z_dot_1_flat__pos__;
        z_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__> z_dot_2_flat__;
        current_statement__ = 3;
        z_dot_2_flat__ = context__.vals_r("z.2");
        int z_dot_2_flat__pos__;
        z_dot_2_flat__pos__ = 1;
        double z_dot_1_temp__ = std::numeric_limits<double>::quiet_NaN();
        Eigen::Matrix<double,-1,1> z_dot_2_temp__ =
          Eigen::Matrix<double,-1,1>::Constant(4,
            std::numeric_limits<double>::quiet_NaN());
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            z_dot_1_temp__ = z_dot_1_flat__[(z_dot_1_flat__pos__ - 1)];
            z_dot_1_flat__pos__ = (z_dot_1_flat__pos__ + 1);
            {
              std::vector<local_scalar_t__> z_dot_2_temp___flat__;
              stan::model::assign(z_dot_2_temp___flat__,
                stan::model::rvalue(z_dot_2_flat__, "z_dot_2_flat__",
                  stan::model::index_min_max(z_dot_2_flat__pos__,
                    ((z_dot_2_flat__pos__ + 4) - 1))),
                "assigning variable z_dot_2_temp___flat__");
              pos__ = 1;
              for (int sym3__ = 1; sym3__ <= 4; ++sym3__) {
                stan::model::assign(z_dot_2_temp__,
                  z_dot_2_temp___flat__[(pos__ - 1)],
                  "assigning variable z_dot_2_temp__",
                  stan::model::index_uni(sym3__));
                pos__ = (pos__ + 1);
              }
              z_dot_2_flat__pos__ = (z_dot_2_flat__pos__ + 4);
            }
            stan::model::assign(z,
              std::tuple<double, Eigen::Matrix<double,-1,1>>(z_dot_1_temp__,
                z_dot_2_temp__), "assigning variable z",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
          }
        }
      }
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          current_statement__ = 3;
          stan::math::check_greater_or_equal(function__,
            "z[sym2__, sym1__].1",
            std::get<0>(z[(sym2__ - 1)][(sym1__ - 1)]), 0);
          current_statement__ = 3;
          stan::math::check_simplex(function__, "z[sym2__, sym1__].2",
            std::get<1>(z[(sym2__ - 1)][(sym1__ - 1)]));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "tuple_constraints_data_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_constraints_data_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_constraints_data_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_constraints_data_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_constraints_data_model_namespace::tuple_constraints_data_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_constraints_data_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple-constraints-params.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_constraints_params_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 10> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple-constraints-params.stan', line 10, column 2 to column 41)",
  " (in 'tuple-constraints-params.stan', line 11, column 2 to column 51)",
  " (in 'tuple-constraints-params.stan', line 12, column 2 to column 36)",
  " (in 'tuple-constraints-params.stan', line 14, column 2 to line 15, column 81)",
  " (in 'tuple-constraints-params.stan', line 7, column 2 to column 34)",
  " (in 'tuple-constraints-params.stan', line 14, column 29 to column 46)",
  " (in 'tuple-constraints-params.stan', line 15, column 61 to column 62)",
  " (in 'tuple-constraints-params.stan', line 3, column 4 to column 22)",
  " (in 'tuple-constraints-params.stan', line 2, column 26 to line 4, column 3)"};
std::tuple<double, double> foo(std::ostream* pstream__);
std::tuple<double, double> foo(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 8;
    return std::forward_as_tuple(1.0, 2.0);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class tuple_constraints_params_model final : public model_base_crtp<tuple_constraints_params_model> {
 private:
  int indicator;
  int complicated_brack_dot2_1dim__;
 public:
  ~tuple_constraints_params_model() {}
  tuple_constraints_params_model(stan::io::var_context& context__,
                                 unsigned int random_seed__ = 0,
                                 std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_constraints_params_model_namespace::tuple_constraints_params_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 5;
      context__.validate_dims("data initialization", "indicator", "int",
        std::vector<size_t>{});
      indicator = std::numeric_limits<int>::min();
      current_statement__ = 5;
      indicator = context__.vals_i("indicator")[(1 - 1)];
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "indicator", indicator,
        0);
      current_statement__ = 5;
      stan::math::check_less_or_equal(function__, "indicator", indicator, 1);
      current_statement__ = 6;
      complicated_brack_dot2_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 6;
      complicated_brack_dot2_1dim__ = (indicator ? 3 : 0);
      current_statement__ = 6;
      stan::math::validate_non_negative_index("complicated[].2",
        "indicator ? 3 : 0", complicated_brack_dot2_1dim__);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(
        "cholesky_factor_cov complicated[].2[].3",
        "num rows (must be greater or equal to num cols)", 5, 4);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (1 + 1) + (3 * (2 * (1 + (4 - 1)))) + 1 + (2 * (1 +
      (complicated_brack_dot2_1dim__ * ((1 + (5 - 1)) + ((((4 * (4 - 1)) / 2)
      + 4) + ((5 - 4) * 4))))));
  }
  inline std::string model_name() const final {
    return "tuple_constraints_params_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_constraints_params_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      current_statement__ = 1;
      std::get<1>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      std::vector<
        std::vector<
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>>>
        ps2 =
        std::vector<
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>>>(3,
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>>(2,
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>{DUMMY_VAR__,
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__)}));
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          current_statement__ = 2;
          std::get<0>(ps2[(sym2__ - 1)][(sym1__ - 1)]) = in__.template read_constrain_lb<
                                                           local_scalar_t__,
                                                           jacobian__>(0,
                                                           lp__);
          current_statement__ = 2;
          std::get<1>(ps2[(sym2__ - 1)][(sym1__ - 1)]) = in__.template read_constrain_simplex<
                                                           Eigen::Matrix<local_scalar_t__,-1,1>,
                                                           jacobian__>(lp__,
                                                           4);
        }
      }
      local_scalar_t__ t = DUMMY_VAR__;
      current_statement__ = 3;
      t = in__.template read_constrain_lub<local_scalar_t__,
            jacobian__>(std::get<0>(foo(pstream__)), std::get<1>(ps), lp__);
      std::vector<
        std::tuple<local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>,
              Eigen::Matrix<local_scalar_t__,-1,-1>>>>> complicated =
        std::vector<
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>>>>(2,
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>>>{DUMMY_VAR__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>>(complicated_brack_dot2_1dim__,
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>{DUMMY_VAR__,
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(5,
                  DUMMY_VAR__),
                Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(5, 4,
                  DUMMY_VAR__)})});
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 4;
        std::get<0>(complicated[(sym1__ - 1)]) = in__.template read<
                                                   local_scalar_t__>();
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <=
             complicated_brack_dot2_1dim__; ++sym2__) {
          current_statement__ = 4;
          std::get<0>(std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read<local_scalar_t__>();
          current_statement__ = 4;
          std::get<1>(std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read_constrain_simplex<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, 5);
          current_statement__ = 4;
          std::get<2>(std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read_constrain_cholesky_factor_cov<
              Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, 5, 4);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_constraints_params_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      current_statement__ = 1;
      std::get<1>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      std::vector<
        std::vector<
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>>>
        ps2 =
        std::vector<
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>>>(3,
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>>(2,
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>{DUMMY_VAR__,
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__)}));
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          current_statement__ = 2;
          std::get<0>(ps2[(sym2__ - 1)][(sym1__ - 1)]) = in__.template read_constrain_lb<
                                                           local_scalar_t__,
                                                           jacobian__>(0,
                                                           lp__);
          current_statement__ = 2;
          std::get<1>(ps2[(sym2__ - 1)][(sym1__ - 1)]) = in__.template read_constrain_simplex<
                                                           Eigen::Matrix<local_scalar_t__,-1,1>,
                                                           jacobian__>(lp__,
                                                           4);
        }
      }
      local_scalar_t__ t = DUMMY_VAR__;
      current_statement__ = 3;
      t = in__.template read_constrain_lub<local_scalar_t__,
            jacobian__>(std::get<0>(foo(pstream__)), std::get<1>(ps), lp__);
      std::vector<
        std::tuple<local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>,
              Eigen::Matrix<local_scalar_t__,-1,-1>>>>> complicated =
        std::vector<
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>>>>(2,
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>>>{DUMMY_VAR__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>>(complicated_brack_dot2_1dim__,
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>{DUMMY_VAR__,
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(5,
                  DUMMY_VAR__),
                Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(5, 4,
                  DUMMY_VAR__)})});
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 4;
        std::get<0>(complicated[(sym1__ - 1)]) = in__.template read<
                                                   local_scalar_t__>();
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <=
             complicated_brack_dot2_1dim__; ++sym2__) {
          current_statement__ = 4;
          std::get<0>(std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read<local_scalar_t__>();
          current_statement__ = 4;
          std::get<1>(std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read_constrain_simplex<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, 5);
          current_statement__ = 4;
          std::get<2>(std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read_constrain_cholesky_factor_cov<
              Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, 5, 4);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_constraints_params_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<double, double> ps =
        std::tuple<double, double>{std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN()};
      current_statement__ = 1;
      std::get<0>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      current_statement__ = 1;
      std::get<1>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      std::vector<
        std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>> ps2 =
        std::vector<
          std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>>(3,
          std::vector<std::tuple<double, Eigen::Matrix<double,-1,1>>>(2,
            std::tuple<double, Eigen::Matrix<double,-1,1>>{std::numeric_limits<double>::quiet_NaN(
                                                             ),
              Eigen::Matrix<double,-1,1>::Constant(4,
                std::numeric_limits<double>::quiet_NaN())}));
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          current_statement__ = 2;
          std::get<0>(ps2[(sym2__ - 1)][(sym1__ - 1)]) = in__.template read_constrain_lb<
                                                           local_scalar_t__,
                                                           jacobian__>(0,
                                                           lp__);
          current_statement__ = 2;
          std::get<1>(ps2[(sym2__ - 1)][(sym1__ - 1)]) = in__.template read_constrain_simplex<
                                                           Eigen::Matrix<local_scalar_t__,-1,1>,
                                                           jacobian__>(lp__,
                                                           4);
        }
      }
      double t = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      t = in__.template read_constrain_lub<local_scalar_t__,
            jacobian__>(std::get<0>(foo(pstream__)), std::get<1>(ps), lp__);
      std::vector<
        std::tuple<double,
          std::vector<
            std::tuple<double, Eigen::Matrix<double,-1,1>,
              Eigen::Matrix<double,-1,-1>>>>> complicated =
        std::vector<
          std::tuple<double,
            std::vector<
              std::tuple<double, Eigen::Matrix<double,-1,1>,
                Eigen::Matrix<double,-1,-1>>>>>(2,
          std::tuple<double,
            std::vector<
              std::tuple<double, Eigen::Matrix<double,-1,1>,
                Eigen::Matrix<double,-1,-1>>>>{std::numeric_limits<double>::quiet_NaN(
                                                 ),
            std::vector<
              std::tuple<double, Eigen::Matrix<double,-1,1>,
                Eigen::Matrix<double,-1,-1>>>(complicated_brack_dot2_1dim__,
              std::tuple<double, Eigen::Matrix<double,-1,1>,
                Eigen::Matrix<double,-1,-1>>{std::numeric_limits<double>::quiet_NaN(
                                               ),
                Eigen::Matrix<double,-1,1>::Constant(5,
                  std::numeric_limits<double>::quiet_NaN()),
                Eigen::Matrix<double,-1,-1>::Constant(5, 4,
                  std::numeric_limits<double>::quiet_NaN())})});
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 4;
        std::get<0>(complicated[(sym1__ - 1)]) = in__.template read<
                                                   local_scalar_t__>();
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <=
             complicated_brack_dot2_1dim__; ++sym2__) {
          current_statement__ = 4;
          std::get<0>(std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read<local_scalar_t__>();
          current_statement__ = 4;
          std::get<1>(std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read_constrain_simplex<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, 5);
          current_statement__ = 4;
          std::get<2>(std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.template read_constrain_cholesky_factor_cov<
              Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, 5, 4);
        }
      }
      out__.write(std::get<0>(ps));
      out__.write(std::get<1>(ps));
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          out__.write(std::get<0>(ps2[(sym2__ - 1)][(sym1__ - 1)]));
          out__.write(std::get<1>(ps2[(sym2__ - 1)][(sym1__ - 1)]));
        }
      }
      out__.write(t);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        out__.write(std::get<0>(complicated[(sym1__ - 1)]));
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <=
             complicated_brack_dot2_1dim__; ++sym2__) {
          out__.write(std::get<0>(
                        std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]));
          out__.write(std::get<1>(
                        std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]));
          out__.write(std::get<2>(
                        std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]));
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = in__.read<local_scalar_t__>();
      current_statement__ = 1;
      std::get<1>(ps) = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, std::get<0>(ps));
      out__.write_free_lb(0, std::get<1>(ps));
      std::vector<
        std::vector<
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>>>
        ps2 =
        std::vector<
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>>>(3,
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>>(2,
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>{DUMMY_VAR__,
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__)}));
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          current_statement__ = 2;
          std::get<0>(ps2[(sym2__ - 1)][(sym1__ - 1)]) = in__.read<
                                                           local_scalar_t__>();
          current_statement__ = 2;
          stan::model::assign(std::get<1>(ps2[(sym2__ - 1)][(sym1__ - 1)]),
            in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(4),
            "assigning variable ps2.2");
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          out__.write_free_lb(0,
            std::get<0>(ps2[(sym2__ - 1)][(sym1__ - 1)]));
          out__.write_free_simplex(std::get<1>(ps2[(sym2__ - 1)][(sym1__ -
                                     1)]));
        }
      }
      local_scalar_t__ t = DUMMY_VAR__;
      current_statement__ = 3;
      t = in__.read<local_scalar_t__>();
      out__.write_free_lub(std::get<0>(foo(pstream__)), std::get<1>(ps), t);
      std::vector<
        std::tuple<local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>,
              Eigen::Matrix<local_scalar_t__,-1,-1>>>>> complicated =
        std::vector<
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>>>>(2,
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>>>{DUMMY_VAR__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>>(complicated_brack_dot2_1dim__,
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>{DUMMY_VAR__,
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(5,
                  DUMMY_VAR__),
                Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(5, 4,
                  DUMMY_VAR__)})});
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 4;
        std::get<0>(complicated[(sym1__ - 1)]) = in__.read<
                                                   local_scalar_t__>();
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <=
             complicated_brack_dot2_1dim__; ++sym2__) {
          current_statement__ = 4;
          std::get<0>(std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]) = 
            in__.read<local_scalar_t__>();
          current_statement__ = 4;
          stan::model::assign(
            std::get<1>(std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]),
            in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(5),
            "assigning variable complicated.2.2");
          current_statement__ = 4;
          stan::model::assign(
            std::get<2>(std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]),
            in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(5, 4),
            "assigning variable complicated.2.3");
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        out__.write(std::get<0>(complicated[(sym1__ - 1)]));
        for (int sym2__ = 1; sym2__ <=
             complicated_brack_dot2_1dim__; ++sym2__) {
          out__.write(std::get<0>(
                        std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]));
          out__.write_free_simplex(std::get<1>(
                                     std::get<1>(complicated[(sym1__ - 1)])[(sym2__
                                     - 1)]));
          out__.write_free_cholesky_factor_cov(std::get<2>(
                                                 std::get<1>(
                                                   complicated[(sym1__ - 1)])[(sym2__
                                                 - 1)]));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "ps.1", "double",
        std::vector<size_t>{});
      context__.validate_dims("parameter initialization", "ps.2", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "ps2.1", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(2)});
      context__.validate_dims("parameter initialization", "ps2.2", "double",
        std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(2),
          static_cast<size_t>(4)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "t", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "complicated.1",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      context__.validate_dims("parameter initialization", "complicated.2.1",
        "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(complicated_brack_dot2_1dim__)});
      context__.validate_dims("parameter initialization", "complicated.2.2",
        "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(complicated_brack_dot2_1dim__),
          static_cast<size_t>(5)});
      context__.validate_dims("parameter initialization", "complicated.2.3",
        "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(complicated_brack_dot2_1dim__),
          static_cast<size_t>(5), static_cast<size_t>(4)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = context__.vals_r("ps.1")[(1 - 1)];
      std::get<1>(ps) = context__.vals_r("ps.2")[(1 - 1)];
      out__.write_free_lb(0, std::get<0>(ps));
      out__.write_free_lb(0, std::get<1>(ps));
      std::vector<
        std::vector<
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,1>>>>
        ps2 =
        std::vector<
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>>>(3,
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>>(2,
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>{DUMMY_VAR__,
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__)}));
      {
        std::vector<local_scalar_t__> ps2_dot_1_flat__;
        current_statement__ = 2;
        ps2_dot_1_flat__ = context__.vals_r("ps2.1");
        int ps2_dot_1_flat__pos__;
        ps2_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__> ps2_dot_2_flat__;
        current_statement__ = 2;
        ps2_dot_2_flat__ = context__.vals_r("ps2.2");
        int ps2_dot_2_flat__pos__;
        ps2_dot_2_flat__pos__ = 1;
        double ps2_dot_1_temp__ = std::numeric_limits<double>::quiet_NaN();
        Eigen::Matrix<double,-1,1> ps2_dot_2_temp__ =
          Eigen::Matrix<double,-1,1>::Constant(4,
            std::numeric_limits<double>::quiet_NaN());
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            ps2_dot_1_temp__ = ps2_dot_1_flat__[(ps2_dot_1_flat__pos__ - 1)];
            ps2_dot_1_flat__pos__ = (ps2_dot_1_flat__pos__ + 1);
            {
              std::vector<local_scalar_t__> ps2_dot_2_temp___flat__;
              stan::model::assign(ps2_dot_2_temp___flat__,
                stan::model::rvalue(ps2_dot_2_flat__, "ps2_dot_2_flat__",
                  stan::model::index_min_max(ps2_dot_2_flat__pos__,
                    ((ps2_dot_2_flat__pos__ + 4) - 1))),
                "assigning variable ps2_dot_2_temp___flat__");
              pos__ = 1;
              for (int sym3__ = 1; sym3__ <= 4; ++sym3__) {
                stan::model::assign(ps2_dot_2_temp__,
                  ps2_dot_2_temp___flat__[(pos__ - 1)],
                  "assigning variable ps2_dot_2_temp__",
                  stan::model::index_uni(sym3__));
                pos__ = (pos__ + 1);
              }
              ps2_dot_2_flat__pos__ = (ps2_dot_2_flat__pos__ + 4);
            }
            stan::model::assign(ps2,
              std::tuple<double, Eigen::Matrix<double,-1,1>>(ps2_dot_1_temp__,
                ps2_dot_2_temp__), "assigning variable ps2",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          out__.write_free_lb(0,
            std::get<0>(ps2[(sym2__ - 1)][(sym1__ - 1)]));
          out__.write_free_simplex(std::get<1>(ps2[(sym2__ - 1)][(sym1__ -
                                     1)]));
        }
      }
      local_scalar_t__ t = DUMMY_VAR__;
      current_statement__ = 3;
      t = context__.vals_r("t")[(1 - 1)];
      out__.write_free_lub(std::get<0>(foo(pstream__)), std::get<1>(ps), t);
      std::vector<
        std::tuple<local_scalar_t__,
          std::vector<
            std::tuple<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>,
              Eigen::Matrix<local_scalar_t__,-1,-1>>>>> complicated =
        std::vector<
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>>>>(2,
          std::tuple<local_scalar_t__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>>>{DUMMY_VAR__,
            std::vector<
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>>(complicated_brack_dot2_1dim__,
              std::tuple<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>,
                Eigen::Matrix<local_scalar_t__,-1,-1>>{DUMMY_VAR__,
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(5,
                  DUMMY_VAR__),
                Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(5, 4,
                  DUMMY_VAR__)})});
      {
        std::vector<local_scalar_t__> complicated_dot_1_flat__;
        current_statement__ = 4;
        complicated_dot_1_flat__ = context__.vals_r("complicated.1");
        int complicated_dot_1_flat__pos__;
        complicated_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__> complicated_dot_2_dot_1_flat__;
        current_statement__ = 4;
        complicated_dot_2_dot_1_flat__ = context__.vals_r("complicated.2.1");
        int complicated_dot_2_dot_1_flat__pos__;
        complicated_dot_2_dot_1_flat__pos__ = 1;
        std::vector<local_scalar_t__> complicated_dot_2_dot_2_flat__;
        current_statement__ = 4;
        complicated_dot_2_dot_2_flat__ = context__.vals_r("complicated.2.2");
        int complicated_dot_2_dot_2_flat__pos__;
        complicated_dot_2_dot_2_flat__pos__ = 1;
        std::vector<local_scalar_t__> complicated_dot_2_dot_3_flat__;
        current_statement__ = 4;
        complicated_dot_2_dot_3_flat__ = context__.vals_r("complicated.2.3");
        int complicated_dot_2_dot_3_flat__pos__;
        complicated_dot_2_dot_3_flat__pos__ = 1;
        double complicated_dot_1_temp__ =
          std::numeric_limits<double>::quiet_NaN();
        std::vector<
          std::tuple<double, Eigen::Matrix<double,-1,1>,
            Eigen::Matrix<double,-1,-1>>> complicated_dot_2_temp__ =
          std::vector<
            std::tuple<double, Eigen::Matrix<double,-1,1>,
              Eigen::Matrix<double,-1,-1>>>(complicated_brack_dot2_1dim__,
            std::tuple<double, Eigen::Matrix<double,-1,1>,
              Eigen::Matrix<double,-1,-1>>{std::numeric_limits<double>::quiet_NaN(
                                             ),
              Eigen::Matrix<double,-1,1>::Constant(5,
                std::numeric_limits<double>::quiet_NaN()),
              Eigen::Matrix<double,-1,-1>::Constant(5, 4,
                std::numeric_limits<double>::quiet_NaN())});
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          complicated_dot_1_temp__ = complicated_dot_1_flat__[(complicated_dot_1_flat__pos__
            - 1)];
          complicated_dot_1_flat__pos__ = (complicated_dot_1_flat__pos__ +
            1);
          {
            double complicated_dot_2_dot_1_temp__ =
              std::numeric_limits<double>::quiet_NaN();
            Eigen::Matrix<double,-1,1> complicated_dot_2_dot_2_temp__ =
              Eigen::Matrix<double,-1,1>::Constant(5,
                std::numeric_limits<double>::quiet_NaN());
            Eigen::Matrix<double,-1,-1> complicated_dot_2_dot_3_temp__ =
              Eigen::Matrix<double,-1,-1>::Constant(5, 4,
                std::numeric_limits<double>::quiet_NaN());
            for (int sym2__ = 1; sym2__ <=
                 complicated_brack_dot2_1dim__; ++sym2__) {
              complicated_dot_2_dot_1_temp__ = complicated_dot_2_dot_1_flat__[(complicated_dot_2_dot_1_flat__pos__
                - 1)];
              complicated_dot_2_dot_1_flat__pos__ = (complicated_dot_2_dot_1_flat__pos__
                + 1);
              {
                std::vector<local_scalar_t__>
                  complicated_dot_2_dot_2_temp___flat__;
                stan::model::assign(complicated_dot_2_dot_2_temp___flat__,
                  stan::model::rvalue(complicated_dot_2_dot_2_flat__,
                    "complicated_dot_2_dot_2_flat__",
                    stan::model::index_min_max(
                      complicated_dot_2_dot_2_flat__pos__,
                      ((complicated_dot_2_dot_2_flat__pos__ + 5) - 1))),
                  "assigning variable complicated_dot_2_dot_2_temp___flat__");
                pos__ = 1;
                for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                  stan::model::assign(complicated_dot_2_dot_2_temp__,
                    complicated_dot_2_dot_2_temp___flat__[(pos__ - 1)],
                    "assigning variable complicated_dot_2_dot_2_temp__",
                    stan::model::index_uni(sym3__));
                  pos__ = (pos__ + 1);
                }
                complicated_dot_2_dot_2_flat__pos__ = (complicated_dot_2_dot_2_flat__pos__
                  + 5);
              }
              {
                std::vector<local_scalar_t__>
                  complicated_dot_2_dot_3_temp___flat__;
                stan::model::assign(complicated_dot_2_dot_3_temp___flat__,
                  stan::model::rvalue(complicated_dot_2_dot_3_flat__,
                    "complicated_dot_2_dot_3_flat__",
                    stan::model::index_min_max(
                      complicated_dot_2_dot_3_flat__pos__,
                      ((complicated_dot_2_dot_3_flat__pos__ + (5 * 4)) - 1))),
                  "assigning variable complicated_dot_2_dot_3_temp___flat__");
                pos__ = 1;
                for (int sym3__ = 1; sym3__ <= 4; ++sym3__) {
                  for (int sym4__ = 1; sym4__ <= 5; ++sym4__) {
                    stan::model::assign(complicated_dot_2_dot_3_temp__,
                      complicated_dot_2_dot_3_temp___flat__[(pos__ - 1)],
                      "assigning variable complicated_dot_2_dot_3_temp__",
                      stan::model::index_uni(sym4__),
                      stan::model::index_uni(sym3__));
                    pos__ = (pos__ + 1);
                  }
                }
                complicated_dot_2_dot_3_flat__pos__ = (complicated_dot_2_dot_3_flat__pos__
                  + (5 * 4));
              }
              stan::model::assign(complicated_dot_2_temp__,
                std::tuple<double, Eigen::Matrix<double,-1,1>,
                  Eigen::Matrix<double,-1,-1>>(complicated_dot_2_dot_1_temp__,
                  complicated_dot_2_dot_2_temp__,
                  complicated_dot_2_dot_3_temp__),
                "assigning variable complicated_dot_2_temp__",
                stan::model::index_uni(sym2__));
            }
          }
          stan::model::assign(complicated,
            std::tuple<double,
              std::vector<
                std::tuple<double, Eigen::Matrix<double,-1,1>,
                  Eigen::Matrix<double,-1,-1>>>>(complicated_dot_1_temp__,
              complicated_dot_2_temp__), "assigning variable complicated",
            stan::model::index_uni(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        out__.write(std::get<0>(complicated[(sym1__ - 1)]));
        for (int sym2__ = 1; sym2__ <=
             complicated_brack_dot2_1dim__; ++sym2__) {
          out__.write(std::get<0>(
                        std::get<1>(complicated[(sym1__ - 1)])[(sym2__ - 1)]));
          out__.write_free_simplex(std::get<1>(
                                     std::get<1>(complicated[(sym1__ - 1)])[(sym2__
                                     - 1)]));
          out__.write_free_cholesky_factor_cov(std::get<2>(
                                                 std::get<1>(
                                                   complicated[(sym1__ - 1)])[(sym2__
                                                 - 1)]));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"ps.1", "ps.2", "ps2.1", "ps2.2", "t",
                "complicated.1", "complicated.2.1", "complicated.2.2",
                "complicated.2.3"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(3),
                  static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(3),
                  static_cast<size_t>(2), static_cast<size_t>(4)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(2),
                  static_cast<size_t>(complicated_brack_dot2_1dim__)},
                std::vector<size_t>{static_cast<size_t>(2),
                  static_cast<size_t>(complicated_brack_dot2_1dim__),
                  static_cast<size_t>(5)},
                std::vector<size_t>{static_cast<size_t>(2),
                  static_cast<size_t>(complicated_brack_dot2_1dim__),
                  static_cast<size_t>(5), static_cast<size_t>(4)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(1));
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(2));
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
        param_names__.emplace_back(std::string() + "ps2" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__) + ':' +
          std::to_string(1));
        for (int sym3__ = 1; sym3__ <= 4; ++sym3__) {
          param_names__.emplace_back(std::string() + "ps2" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + ':' +
            std::to_string(2) + '.' + std::to_string(sym3__));
        }
      }
    }
    param_names__.emplace_back(std::string() + "t");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "complicated" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(1));
      for (int sym2__ = 1; sym2__ <= complicated_brack_dot2_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "complicated" + '.' +
          std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
          std::to_string(sym2__) + ':' + std::to_string(1));
        for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
          param_names__.emplace_back(std::string() + "complicated" + '.' +
            std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym2__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym3__));
        }
        for (int sym3__ = 1; sym3__ <= 4; ++sym3__) {
          for (int sym4__ = 1; sym4__ <= 5; ++sym4__) {
            param_names__.emplace_back(std::string() + "complicated" + '.' +
              std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
              std::to_string(sym2__) + ':' + std::to_string(3) + '.' +
              std::to_string(sym4__) + '.' + std::to_string(sym3__));
          }
        }
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(1));
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(2));
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
        param_names__.emplace_back(std::string() + "ps2" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__) + ':' +
          std::to_string(1));
        for (int sym3__ = 1; sym3__ <= (4 - 1); ++sym3__) {
          param_names__.emplace_back(std::string() + "ps2" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + ':' +
            std::to_string(2) + '.' + std::to_string(sym3__));
        }
      }
    }
    param_names__.emplace_back(std::string() + "t");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "complicated" + '.' +
        std::to_string(sym1__) + ':' + std::to_string(1));
      for (int sym2__ = 1; sym2__ <= complicated_brack_dot2_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "complicated" + '.' +
          std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
          std::to_string(sym2__) + ':' + std::to_string(1));
        for (int sym3__ = 1; sym3__ <= (5 - 1); ++sym3__) {
          param_names__.emplace_back(std::string() + "complicated" + '.' +
            std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym2__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym3__));
        }
        for (int sym3__ = 1; sym3__ <= ((((4 * (4 - 1)) / 2) + 4) + ((5 - 4)
             * 4)); ++sym3__) {
          param_names__.emplace_back(std::string() + "complicated" + '.' +
            std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym2__) + ':' + std::to_string(3) + '.' +
            std::to_string(sym3__));
        }
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"ps\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"real\"}]},\"block\":\"parameters\"},{\"name\":\"ps2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"vector\",\"length\":" + std::to_string(4) + "}]}}},\"block\":\"parameters\"},{\"name\":\"t\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"complicated\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(complicated_brack_dot2_1dim__) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"3\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(4) + "}]}}]}},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"ps\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"real\"}]},\"block\":\"parameters\"},{\"name\":\"ps2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"vector\",\"length\":" + std::to_string((4 -1)) + "}]}}},\"block\":\"parameters\"},{\"name\":\"t\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"complicated\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(complicated_brack_dot2_1dim__) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"3\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"vector\",\"length\":" + std::to_string((5 -1)) + "},{\"name\":\"vector\",\"length\":" + std::to_string(((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) *4))) + "}]}}]}},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + (3 * (2 * (1 + 4)))) + 1) + (2 *
      (1 + (complicated_brack_dot2_1dim__ * ((1 + 5) + (5 * 4))))));
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + (3 * (2 * (1 + 4)))) + 1) + (2 *
      (1 + (complicated_brack_dot2_1dim__ * ((1 + 5) + (5 * 4))))));
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_constraints_params_model_namespace::tuple_constraints_params_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_constraints_params_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple-dataonly.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_dataonly_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 5> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple-dataonly.stan', line 10, column 2 to column 19)",
  " (in 'tuple-dataonly.stan', line 7, column 2 to column 22)",
  " (in 'tuple-dataonly.stan', line 3, column 4 to column 15)",
  " (in 'tuple-dataonly.stan', line 2, column 37 to line 4, column 3)"};
double foo(const std::tuple<double, double>& x, std::ostream* pstream__);
double foo(const std::tuple<double, double>& x, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 3;
    return std::get<0>(x);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class tuple_dataonly_model final : public model_base_crtp<tuple_dataonly_model> {
 private:
  std::tuple<double, double> d;
 public:
  ~tuple_dataonly_model() {}
  tuple_dataonly_model(stan::io::var_context& context__, unsigned int
                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_dataonly_model_namespace::tuple_dataonly_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 2;
      context__.validate_dims("data initialization", "d.1", "double",
        std::vector<size_t>{});
      context__.validate_dims("data initialization", "d.2", "double",
        std::vector<size_t>{});
      d = std::tuple<double, double>{std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()};
      current_statement__ = 2;
      std::get<0>(d) = context__.vals_r("d.1")[(1 - 1)];
      std::get<1>(d) = context__.vals_r("d.2")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "tuple_dataonly_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_dataonly_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      lp_accum__.add(foo(d, pstream__));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_dataonly_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      lp_accum__.add(foo(d, pstream__));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_dataonly_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_dataonly_model_namespace::tuple_dataonly_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_dataonly_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple-foreach.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_foreach_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 3> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple-foreach.stan', line 2, column 4 to column 37)",
  " (in 'tuple-foreach.stan', line 3, column 4 to line 4, column 5)"};
class tuple_foreach_model final : public model_base_crtp<tuple_foreach_model> {
 private:
  std::vector<std::tuple<double, double>> arr;
 public:
  ~tuple_foreach_model() {}
  tuple_foreach_model(stan::io::var_context& context__, unsigned int
                      random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_foreach_model_namespace::tuple_foreach_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 1;
      arr = std::vector<std::tuple<double, double>>(100,
              std::tuple<double, double>{std::numeric_limits<double>::quiet_NaN(
                                           ),
                std::numeric_limits<double>::quiet_NaN()});
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= stan::math::size(arr); ++sym1__) {
        std::tuple<double, double> t;
        current_statement__ = 2;
        stan::model::assign(t, arr[(sym1__ - 1)], "assigning variable t");
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "tuple_foreach_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_foreach_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_foreach_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_foreach_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_foreach_model_namespace::tuple_foreach_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_foreach_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple-full.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_full_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 5> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple-full.stan', line 5, column 2 to column 41)",
  " (in 'tuple-full.stan', line 8, column 2 to column 25)",
  " (in 'tuple-full.stan', line 10, column 2 to column 41)",
  " (in 'tuple-full.stan', line 2, column 2 to column 69)"};
class tuple_full_model final : public model_base_crtp<tuple_full_model> {
 private:
  std::tuple<int, std::tuple<std::vector<int>, std::vector<int>>> ds;
 public:
  ~tuple_full_model() {}
  tuple_full_model(stan::io::var_context& context__, unsigned int
                   random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_full_model_namespace::tuple_full_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 4;
      context__.validate_dims("data initialization", "ds.1", "int",
        std::vector<size_t>{});
      context__.validate_dims("data initialization", "ds.2.1", "int",
        std::vector<size_t>{static_cast<size_t>(2)});
      context__.validate_dims("data initialization", "ds.2.2", "int",
        std::vector<size_t>{static_cast<size_t>(2)});
      ds = std::tuple<int, std::tuple<std::vector<int>, std::vector<int>>>{
             std::numeric_limits<int>::min(),
             std::tuple<std::vector<int>, std::vector<int>>{std::vector<int>(2,
                                                              std::numeric_limits<int>::min(
                                                                )),
               std::vector<int>(2, std::numeric_limits<int>::min())}};
      current_statement__ = 4;
      std::get<0>(ds) = context__.vals_i("ds.1")[(1 - 1)];
      std::get<0>(std::get<1>(ds)) = context__.vals_i("ds.2.1");
      std::get<1>(std::get<1>(ds)) = context__.vals_i("ds.2.2");
      current_statement__ = 4;
      stan::math::check_greater_or_equal(function__, "ds.1", std::get<0>(ds),
        0);
      current_statement__ = 4;
      stan::math::check_less_or_equal(function__, "ds.1", std::get<0>(ds), 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (1 + 1);
  }
  inline std::string model_name() const final {
    return "tuple_full_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_full_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      current_statement__ = 1;
      std::get<1>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      {
        current_statement__ = 2;
        lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(std::get<0>(ds),
                         std::get<0>(ps)));
        current_statement__ = 3;
        lp_accum__.add(((std::get<1>(ps) +
          stan::model::rvalue(std::get<0>(std::get<1>(ds)), "ds.2.1",
            stan::model::index_uni(1))) +
          stan::model::rvalue(std::get<1>(std::get<1>(ds)), "ds.2.2",
            stan::model::index_uni(2))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_full_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      current_statement__ = 1;
      std::get<1>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      {
        current_statement__ = 2;
        lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(std::get<0>(ds),
                         std::get<0>(ps)));
        current_statement__ = 3;
        lp_accum__.add(((std::get<1>(ps) +
          stan::model::rvalue(std::get<0>(std::get<1>(ds)), "ds.2.1",
            stan::model::index_uni(1))) +
          stan::model::rvalue(std::get<1>(std::get<1>(ds)), "ds.2.2",
            stan::model::index_uni(2))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_full_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<double, double> ps =
        std::tuple<double, double>{std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN()};
      current_statement__ = 1;
      std::get<0>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      current_statement__ = 1;
      std::get<1>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      out__.write(std::get<0>(ps));
      out__.write(std::get<1>(ps));
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = in__.read<local_scalar_t__>();
      current_statement__ = 1;
      std::get<1>(ps) = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, std::get<0>(ps));
      out__.write_free_lb(0, std::get<1>(ps));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "ps.1", "double",
        std::vector<size_t>{});
      context__.validate_dims("parameter initialization", "ps.2", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = context__.vals_r("ps.1")[(1 - 1)];
      std::get<1>(ps) = context__.vals_r("ps.2")[(1 - 1)];
      out__.write_free_lb(0, std::get<0>(ps));
      out__.write_free_lb(0, std::get<1>(ps));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"ps.1", "ps.2"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(1));
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(2));
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(1));
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(2));
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"ps\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"real\"}]},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"ps\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"real\"}]},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (1 + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (1 + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_full_model_namespace::tuple_full_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_full_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple-ix-assign.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_ix_assign_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 3> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple-ix-assign.stan', line 2, column 2 to column 20)",
  " (in 'tuple-ix-assign.stan', line 3, column 2 to column 10)"};
class tuple_ix_assign_model final : public model_base_crtp<tuple_ix_assign_model> {
 private:
  std::tuple<int, int> x;
 public:
  ~tuple_ix_assign_model() {}
  tuple_ix_assign_model(stan::io::var_context& context__, unsigned int
                        random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_ix_assign_model_namespace::tuple_ix_assign_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 1;
      x = std::tuple<int, int>{std::numeric_limits<int>::min(),
            std::numeric_limits<int>::min()};
      current_statement__ = 2;
      std::get<0>(x) = 5;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "tuple_ix_assign_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_ix_assign_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_ix_assign_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_ix_assign_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_ix_assign_model_namespace::tuple_ix_assign_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_ix_assign_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple-ix-assign2.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_ix_assign2_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 3> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple-ix-assign2.stan', line 2, column 2 to column 30)",
  " (in 'tuple-ix-assign2.stan', line 3, column 2 to column 13)"};
class tuple_ix_assign2_model final : public model_base_crtp<tuple_ix_assign2_model> {
 private:
  std::tuple<std::vector<int>, int> x;
 public:
  ~tuple_ix_assign2_model() {}
  tuple_ix_assign2_model(stan::io::var_context& context__, unsigned int
                         random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_ix_assign2_model_namespace::tuple_ix_assign2_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 1;
      x = std::tuple<std::vector<int>, int>{std::vector<int>(10,
                                              std::numeric_limits<int>::min()),
            std::numeric_limits<int>::min()};
      current_statement__ = 2;
      stan::model::assign(std::get<0>(x), 5, "assigning variable x.1",
        stan::model::index_uni(1));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "tuple_ix_assign2_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_ix_assign2_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_ix_assign2_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_ix_assign2_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_ix_assign2_model_namespace::tuple_ix_assign2_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_ix_assign2_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple-ix-assign3.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_ix_assign3_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 3> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple-ix-assign3.stan', line 2, column 2 to column 30)",
  " (in 'tuple-ix-assign3.stan', line 3, column 2 to column 13)"};
class tuple_ix_assign3_model final : public model_base_crtp<tuple_ix_assign3_model> {
 private:
  std::vector<std::tuple<int, int>> x;
 public:
  ~tuple_ix_assign3_model() {}
  tuple_ix_assign3_model(stan::io::var_context& context__, unsigned int
                         random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_ix_assign3_model_namespace::tuple_ix_assign3_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 1;
      x = std::vector<std::tuple<int, int>>(10,
            std::tuple<int, int>{std::numeric_limits<int>::min(),
              std::numeric_limits<int>::min()});
      current_statement__ = 2;
      std::get<0>(x[(1 - 1)]) = 5;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "tuple_ix_assign3_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_ix_assign3_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_ix_assign3_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_ix_assign3_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_ix_assign3_model_namespace::tuple_ix_assign3_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_ix_assign3_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple-ix-assign4.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_ix_assign4_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 3> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple-ix-assign4.stan', line 2, column 2 to column 54)",
  " (in 'tuple-ix-assign4.stan', line 3, column 2 to column 15)"};
class tuple_ix_assign4_model final : public model_base_crtp<tuple_ix_assign4_model> {
 private:
  std::tuple<std::vector<std::tuple<int, std::vector<double>>>, int> x;
 public:
  ~tuple_ix_assign4_model() {}
  tuple_ix_assign4_model(stan::io::var_context& context__, unsigned int
                         random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_ix_assign4_model_namespace::tuple_ix_assign4_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 1;
      x = std::tuple<std::vector<std::tuple<int, std::vector<double>>>, int>{
            std::vector<std::tuple<int, std::vector<double>>>(10,
              std::tuple<int, std::vector<double>>{std::numeric_limits<int>::min(
                                                     ),
                std::vector<double>(100,
                  std::numeric_limits<double>::quiet_NaN())}),
            std::numeric_limits<int>::min()};
      current_statement__ = 2;
      std::get<0>(std::get<0>(x)[(1 - 1)]) = 5;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "tuple_ix_assign4_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_ix_assign4_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_ix_assign4_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_ix_assign4_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_ix_assign4_model_namespace::tuple_ix_assign4_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_ix_assign4_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple-nested-param.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_nested_param_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 3> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple-nested-param.stan', line 2, column 2 to column 23)",
  " (in 'tuple-nested-param.stan', line 3, column 2 to column 47)"};
class tuple_nested_param_model final : public model_base_crtp<tuple_nested_param_model> {
 private:
  
 public:
  ~tuple_nested_param_model() {}
  tuple_nested_param_model(stan::io::var_context& context__, unsigned int
                           random_seed__ = 0, std::ostream*
                           pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_nested_param_model_namespace::tuple_nested_param_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    num_params_r__ = (1 + 1) + (1 + (1 + (10 * 10)));
  }
  inline std::string model_name() const final {
    return "tuple_nested_param_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_nested_param_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = in__.template read<local_scalar_t__>();
      current_statement__ = 1;
      std::get<1>(ps) = in__.template read<local_scalar_t__>();
      std::tuple<local_scalar_t__,
        std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,-1>>>
        ps2 =
        std::tuple<local_scalar_t__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,-1>>>{DUMMY_VAR__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,-1>>{DUMMY_VAR__,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(10, 10,
              DUMMY_VAR__)}};
      current_statement__ = 2;
      std::get<0>(ps2) = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      std::get<0>(std::get<1>(ps2)) = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      std::get<1>(std::get<1>(ps2)) = in__.template read<
                                        Eigen::Matrix<local_scalar_t__,-1,-1>>(10,
                                        10);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_nested_param_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = in__.template read<local_scalar_t__>();
      current_statement__ = 1;
      std::get<1>(ps) = in__.template read<local_scalar_t__>();
      std::tuple<local_scalar_t__,
        std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,-1>>>
        ps2 =
        std::tuple<local_scalar_t__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,-1>>>{DUMMY_VAR__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,-1>>{DUMMY_VAR__,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(10, 10,
              DUMMY_VAR__)}};
      current_statement__ = 2;
      std::get<0>(ps2) = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      std::get<0>(std::get<1>(ps2)) = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      std::get<1>(std::get<1>(ps2)) = in__.template read<
                                        Eigen::Matrix<local_scalar_t__,-1,-1>>(10,
                                        10);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_nested_param_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<double, double> ps =
        std::tuple<double, double>{std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN()};
      current_statement__ = 1;
      std::get<0>(ps) = in__.template read<local_scalar_t__>();
      current_statement__ = 1;
      std::get<1>(ps) = in__.template read<local_scalar_t__>();
      std::tuple<double, std::tuple<double, Eigen::Matrix<double,-1,-1>>>
        ps2 =
        std::tuple<double, std::tuple<double, Eigen::Matrix<double,-1,-1>>>{
          std::numeric_limits<double>::quiet_NaN(),
          std::tuple<double, Eigen::Matrix<double,-1,-1>>{std::numeric_limits<double>::quiet_NaN(
                                                            ),
            Eigen::Matrix<double,-1,-1>::Constant(10, 10,
              std::numeric_limits<double>::quiet_NaN())}};
      current_statement__ = 2;
      std::get<0>(ps2) = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      std::get<0>(std::get<1>(ps2)) = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      std::get<1>(std::get<1>(ps2)) = in__.template read<
                                        Eigen::Matrix<local_scalar_t__,-1,-1>>(10,
                                        10);
      out__.write(std::get<0>(ps));
      out__.write(std::get<1>(ps));
      out__.write(std::get<0>(ps2));
      out__.write(std::get<0>(std::get<1>(ps2)));
      out__.write(std::get<1>(std::get<1>(ps2)));
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = in__.read<local_scalar_t__>();
      current_statement__ = 1;
      std::get<1>(ps) = in__.read<local_scalar_t__>();
      out__.write(std::get<0>(ps));
      out__.write(std::get<1>(ps));
      std::tuple<local_scalar_t__,
        std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,-1>>>
        ps2 =
        std::tuple<local_scalar_t__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,-1>>>{DUMMY_VAR__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,-1>>{DUMMY_VAR__,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(10, 10,
              DUMMY_VAR__)}};
      current_statement__ = 2;
      std::get<0>(ps2) = in__.read<local_scalar_t__>();
      current_statement__ = 2;
      std::get<0>(std::get<1>(ps2)) = in__.read<local_scalar_t__>();
      current_statement__ = 2;
      stan::model::assign(std::get<1>(std::get<1>(ps2)),
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(10, 10),
        "assigning variable ps2.2.2");
      out__.write(std::get<0>(ps2));
      out__.write(std::get<0>(std::get<1>(ps2)));
      out__.write(std::get<1>(std::get<1>(ps2)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "ps.1", "double",
        std::vector<size_t>{});
      context__.validate_dims("parameter initialization", "ps.2", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "ps2.1", "double",
        std::vector<size_t>{});
      context__.validate_dims("parameter initialization", "ps2.2.1",
        "double", std::vector<size_t>{});
      context__.validate_dims("parameter initialization", "ps2.2.2",
        "double",
        std::vector<size_t>{static_cast<size_t>(10), static_cast<size_t>(10)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = context__.vals_r("ps.1")[(1 - 1)];
      std::get<1>(ps) = context__.vals_r("ps.2")[(1 - 1)];
      out__.write(std::get<0>(ps));
      out__.write(std::get<1>(ps));
      std::tuple<local_scalar_t__,
        std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,-1>>>
        ps2 =
        std::tuple<local_scalar_t__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,-1>>>{DUMMY_VAR__,
          std::tuple<local_scalar_t__, Eigen::Matrix<local_scalar_t__,-1,-1>>{DUMMY_VAR__,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(10, 10,
              DUMMY_VAR__)}};
      current_statement__ = 2;
      std::get<0>(ps2) = context__.vals_r("ps2.1")[(1 - 1)];
      std::get<0>(std::get<1>(ps2)) = context__.vals_r("ps2.2.1")[(1 - 1)];
      {
        std::vector<local_scalar_t__> ps2_dot_2_dot_2_flat__;
        ps2_dot_2_dot_2_flat__ = context__.vals_r("ps2.2.2");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
            stan::model::assign(std::get<1>(std::get<1>(ps2)),
              ps2_dot_2_dot_2_flat__[(pos__ - 1)],
              "assigning variable ps2.2.2", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(std::get<0>(ps2));
      out__.write(std::get<0>(std::get<1>(ps2)));
      out__.write(std::get<1>(std::get<1>(ps2)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"ps.1", "ps.2", "ps2.1", "ps2.2.1",
                "ps2.2.2"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(10),
                  static_cast<size_t>(10)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(1));
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(2));
    param_names__.emplace_back(std::string() + "ps2" + ':' +
      std::to_string(1));
    param_names__.emplace_back(std::string() + "ps2" + ':' +
      std::to_string(2) + ':' + std::to_string(1));
    for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
        param_names__.emplace_back(std::string() + "ps2" + ':' +
          std::to_string(2) + ':' + std::to_string(2) + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(1));
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(2));
    param_names__.emplace_back(std::string() + "ps2" + ':' +
      std::to_string(1));
    param_names__.emplace_back(std::string() + "ps2" + ':' +
      std::to_string(2) + ':' + std::to_string(1));
    for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
        param_names__.emplace_back(std::string() + "ps2" + ':' +
          std::to_string(2) + ':' + std::to_string(2) + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"ps\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"real\"}]},\"block\":\"parameters\"},{\"name\":\"ps2\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"matrix\",\"rows\":" + std::to_string(10) + ",\"cols\":" + std::to_string(10) + "}]}]},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"ps\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"real\"}]},\"block\":\"parameters\"},{\"name\":\"ps2\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"matrix\",\"rows\":" + std::to_string(10) + ",\"cols\":" + std::to_string(10) + "}]}]},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + 1) + (1 + (1 + (10 * 10))));
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + 1) + (1 + (1 + (10 * 10))));
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_nested_param_model_namespace::tuple_nested_param_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_nested_param_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple-params.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_params_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 2> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple-params.stan', line 2, column 2 to column 32)"};
class tuple_params_model final : public model_base_crtp<tuple_params_model> {
 private:
  
 public:
  ~tuple_params_model() {}
  tuple_params_model(stan::io::var_context& context__, unsigned int
                     random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_params_model_namespace::tuple_params_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    num_params_r__ = (1 + 1);
  }
  inline std::string model_name() const final {
    return "tuple_params_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_params_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = in__.template read<local_scalar_t__>();
      current_statement__ = 1;
      std::get<1>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_params_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = in__.template read<local_scalar_t__>();
      current_statement__ = 1;
      std::get<1>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_params_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<double, double> ps =
        std::tuple<double, double>{std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN()};
      current_statement__ = 1;
      std::get<0>(ps) = in__.template read<local_scalar_t__>();
      current_statement__ = 1;
      std::get<1>(ps) = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(0, lp__);
      out__.write(std::get<0>(ps));
      out__.write(std::get<1>(ps));
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = in__.read<local_scalar_t__>();
      current_statement__ = 1;
      std::get<1>(ps) = in__.read<local_scalar_t__>();
      out__.write(std::get<0>(ps));
      out__.write_free_lb(0, std::get<1>(ps));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "ps.1", "double",
        std::vector<size_t>{});
      context__.validate_dims("parameter initialization", "ps.2", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::tuple<local_scalar_t__, local_scalar_t__> ps =
        std::tuple<local_scalar_t__, local_scalar_t__>{DUMMY_VAR__,
          DUMMY_VAR__};
      current_statement__ = 1;
      std::get<0>(ps) = context__.vals_r("ps.1")[(1 - 1)];
      std::get<1>(ps) = context__.vals_r("ps.2")[(1 - 1)];
      out__.write(std::get<0>(ps));
      out__.write_free_lb(0, std::get<1>(ps));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"ps.1", "ps.2"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(1));
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(2));
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(1));
    param_names__.emplace_back(std::string() + "ps" + ':' +
      std::to_string(2));
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"ps\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"real\"}]},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"ps\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"real\"}]},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (1 + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (1 + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_params_model_namespace::tuple_params_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_params_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple-promotion.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_promotion_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 22> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple-promotion.stan', line 24, column 2 to column 51)",
  " (in 'tuple-promotion.stan', line 25, column 2 to column 33)",
  " (in 'tuple-promotion.stan', line 27, column 2 to column 54)",
  " (in 'tuple-promotion.stan', line 29, column 2 to column 86)",
  " (in 'tuple-promotion.stan', line 30, column 2 to column 77)",
  " (in 'tuple-promotion.stan', line 34, column 2 to column 12)",
  " (in 'tuple-promotion.stan', line 35, column 2 to column 31)",
  " (in 'tuple-promotion.stan', line 36, column 2 to column 29)",
  " (in 'tuple-promotion.stan', line 37, column 2 to column 30)",
  " (in 'tuple-promotion.stan', line 31, column 2 to column 19)",
  " (in 'tuple-promotion.stan', line 7, column 2 to column 14)",
  " (in 'tuple-promotion.stan', line 8, column 2 to column 38)",
  " (in 'tuple-promotion.stan', line 11, column 2 to column 41)",
  " (in 'tuple-promotion.stan', line 13, column 2 to column 69)",
  " (in 'tuple-promotion.stan', line 15, column 2 to column 52)",
  " (in 'tuple-promotion.stan', line 17, column 2 to column 45)",
  " (in 'tuple-promotion.stan', line 18, column 2 to column 36)",
  " (in 'tuple-promotion.stan', line 19, column 2 to column 10)",
  " (in 'tuple-promotion.stan', line 21, column 2 to column 20)",
  " (in 'tuple-promotion.stan', line 3, column 4 to column 37)",
  " (in 'tuple-promotion.stan', line 2, column 53 to line 4, column 3)"};
template <typename T0__0__, typename T0__1__,
          stan::require_all_t<stan::is_stan_scalar<T0__0__>,
                              stan::is_stan_scalar<T0__1__>>* = nullptr>
stan::promote_args_t<T0__0__, T0__1__>
dummy(const std::tuple<std::vector<T0__0__>, std::vector<T0__1__>>& test,
      std::ostream* pstream__);
template <typename T0__0__, typename T0__1__,
          stan::require_all_t<stan::is_stan_scalar<T0__0__>,
                              stan::is_stan_scalar<T0__1__>>*>
stan::promote_args_t<T0__0__, T0__1__>
dummy(const std::tuple<std::vector<T0__0__>, std::vector<T0__1__>>& test,
      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__0__, T0__1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 20;
    return (stan::math::sum(std::get<0>(test)) +
           stan::math::sum(std::get<1>(test)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class tuple_promotion_model final : public model_base_crtp<tuple_promotion_model> {
 private:
  Eigen::Matrix<double,-1,1> V_data__;
  std::tuple<std::vector<int>, std::vector<int>> d;
  std::vector<std::tuple<int, std::vector<int>>> arrs;
  std::tuple<std::tuple<int, std::vector<int>>, int,
    std::tuple<Eigen::Matrix<double,-1,1>, int>> nested;
  std::tuple<std::vector<double>, std::complex<double>> basic;
  std::tuple<Eigen::Matrix<std::complex<double>,-1,1>, double> CV;
  std::tuple<Eigen::Matrix<double,-1,1>, int> V2;
  double t;
  Eigen::Map<Eigen::Matrix<double,-1,1>> V{nullptr, 0};
 public:
  ~tuple_promotion_model() {}
  tuple_promotion_model(stan::io::var_context& context__, unsigned int
                        random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_promotion_model_namespace::tuple_promotion_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 11;
      context__.validate_dims("data initialization", "V", "double",
        std::vector<size_t>{static_cast<size_t>(3)});
      V_data__ = Eigen::Matrix<double,-1,1>::Constant(3,
                   std::numeric_limits<double>::quiet_NaN());
      new (&V) Eigen::Map<Eigen::Matrix<double,-1,1>>(V_data__.data(), 3);
      {
        std::vector<local_scalar_t__> V_flat__;
        current_statement__ = 11;
        V_flat__ = context__.vals_r("V");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          stan::model::assign(V, V_flat__[(pos__ - 1)],
            "assigning variable V", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 12;
      context__.validate_dims("data initialization", "d.1", "int",
        std::vector<size_t>{static_cast<size_t>(3)});
      context__.validate_dims("data initialization", "d.2", "int",
        std::vector<size_t>{static_cast<size_t>(3)});
      d = std::tuple<std::vector<int>, std::vector<int>>{std::vector<int>(3,
                                                           std::numeric_limits<int>::min(
                                                             )),
            std::vector<int>(3, std::numeric_limits<int>::min())};
      current_statement__ = 12;
      std::get<0>(d) = context__.vals_i("d.1");
      std::get<1>(d) = context__.vals_i("d.2");
      current_statement__ = 13;
      arrs = std::vector<std::tuple<int, std::vector<int>>>(4,
               std::tuple<int, std::vector<int>>{std::numeric_limits<int>::min(
                                                   ),
                 std::vector<int>(2, std::numeric_limits<int>::min())});
      current_statement__ = 14;
      nested = std::tuple<std::tuple<int, std::vector<int>>, int,
                 std::tuple<Eigen::Matrix<double,-1,1>, int>>{std::tuple<int,
                                                                std::vector<
                                                                  int>>{
                                                                std::numeric_limits<int>::min(
                                                                  ),
                                                                std::vector<
                                                                  int>(2,
                                                                  std::numeric_limits<int>::min(
                                                                    ))},
                 std::numeric_limits<int>::min(),
                 std::tuple<Eigen::Matrix<double,-1,1>, int>{Eigen::Matrix<double,-1,1>::Constant(3,
                                                               std::numeric_limits<double>::quiet_NaN(
                                                                 )),
                   std::numeric_limits<int>::min()}};
      current_statement__ = 15;
      basic = std::tuple<std::vector<double>, std::complex<double>>{std::vector<
                                                                    double>(2,
                                                                    std::numeric_limits<double>::quiet_NaN(
                                                                    )),
                std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                  std::numeric_limits<double>::quiet_NaN())};
      current_statement__ = 15;
      stan::model::assign(basic,
        std::tuple<std::vector<double>, std::complex<double>>(std::vector<
                                                                double>{1, 2},
          stan::math::to_complex(3, 0)), "assigning variable basic");
      current_statement__ = 16;
      CV = std::tuple<Eigen::Matrix<std::complex<double>,-1,1>, double>{
             Eigen::Matrix<std::complex<double>,-1,1>::Constant(3,
               std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                 std::numeric_limits<double>::quiet_NaN())),
             std::numeric_limits<double>::quiet_NaN()};
      current_statement__ = 16;
      stan::model::assign(CV,
        std::tuple<Eigen::Matrix<std::complex<double>,-1,1>, double>(
          stan::math::promote_scalar<std::complex<double>>(V), 2),
        "assigning variable CV");
      current_statement__ = 17;
      V2 = std::tuple<Eigen::Matrix<double,-1,1>, int>{Eigen::Matrix<double,-1,1>::Constant(3,
                                                         std::numeric_limits<double>::quiet_NaN(
                                                           )),
             std::numeric_limits<int>::min()};
      current_statement__ = 17;
      stan::model::assign(V2,
        std::tuple<Eigen::Matrix<double,-1,1>, int>(V, 2),
        "assigning variable V2");
      current_statement__ = 18;
      stan::model::assign(CV,
        stan::math::promote_scalar<std::tuple<std::complex<double>, double>>(
          V2), "assigning variable CV");
      current_statement__ = 19;
      t = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 19;
      t = dummy(stan::math::promote_scalar<std::tuple<double, double>>(d),
            pstream__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "tuple_promotion_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_promotion_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<std::vector<std::complex<local_scalar_t__>>,
        std::vector<std::complex<local_scalar_t__>>> d2 =
        std::tuple<std::vector<std::complex<local_scalar_t__>>,
          std::vector<std::complex<local_scalar_t__>>>{std::vector<
                                                         std::complex<local_scalar_t__>>(3,
                                                         std::complex<local_scalar_t__>(DUMMY_VAR__,
                                                           DUMMY_VAR__)),
          std::vector<std::complex<local_scalar_t__>>(3,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__))};
      current_statement__ = 1;
      stan::model::assign(d2,
        stan::math::promote_scalar<
          std::tuple<std::complex<local_scalar_t__>,
            std::complex<local_scalar_t__>>>(d), "assigning variable d2");
      std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__> V3 =
        std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__>{
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__),
          DUMMY_VAR__};
      current_statement__ = 2;
      stan::model::assign(V3,
        stan::math::promote_scalar<
          std::tuple<local_scalar_t__, local_scalar_t__>>(V2),
        "assigning variable V3");
      std::vector<
        std::tuple<local_scalar_t__,
          std::vector<std::complex<local_scalar_t__>>>> arrs2 =
        std::vector<
          std::tuple<local_scalar_t__,
            std::vector<std::complex<local_scalar_t__>>>>(4,
          std::tuple<local_scalar_t__,
            std::vector<std::complex<local_scalar_t__>>>{DUMMY_VAR__,
            std::vector<std::complex<local_scalar_t__>>(2,
              std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__))});
      current_statement__ = 3;
      stan::model::assign(arrs2,
        stan::math::promote_scalar<
          std::tuple<local_scalar_t__, std::complex<local_scalar_t__>>>(arrs),
        "assigning variable arrs2");
      std::tuple<
        std::tuple<local_scalar_t__,
          std::vector<std::complex<local_scalar_t__>>>,
        local_scalar_t__,
        std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__>>
        nested2 =
        std::tuple<
          std::tuple<local_scalar_t__,
            std::vector<std::complex<local_scalar_t__>>>,
          local_scalar_t__,
          std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__>>{
          std::tuple<local_scalar_t__,
            std::vector<std::complex<local_scalar_t__>>>{DUMMY_VAR__,
            std::vector<std::complex<local_scalar_t__>>(2,
              std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__))},
          DUMMY_VAR__,
          std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__>{
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__),
            DUMMY_VAR__}};
      current_statement__ = 4;
      stan::model::assign(nested2,
        stan::math::promote_scalar<
          std::tuple<
            std::tuple<local_scalar_t__, std::complex<local_scalar_t__>>,
            local_scalar_t__, std::tuple<local_scalar_t__, local_scalar_t__>>>(
          nested), "assigning variable nested2");
      std::tuple<
        std::tuple<local_scalar_t__,
          std::vector<std::complex<local_scalar_t__>>>,
        local_scalar_t__,
        std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__>>
        nested3 =
        std::tuple<
          std::tuple<local_scalar_t__,
            std::vector<std::complex<local_scalar_t__>>>,
          local_scalar_t__,
          std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__>>{
          std::tuple<local_scalar_t__,
            std::vector<std::complex<local_scalar_t__>>>{DUMMY_VAR__,
            std::vector<std::complex<local_scalar_t__>>(2,
              std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__))},
          DUMMY_VAR__,
          std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__>{
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__),
            DUMMY_VAR__}};
      current_statement__ = 10;
      stan::model::assign(nested3,
        stan::math::promote_scalar<
          std::tuple<
            std::tuple<local_scalar_t__, std::complex<local_scalar_t__>>,
            local_scalar_t__, std::tuple<local_scalar_t__, local_scalar_t__>>>(
          nested), "assigning variable nested3");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_promotion_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<std::vector<std::complex<local_scalar_t__>>,
        std::vector<std::complex<local_scalar_t__>>> d2 =
        std::tuple<std::vector<std::complex<local_scalar_t__>>,
          std::vector<std::complex<local_scalar_t__>>>{std::vector<
                                                         std::complex<local_scalar_t__>>(3,
                                                         std::complex<local_scalar_t__>(DUMMY_VAR__,
                                                           DUMMY_VAR__)),
          std::vector<std::complex<local_scalar_t__>>(3,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__))};
      current_statement__ = 1;
      stan::model::assign(d2,
        stan::math::promote_scalar<
          std::tuple<std::complex<local_scalar_t__>,
            std::complex<local_scalar_t__>>>(d), "assigning variable d2");
      std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__> V3 =
        std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__>{
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__),
          DUMMY_VAR__};
      current_statement__ = 2;
      stan::model::assign(V3,
        stan::math::promote_scalar<
          std::tuple<local_scalar_t__, local_scalar_t__>>(V2),
        "assigning variable V3");
      std::vector<
        std::tuple<local_scalar_t__,
          std::vector<std::complex<local_scalar_t__>>>> arrs2 =
        std::vector<
          std::tuple<local_scalar_t__,
            std::vector<std::complex<local_scalar_t__>>>>(4,
          std::tuple<local_scalar_t__,
            std::vector<std::complex<local_scalar_t__>>>{DUMMY_VAR__,
            std::vector<std::complex<local_scalar_t__>>(2,
              std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__))});
      current_statement__ = 3;
      stan::model::assign(arrs2,
        stan::math::promote_scalar<
          std::tuple<local_scalar_t__, std::complex<local_scalar_t__>>>(arrs),
        "assigning variable arrs2");
      std::tuple<
        std::tuple<local_scalar_t__,
          std::vector<std::complex<local_scalar_t__>>>,
        local_scalar_t__,
        std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__>>
        nested2 =
        std::tuple<
          std::tuple<local_scalar_t__,
            std::vector<std::complex<local_scalar_t__>>>,
          local_scalar_t__,
          std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__>>{
          std::tuple<local_scalar_t__,
            std::vector<std::complex<local_scalar_t__>>>{DUMMY_VAR__,
            std::vector<std::complex<local_scalar_t__>>(2,
              std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__))},
          DUMMY_VAR__,
          std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__>{
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__),
            DUMMY_VAR__}};
      current_statement__ = 4;
      stan::model::assign(nested2,
        stan::math::promote_scalar<
          std::tuple<
            std::tuple<local_scalar_t__, std::complex<local_scalar_t__>>,
            local_scalar_t__, std::tuple<local_scalar_t__, local_scalar_t__>>>(
          nested), "assigning variable nested2");
      std::tuple<
        std::tuple<local_scalar_t__,
          std::vector<std::complex<local_scalar_t__>>>,
        local_scalar_t__,
        std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__>>
        nested3 =
        std::tuple<
          std::tuple<local_scalar_t__,
            std::vector<std::complex<local_scalar_t__>>>,
          local_scalar_t__,
          std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__>>{
          std::tuple<local_scalar_t__,
            std::vector<std::complex<local_scalar_t__>>>{DUMMY_VAR__,
            std::vector<std::complex<local_scalar_t__>>(2,
              std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__))},
          DUMMY_VAR__,
          std::tuple<Eigen::Matrix<local_scalar_t__,-1,1>, local_scalar_t__>{
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(3, DUMMY_VAR__),
            DUMMY_VAR__}};
      current_statement__ = 10;
      stan::model::assign(nested3,
        stan::math::promote_scalar<
          std::tuple<
            std::tuple<local_scalar_t__, std::complex<local_scalar_t__>>,
            local_scalar_t__, std::tuple<local_scalar_t__, local_scalar_t__>>>(
          nested), "assigning variable nested3");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_promotion_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::tuple<std::vector<std::complex<double>>,
        std::vector<std::complex<double>>> d2 =
        std::tuple<std::vector<std::complex<double>>,
          std::vector<std::complex<double>>>{std::vector<
                                               std::complex<double>>(3,
                                               std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                                                    ),
                                                 std::numeric_limits<double>::quiet_NaN(
                                                   ))),
          std::vector<std::complex<double>>(3,
            std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
              std::numeric_limits<double>::quiet_NaN()))};
      std::tuple<Eigen::Matrix<double,-1,1>, double> V3 =
        std::tuple<Eigen::Matrix<double,-1,1>, double>{Eigen::Matrix<double,-1,1>::Constant(3,
                                                         std::numeric_limits<double>::quiet_NaN(
                                                           )),
          std::numeric_limits<double>::quiet_NaN()};
      std::vector<std::tuple<double, std::vector<std::complex<double>>>>
        arrs2 =
        std::vector<std::tuple<double, std::vector<std::complex<double>>>>(4,
          std::tuple<double, std::vector<std::complex<double>>>{std::numeric_limits<double>::quiet_NaN(
                                                                  ),
            std::vector<std::complex<double>>(2,
              std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                std::numeric_limits<double>::quiet_NaN()))});
      std::tuple<std::tuple<double, std::vector<std::complex<double>>>,
        double, std::tuple<Eigen::Matrix<double,-1,1>, double>> nested2 =
        std::tuple<std::tuple<double, std::vector<std::complex<double>>>,
          double, std::tuple<Eigen::Matrix<double,-1,1>, double>>{std::tuple<
                                                                    double,
                                                                    std::vector<
                                                                    std::complex<double>>>{
                                                                    std::numeric_limits<double>::quiet_NaN(
                                                                    ),
                                                                    std::vector<
                                                                    std::complex<double>>(2,
                                                                    std::complex<double>(
                                                                    std::numeric_limits<double>::quiet_NaN(
                                                                    ),
                                                                    std::numeric_limits<double>::quiet_NaN(
                                                                    )))},
          std::numeric_limits<double>::quiet_NaN(),
          std::tuple<Eigen::Matrix<double,-1,1>, double>{Eigen::Matrix<double,-1,1>::Constant(3,
                                                           std::numeric_limits<double>::quiet_NaN(
                                                             )),
            std::numeric_limits<double>::quiet_NaN()}};
      std::tuple<std::tuple<double, std::vector<std::complex<double>>>,
        double, std::tuple<Eigen::Matrix<double,-1,1>, double>> nested3 =
        std::tuple<std::tuple<double, std::vector<std::complex<double>>>,
          double, std::tuple<Eigen::Matrix<double,-1,1>, double>>{std::tuple<
                                                                    double,
                                                                    std::vector<
                                                                    std::complex<double>>>{
                                                                    std::numeric_limits<double>::quiet_NaN(
                                                                    ),
                                                                    std::vector<
                                                                    std::complex<double>>(2,
                                                                    std::complex<double>(
                                                                    std::numeric_limits<double>::quiet_NaN(
                                                                    ),
                                                                    std::numeric_limits<double>::quiet_NaN(
                                                                    )))},
          std::numeric_limits<double>::quiet_NaN(),
          std::tuple<Eigen::Matrix<double,-1,1>, double>{Eigen::Matrix<double,-1,1>::Constant(3,
                                                           std::numeric_limits<double>::quiet_NaN(
                                                             )),
            std::numeric_limits<double>::quiet_NaN()}};
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 1;
      stan::model::assign(d2,
        stan::math::promote_scalar<
          std::tuple<std::complex<local_scalar_t__>,
            std::complex<local_scalar_t__>>>(d), "assigning variable d2");
      current_statement__ = 2;
      stan::model::assign(V3,
        stan::math::promote_scalar<
          std::tuple<local_scalar_t__, local_scalar_t__>>(V2),
        "assigning variable V3");
      current_statement__ = 3;
      stan::model::assign(arrs2,
        stan::math::promote_scalar<
          std::tuple<local_scalar_t__, std::complex<local_scalar_t__>>>(arrs),
        "assigning variable arrs2");
      current_statement__ = 4;
      stan::model::assign(nested2,
        stan::math::promote_scalar<
          std::tuple<
            std::tuple<local_scalar_t__, std::complex<local_scalar_t__>>,
            local_scalar_t__, std::tuple<local_scalar_t__, local_scalar_t__>>>(
          nested), "assigning variable nested2");
      current_statement__ = 10;
      stan::model::assign(nested3,
        stan::math::promote_scalar<
          std::tuple<
            std::tuple<local_scalar_t__, std::complex<local_scalar_t__>>,
            local_scalar_t__, std::tuple<local_scalar_t__, local_scalar_t__>>>(
          nested), "assigning variable nested3");
      if (emit_transformed_parameters__) {
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          out__.write(std::get<0>(d2)[(sym1__ - 1)]);
        }
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          out__.write(std::get<1>(d2)[(sym1__ - 1)]);
        }
        out__.write(std::get<0>(V3));
        out__.write(std::get<1>(V3));
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          out__.write(std::get<0>(arrs2[(sym1__ - 1)]));
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            out__.write(std::get<1>(arrs2[(sym1__ - 1)])[(sym2__ - 1)]);
          }
        }
        out__.write(std::get<0>(std::get<0>(nested2)));
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          out__.write(std::get<1>(std::get<0>(nested2))[(sym1__ - 1)]);
        }
        out__.write(std::get<1>(nested2));
        out__.write(std::get<0>(std::get<2>(nested2)));
        out__.write(std::get<1>(std::get<2>(nested2)));
        out__.write(std::get<0>(std::get<0>(nested3)));
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          out__.write(std::get<1>(std::get<0>(nested3))[(sym1__ - 1)]);
        }
        out__.write(std::get<1>(nested3));
        out__.write(std::get<0>(std::get<2>(nested3)));
        out__.write(std::get<1>(std::get<2>(nested3)));
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      int y = std::numeric_limits<int>::min();
      current_statement__ = 6;
      y = 1;
      std::tuple<double, double> x =
        std::tuple<double, double>{std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN()};
      current_statement__ = 7;
      stan::model::assign(x, std::forward_as_tuple(y, 3),
        "assigning variable x");
      std::tuple<std::complex<double>, double> z =
        std::tuple<std::complex<double>, double>{std::complex<double>(
                                                   std::numeric_limits<double>::quiet_NaN(
                                                     ),
                                                   std::numeric_limits<double>::quiet_NaN(
                                                     )),
          std::numeric_limits<double>::quiet_NaN()};
      current_statement__ = 8;
      stan::model::assign(z,
        stan::math::promote_scalar<std::tuple<std::complex<double>, double>>(
          x), "assigning variable z");
      std::tuple<std::complex<double>, double> z2 =
        std::tuple<std::complex<double>, double>{std::complex<double>(
                                                   std::numeric_limits<double>::quiet_NaN(
                                                     ),
                                                   std::numeric_limits<double>::quiet_NaN(
                                                     )),
          std::numeric_limits<double>::quiet_NaN()};
      current_statement__ = 9;
      stan::model::assign(z2, z, "assigning variable z2");
      out__.write(y);
      out__.write(std::get<0>(x));
      out__.write(std::get<1>(x));
      out__.write(std::get<0>(z));
      out__.write(std::get<1>(z));
      out__.write(std::get<0>(z2));
      out__.write(std::get<1>(z2));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"d2.1", "d2.2", "V3.1", "V3.2", "arrs2.1", "arrs2.2",
             "nested2.1.1", "nested2.1.2", "nested2.2", "nested2.3.1",
             "nested2.3.2", "nested3.1.1", "nested3.1.2", "nested3.2",
             "nested3.3.1", "nested3.3.2"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"y", "x.1", "x.2", "z.1", "z.2", "z2.1", "z2.2"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(3),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(3),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(3)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(4)},
             std::vector<size_t>{static_cast<size_t>(4),
               static_cast<size_t>(2), static_cast<size_t>(2)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(2),
               static_cast<size_t>(2)}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(3)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(2),
               static_cast<size_t>(2)}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(3)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "d2" + ':' +
          std::to_string(1) + '.' + std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "d2" + ':' +
          std::to_string(1) + '.' + std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "d2" + ':' +
          std::to_string(2) + '.' + std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "d2" + ':' +
          std::to_string(2) + '.' + std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "V3" + ':' +
          std::to_string(1) + '.' + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "V3" + ':' +
        std::to_string(2));
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        param_names__.emplace_back(std::string() + "arrs2" + '.' +
          std::to_string(sym1__) + ':' + std::to_string(1));
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          param_names__.emplace_back(std::string() + "arrs2" + '.' +
            std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym2__) + '.' + "real");
          param_names__.emplace_back(std::string() + "arrs2" + '.' +
            std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym2__) + '.' + "imag");
        }
      }
      param_names__.emplace_back(std::string() + "nested2" + ':' +
        std::to_string(1) + ':' + std::to_string(1));
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "nested2" + ':' +
          std::to_string(1) + ':' + std::to_string(2) + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "nested2" + ':' +
          std::to_string(1) + ':' + std::to_string(2) + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      param_names__.emplace_back(std::string() + "nested2" + ':' +
        std::to_string(2));
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "nested2" + ':' +
          std::to_string(3) + ':' + std::to_string(1) + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "nested2" + ':' +
        std::to_string(3) + ':' + std::to_string(2));
      param_names__.emplace_back(std::string() + "nested3" + ':' +
        std::to_string(1) + ':' + std::to_string(1));
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "nested3" + ':' +
          std::to_string(1) + ':' + std::to_string(2) + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "nested3" + ':' +
          std::to_string(1) + ':' + std::to_string(2) + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      param_names__.emplace_back(std::string() + "nested3" + ':' +
        std::to_string(2));
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "nested3" + ':' +
          std::to_string(3) + ':' + std::to_string(1) + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "nested3" + ':' +
        std::to_string(3) + ':' + std::to_string(2));
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "y");
      param_names__.emplace_back(std::string() + "x" + ':' +
        std::to_string(1));
      param_names__.emplace_back(std::string() + "x" + ':' +
        std::to_string(2));
      param_names__.emplace_back(std::string() + "z" + ':' +
        std::to_string(1) + '.' + "real");
      param_names__.emplace_back(std::string() + "z" + ':' +
        std::to_string(1) + '.' + "imag");
      param_names__.emplace_back(std::string() + "z" + ':' +
        std::to_string(2));
      param_names__.emplace_back(std::string() + "z2" + ':' +
        std::to_string(1) + '.' + "real");
      param_names__.emplace_back(std::string() + "z2" + ':' +
        std::to_string(1) + '.' + "imag");
      param_names__.emplace_back(std::string() + "z2" + ':' +
        std::to_string(2));
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "d2" + ':' +
          std::to_string(1) + '.' + std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "d2" + ':' +
          std::to_string(1) + '.' + std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "d2" + ':' +
          std::to_string(2) + '.' + std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "d2" + ':' +
          std::to_string(2) + '.' + std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "V3" + ':' +
          std::to_string(1) + '.' + std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "V3" + ':' +
        std::to_string(2));
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        param_names__.emplace_back(std::string() + "arrs2" + '.' +
          std::to_string(sym1__) + ':' + std::to_string(1));
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          param_names__.emplace_back(std::string() + "arrs2" + '.' +
            std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym2__) + '.' + "real");
          param_names__.emplace_back(std::string() + "arrs2" + '.' +
            std::to_string(sym1__) + ':' + std::to_string(2) + '.' +
            std::to_string(sym2__) + '.' + "imag");
        }
      }
      param_names__.emplace_back(std::string() + "nested2" + ':' +
        std::to_string(1) + ':' + std::to_string(1));
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "nested2" + ':' +
          std::to_string(1) + ':' + std::to_string(2) + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "nested2" + ':' +
          std::to_string(1) + ':' + std::to_string(2) + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      param_names__.emplace_back(std::string() + "nested2" + ':' +
        std::to_string(2));
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "nested2" + ':' +
          std::to_string(3) + ':' + std::to_string(1) + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "nested2" + ':' +
        std::to_string(3) + ':' + std::to_string(2));
      param_names__.emplace_back(std::string() + "nested3" + ':' +
        std::to_string(1) + ':' + std::to_string(1));
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "nested3" + ':' +
          std::to_string(1) + ':' + std::to_string(2) + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "nested3" + ':' +
          std::to_string(1) + ':' + std::to_string(2) + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      param_names__.emplace_back(std::string() + "nested3" + ':' +
        std::to_string(2));
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "nested3" + ':' +
          std::to_string(3) + ':' + std::to_string(1) + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "nested3" + ':' +
        std::to_string(3) + ':' + std::to_string(2));
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "y");
      param_names__.emplace_back(std::string() + "x" + ':' +
        std::to_string(1));
      param_names__.emplace_back(std::string() + "x" + ':' +
        std::to_string(2));
      param_names__.emplace_back(std::string() + "z" + ':' +
        std::to_string(1) + '.' + "real");
      param_names__.emplace_back(std::string() + "z" + ':' +
        std::to_string(1) + '.' + "imag");
      param_names__.emplace_back(std::string() + "z" + ':' +
        std::to_string(2));
      param_names__.emplace_back(std::string() + "z2" + ':' +
        std::to_string(1) + '.' + "real");
      param_names__.emplace_back(std::string() + "z2" + ':' +
        std::to_string(1) + '.' + "imag");
      param_names__.emplace_back(std::string() + "z2" + ':' +
        std::to_string(2));
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"d2\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}},{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}]},\"block\":\"transformed_parameters\"},{\"name\":\"V3\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},{\"name\":\"real\"}]},\"block\":\"transformed_parameters\"},{\"name\":\"arrs2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}}]}},\"block\":\"transformed_parameters\"},{\"name\":\"nested2\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"3\",\"element_types\":[{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}}]},{\"name\":\"real\"},{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},{\"name\":\"real\"}]}]},\"block\":\"transformed_parameters\"},{\"name\":\"nested3\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"3\",\"element_types\":[{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}}]},{\"name\":\"real\"},{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},{\"name\":\"real\"}]}]},\"block\":\"transformed_parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"x\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"real\"}]},\"block\":\"generated_quantities\"},{\"name\":\"z\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"complex\"},{\"name\":\"real\"}]},\"block\":\"generated_quantities\"},{\"name\":\"z2\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"complex\"},{\"name\":\"real\"}]},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"d2\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}},{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}]},\"block\":\"transformed_parameters\"},{\"name\":\"V3\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},{\"name\":\"real\"}]},\"block\":\"transformed_parameters\"},{\"name\":\"arrs2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}}]}},\"block\":\"transformed_parameters\"},{\"name\":\"nested2\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"3\",\"element_types\":[{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}}]},{\"name\":\"real\"},{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},{\"name\":\"real\"}]}]},\"block\":\"transformed_parameters\"},{\"name\":\"nested3\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"3\",\"element_types\":[{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}}]},{\"name\":\"real\"},{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},{\"name\":\"real\"}]}]},\"block\":\"transformed_parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"x\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"real\"},{\"name\":\"real\"}]},\"block\":\"generated_quantities\"},{\"name\":\"z\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"complex\"},{\"name\":\"real\"}]},\"block\":\"generated_quantities\"},{\"name\":\"z2\",\"type\":{\"name\":\"tuple\",\"num_elements\":\"2\",\"element_types\":[{\"name\":\"complex\"},{\"name\":\"real\"}]},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (((((((3 *
      2) + (3 * 2)) + (3 + 1)) + (4 * (1 + (2 * 2)))) + (((1 + (2 * 2)) + 1)
      + (3 + 1))) + (((1 + (2 * 2)) + 1) + (3 + 1))));
    const size_t num_gen_quantities = emit_generated_quantities * ((((1 + (1
      + 1)) + (2 + 1)) + (2 + 1)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (((((((3 *
      2) + (3 * 2)) + (3 + 1)) + (4 * (1 + (2 * 2)))) + (((1 + (2 * 2)) + 1)
      + (3 + 1))) + (((1 + (2 * 2)) + 1) + (3 + 1))));
    const size_t num_gen_quantities = emit_generated_quantities * ((((1 + (1
      + 1)) + (2 + 1)) + (2 + 1)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_promotion_model_namespace::tuple_promotion_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_promotion_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple-templating.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_templating_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 26> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple-templating.stan', line 34, column 2 to column 26)",
  " (in 'tuple-templating.stan', line 32, column 2 to column 19)",
  " (in 'tuple-templating.stan', line 36, column 2 to column 22)",
  " (in 'tuple-templating.stan', line 39, column 2 to column 68)",
  " (in 'tuple-templating.stan', line 24, column 2 to column 8)",
  " (in 'tuple-templating.stan', line 25, column 9 to column 10)",
  " (in 'tuple-templating.stan', line 25, column 12 to column 13)",
  " (in 'tuple-templating.stan', line 25, column 2 to column 18)",
  " (in 'tuple-templating.stan', line 26, column 9 to column 10)",
  " (in 'tuple-templating.stan', line 26, column 12 to column 13)",
  " (in 'tuple-templating.stan', line 26, column 2 to column 18)",
  " (in 'tuple-templating.stan', line 27, column 8 to column 9)",
  " (in 'tuple-templating.stan', line 27, column 2 to column 18)",
  " (in 'tuple-templating.stan', line 28, column 8 to column 9)",
  " (in 'tuple-templating.stan', line 28, column 2 to column 19)",
  " (in 'tuple-templating.stan', line 3, column 4 to column 18)",
  " (in 'tuple-templating.stan', line 2, column 35 to line 4, column 3)",
  " (in 'tuple-templating.stan', line 7, column 4 to column 20)",
  " (in 'tuple-templating.stan', line 6, column 48 to line 8, column 3)",
  " (in 'tuple-templating.stan', line 11, column 4 to column 21)",
  " (in 'tuple-templating.stan', line 10, column 44 to line 12, column 3)",
  " (in 'tuple-templating.stan', line 15, column 4 to column 18)",
  " (in 'tuple-templating.stan', line 14, column 38 to line 16, column 3)",
  " (in 'tuple-templating.stan', line 20, column 4 to column 18)",
  " (in 'tuple-templating.stan', line 19, column 57 to line 21, column 3)"};
template <typename T0__0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__0__>,
                              stan::is_vt_not_complex<T0__0__>>* = nullptr>
void foo(const std::tuple<T0__0__, int>& test, std::ostream* pstream__);
template <typename T0__1__,
          stan::require_all_t<stan::is_stan_scalar<T0__1__>>* = nullptr>
stan::promote_args_t<T0__1__>
tsum(const std::tuple<std::vector<int>, std::vector<T0__1__>>& s,
     std::ostream* pstream__);
template <typename T0__0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__0__>,
                              stan::is_vt_not_complex<T0__0__>>* = nullptr>
void
foo2(const std::vector<std::tuple<T0__0__, int>>& test, std::ostream*
     pstream__);
template <typename T0__0__, typename T0__1__,
          stan::require_all_t<stan::is_stan_scalar<T0__0__>,
                              stan::is_eigen_matrix_dynamic<T0__1__>,
                              stan::is_vt_not_complex<T0__1__>>* = nullptr>
void foo3(const std::tuple<T0__0__, T0__1__>& test, std::ostream* pstream__);
template <typename T0__0__, typename T0__1__1__, typename T0__2__,
          typename T1__1__,
          stan::require_all_t<stan::is_stan_scalar<T0__0__>,
                              stan::is_eigen_matrix_dynamic<T0__1__1__>,
                              stan::is_vt_not_complex<T0__1__1__>,
                              stan::is_stan_scalar<T0__2__>,
                              stan::is_eigen_matrix_dynamic<T1__1__>,
                              stan::is_vt_not_complex<T1__1__>>* = nullptr>
void
overly_complicated(const std::tuple<
                           std::vector<Eigen::Matrix<T0__0__,-1,-1>>,
                           std::tuple<int, T0__1__1__>, T0__2__>& t1,
                   const std::vector<std::tuple<int, T1__1__>>& t2,
                   std::ostream* pstream__);
template <typename T0__0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__0__>,
                              stan::is_vt_not_complex<T0__0__>>*>
void foo(const std::tuple<T0__0__, int>& test, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__0__>>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 16;
    if (pstream__) {
      stan::math::stan_print(pstream__, std::get<0>(test));
      *(pstream__) << std::endl;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__1__,
          stan::require_all_t<stan::is_stan_scalar<T0__1__>>*>
stan::promote_args_t<T0__1__>
tsum(const std::tuple<std::vector<int>, std::vector<T0__1__>>& s,
     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 18;
    return stan::math::sum(std::get<1>(s));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__0__>,
                              stan::is_vt_not_complex<T0__0__>>*>
void
foo2(const std::vector<std::tuple<T0__0__, int>>& test, std::ostream*
     pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__0__>>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 20;
    if (pstream__) {
      stan::math::stan_print(pstream__,
        std::get<0>(
          stan::model::rvalue(test, "test", stan::model::index_uni(1))));
      *(pstream__) << std::endl;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__0__, typename T0__1__,
          stan::require_all_t<stan::is_stan_scalar<T0__0__>,
                              stan::is_eigen_matrix_dynamic<T0__1__>,
                              stan::is_vt_not_complex<T0__1__>>*>
void foo3(const std::tuple<T0__0__, T0__1__>& test, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__0__,
                             stan::base_type_t<T0__1__>>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 22;
    if (pstream__) {
      stan::math::stan_print(pstream__, std::get<0>(test));
      *(pstream__) << std::endl;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__0__, typename T0__1__1__, typename T0__2__,
          typename T1__1__,
          stan::require_all_t<stan::is_stan_scalar<T0__0__>,
                              stan::is_eigen_matrix_dynamic<T0__1__1__>,
                              stan::is_vt_not_complex<T0__1__1__>,
                              stan::is_stan_scalar<T0__2__>,
                              stan::is_eigen_matrix_dynamic<T1__1__>,
                              stan::is_vt_not_complex<T1__1__>>*>
void
overly_complicated(const std::tuple<
                           std::vector<Eigen::Matrix<T0__0__,-1,-1>>,
                           std::tuple<int, T0__1__1__>, T0__2__>& t1,
                   const std::vector<std::tuple<int, T1__1__>>& t2,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__0__,
                             stan::base_type_t<T0__1__1__>, T0__2__,
                             stan::base_type_t<T1__1__>>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 24;
    if (pstream__) {
      stan::math::stan_print(pstream__, std::get<1>(std::get<1>(t1)));
      *(pstream__) << std::endl;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class tuple_templating_model final : public model_base_crtp<tuple_templating_model> {
 private:
  int N;
  Eigen::Matrix<double,-1,-1> m1_data__;
  Eigen::Matrix<double,-1,-1> m2_data__;
  std::vector<int> a1;
  std::vector<double> a2;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> m1{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> m2{nullptr, 0, 0};
 public:
  ~tuple_templating_model() {}
  tuple_templating_model(stan::io::var_context& context__, unsigned int
                         random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_templating_model_namespace::tuple_templating_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 5;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 5;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 6;
      stan::math::validate_non_negative_index("m1", "N", N);
      current_statement__ = 7;
      stan::math::validate_non_negative_index("m1", "N", N);
      current_statement__ = 8;
      context__.validate_dims("data initialization", "m1", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      m1_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&m1) Eigen::Map<Eigen::Matrix<double,-1,-1>>(m1_data__.data(), N,
        N);
      {
        std::vector<local_scalar_t__> m1_flat__;
        current_statement__ = 8;
        m1_flat__ = context__.vals_r("m1");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(m1, m1_flat__[(pos__ - 1)],
              "assigning variable m1", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 9;
      stan::math::validate_non_negative_index("m2", "N", N);
      current_statement__ = 10;
      stan::math::validate_non_negative_index("m2", "N", N);
      current_statement__ = 11;
      context__.validate_dims("data initialization", "m2", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      m2_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&m2) Eigen::Map<Eigen::Matrix<double,-1,-1>>(m2_data__.data(), N,
        N);
      {
        std::vector<local_scalar_t__> m2_flat__;
        current_statement__ = 11;
        m2_flat__ = context__.vals_r("m2");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(m2, m2_flat__[(pos__ - 1)],
              "assigning variable m2", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 12;
      stan::math::validate_non_negative_index("a1", "N", N);
      current_statement__ = 13;
      context__.validate_dims("data initialization", "a1", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      a1 = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 13;
      a1 = context__.vals_i("a1");
      current_statement__ = 14;
      stan::math::validate_non_negative_index("a2", "N", N);
      current_statement__ = 15;
      context__.validate_dims("data initialization", "a2", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      a2 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      a2 = context__.vals_r("a2");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "tuple_templating_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_templating_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_templating_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_templating_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      current_statement__ = 2;
      foo(
        std::tuple<Eigen::Matrix<double,-1,-1>, int>(stan::math::add(m1, m2),
          1), pstream__);
      double s = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      s = tsum(std::tuple<std::vector<int>, std::vector<double>>(a1, a2),
            pstream__);
      current_statement__ = 3;
      foo2(
        std::vector<std::tuple<Eigen::Matrix<double,-1,-1>, int>>{std::tuple<
                                                                    Eigen::Matrix<double,-1,-1>,
                                                                    int>(
                                                                    stan::math::add(
                                                                    m1, m2),
                                                                    1)},
        pstream__);
      current_statement__ = 4;
      overly_complicated(
        std::tuple<std::vector<Eigen::Matrix<double,-1,-1>>,
          std::tuple<int, Eigen::Matrix<double,-1,-1>>, double>(std::vector<
                                                                  Eigen::Matrix<double,-1,-1>>{
                                                                  stan::math::add(
                                                                    m1, m2)},
          std::tuple<int, Eigen::Matrix<double,-1,-1>>(1, m1), 3.5),
        std::vector<std::tuple<int, Eigen::Matrix<double,-1,-1>>>{std::tuple<
                                                                    int,
                                                                    Eigen::Matrix<double,-1,-1>>(1,
                                                                    m1),
          std::tuple<int, Eigen::Matrix<double,-1,-1>>(2, m2)}, pstream__);
      out__.write(s);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"s"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>> temp{std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "s");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "s");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"s\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"s\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (1);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (1);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_templating_model_namespace::tuple_templating_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_templating_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple_hof.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_hof_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 12> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple_hof.stan', line 16, column 2 to column 24)",
  " (in 'tuple_hof.stan', line 19, column 2 to column 50)",
  " (in 'tuple_hof.stan', line 8, column 2 to column 8)",
  " (in 'tuple_hof.stan', line 9, column 8 to column 9)",
  " (in 'tuple_hof.stan', line 9, column 2 to column 23)",
  " (in 'tuple_hof.stan', line 10, column 20 to column 21)",
  " (in 'tuple_hof.stan', line 10, column 2 to column 35)",
  " (in 'tuple_hof.stan', line 13, column 2 to column 49)",
  " (in 'tuple_hof.stan', line 16, column 8 to column 9)",
  " (in 'tuple_hof.stan', line 4, column 4 to column 30)",
  " (in 'tuple_hof.stan', line 3, column 39 to line 5, column 3)"};
template <typename T0__, typename T3__0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T3__0__>>* = nullptr>
stan::promote_args_t<T0__, T3__0__>
fun(const std::vector<T0__>& y_slice, const int& start, const int& end,
    const std::tuple<T3__0__, std::vector<int>>& m, std::ostream* pstream__);
struct fun_rsfunctor__ {
  template <typename T0__, typename T3__0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T3__0__>>* = nullptr>
  stan::promote_args_t<T0__, T3__0__>
  operator()(const std::vector<T0__>& y_slice, const int& start, const int&
             end, std::ostream* pstream__,
             const std::tuple<T3__0__, std::vector<int>>& m) const {
    return fun(y_slice, (start + 1), (end + 1), m, pstream__);
  }
};
template <typename T0__, typename T3__0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T3__0__>>*>
stan::promote_args_t<T0__, T3__0__>
fun(const std::vector<T0__>& y_slice, const int& start, const int& end,
    const std::tuple<T3__0__, std::vector<int>>& m, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 10;
    return (stan::math::sum(y_slice) * std::get<0>(m));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class tuple_hof_model final : public model_base_crtp<tuple_hof_model> {
 private:
  int N;
  std::vector<double> data_y;
  std::tuple<double, std::vector<int>> data_m;
  double sum1;
 public:
  ~tuple_hof_model() {}
  tuple_hof_model(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_hof_model_namespace::tuple_hof_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 3;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 3;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 4;
      stan::math::validate_non_negative_index("data_y", "N", N);
      current_statement__ = 5;
      context__.validate_dims("data initialization", "data_y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      data_y = std::vector<double>(N,
                 std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      data_y = context__.vals_r("data_y");
      current_statement__ = 6;
      stan::math::validate_non_negative_index("data_m", "N", N);
      current_statement__ = 7;
      context__.validate_dims("data initialization", "data_m.1", "double",
        std::vector<size_t>{});
      context__.validate_dims("data initialization", "data_m.2", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      data_m = std::tuple<double, std::vector<int>>{std::numeric_limits<double>::quiet_NaN(
                                                      ),
                 std::vector<int>(N, std::numeric_limits<int>::min())};
      current_statement__ = 7;
      std::get<0>(data_m) = context__.vals_r("data_m.1")[(1 - 1)];
      std::get<1>(data_m) = context__.vals_i("data_m.2");
      current_statement__ = 8;
      sum1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      sum1 = stan::math::reduce_sum<fun_rsfunctor__>(data_y, 1, pstream__,
               data_m);
      current_statement__ = 9;
      stan::math::validate_non_negative_index("param_y", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N;
  }
  inline std::string model_name() const final {
    return "tuple_hof_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_hof_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> param_y =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 1;
      param_y = in__.template read<std::vector<local_scalar_t__>>(N);
      local_scalar_t__ sum2 = DUMMY_VAR__;
      current_statement__ = 2;
      sum2 = stan::math::reduce_sum<fun_rsfunctor__>(param_y, 1, pstream__,
               data_m);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_hof_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> param_y =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 1;
      param_y = in__.template read<std::vector<local_scalar_t__>>(N);
      local_scalar_t__ sum2 = DUMMY_VAR__;
      current_statement__ = 2;
      sum2 = stan::math::reduce_sum<fun_rsfunctor__>(param_y, 1, pstream__,
               data_m);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_hof_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> param_y =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      param_y = in__.template read<std::vector<local_scalar_t__>>(N);
      double sum2 = std::numeric_limits<double>::quiet_NaN();
      out__.write(param_y);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 2;
      sum2 = stan::math::reduce_sum<fun_rsfunctor__>(param_y, 1, pstream__,
               data_m);
      if (emit_transformed_parameters__) {
        out__.write(sum2);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      std::vector<local_scalar_t__> param_y =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(param_y,
        in__.read<std::vector<local_scalar_t__>>(N),
        "assigning variable param_y");
      out__.write(param_y);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "param_y",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      std::vector<local_scalar_t__> param_y =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 1;
      param_y = context__.vals_r("param_y");
      out__.write(param_y);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"param_y"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"sum2"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(N)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>> temp{std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "param_y" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "sum2");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "param_y" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "sum2");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"param_y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sum2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"param_y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sum2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = N;
    const size_t num_transformed = emit_transformed_parameters * (1);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = N;
    const size_t num_transformed = emit_transformed_parameters * (1);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_hof_model_namespace::tuple_hof_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_hof_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple_lpdf.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_lpdf_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 4> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple_lpdf.stan', line 8, column 3 to column 34)",
  " (in 'tuple_lpdf.stan', line 3, column 5 to column 14)",
  " (in 'tuple_lpdf.stan', line 2, column 63 to line 4, column 4)"};
template <bool propto__, typename T0__0__, typename T0__1__,
          typename T1__0__, typename T1__1__, typename T1__2__,
          stan::require_all_t<stan::is_stan_scalar<T0__0__>,
                              stan::is_stan_scalar<T0__1__>,
                              stan::is_stan_scalar<T1__0__>,
                              stan::is_stan_scalar<T1__1__>,
                              stan::is_stan_scalar<T1__2__>>* = nullptr>
stan::promote_args_t<T0__0__, T0__1__, T1__0__, T1__1__, T1__2__>
foo_lpdf(const std::tuple<T0__0__, T0__1__>& x,
         const std::tuple<T1__0__, T1__1__, T1__2__>& y, std::ostream*
         pstream__);
template <bool propto__, typename T0__0__, typename T0__1__,
          typename T1__0__, typename T1__1__, typename T1__2__,
          stan::require_all_t<stan::is_stan_scalar<T0__0__>,
                              stan::is_stan_scalar<T0__1__>,
                              stan::is_stan_scalar<T1__0__>,
                              stan::is_stan_scalar<T1__1__>,
                              stan::is_stan_scalar<T1__2__>>*>
stan::promote_args_t<T0__0__, T0__1__, T1__0__, T1__1__, T1__2__>
foo_lpdf(const std::tuple<T0__0__, T0__1__>& x,
         const std::tuple<T1__0__, T1__1__, T1__2__>& y, std::ostream*
         pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__0__, T0__1__, T1__0__,
                             T1__1__, T1__2__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 2;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class tuple_lpdf_model final : public model_base_crtp<tuple_lpdf_model> {
 private:
  
 public:
  ~tuple_lpdf_model() {}
  tuple_lpdf_model(stan::io::var_context& context__, unsigned int
                   random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_lpdf_model_namespace::tuple_lpdf_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "tuple_lpdf_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_lpdf_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      lp_accum__.add(foo_lpdf<propto__>(std::forward_as_tuple(1.5, 2),
                       std::forward_as_tuple(1.2, 1.5, 4.5), pstream__));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_lpdf_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      lp_accum__.add(foo_lpdf<propto__>(std::forward_as_tuple(1.5, 2),
                       std::forward_as_tuple(1.2, 1.5, 4.5), pstream__));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_lpdf_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_lpdf_model_namespace::tuple_lpdf_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_lpdf_model_namespace::profiles__;
}
#endif
  $ ../../../../../install/default/bin/stanc -fsoa --print-cpp tuple_lpmf.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tuple_lpmf_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 4> locations_array__ =
  {" (found before start of program)",
  " (in 'tuple_lpmf.stan', line 8, column 2 to column 20)",
  " (in 'tuple_lpmf.stan', line 3, column 6 to column 25)",
  " (in 'tuple_lpmf.stan', line 2, column 42 to line 4, column 4)"};
template <bool propto__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T1__>>* = nullptr>
stan::promote_args_t<T1__>
foo_lpmf(const std::tuple<int, int>& x, const T1__& y, std::ostream*
         pstream__);
template <bool propto__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T1__>
foo_lpmf(const std::tuple<int, int>& x, const T1__& y, std::ostream*
         pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 2;
    return (std::get<0>(x) + (std::get<1>(x) * y));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class tuple_lpmf_model final : public model_base_crtp<tuple_lpmf_model> {
 private:
  
 public:
  ~tuple_lpmf_model() {}
  tuple_lpmf_model(stan::io::var_context& context__, unsigned int
                   random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "tuple_lpmf_model_namespace::tuple_lpmf_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "tuple_lpmf_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = -fsoa --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_lpmf_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      lp_accum__.add(foo_lpmf<propto__>(std::forward_as_tuple(1, 3), 0.5,
                       pstream__));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "tuple_lpmf_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      lp_accum__.add(foo_lpmf<propto__>(std::forward_as_tuple(1, 3), 0.5,
                       pstream__));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "tuple_lpmf_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = tuple_lpmf_model_namespace::tuple_lpmf_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return tuple_lpmf_model_namespace::profiles__;
}
#endif
