  $ ../../../../../install/default/bin/stanc --auto-format data_jacobian.stan
functions {
  real my_upper_bound_jacobian(real x, real ub) {
    jacobian += x;
    return ub - exp(x);
  }
}
data {
  real beta_raw;
  real ub;
}
transformed parameters {
  real beta = upper_bound_jacobian(beta_raw, ub);
  real beta2 = my_upper_bound_jacobian(beta_raw, ub);
}

Warning in 'data_jacobian.stan', line 14, column 14: Calling a _jacobian
    function without any parameter arguments still applies the Jacobian
    adjustments, ensure this is intentional! Consider using
    upper_bound_constrain instead.
Warning in 'data_jacobian.stan', line 15, column 15: Calling a _jacobian
    function without any parameter arguments still applies the Jacobian
    adjustments, ensure this is intentional!
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format deprecated_syntax.stan
functions {
  real jacobian(real x, int y) {
    return x + y;
  }
  void jacobian(real x, real y) {
    print(x + y);
  }
}
transformed data {
  print(jacobian(1.0, 2));
  jacobian(1.0, 2.0);
}
parameters {
  real jacobian;
}
model {
  if (1 < 2 < 3 < 4) {
    // multiple comparisons
  }
}

Warning in 'deprecated_syntax.stan', line 2, column 7: Variable name
    'jacobian' will be a reserved word starting in Stan 2.38. Please rename
    it!
Warning in 'deprecated_syntax.stan', line 5, column 7: Variable name
    'jacobian' will be a reserved word starting in Stan 2.38. Please rename
    it!
Warning in 'deprecated_syntax.stan', line 10, column 8: Variable name
    'jacobian' will be a reserved word starting in Stan 2.38. Please rename
    it!
Warning in 'deprecated_syntax.stan', line 11, column 2: Variable name
    'jacobian' will be a reserved word starting in Stan 2.38. Please rename
    it!
Warning in 'deprecated_syntax.stan', line 14, column 7: Variable name
    'jacobian' will be a reserved word starting in Stan 2.38. Please rename
    it!
Warning in 'deprecated_syntax.stan', line 17, column 6: Found 1 < 2 < 3. This
    is interpreted as (1 < 2) < 3. Consider if the intended meaning was 
    1 < 2 && 2 < 3 instead.
    You can silence this warning by adding explicit parenthesis. This can be
    automatically changed using the canonicalize flag for stanc
Warning in 'deprecated_syntax.stan', line 17, column 6: Found 1 < 2 < 3 < 4.
    This is interpreted as (1 < 2 < 3) < 4. Consider if the intended meaning
    was 
    1 < 2 < 3 && 3 < 4 instead.
    You can silence this warning by adding explicit parenthesis. This can be
    automatically changed using the canonicalize flag for stanc
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format empty.stan

Warning: Empty file 'empty.stan' detected; this is a valid stan model but
    likely unintended!
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format fun_log_forward_decl.stan
/**
 * this one's for issue #1768, where there was a duplicate fun decl
 * because of the <false> instantiation of propto
 */
functions {
  real n_lpdf(real y);
  
  real n_lpdf(real y) {
    return -0.5 * square(y);
  }
}
parameters {
  real mu;
}
model {
  mu ~ n();
  target += n_lpdf(mu /*check*/// both instantiations
            );
}

Warning in 'fun_log_forward_decl.stan', line 6, column 7: Functions do not
    need to be declared before definition; all user defined function names
    are always in scope regardless of definition order.
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format functions-fwd-ref.stan
functions {
  int foo(int n);
  
  int foo(int n) {
    if (n == 0) 
      return 1;
    return n * foo(n - 1);
  }
}
parameters {
  real y;
}
model {
  y ~ normal(0, 1);
}

Warning in 'functions-fwd-ref.stan', line 3, column 6: Functions do not need
    to be declared before definition; all user defined function names are
    always in scope regardless of definition order.
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format int_div_user.stan
data {
  array[4] int a;
  array[3] int b;
}
transformed data {
  int c;
  c = a[1] / b[2];
}
model {
  
}

Warning in 'int_div_user.stan', line 7, column 6: Found int division:
      a[1] / b[2]
    Values will be rounded towards zero. If rounding is not desired you can
    write
    the division as
      a[1] * 1.0 / b[2]
    If rounding is intended please use the integer division operator %/%.
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format integrate_1d_good.stan
functions {
  real foo(real x, real xc, array[] real theta, array[] real x_r,
           array[] int x_i) {
    return x ^ 2;
  }
}
data {
  array[2] real x_r;
  array[10] int x_i;
}
transformed data {
  array[3] real theta_d;
  real int_foo1 = integrate_1d(foo, 0.2, 1.3, theta_d, x_r, x_i, 0.01);
}
parameters {
  real lb;
  real ub;
  array[3] real theta;
}
model {
  real int_foo2 = integrate_1d(foo, 0.2, 1.3, theta, x_r, x_i, 0.01);
  real int_foo3 = integrate_1d(foo, lb, 1.3, theta, x_r, x_i, 0.01);
  real int_foo4 = integrate_1d(foo, 0.2, ub, theta, x_r, x_i, 0.01);
  real int_foo5 = integrate_1d(foo, lb, ub, theta, x_r, x_i, 0.01);
  real int_foo6 = integrate_1d(foo, 0.2, 1.3, theta_d, x_r, x_i, 0.01);
  real int_foo7 = integrate_1d(foo, lb, 1.3, theta_d, x_r, x_i, 0.01);
  real int_foo8 = integrate_1d(foo, 0.2, ub, theta_d, x_r, x_i, 0.01);
  real int_foo9 = integrate_1d(foo, lb, ub, theta_d, x_r, x_i, 0.01);
}

[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format integrate_ode_adams.stan
functions {
  array[] real sho(real t, array[] real y, array[] real theta,
                   array[] real x, array[] int x_int) {
    array[2] real dydt;
    dydt[1] = y[2];
    dydt[2] = -y[1] - theta[1] * y[2];
    return dydt;
  }
}
data {
  int<lower=1> T;
  array[2] real y0_d;
  real t0;
  array[T] real ts;
  array[1] real theta_d;
  array[0] real x;
  array[0] int x_int;
}
parameters {
  array[2] real y0_p;
  array[1] real theta_p;
}
model {
  array[T, 2] real y_hat;
  y_hat = integrate_ode_adams(sho, y0_d, t0, ts, theta_p, x, x_int);
  y_hat = integrate_ode_adams(sho, y0_p, t0, ts, theta_d, x, x_int);
  y_hat = integrate_ode_adams(sho, y0_p, t0, ts, theta_p, x, x_int);
  
  y_hat = integrate_ode_adams(sho, y0_d, t0, ts, theta_p, x, x_int, 1e-10,
                              1e-10, 1e8);
  y_hat = integrate_ode_adams(sho, y0_p, t0, ts, theta_d, x, x_int, 1e-10,
                              1e-10, 1e8);
  y_hat = integrate_ode_adams(sho, y0_p, t0, ts, theta_p, x, x_int, 1e-10,
                              1e-10, 1e8);
}
generated quantities {
  array[T, 2] real y_hat;
  y_hat = integrate_ode_adams(sho, y0_d, t0, ts, theta_d, x, x_int);
  y_hat = integrate_ode_adams(sho, y0_d, t0, ts, theta_p, x, x_int);
  y_hat = integrate_ode_adams(sho, y0_p, t0, ts, theta_d, x, x_int);
  y_hat = integrate_ode_adams(sho, y0_p, t0, ts, theta_p, x, x_int);
  
  y_hat = integrate_ode_adams(sho, y0_d, t0, ts, theta_d, x, x_int, 1e-10,
                              1e-10, 1e8);
  y_hat = integrate_ode_adams(sho, y0_d, t0, ts, theta_p, x, x_int, 1e-10,
                              1e-10, 1e8);
  y_hat = integrate_ode_adams(sho, y0_p, t0, ts, theta_d, x, x_int, 1e-10,
                              1e-10, 1e8);
  y_hat = integrate_ode_adams(sho, y0_p, t0, ts, theta_p, x, x_int, 1e-10,
                              1e-10, 1e8);
}

Warning in 'integrate_ode_adams.stan', line 25, column 10: integrate_ode_adams
    is deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_adams.stan', line 26, column 10: integrate_ode_adams
    is deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_adams.stan', line 27, column 10: integrate_ode_adams
    is deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_adams.stan', line 29, column 10: integrate_ode_adams
    is deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_adams.stan', line 31, column 10: integrate_ode_adams
    is deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_adams.stan', line 33, column 10: integrate_ode_adams
    is deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_adams.stan', line 38, column 10: integrate_ode_adams
    is deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_adams.stan', line 39, column 10: integrate_ode_adams
    is deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_adams.stan', line 40, column 10: integrate_ode_adams
    is deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_adams.stan', line 41, column 10: integrate_ode_adams
    is deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_adams.stan', line 43, column 10: integrate_ode_adams
    is deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_adams.stan', line 45, column 10: integrate_ode_adams
    is deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_adams.stan', line 47, column 10: integrate_ode_adams
    is deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_adams.stan', line 49, column 10: integrate_ode_adams
    is deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format integrate_ode_bdf.stan
functions {
  array[] real sho(real t, array[] real y, array[] real theta,
                   array[] real x, array[] int x_int) {
    array[2] real dydt;
    dydt[1] = y[2];
    dydt[2] = -y[1] - theta[1] * y[2];
    return dydt;
  }
}
data {
  int<lower=1> T;
  array[2] real y0_d;
  real t0;
  array[T] real ts;
  array[1] real theta_d;
  array[0] real x;
  array[0] int x_int;
}
parameters {
  array[2] real y0_p;
  array[1] real theta_p;
}
model {
  array[T, 2] real y_hat;
  y_hat = integrate_ode_bdf(sho, y0_d, t0, ts, theta_d, x, x_int);
  y_hat = integrate_ode_bdf(sho, y0_d, t0, ts, theta_p, x, x_int);
  y_hat = integrate_ode_bdf(sho, y0_p, t0, ts, theta_d, x, x_int);
  y_hat = integrate_ode_bdf(sho, y0_p, t0, ts, theta_p, x, x_int);
  
  y_hat = integrate_ode_bdf(sho, y0_d, t0, ts, theta_d, x, x_int, 1e-10,
                            1e-10, 1e8);
  y_hat = integrate_ode_bdf(sho, y0_d, t0, ts, theta_p, x, x_int, 1e-10,
                            1e-10, 1e8);
  y_hat = integrate_ode_bdf(sho, y0_p, t0, ts, theta_d, x, x_int, 1e-10,
                            1e-10, 1e8);
  y_hat = integrate_ode_bdf(sho, y0_p, t0, ts, theta_p, x, x_int, 1e-10,
                            1e-10, 1e8);
}
generated quantities {
  array[T, 2] real y_hat;
  y_hat = integrate_ode_bdf(sho, y0_d, t0, ts, theta_d, x, x_int);
  y_hat = integrate_ode_bdf(sho, y0_d, t0, ts, theta_p, x, x_int);
  y_hat = integrate_ode_bdf(sho, y0_p, t0, ts, theta_d, x, x_int);
  y_hat = integrate_ode_bdf(sho, y0_p, t0, ts, theta_p, x, x_int);
  
  y_hat = integrate_ode_bdf(sho, y0_d, t0, ts, theta_d, x, x_int, 1e-10,
                            1e-10, 1e8);
  y_hat = integrate_ode_bdf(sho, y0_d, t0, ts, theta_p, x, x_int, 1e-10,
                            1e-10, 1e8);
  y_hat = integrate_ode_bdf(sho, y0_p, t0, ts, theta_d, x, x_int, 1e-10,
                            1e-10, 1e8);
  y_hat = integrate_ode_bdf(sho, y0_p, t0, ts, theta_p, x, x_int, 1e-10,
                            1e-10, 1e8);
}

Warning in 'integrate_ode_bdf.stan', line 25, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 26, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 27, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 28, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 30, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 32, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 34, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 36, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 41, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 42, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 43, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 44, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 46, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 48, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 50, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_bdf.stan', line 52, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format integrate_ode_deprecation.stan
functions {
  array[] real sho(real t, array[] real y, array[] real theta,
                   array[] real x, array[] int x_int) {
    array[2] real dydt;
    dydt[1] = y[2];
    dydt[2] = -y[1] - theta[1] * y[2];
    return dydt;
  }
}
data {
  int<lower=1> T;
  array[2] real y0;
  real t0;
  array[T] real ts;
  array[1] real theta;
}
transformed data {
  array[0] real x;
  array[0] int x_int;
}
model {
  
}
generated quantities {
  array[T, 2] real y_hat;
  y_hat = integrate_ode(sho, y0, t0, ts, theta, x, x_int);
  
  // add measurement error
  for (t in 1 : T) {
    y_hat[t, 1] = y_hat[t, 1] + normal_rng(0, 0.1);
    y_hat[t, 2] = y_hat[t, 2] + normal_rng(0, 0.1);
  }
}

Warning in 'integrate_ode_deprecation.stan', line 26, column 10: integrate_ode
    is deprecated and will be removed in Stan 3.0. Use ode_rk45 instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format integrate_ode_rk45.stan
functions {
  array[] real sho(real t, array[] real y, array[] real theta,
                   array[] real x, array[] int x_int) {
    array[2] real dydt;
    dydt[1] = y[2];
    dydt[2] = -y[1] - theta[1] * y[2];
    return dydt;
  }
}
data {
  int<lower=1> T;
  array[2] real y0_d;
  real t0;
  array[T] real ts;
  array[1] real theta_d;
  array[0] real x;
  array[0] int x_int;
}
parameters {
  array[2] real y0_p;
  array[1] real theta_p;
}
model {
  array[T, 2] real y_hat;
  y_hat = integrate_ode_rk45(sho, y0_d, t0, ts, theta_d, x, x_int);
  y_hat = integrate_ode_rk45(sho, y0_d, t0, ts, theta_p, x, x_int);
  y_hat = integrate_ode_rk45(sho, y0_p, t0, ts, theta_d, x, x_int);
  y_hat = integrate_ode_rk45(sho, y0_p, t0, ts, theta_p, x, x_int);
}
generated quantities {
  array[T, 2] real y_hat;
  y_hat = integrate_ode_rk45(sho, y0_d, t0, ts, theta_d, x, x_int);
  y_hat = integrate_ode_rk45(sho, y0_d, t0, ts, theta_p, x, x_int);
  y_hat = integrate_ode_rk45(sho, y0_p, t0, ts, theta_d, x, x_int);
  y_hat = integrate_ode_rk45(sho, y0_p, t0, ts, theta_p, x, x_int);
}

Warning in 'integrate_ode_rk45.stan', line 25, column 10: integrate_ode_rk45
    is deprecated and will be removed in Stan 3.0. Use ode_rk45 instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_rk45.stan', line 26, column 10: integrate_ode_rk45
    is deprecated and will be removed in Stan 3.0. Use ode_rk45 instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_rk45.stan', line 27, column 10: integrate_ode_rk45
    is deprecated and will be removed in Stan 3.0. Use ode_rk45 instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_rk45.stan', line 28, column 10: integrate_ode_rk45
    is deprecated and will be removed in Stan 3.0. Use ode_rk45 instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_rk45.stan', line 32, column 10: integrate_ode_rk45
    is deprecated and will be removed in Stan 3.0. Use ode_rk45 instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_rk45.stan', line 33, column 10: integrate_ode_rk45
    is deprecated and will be removed in Stan 3.0. Use ode_rk45 instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_rk45.stan', line 34, column 10: integrate_ode_rk45
    is deprecated and will be removed in Stan 3.0. Use ode_rk45 instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'integrate_ode_rk45.stan', line 35, column 10: integrate_ode_rk45
    is deprecated and will be removed in Stan 3.0. Use ode_rk45 instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format lkj_cov_deprecation1.stan
parameters {
  cov_matrix[3] Sigma;
  vector[3] mu;
  vector[3] sigma;
  real<lower=0> eta;
}
model {
  Sigma ~ lkj_cov(mu, sigma, eta);
}

Warning in 'lkj_cov_deprecation1.stan', line 8, column 10: lkj_cov is
    deprecated and will be removed in Stan 3.0. Use lkj_corr with an
    independent lognormal distribution on the scales, see:
    https://mc-stan.org/docs/reference-manual/deprecations.html#lkj_cov-distribution
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format lkj_cov_deprecation2.stan
parameters {
  cov_matrix[3] Sigma;
  vector[3] mu;
  vector[3] sigma;
  real<lower=0> eta;
}
model {
  target += lkj_cov_lpdf(Sigma | mu, sigma, eta);
}

Warning in 'lkj_cov_deprecation2.stan', line 8, column 12: lkj_cov is
    deprecated and will be removed in Stan 3.0. Use lkj_corr with an
    independent lognormal distribution on the scales, see:
    https://mc-stan.org/docs/reference-manual/deprecations.html#lkj_cov-distribution
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format matrix_pow_warning.stan
data {
  int<lower=0> N;
  matrix[N, N] A;
  int power;
}
transformed data {
  matrix[N, N] A_pow = A ^ power;
  matrix[N, N] A_pow_r = A ^ 3.5;
}

Warning in 'matrix_pow_warning.stan', line 8, column 23: Found matrix^scalar:
      A ^ power
    matrix ^ number is interpreted as element-wise exponentiation. If this
    is
    intended, you can silence this warning by using elementwise operator .^
    If you intended matrix exponentiation, use the
    function
    matrix_power(matrix,int) instead.
Warning in 'matrix_pow_warning.stan', line 9, column 25: Found matrix^scalar:
      A ^ 3.5
    matrix ^ number is interpreted as element-wise exponentiation. If this
    is
    intended, you can silence this warning by using elementwise operator .^
    If you intended matrix exponentiation, use the
    function
    matrix_power(matrix,int) instead.
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format overloaded_forward_decl.stan
functions {
  int is_real(int x);
  int is_real(real x);
  
  int is_real(real x) {
    return 1;
  }
  
  int is_real(int x) {
    return 0;
  }
}
transformed data {
  if (is_real(1.5)) {
    print(is_real(0));
  }
}

Warning in 'overloaded_forward_decl.stan', line 2, column 6: Functions do not
    need to be declared before definition; all user defined function names
    are always in scope regardless of definition order.
Warning in 'overloaded_forward_decl.stan', line 3, column 6: Functions do not
    need to be declared before definition; all user defined function names
    are always in scope regardless of definition order.
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format self-assign.stan
model {
  real foo = 1.5;
  // line 4: should warn
  foo = foo;
  // line 6: should warn (decl)
  array[2] real bar = bar;
  // line 8: should warn (decl)
  real baz = foo + baz;
  // no warnings
  bar[2] = bar[1];
  //line 12: should warn
  bar[1] = bar[1];
  
  // line 15: should warn
  foo = (foo);
  // no warnings
  foo = -foo;
  foo = (foo > 0) ? foo : 0.0;
  
  tuple(real, real) tup = (1.0, 2.0);
  // line 22: should warn
  tup.1 = tup.1;
  // line 24: should warn (decl)
  tuple(real, real) tup2 = (0.5, tup2.1);
  // line 26: could warn, currently does not
  tup = (tup.1, tup.2);
  // line 28: could warn, currently does not
  foo = (foo, foo).1;
  // no warnings
  real foo2 = 3;
  foo = (foo, foo2).2;
}

Warning in 'self-assign.stan', line 4, column 2: Assignment of variable to
    itself.
Warning in 'self-assign.stan', line 6, column 2: Assignment of variable to
    itself during declaration. This is almost certainly a bug.
Warning in 'self-assign.stan', line 8, column 2: Assignment of variable to
    itself during declaration. This is almost certainly a bug.
Warning in 'self-assign.stan', line 12, column 2: Assignment of variable to
    itself.
Warning in 'self-assign.stan', line 15, column 2: Assignment of variable to
    itself.
Warning in 'self-assign.stan', line 22, column 2: Assignment of variable to
    itself.
Warning in 'self-assign.stan', line 24, column 2: Assignment of variable to
    itself during declaration. This is almost certainly a bug.
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format unreachable_statement.stan
functions {
  void foo(real x) {
    if (x == 0.0) 
      ; // bug - misplaced ; makes the next statement unconditional
    reject("Cannot be 0");
    return;
  }
  
  real bar(real x) {
    fatal_error("don't call this function");
    return x;
  }
}

Warning in 'unreachable_statement.stan', line 5, column 5: Unreachable
    statement (following a reject, fatal_error, break, continue, or return)
    found, is this intended?
Warning in 'unreachable_statement.stan', line 10, column 4: Unreachable
    statement (following a reject, fatal_error, break, continue, or return)
    found, is this intended?
[exit 0]
  $ ../../../../../install/default/bin/stanc --auto-format validate_division_int_warning.stan
transformed data {
  real u;
  int j;
  int k;
  j = 2;
  k = 3;
  u = j / k;
  u = j / 3;
  u = 2 / k;
  u = 2 / 3;
}
parameters {
  real y;
}
model {
  y ~ normal(0, 1);
}

Warning in 'validate_division_int_warning.stan', line 7, column 6: Found int
    division:
      j / k
    Values will be rounded towards zero. If rounding is not desired you can
    write
    the division as
      j * 1.0 / k
    If rounding is intended please use the integer division operator %/%.
Warning in 'validate_division_int_warning.stan', line 8, column 6: Found int
    division:
      j / 3
    Values will be rounded towards zero. If rounding is not desired you can
    write
    the division as
      j / 3.0
    If rounding is intended please use the integer division operator %/%.
Warning in 'validate_division_int_warning.stan', line 9, column 6: Found int
    division:
      2 / k
    Values will be rounded towards zero. If rounding is not desired you can
    write
    the division as
      2.0 / k
    If rounding is intended please use the integer division operator %/%.
Warning in 'validate_division_int_warning.stan', line 10, column 6: Found int
    division:
      2 / 3
    Values will be rounded towards zero. If rounding is not desired you can
    write
    the division as
      2.0 / 3
    If rounding is intended please use the integer division operator %/%.
[exit 0]
