  $ ../../../../../install/default/bin/stanc --auto-format eta_should_be_big.stan
transformed data {
  array[2] vector[2] y;
  vector[2] mu0;
  matrix[2, 2] sigma;
  
  y[1, 1] = 40000.0;
  y[1, 2] = 30000.0;
  
  y[2, 1] = 30000.0;
  y[2, 2] = 20000.0;
  
  mu0[1] = 0.0;
  mu0[2] = 0.0;
  
  sigma[1, 1] = 10000.0;
  sigma[1, 2] = 00000.0;
  sigma[2, 1] = 00000.0;
  sigma[2, 2] = 10000.0;
}
parameters {
  vector[2] mu;
}
model {
  mu ~ multi_normal(mu0, sigma);
  
  for (n in 1 : 2) 
    y[n] ~ multi_normal(mu, sigma);
}

  $ ../../../../../install/default/bin/stanc --auto-format eta_should_be_small.stan
transformed data {
  array[2] vector[2] y;
  vector[2] mu0;
  matrix[2, 2] sigma;
  
  y[1, 1] = 0.004;
  y[1, 2] = 0.003;
  
  y[2, 1] = 0.003;
  y[2, 2] = 0.002;
  
  mu0[1] = 0.0;
  mu0[2] = 0.0;
  
  sigma[1, 1] = 1.0;
  sigma[1, 2] = 0.000;
  sigma[2, 1] = 0.000;
  sigma[2, 2] = 1.0;
}
parameters {
  vector[2] mu;
}
model {
  mu ~ multi_normal(mu0, sigma);
  
  for (n in 1 : 2) 
    y[n] ~ multi_normal(mu, sigma);
}

  $ ../../../../../install/default/bin/stanc --auto-format eta_should_fail.stan
transformed data {
  vector[2] y;
  matrix[2, 2] sigma;
  
  y[1] = 0.0;
  y[2] = 0.0;
  
  sigma[1, 1] = 1.0;
  sigma[1, 2] = 0.0;
  sigma[2, 1] = 0.0;
  sigma[2, 2] = 1.0;
}
parameters {
  vector[2] mu;
}
model {
  y ~ multi_normal(mu, sigma);
}

  $ ../../../../../install/default/bin/stanc --auto-format gradient_warn.stan
data {
  int N;
  vector[N] p;
  int Ngrps;
  array[N] int<lower=1, upper=Ngrps> grp_index;
}
parameters {
  vector<lower=0.0001, upper=100>[Ngrps] sigmaGrp;
  vector<lower=-100, upper=1000>[Ngrps] muGrp;
}
model {
  int grpi;
  for (i in 1 : N) {
    grpi = grp_index[i];
    p[i] ~ logistic(muGrp[grpi], sigmaGrp[grpi]);
  }
  ;
}

  $ ../../../../../install/default/bin/stanc --auto-format hier_logistic.stan
data {
  int N;
  array[N] int ids;
  array[N] int y;
  matrix[1000, 11] X;
}
parameters {
  matrix[11, 100] beta_std;
  vector<lower=0>[11] std;
  cholesky_factor_corr[11] L;
}
transformed parameters {
  matrix[100, 11] beta;
  beta = (diag_pre_multiply(std, L) * beta_std)';
}
model {
  vector[N] mu;
  for (i in 1 : N) 
    mu[i] = X[i] * beta[ids[i]]';
  y ~ bernoulli_logit(mu);
  to_vector(beta_std) ~ normal(0, 1);
  std ~ normal(0, 1);
  L ~ lkj_corr_cholesky(0.5);
}

  $ ../../../../../install/default/bin/stanc --auto-format hier_logistic_cp.stan
data {
  int N;
  array[N] int ids;
  array[N] int y;
  matrix[1000, 11] X;
}
transformed data {
  vector[11] mean_group;
  mean_group = rep_vector(0, 11);
}
parameters {
  array[100] vector[11] beta;
  vector<lower=0>[11] std;
  cholesky_factor_corr[11] L;
}
model {
  vector[N] mu;
  matrix[11, 11] L_std;
  
  L_std = diag_pre_multiply(std, L);
  for (i in 1 : N) 
    mu[i] = X[i] * beta[ids[i]];
  y ~ bernoulli_logit(mu);
  beta ~ multi_normal_cholesky(mean_group, L_std);
  std ~ normal(0, 1);
  L ~ lkj_corr_cholesky(1);
}

  $ ../../../../../install/default/bin/stanc --auto-format multivariate_no_constraint.stan
transformed data {
  array[2] vector[2] y;
  vector[2] mu0;
  matrix[2, 2] sigma;
  
  y[1, 1] = 4.0;
  y[1, 2] = 3.0;
  
  y[2, 1] = 3.0;
  y[2, 2] = 2.0;
  
  mu0[1] = 3.5;
  mu0[2] = 2.5;
  
  sigma[1, 1] = 1.0;
  sigma[1, 2] = 0.0;
  sigma[2, 1] = 0.0;
  sigma[2, 2] = 1.0;
}
parameters {
  vector[2] mu;
}
model {
  mu ~ multi_normal(mu0, sigma);
  
  for (n in 1 : 2) 
    y[n] ~ multi_normal(mu, sigma);
}

  $ ../../../../../install/default/bin/stanc --auto-format multivariate_with_constraint.stan
transformed data {
  array[2] vector[2] y;
  vector[2] mu0;
  matrix[2, 2] sigma;
  
  y[1, 1] = 4.0;
  y[1, 2] = 3.0;
  
  y[2, 1] = 3.0;
  y[2, 2] = 2.0;
  
  mu0[1] = 3.5;
  mu0[2] = 2.5;
  
  sigma[1, 1] = 1.0;
  sigma[1, 2] = 0.0;
  sigma[2, 1] = 0.0;
  sigma[2, 2] = 1.0;
}
parameters {
  vector<lower=0>[2] mu;
}
model {
  mu ~ multi_normal(mu0, sigma);
  
  for (n in 1 : 2) 
    y[n] ~ multi_normal(mu, sigma);
}

  $ ../../../../../install/default/bin/stanc --auto-format univariate_no_constraint.stan
transformed data {
  array[2] real y;
  real mu0;
  real sigma;
  
  y[1] = 1.6;
  y[2] = 1.4;
  
  mu0 = 1.5;
  sigma = 1.0;
}
parameters {
  real mu;
}
model {
  mu ~ normal(mu0, sigma);
  
  for (n in 1 : 2) 
    y[n] ~ normal(mu, 1.0);
}

  $ ../../../../../install/default/bin/stanc --auto-format univariate_with_constraint.stan
transformed data {
  array[2] real y;
  real mu0;
  real sigma;
  
  y[1] = 1.6;
  y[2] = 1.4;
  
  mu0 = 1.5;
  sigma = 1.0;
}
parameters {
  real<lower=0> mu;
}
model {
  mu ~ normal(mu0, sigma);
  
  for (n in 1 : 2) 
    y[n] ~ normal(mu, 1.0);
}

