
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace validate_array_expr_containers_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 195> locations_array__ = 
{" (found before start of program)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 52, column 2 to column 41)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 53, column 2 to column 47)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 54, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 55, column 2 to column 28)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 56, column 2 to column 42)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 57, column 2 to column 48)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 58, column 2 to column 47)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 59, column 2 to column 81)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 61, column 2 to column 47)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 62, column 2 to column 54)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 63, column 2 to column 52)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 64, column 2 to column 53)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 65, column 2 to column 92)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 67, column 2 to column 42)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 68, column 2 to column 47)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 69, column 2 to column 48)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 70, column 2 to column 77)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 72, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 73, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 74, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 75, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 76, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 77, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 78, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 80, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 81, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 82, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 83, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 84, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 85, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 86, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 87, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 88, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 93, column 2 to column 41)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 94, column 2 to column 47)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 95, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 96, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 97, column 2 to column 47)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 98, column 2 to column 81)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 100, column 2 to column 47)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 101, column 2 to column 54)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 102, column 2 to column 52)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 103, column 2 to column 53)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 104, column 2 to column 92)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 106, column 2 to column 42)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 107, column 2 to column 47)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 108, column 2 to column 48)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 109, column 2 to column 77)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 111, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 112, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 113, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 114, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 115, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 116, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 118, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 119, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 120, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 121, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 122, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 123, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 124, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 125, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 126, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 4, column 2 to column 8)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 5, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 5, column 2 to column 17)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 6, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 6, column 2 to column 17)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 7, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 7, column 2 to column 22)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 8, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 8, column 2 to column 22)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 9, column 19 to column 20)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 9, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 9, column 2 to column 22)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 10, column 24 to column 25)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 10, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 10, column 2 to column 27)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 11, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 11, column 12 to column 13)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 11, column 2 to column 19)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 14, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 14, column 2 to column 41)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 15, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 15, column 2 to column 47)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 16, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 16, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 17, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 17, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 18, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 18, column 2 to column 47)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 19, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 19, column 2 to column 81)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 21, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 21, column 2 to column 47)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 22, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 22, column 2 to column 54)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 23, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 23, column 2 to column 52)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 24, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 24, column 2 to column 53)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 25, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 25, column 2 to column 92)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 27, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 27, column 11 to column 12)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 27, column 2 to column 42)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 28, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 28, column 11 to column 12)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 28, column 2 to column 47)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 29, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 29, column 11 to column 12)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 29, column 2 to column 48)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 30, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 30, column 11 to column 12)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 30, column 2 to column 77)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 32, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 33, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 34, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 35, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 36, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 37, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 39, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 40, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 41, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 42, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 43, column 2 to column 46)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 44, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 45, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 46, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 47, column 2 to column 44)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 52, column 27 to column 28)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 52, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 53, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 54, column 27 to column 28)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 54, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 55, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 56, column 27 to column 28)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 56, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 57, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 58, column 27 to column 28)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 58, column 29 to column 30)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 58, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 59, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 61, column 32 to column 33)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 61, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 62, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 63, column 32 to column 33)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 63, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 64, column 32 to column 33)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 64, column 34 to column 35)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 64, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 65, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 67, column 29 to column 30)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 67, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 67, column 11 to column 12)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 68, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 68, column 11 to column 12)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 69, column 29 to column 30)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 69, column 31 to column 32)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 69, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 69, column 11 to column 12)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 70, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 70, column 11 to column 12)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 93, column 27 to column 28)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 93, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 94, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 95, column 27 to column 28)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 95, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 96, column 27 to column 28)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 96, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 97, column 27 to column 28)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 97, column 29 to column 30)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 97, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 98, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 100, column 32 to column 33)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 100, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 101, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 102, column 32 to column 33)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 102, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 103, column 32 to column 33)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 103, column 34 to column 35)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 103, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 104, column 13 to column 14)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 106, column 29 to column 30)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 106, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 106, column 11 to column 12)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 107, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 107, column 11 to column 12)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 108, column 29 to column 30)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 108, column 31 to column 32)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 108, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 108, column 11 to column 12)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 109, column 9 to column 10)",
 " (in './test/integration/good/array-expr/validate_array_expr_containers.stan', line 109, column 11 to column 12)"};



class validate_array_expr_containers_model final : public model_base_crtp<validate_array_expr_containers_model> {

 private:
  int d;
  Eigen::Matrix<double, -1, 1> d_v1__;
  Eigen::Matrix<double, -1, 1> d_v2__;
  Eigen::Matrix<double, 1, -1> d_rv1__;
  Eigen::Matrix<double, 1, -1> d_rv2__;
  std::vector<Eigen::Matrix<double, -1, 1>> d_v_ar;
  std::vector<Eigen::Matrix<double, 1, -1>> d_rv_ar;
  Eigen::Matrix<double, -1, -1> d_m__;
  std::vector<Eigen::Matrix<double, -1, 1>> td_v_ar_dim1_1;
  std::vector<Eigen::Matrix<double, -1, 1>> td_v_ar_dim1_2;
  std::vector<Eigen::Matrix<double, -1, 1>> td_v_ar_dim1_3;
  std::vector<Eigen::Matrix<double, -1, 1>> td_v_ar_dim1_4;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> td_v_ar_dim2_1;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> td_v_ar_dim2_2;
  std::vector<Eigen::Matrix<double, 1, -1>> td_rv_ar_dim1_1;
  std::vector<Eigen::Matrix<double, 1, -1>> td_rv_ar_dim1_2;
  std::vector<Eigen::Matrix<double, 1, -1>> td_rv_ar_dim1_3;
  std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> td_rv_ar_dim2_1;
  std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> td_rv_ar_dim2_2;
  std::vector<Eigen::Matrix<double, -1, -1>> td_m_ar_dim1_1;
  std::vector<Eigen::Matrix<double, -1, -1>> td_m_ar_dim1_2;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> td_m_ar_dim2_1;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> td_m_ar_dim2_2; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> d_v1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> d_v2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> d_rv1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> d_rv2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> d_m{nullptr, 0, 0};
 
 public:
  ~validate_array_expr_containers_model() { }
  
  inline std::string model_name() const final { return "validate_array_expr_containers_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --debug-transformed-mir"};
  }
  
  
  validate_array_expr_containers_model(stan::io::var_context& context__,
                                       unsigned int random_seed__ = 0,
                                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "validate_array_expr_containers_model_namespace::validate_array_expr_containers_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 64;
      context__.validate_dims("data initialization","d","int",
           std::vector<size_t>{});
      d = std::numeric_limits<int>::min();
      
      current_statement__ = 64;
      d = context__.vals_i("d")[(1 - 1)];
      current_statement__ = 65;
      validate_non_negative_index("d_v1", "d", d);
      current_statement__ = 66;
      context__.validate_dims("data initialization","d_v1","double",
           std::vector<size_t>{static_cast<size_t>(d)});
      d_v1__ = Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN());
      new (&d_v1) Eigen::Map<Eigen::Matrix<double, -1, 1>>(d_v1__.data(), d);
      
      {
        std::vector<local_scalar_t__> d_v1_flat__;
        current_statement__ = 66;
        d_v1_flat__ = context__.vals_r("d_v1");
        current_statement__ = 66;
        pos__ = 1;
        current_statement__ = 66;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 66;
          assign(d_v1, d_v1_flat__[(pos__ - 1)],
            "assigning variable d_v1", index_uni(sym1__));
          current_statement__ = 66;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 67;
      validate_non_negative_index("d_v2", "d", d);
      current_statement__ = 68;
      context__.validate_dims("data initialization","d_v2","double",
           std::vector<size_t>{static_cast<size_t>(d)});
      d_v2__ = Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN());
      new (&d_v2) Eigen::Map<Eigen::Matrix<double, -1, 1>>(d_v2__.data(), d);
      
      {
        std::vector<local_scalar_t__> d_v2_flat__;
        current_statement__ = 68;
        d_v2_flat__ = context__.vals_r("d_v2");
        current_statement__ = 68;
        pos__ = 1;
        current_statement__ = 68;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 68;
          assign(d_v2, d_v2_flat__[(pos__ - 1)],
            "assigning variable d_v2", index_uni(sym1__));
          current_statement__ = 68;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 69;
      validate_non_negative_index("d_rv1", "d", d);
      current_statement__ = 70;
      context__.validate_dims("data initialization","d_rv1","double",
           std::vector<size_t>{static_cast<size_t>(d)});
      d_rv1__ = Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN());
      new (&d_rv1) Eigen::Map<Eigen::Matrix<double, 1, -1>>(d_rv1__.data(), d);
      
      
      {
        std::vector<local_scalar_t__> d_rv1_flat__;
        current_statement__ = 70;
        d_rv1_flat__ = context__.vals_r("d_rv1");
        current_statement__ = 70;
        pos__ = 1;
        current_statement__ = 70;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 70;
          assign(d_rv1, d_rv1_flat__[(pos__ - 1)],
            "assigning variable d_rv1", index_uni(sym1__));
          current_statement__ = 70;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 71;
      validate_non_negative_index("d_rv2", "d", d);
      current_statement__ = 72;
      context__.validate_dims("data initialization","d_rv2","double",
           std::vector<size_t>{static_cast<size_t>(d)});
      d_rv2__ = Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN());
      new (&d_rv2) Eigen::Map<Eigen::Matrix<double, 1, -1>>(d_rv2__.data(), d);
      
      
      {
        std::vector<local_scalar_t__> d_rv2_flat__;
        current_statement__ = 72;
        d_rv2_flat__ = context__.vals_r("d_rv2");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 72;
          assign(d_rv2, d_rv2_flat__[(pos__ - 1)],
            "assigning variable d_rv2", index_uni(sym1__));
          current_statement__ = 72;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 73;
      validate_non_negative_index("d_v_ar", "d", d);
      current_statement__ = 74;
      validate_non_negative_index("d_v_ar", "d", d);
      current_statement__ = 75;
      context__.validate_dims("data initialization","d_v_ar","double",
           std::vector<size_t>{static_cast<size_t>(d),
            static_cast<size_t>(d)});
      d_v_ar = std::vector<Eigen::Matrix<double, -1, 1>>(d, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> d_v_ar_flat__;
        current_statement__ = 75;
        d_v_ar_flat__ = context__.vals_r("d_v_ar");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 75;
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            current_statement__ = 75;
            assign(d_v_ar, d_v_ar_flat__[(pos__ - 1)],
              "assigning variable d_v_ar", index_uni(sym2__),
                                             index_uni(sym1__));
            current_statement__ = 75;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 76;
      validate_non_negative_index("d_rv_ar", "d", d);
      current_statement__ = 77;
      validate_non_negative_index("d_rv_ar", "d", d);
      current_statement__ = 78;
      context__.validate_dims("data initialization","d_rv_ar","double",
           std::vector<size_t>{static_cast<size_t>(d),
            static_cast<size_t>(d)});
      d_rv_ar = std::vector<Eigen::Matrix<double, 1, -1>>(d, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> d_rv_ar_flat__;
        current_statement__ = 78;
        d_rv_ar_flat__ = context__.vals_r("d_rv_ar");
        current_statement__ = 78;
        pos__ = 1;
        current_statement__ = 78;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 78;
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            current_statement__ = 78;
            assign(d_rv_ar, d_rv_ar_flat__[(pos__ - 1)],
              "assigning variable d_rv_ar", index_uni(sym2__),
                                              index_uni(sym1__));
            current_statement__ = 78;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 79;
      validate_non_negative_index("d_m", "d", d);
      current_statement__ = 80;
      validate_non_negative_index("d_m", "d", d);
      current_statement__ = 81;
      context__.validate_dims("data initialization","d_m","double",
           std::vector<size_t>{static_cast<size_t>(d),
            static_cast<size_t>(d)});
      d_m__ = Eigen::Matrix<double, -1, -1>::Constant(d, d, std::numeric_limits<double>::quiet_NaN());
      new (&d_m) Eigen::Map<Eigen::Matrix<double, -1, -1>>(d_m__.data(), d, d);
      
      
      {
        std::vector<local_scalar_t__> d_m_flat__;
        current_statement__ = 81;
        d_m_flat__ = context__.vals_r("d_m");
        current_statement__ = 81;
        pos__ = 1;
        current_statement__ = 81;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 81;
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            current_statement__ = 81;
            assign(d_m, d_m_flat__[(pos__ - 1)],
              "assigning variable d_m", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 81;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 82;
      validate_non_negative_index("td_v_ar_dim1_1", "d", d);
      current_statement__ = 83;
      td_v_ar_dim1_1 = std::vector<Eigen::Matrix<double, -1, 1>>(1, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(td_v_ar_dim1_1, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 83;
      assign(td_v_ar_dim1_1, std::vector<Eigen::Matrix<double, -1, 1>>{d_v1},
        "assigning variable td_v_ar_dim1_1");
      current_statement__ = 84;
      validate_non_negative_index("td_v_ar_dim1_2", "d", d);
      current_statement__ = 85;
      td_v_ar_dim1_2 = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(td_v_ar_dim1_2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 85;
      assign(td_v_ar_dim1_2, std::vector<Eigen::Matrix<double, -1, 1>>{d_v1,
        d_v2}, "assigning variable td_v_ar_dim1_2");
      current_statement__ = 86;
      validate_non_negative_index("td_v_ar_dim1_3", "d", d);
      current_statement__ = 87;
      td_v_ar_dim1_3 = std::vector<Eigen::Matrix<double, -1, 1>>(1, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(td_v_ar_dim1_3, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 87;
      assign(td_v_ar_dim1_3, std::vector<Eigen::Matrix<double, -1, 1>>{
        rvalue(d_v_ar, "d_v_ar", index_uni(3))},
        "assigning variable td_v_ar_dim1_3");
      current_statement__ = 88;
      validate_non_negative_index("td_v_ar_dim1_4", "d", d);
      current_statement__ = 89;
      td_v_ar_dim1_4 = std::vector<Eigen::Matrix<double, -1, 1>>(1, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(td_v_ar_dim1_4, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 89;
      assign(td_v_ar_dim1_4, std::vector<Eigen::Matrix<double, -1, 1>>{
        rvalue(d_m, "d_m", index_omni(), index_uni(3))},
        "assigning variable td_v_ar_dim1_4");
      current_statement__ = 90;
      validate_non_negative_index("td_v_ar_dim2_1", "d", d);
      current_statement__ = 91;
      td_v_ar_dim2_1 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(1, std::vector<Eigen::Matrix<double, -1, 1>>(1, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(td_v_ar_dim2_1, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 91;
      assign(td_v_ar_dim2_1,
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>{
        std::vector<Eigen::Matrix<double, -1, 1>>{d_v1}},
        "assigning variable td_v_ar_dim2_1");
      current_statement__ = 92;
      validate_non_negative_index("td_v_ar_dim2_2", "d", d);
      current_statement__ = 93;
      td_v_ar_dim2_2 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(3, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(td_v_ar_dim2_2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 93;
      assign(td_v_ar_dim2_2,
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>{
        std::vector<Eigen::Matrix<double, -1, 1>>{d_v1, d_v1, d_v1},
        std::vector<Eigen::Matrix<double, -1, 1>>{d_v2, d_v2, d_v2}},
        "assigning variable td_v_ar_dim2_2");
      current_statement__ = 94;
      validate_non_negative_index("td_rv_ar_dim1_1", "d", d);
      current_statement__ = 95;
      td_rv_ar_dim1_1 = std::vector<Eigen::Matrix<double, 1, -1>>(1, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(td_rv_ar_dim1_1, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 95;
      assign(td_rv_ar_dim1_1, std::vector<Eigen::Matrix<double, 1, -1>>{
        d_rv1}, "assigning variable td_rv_ar_dim1_1");
      current_statement__ = 96;
      validate_non_negative_index("td_rv_ar_dim1_2", "d", d);
      current_statement__ = 97;
      td_rv_ar_dim1_2 = std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(td_rv_ar_dim1_2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 97;
      assign(td_rv_ar_dim1_2, std::vector<Eigen::Matrix<double, 1, -1>>{
        d_rv1, d_rv2}, "assigning variable td_rv_ar_dim1_2");
      current_statement__ = 98;
      validate_non_negative_index("td_rv_ar_dim1_3", "d", d);
      current_statement__ = 99;
      td_rv_ar_dim1_3 = std::vector<Eigen::Matrix<double, 1, -1>>(1, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(td_rv_ar_dim1_3, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 99;
      assign(td_rv_ar_dim1_3, std::vector<Eigen::Matrix<double, 1, -1>>{
        rvalue(d_rv_ar, "d_rv_ar", index_uni(3))},
        "assigning variable td_rv_ar_dim1_3");
      current_statement__ = 100;
      validate_non_negative_index("td_rv_ar_dim2_1", "d", d);
      current_statement__ = 101;
      td_rv_ar_dim2_1 = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(1, std::vector<Eigen::Matrix<double, 1, -1>>(1, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(td_rv_ar_dim2_1, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 101;
      assign(td_rv_ar_dim2_1,
        std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>{
        std::vector<Eigen::Matrix<double, 1, -1>>{d_rv1}},
        "assigning variable td_rv_ar_dim2_1");
      current_statement__ = 102;
      validate_non_negative_index("td_rv_ar_dim2_2", "d", d);
      current_statement__ = 103;
      td_rv_ar_dim2_2 = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(2, std::vector<Eigen::Matrix<double, 1, -1>>(3, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(td_rv_ar_dim2_2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 103;
      assign(td_rv_ar_dim2_2,
        std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>{
        std::vector<Eigen::Matrix<double, 1, -1>>{d_rv1, d_rv1, d_rv1},
        std::vector<Eigen::Matrix<double, 1, -1>>{d_rv2, d_rv2, d_rv2}},
        "assigning variable td_rv_ar_dim2_2");
      current_statement__ = 104;
      validate_non_negative_index("td_m_ar_dim1_1", "d", d);
      current_statement__ = 105;
      validate_non_negative_index("td_m_ar_dim1_1", "d", d);
      current_statement__ = 106;
      td_m_ar_dim1_1 = std::vector<Eigen::Matrix<double, -1, -1>>(1, Eigen::Matrix<double, -1, -1>::Constant(d, d, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(td_m_ar_dim1_1, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 106;
      assign(td_m_ar_dim1_1, std::vector<Eigen::Matrix<double, -1, -1>>{d_m},
        "assigning variable td_m_ar_dim1_1");
      current_statement__ = 107;
      validate_non_negative_index("td_m_ar_dim1_2", "d", d);
      current_statement__ = 108;
      validate_non_negative_index("td_m_ar_dim1_2", "d", d);
      current_statement__ = 109;
      td_m_ar_dim1_2 = std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(d, d, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(td_m_ar_dim1_2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 109;
      assign(td_m_ar_dim1_2, std::vector<Eigen::Matrix<double, -1, -1>>{d_m,
        d_m}, "assigning variable td_m_ar_dim1_2");
      current_statement__ = 110;
      validate_non_negative_index("td_m_ar_dim2_1", "d", d);
      current_statement__ = 111;
      validate_non_negative_index("td_m_ar_dim2_1", "d", d);
      current_statement__ = 112;
      td_m_ar_dim2_1 = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(1, std::vector<Eigen::Matrix<double, -1, -1>>(1, Eigen::Matrix<double, -1, -1>::Constant(d, d, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(td_m_ar_dim2_1, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 112;
      assign(td_m_ar_dim2_1,
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>{
        std::vector<Eigen::Matrix<double, -1, -1>>{d_m}},
        "assigning variable td_m_ar_dim2_1");
      current_statement__ = 113;
      validate_non_negative_index("td_m_ar_dim2_2", "d", d);
      current_statement__ = 114;
      validate_non_negative_index("td_m_ar_dim2_2", "d", d);
      current_statement__ = 115;
      td_m_ar_dim2_2 = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(2, std::vector<Eigen::Matrix<double, -1, -1>>(3, Eigen::Matrix<double, -1, -1>::Constant(d, d, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(td_m_ar_dim2_2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 115;
      assign(td_m_ar_dim2_2,
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>{
        std::vector<Eigen::Matrix<double, -1, -1>>{d_m, d_m, d_m},
        std::vector<Eigen::Matrix<double, -1, -1>>{d_m, d_m, d_m}},
        "assigning variable td_m_ar_dim2_2");
      current_statement__ = 116;
      if (pstream__) {
        stan_print(pstream__, "td_v_ar_dim1_1 = ");
        stan_print(pstream__, td_v_ar_dim1_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 117;
      if (pstream__) {
        stan_print(pstream__, "td_v_ar_dim1_2 = ");
        stan_print(pstream__, td_v_ar_dim1_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 118;
      if (pstream__) {
        stan_print(pstream__, "td_v_ar_dim1_3 = ");
        stan_print(pstream__, td_v_ar_dim1_3);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 119;
      if (pstream__) {
        stan_print(pstream__, "td_v_ar_dim1_4 = ");
        stan_print(pstream__, td_v_ar_dim1_4);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 120;
      if (pstream__) {
        stan_print(pstream__, "td_v_ar_dim2_1 = ");
        stan_print(pstream__, td_v_ar_dim2_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 121;
      if (pstream__) {
        stan_print(pstream__, "td_v_ar_dim2_2 = ");
        stan_print(pstream__, td_v_ar_dim2_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 122;
      if (pstream__) {
        stan_print(pstream__, "td_rv_ar_dim1_1 = ");
        stan_print(pstream__, td_rv_ar_dim1_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 123;
      if (pstream__) {
        stan_print(pstream__, "td_rv_ar_dim1_2 = ");
        stan_print(pstream__, td_rv_ar_dim1_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 124;
      if (pstream__) {
        stan_print(pstream__, "td_rv_ar_dim1_3 = ");
        stan_print(pstream__, td_rv_ar_dim1_3);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 125;
      if (pstream__) {
        stan_print(pstream__, "td_rv_ar_dim2_1 = ");
        stan_print(pstream__, td_rv_ar_dim2_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 126;
      if (pstream__) {
        stan_print(pstream__, "td_rv_ar_dim2_2 = ");
        stan_print(pstream__, td_rv_ar_dim2_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 127;
      if (pstream__) {
        stan_print(pstream__, "td_m_ar_dim1_1 = ");
        stan_print(pstream__, td_m_ar_dim1_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 128;
      if (pstream__) {
        stan_print(pstream__, "td_m_ar_dim1_2 = ");
        stan_print(pstream__, td_m_ar_dim1_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 129;
      if (pstream__) {
        stan_print(pstream__, "td_m_ar_dim2_1 = ");
        stan_print(pstream__, td_m_ar_dim2_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 130;
      if (pstream__) {
        stan_print(pstream__, "td_m_ar_dim2_2 = ");
        stan_print(pstream__, td_m_ar_dim2_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 131;
      validate_non_negative_index("tp_v_ar_dim1_1", "1", 1);
      current_statement__ = 132;
      validate_non_negative_index("tp_v_ar_dim1_1", "d", d);
      current_statement__ = 133;
      validate_non_negative_index("tp_v_ar_dim1_2", "d", d);
      current_statement__ = 134;
      validate_non_negative_index("tp_v_ar_dim1_3", "1", 1);
      current_statement__ = 135;
      validate_non_negative_index("tp_v_ar_dim1_3", "d", d);
      current_statement__ = 136;
      validate_non_negative_index("tp_v1", "d", d);
      current_statement__ = 137;
      validate_non_negative_index("tp_v_ar_dim1_4", "1", 1);
      current_statement__ = 138;
      validate_non_negative_index("tp_v_ar_dim1_4", "d", d);
      current_statement__ = 139;
      validate_non_negative_index("tp_v_ar_dim1_5", "d", d);
      current_statement__ = 140;
      validate_non_negative_index("tp_v_ar_dim2_1", "1", 1);
      current_statement__ = 141;
      validate_non_negative_index("tp_v_ar_dim2_1", "1", 1);
      current_statement__ = 142;
      validate_non_negative_index("tp_v_ar_dim2_1", "d", d);
      current_statement__ = 143;
      validate_non_negative_index("tp_v_ar_dim2_2", "d", d);
      current_statement__ = 144;
      validate_non_negative_index("tp_rv_ar_dim1_1", "1", 1);
      current_statement__ = 145;
      validate_non_negative_index("tp_rv_ar_dim1_1", "d", d);
      current_statement__ = 146;
      validate_non_negative_index("tp_rv_ar_dim1_2", "d", d);
      current_statement__ = 147;
      validate_non_negative_index("tp_rv_ar_dim1_3", "1", 1);
      current_statement__ = 148;
      validate_non_negative_index("tp_rv_ar_dim1_3", "d", d);
      current_statement__ = 149;
      validate_non_negative_index("tp_rv_ar_dim2_1", "1", 1);
      current_statement__ = 150;
      validate_non_negative_index("tp_rv_ar_dim2_1", "1", 1);
      current_statement__ = 151;
      validate_non_negative_index("tp_rv_ar_dim2_1", "d", d);
      current_statement__ = 152;
      validate_non_negative_index("tp_rv_ar_dim2_2", "d", d);
      current_statement__ = 153;
      validate_non_negative_index("tp_m_ar_dim1_1", "1", 1);
      current_statement__ = 154;
      validate_non_negative_index("tp_m_ar_dim1_1", "d", d);
      current_statement__ = 155;
      validate_non_negative_index("tp_m_ar_dim1_1", "d", d);
      current_statement__ = 156;
      validate_non_negative_index("tp_m_ar_dim1_2", "d", d);
      current_statement__ = 157;
      validate_non_negative_index("tp_m_ar_dim1_2", "d", d);
      current_statement__ = 158;
      validate_non_negative_index("tp_m_ar_dim2_1", "1", 1);
      current_statement__ = 159;
      validate_non_negative_index("tp_m_ar_dim2_1", "1", 1);
      current_statement__ = 160;
      validate_non_negative_index("tp_m_ar_dim2_1", "d", d);
      current_statement__ = 161;
      validate_non_negative_index("tp_m_ar_dim2_1", "d", d);
      current_statement__ = 162;
      validate_non_negative_index("tp_m_ar_dim2_2", "d", d);
      current_statement__ = 163;
      validate_non_negative_index("tp_m_ar_dim2_2", "d", d);
      current_statement__ = 164;
      validate_non_negative_index("gq_v_ar_dim1_1", "1", 1);
      current_statement__ = 165;
      validate_non_negative_index("gq_v_ar_dim1_1", "d", d);
      current_statement__ = 166;
      validate_non_negative_index("gq_v_ar_dim1_2", "d", d);
      current_statement__ = 167;
      validate_non_negative_index("gq_v_ar_dim1_3", "1", 1);
      current_statement__ = 168;
      validate_non_negative_index("gq_v_ar_dim1_3", "d", d);
      current_statement__ = 169;
      validate_non_negative_index("gq_v_ar_dim1_4", "1", 1);
      current_statement__ = 170;
      validate_non_negative_index("gq_v_ar_dim1_4", "d", d);
      current_statement__ = 171;
      validate_non_negative_index("gq_v_ar_dim2_1", "1", 1);
      current_statement__ = 172;
      validate_non_negative_index("gq_v_ar_dim2_1", "1", 1);
      current_statement__ = 173;
      validate_non_negative_index("gq_v_ar_dim2_1", "d", d);
      current_statement__ = 174;
      validate_non_negative_index("gq_v_ar_dim2_2", "d", d);
      current_statement__ = 175;
      validate_non_negative_index("gq_rv_ar_dim1_1", "1", 1);
      current_statement__ = 176;
      validate_non_negative_index("gq_rv_ar_dim1_1", "d", d);
      current_statement__ = 177;
      validate_non_negative_index("gq_rv_ar_dim1_2", "d", d);
      current_statement__ = 178;
      validate_non_negative_index("gq_rv_ar_dim1_3", "1", 1);
      current_statement__ = 179;
      validate_non_negative_index("gq_rv_ar_dim1_3", "d", d);
      current_statement__ = 180;
      validate_non_negative_index("gq_rv_ar_dim2_1", "1", 1);
      current_statement__ = 181;
      validate_non_negative_index("gq_rv_ar_dim2_1", "1", 1);
      current_statement__ = 182;
      validate_non_negative_index("gq_rv_ar_dim2_1", "d", d);
      current_statement__ = 183;
      validate_non_negative_index("gq_rv_ar_dim2_2", "d", d);
      current_statement__ = 184;
      validate_non_negative_index("gq_m_ar_dim1_1", "1", 1);
      current_statement__ = 185;
      validate_non_negative_index("gq_m_ar_dim1_1", "d", d);
      current_statement__ = 186;
      validate_non_negative_index("gq_m_ar_dim1_1", "d", d);
      current_statement__ = 187;
      validate_non_negative_index("gq_m_ar_dim1_2", "d", d);
      current_statement__ = 188;
      validate_non_negative_index("gq_m_ar_dim1_2", "d", d);
      current_statement__ = 189;
      validate_non_negative_index("gq_m_ar_dim2_1", "1", 1);
      current_statement__ = 190;
      validate_non_negative_index("gq_m_ar_dim2_1", "1", 1);
      current_statement__ = 191;
      validate_non_negative_index("gq_m_ar_dim2_1", "d", d);
      current_statement__ = 192;
      validate_non_negative_index("gq_m_ar_dim2_1", "d", d);
      current_statement__ = 193;
      validate_non_negative_index("gq_m_ar_dim2_2", "d", d);
      current_statement__ = 194;
      validate_non_negative_index("gq_m_ar_dim2_2", "d", d);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "validate_array_expr_containers_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tp_v_ar_dim1_1 = 
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(1, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(d, DUMMY_VAR__));
      
      
      current_statement__ = 1;
      assign(tp_v_ar_dim1_1, std::vector<Eigen::Matrix<double, -1, 1>>{d_v1},
        "assigning variable tp_v_ar_dim1_1");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tp_v_ar_dim1_2 = 
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(2, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(d, DUMMY_VAR__));
      
      
      current_statement__ = 2;
      assign(tp_v_ar_dim1_2, std::vector<Eigen::Matrix<double, -1, 1>>{d_v1,
        d_v2}, "assigning variable tp_v_ar_dim1_2");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tp_v_ar_dim1_3 = 
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(1, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(d, DUMMY_VAR__));
      
      
      current_statement__ = 3;
      assign(tp_v_ar_dim1_3, std::vector<Eigen::Matrix<double, -1, 1>>{
        rvalue(d_v_ar, "d_v_ar", index_uni(3))},
        "assigning variable tp_v_ar_dim1_3");
      Eigen::Matrix<local_scalar_t__, -1, 1> tp_v1 = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(d, DUMMY_VAR__);
                                                     
      
      current_statement__ = 4;
      assign(tp_v1, rvalue(d_m, "d_m", index_omni(), index_uni(4)),
        "assigning variable tp_v1");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tp_v_ar_dim1_4 = 
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(1, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(d, DUMMY_VAR__));
      
      
      current_statement__ = 5;
      assign(tp_v_ar_dim1_4,
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>{tp_v1},
        "assigning variable tp_v_ar_dim1_4");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tp_v_ar_dim1_5 = 
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(2, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(d, DUMMY_VAR__));
      
      
      current_statement__ = 6;
      assign(tp_v_ar_dim1_5,
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>{
        stan::math::promote_scalar<local_scalar_t__>(d_v1), tp_v1},
        "assigning variable tp_v_ar_dim1_5");
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> tp_v_ar_dim2_1 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(1, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(1, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(d, DUMMY_VAR__)));
      
      
      current_statement__ = 7;
      assign(tp_v_ar_dim2_1,
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>{
        std::vector<Eigen::Matrix<double, -1, 1>>{d_v1}},
        "assigning variable tp_v_ar_dim2_1");
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> tp_v_ar_dim2_2 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(2, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(3, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(d, DUMMY_VAR__)));
      
      
      current_statement__ = 8;
      assign(tp_v_ar_dim2_2,
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>{
        std::vector<Eigen::Matrix<double, -1, 1>>{d_v1, d_v1, d_v1},
        std::vector<Eigen::Matrix<double, -1, 1>>{d_v2, d_v2, d_v2}},
        "assigning variable tp_v_ar_dim2_2");
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> tp_rv_ar_dim1_1 = 
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(1, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(d, DUMMY_VAR__));
      
      
      current_statement__ = 9;
      assign(tp_rv_ar_dim1_1, std::vector<Eigen::Matrix<double, 1, -1>>{
        d_rv1}, "assigning variable tp_rv_ar_dim1_1");
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> tp_rv_ar_dim1_2 = 
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(2, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(d, DUMMY_VAR__));
      
      
      current_statement__ = 10;
      assign(tp_rv_ar_dim1_2, std::vector<Eigen::Matrix<double, 1, -1>>{
        d_rv1, d_rv2}, "assigning variable tp_rv_ar_dim1_2");
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> tp_rv_ar_dim1_3 = 
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(1, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(d, DUMMY_VAR__));
      
      
      current_statement__ = 11;
      assign(tp_rv_ar_dim1_3, std::vector<Eigen::Matrix<double, 1, -1>>{
        rvalue(d_rv_ar, "d_rv_ar", index_uni(3))},
        "assigning variable tp_rv_ar_dim1_3");
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> tp_rv_ar_dim2_1 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(1, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(1, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(d, DUMMY_VAR__)));
      
      
      current_statement__ = 12;
      assign(tp_rv_ar_dim2_1,
        std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>{
        std::vector<Eigen::Matrix<double, 1, -1>>{d_rv1}},
        "assigning variable tp_rv_ar_dim2_1");
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> tp_rv_ar_dim2_2 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(2, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(3, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(d, DUMMY_VAR__)));
      
      
      current_statement__ = 13;
      assign(tp_rv_ar_dim2_2,
        std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>{
        std::vector<Eigen::Matrix<double, 1, -1>>{d_rv1, d_rv1, d_rv1},
        std::vector<Eigen::Matrix<double, 1, -1>>{d_rv2, d_rv2, d_rv2}},
        "assigning variable tp_rv_ar_dim2_2");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> tp_m_ar_dim1_1 = 
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(1, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(d, d, DUMMY_VAR__));
      
      
      current_statement__ = 14;
      assign(tp_m_ar_dim1_1, std::vector<Eigen::Matrix<double, -1, -1>>{d_m},
        "assigning variable tp_m_ar_dim1_1");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> tp_m_ar_dim1_2 = 
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(2, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(d, d, DUMMY_VAR__));
      
      
      current_statement__ = 15;
      assign(tp_m_ar_dim1_2, std::vector<Eigen::Matrix<double, -1, -1>>{d_m,
        d_m}, "assigning variable tp_m_ar_dim1_2");
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> tp_m_ar_dim2_1 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(1, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(1, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(d, d, DUMMY_VAR__)));
      
      
      current_statement__ = 16;
      assign(tp_m_ar_dim2_1,
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>{
        std::vector<Eigen::Matrix<double, -1, -1>>{d_m}},
        "assigning variable tp_m_ar_dim2_1");
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> tp_m_ar_dim2_2 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(2, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(3, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(d, d, DUMMY_VAR__)));
      
      
      current_statement__ = 17;
      assign(tp_m_ar_dim2_2,
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>{
        std::vector<Eigen::Matrix<double, -1, -1>>{d_m, d_m, d_m},
        std::vector<Eigen::Matrix<double, -1, -1>>{d_m, d_m, d_m}},
        "assigning variable tp_m_ar_dim2_2");
      current_statement__ = 18;
      if (pstream__) {
        stan_print(pstream__, "tp_v_ar_dim1_1 = ");
        stan_print(pstream__, tp_v_ar_dim1_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 19;
      if (pstream__) {
        stan_print(pstream__, "tp_v_ar_dim1_2 = ");
        stan_print(pstream__, tp_v_ar_dim1_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 20;
      if (pstream__) {
        stan_print(pstream__, "tp_v_ar_dim1_3 = ");
        stan_print(pstream__, tp_v_ar_dim1_3);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 21;
      if (pstream__) {
        stan_print(pstream__, "tp_v_ar_dim1_4 = ");
        stan_print(pstream__, tp_v_ar_dim1_4);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 22;
      if (pstream__) {
        stan_print(pstream__, "tp_v_ar_dim1_5 = ");
        stan_print(pstream__, tp_v_ar_dim1_5);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 23;
      if (pstream__) {
        stan_print(pstream__, "tp_v_ar_dim2_1 = ");
        stan_print(pstream__, tp_v_ar_dim2_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 24;
      if (pstream__) {
        stan_print(pstream__, "tp_v_ar_dim2_2 = ");
        stan_print(pstream__, tp_v_ar_dim2_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 25;
      if (pstream__) {
        stan_print(pstream__, "tp_rv_ar_dim1_1 = ");
        stan_print(pstream__, tp_rv_ar_dim1_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 26;
      if (pstream__) {
        stan_print(pstream__, "tp_rv_ar_dim1_2 = ");
        stan_print(pstream__, tp_rv_ar_dim1_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 27;
      if (pstream__) {
        stan_print(pstream__, "tp_rv_ar_dim1_3 = ");
        stan_print(pstream__, tp_rv_ar_dim1_3);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 28;
      if (pstream__) {
        stan_print(pstream__, "tp_rv_ar_dim2_1 = ");
        stan_print(pstream__, tp_rv_ar_dim2_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 29;
      if (pstream__) {
        stan_print(pstream__, "tp_rv_ar_dim2_2 = ");
        stan_print(pstream__, tp_rv_ar_dim2_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 30;
      if (pstream__) {
        stan_print(pstream__, "tp_m_ar_dim1_1 = ");
        stan_print(pstream__, tp_m_ar_dim1_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 31;
      if (pstream__) {
        stan_print(pstream__, "tp_m_ar_dim1_2 = ");
        stan_print(pstream__, tp_m_ar_dim1_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 32;
      if (pstream__) {
        stan_print(pstream__, "tp_m_ar_dim2_1 = ");
        stan_print(pstream__, tp_m_ar_dim2_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 33;
      if (pstream__) {
        stan_print(pstream__, "tp_m_ar_dim2_2 = ");
        stan_print(pstream__, tp_m_ar_dim2_2);
        stan_print(pstream__, "\n");
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "validate_array_expr_containers_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<double, -1, 1>> tp_v_ar_dim1_1 = std::vector<Eigen::Matrix<double, -1, 1>>(1, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                 
      
      std::vector<Eigen::Matrix<double, -1, 1>> tp_v_ar_dim1_2 = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                 
      
      std::vector<Eigen::Matrix<double, -1, 1>> tp_v_ar_dim1_3 = std::vector<Eigen::Matrix<double, -1, 1>>(1, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                 
      
      Eigen::Matrix<double, -1, 1> tp_v1 = Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN());
                                           
      
      std::vector<Eigen::Matrix<double, -1, 1>> tp_v_ar_dim1_4 = std::vector<Eigen::Matrix<double, -1, 1>>(1, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                 
      
      std::vector<Eigen::Matrix<double, -1, 1>> tp_v_ar_dim1_5 = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                 
      
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> tp_v_ar_dim2_1 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(1, std::vector<Eigen::Matrix<double, -1, 1>>(1, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN())));
      
      
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> tp_v_ar_dim2_2 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(3, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN())));
      
      
      std::vector<Eigen::Matrix<double, 1, -1>> tp_rv_ar_dim1_1 = std::vector<Eigen::Matrix<double, 1, -1>>(1, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      std::vector<Eigen::Matrix<double, 1, -1>> tp_rv_ar_dim1_2 = std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      std::vector<Eigen::Matrix<double, 1, -1>> tp_rv_ar_dim1_3 = std::vector<Eigen::Matrix<double, 1, -1>>(1, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> tp_rv_ar_dim2_1 = 
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(1, std::vector<Eigen::Matrix<double, 1, -1>>(1, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN())));
      
      
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> tp_rv_ar_dim2_2 = 
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(2, std::vector<Eigen::Matrix<double, 1, -1>>(3, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN())));
      
      
      std::vector<Eigen::Matrix<double, -1, -1>> tp_m_ar_dim1_1 = std::vector<Eigen::Matrix<double, -1, -1>>(1, Eigen::Matrix<double, -1, -1>::Constant(d, d, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      std::vector<Eigen::Matrix<double, -1, -1>> tp_m_ar_dim1_2 = std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(d, d, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> tp_m_ar_dim2_1 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(1, std::vector<Eigen::Matrix<double, -1, -1>>(1, Eigen::Matrix<double, -1, -1>::Constant(d, d, std::numeric_limits<double>::quiet_NaN())));
      
      
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> tp_m_ar_dim2_2 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(2, std::vector<Eigen::Matrix<double, -1, -1>>(3, Eigen::Matrix<double, -1, -1>::Constant(d, d, std::numeric_limits<double>::quiet_NaN())));
      
      
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 1;
      assign(tp_v_ar_dim1_1, std::vector<Eigen::Matrix<double, -1, 1>>{d_v1},
        "assigning variable tp_v_ar_dim1_1");
      current_statement__ = 2;
      assign(tp_v_ar_dim1_2, std::vector<Eigen::Matrix<double, -1, 1>>{d_v1,
        d_v2}, "assigning variable tp_v_ar_dim1_2");
      current_statement__ = 3;
      assign(tp_v_ar_dim1_3, std::vector<Eigen::Matrix<double, -1, 1>>{
        rvalue(d_v_ar, "d_v_ar", index_uni(3))},
        "assigning variable tp_v_ar_dim1_3");
      current_statement__ = 4;
      assign(tp_v1, rvalue(d_m, "d_m", index_omni(), index_uni(4)),
        "assigning variable tp_v1");
      current_statement__ = 5;
      assign(tp_v_ar_dim1_4,
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>{tp_v1},
        "assigning variable tp_v_ar_dim1_4");
      current_statement__ = 6;
      assign(tp_v_ar_dim1_5,
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>{
        stan::math::promote_scalar<local_scalar_t__>(d_v1), tp_v1},
        "assigning variable tp_v_ar_dim1_5");
      current_statement__ = 7;
      assign(tp_v_ar_dim2_1,
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>{
        std::vector<Eigen::Matrix<double, -1, 1>>{d_v1}},
        "assigning variable tp_v_ar_dim2_1");
      current_statement__ = 8;
      assign(tp_v_ar_dim2_2,
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>{
        std::vector<Eigen::Matrix<double, -1, 1>>{d_v1, d_v1, d_v1},
        std::vector<Eigen::Matrix<double, -1, 1>>{d_v2, d_v2, d_v2}},
        "assigning variable tp_v_ar_dim2_2");
      current_statement__ = 9;
      assign(tp_rv_ar_dim1_1, std::vector<Eigen::Matrix<double, 1, -1>>{
        d_rv1}, "assigning variable tp_rv_ar_dim1_1");
      current_statement__ = 10;
      assign(tp_rv_ar_dim1_2, std::vector<Eigen::Matrix<double, 1, -1>>{
        d_rv1, d_rv2}, "assigning variable tp_rv_ar_dim1_2");
      current_statement__ = 11;
      assign(tp_rv_ar_dim1_3, std::vector<Eigen::Matrix<double, 1, -1>>{
        rvalue(d_rv_ar, "d_rv_ar", index_uni(3))},
        "assigning variable tp_rv_ar_dim1_3");
      current_statement__ = 12;
      assign(tp_rv_ar_dim2_1,
        std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>{
        std::vector<Eigen::Matrix<double, 1, -1>>{d_rv1}},
        "assigning variable tp_rv_ar_dim2_1");
      current_statement__ = 13;
      assign(tp_rv_ar_dim2_2,
        std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>{
        std::vector<Eigen::Matrix<double, 1, -1>>{d_rv1, d_rv1, d_rv1},
        std::vector<Eigen::Matrix<double, 1, -1>>{d_rv2, d_rv2, d_rv2}},
        "assigning variable tp_rv_ar_dim2_2");
      current_statement__ = 14;
      assign(tp_m_ar_dim1_1, std::vector<Eigen::Matrix<double, -1, -1>>{d_m},
        "assigning variable tp_m_ar_dim1_1");
      current_statement__ = 15;
      assign(tp_m_ar_dim1_2, std::vector<Eigen::Matrix<double, -1, -1>>{d_m,
        d_m}, "assigning variable tp_m_ar_dim1_2");
      current_statement__ = 16;
      assign(tp_m_ar_dim2_1,
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>{
        std::vector<Eigen::Matrix<double, -1, -1>>{d_m}},
        "assigning variable tp_m_ar_dim2_1");
      current_statement__ = 17;
      assign(tp_m_ar_dim2_2,
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>{
        std::vector<Eigen::Matrix<double, -1, -1>>{d_m, d_m, d_m},
        std::vector<Eigen::Matrix<double, -1, -1>>{d_m, d_m, d_m}},
        "assigning variable tp_m_ar_dim2_2");
      current_statement__ = 18;
      if (pstream__) {
        stan_print(pstream__, "tp_v_ar_dim1_1 = ");
        stan_print(pstream__, tp_v_ar_dim1_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 19;
      if (pstream__) {
        stan_print(pstream__, "tp_v_ar_dim1_2 = ");
        stan_print(pstream__, tp_v_ar_dim1_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 20;
      if (pstream__) {
        stan_print(pstream__, "tp_v_ar_dim1_3 = ");
        stan_print(pstream__, tp_v_ar_dim1_3);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 21;
      if (pstream__) {
        stan_print(pstream__, "tp_v_ar_dim1_4 = ");
        stan_print(pstream__, tp_v_ar_dim1_4);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 22;
      if (pstream__) {
        stan_print(pstream__, "tp_v_ar_dim1_5 = ");
        stan_print(pstream__, tp_v_ar_dim1_5);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 23;
      if (pstream__) {
        stan_print(pstream__, "tp_v_ar_dim2_1 = ");
        stan_print(pstream__, tp_v_ar_dim2_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 24;
      if (pstream__) {
        stan_print(pstream__, "tp_v_ar_dim2_2 = ");
        stan_print(pstream__, tp_v_ar_dim2_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 25;
      if (pstream__) {
        stan_print(pstream__, "tp_rv_ar_dim1_1 = ");
        stan_print(pstream__, tp_rv_ar_dim1_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 26;
      if (pstream__) {
        stan_print(pstream__, "tp_rv_ar_dim1_2 = ");
        stan_print(pstream__, tp_rv_ar_dim1_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 27;
      if (pstream__) {
        stan_print(pstream__, "tp_rv_ar_dim1_3 = ");
        stan_print(pstream__, tp_rv_ar_dim1_3);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 28;
      if (pstream__) {
        stan_print(pstream__, "tp_rv_ar_dim2_1 = ");
        stan_print(pstream__, tp_rv_ar_dim2_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 29;
      if (pstream__) {
        stan_print(pstream__, "tp_rv_ar_dim2_2 = ");
        stan_print(pstream__, tp_rv_ar_dim2_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 30;
      if (pstream__) {
        stan_print(pstream__, "tp_m_ar_dim1_1 = ");
        stan_print(pstream__, tp_m_ar_dim1_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 31;
      if (pstream__) {
        stan_print(pstream__, "tp_m_ar_dim1_2 = ");
        stan_print(pstream__, tp_m_ar_dim1_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 32;
      if (pstream__) {
        stan_print(pstream__, "tp_m_ar_dim2_1 = ");
        stan_print(pstream__, tp_m_ar_dim2_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 33;
      if (pstream__) {
        stan_print(pstream__, "tp_m_ar_dim2_2 = ");
        stan_print(pstream__, tp_m_ar_dim2_2);
        stan_print(pstream__, "\n");
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            vars__.emplace_back(tp_v_ar_dim1_1[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            vars__.emplace_back(tp_v_ar_dim1_2[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            vars__.emplace_back(tp_v_ar_dim1_3[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          vars__.emplace_back(tp_v1[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            vars__.emplace_back(tp_v_ar_dim1_4[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            vars__.emplace_back(tp_v_ar_dim1_5[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
              vars__.emplace_back(
                tp_v_ar_dim2_1[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              vars__.emplace_back(
                tp_v_ar_dim2_2[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            vars__.emplace_back(tp_rv_ar_dim1_1[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            vars__.emplace_back(tp_rv_ar_dim1_2[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            vars__.emplace_back(tp_rv_ar_dim1_3[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
              vars__.emplace_back(
                tp_rv_ar_dim2_1[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              vars__.emplace_back(
                tp_rv_ar_dim2_2[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
              vars__.emplace_back(
                rvalue(tp_m_ar_dim1_1, "tp_m_ar_dim1_1",
                  index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              vars__.emplace_back(
                rvalue(tp_m_ar_dim1_2, "tp_m_ar_dim1_2",
                  index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
              for (int sym4__ = 1; sym4__ <= 1; ++sym4__) {
                vars__.emplace_back(
                  rvalue(tp_m_ar_dim2_1, "tp_m_ar_dim2_1",
                    index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                      index_uni(sym1__)));
              }
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
              for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                vars__.emplace_back(
                  rvalue(tp_m_ar_dim2_2, "tp_m_ar_dim2_2",
                    index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                      index_uni(sym1__)));
              }
            }
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<Eigen::Matrix<double, -1, 1>> gq_v_ar_dim1_1 = std::vector<Eigen::Matrix<double, -1, 1>>(1, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                 
      
      current_statement__ = 34;
      assign(gq_v_ar_dim1_1, std::vector<Eigen::Matrix<double, -1, 1>>{d_v1},
        "assigning variable gq_v_ar_dim1_1");
      std::vector<Eigen::Matrix<double, -1, 1>> gq_v_ar_dim1_2 = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                 
      
      current_statement__ = 35;
      assign(gq_v_ar_dim1_2, std::vector<Eigen::Matrix<double, -1, 1>>{d_v1,
        d_v2}, "assigning variable gq_v_ar_dim1_2");
      std::vector<Eigen::Matrix<double, -1, 1>> gq_v_ar_dim1_3 = std::vector<Eigen::Matrix<double, -1, 1>>(1, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                 
      
      current_statement__ = 36;
      assign(gq_v_ar_dim1_3, std::vector<Eigen::Matrix<double, -1, 1>>{
        rvalue(d_v_ar, "d_v_ar", index_uni(3))},
        "assigning variable gq_v_ar_dim1_3");
      std::vector<Eigen::Matrix<double, -1, 1>> gq_v_ar_dim1_4 = std::vector<Eigen::Matrix<double, -1, 1>>(1, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                 
      
      current_statement__ = 37;
      assign(gq_v_ar_dim1_4, std::vector<Eigen::Matrix<double, -1, 1>>{
        rvalue(d_m, "d_m", index_omni(), index_uni(3))},
        "assigning variable gq_v_ar_dim1_4");
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> gq_v_ar_dim2_1 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(1, std::vector<Eigen::Matrix<double, -1, 1>>(1, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 38;
      assign(gq_v_ar_dim2_1,
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>{
        std::vector<Eigen::Matrix<double, -1, 1>>{d_v1}},
        "assigning variable gq_v_ar_dim2_1");
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> gq_v_ar_dim2_2 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(3, Eigen::Matrix<double, -1, 1>::Constant(d, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 39;
      assign(gq_v_ar_dim2_2,
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>{
        std::vector<Eigen::Matrix<double, -1, 1>>{d_v1, d_v1, d_v1},
        std::vector<Eigen::Matrix<double, -1, 1>>{d_v2, d_v2, d_v2}},
        "assigning variable gq_v_ar_dim2_2");
      std::vector<Eigen::Matrix<double, 1, -1>> gq_rv_ar_dim1_1 = std::vector<Eigen::Matrix<double, 1, -1>>(1, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      current_statement__ = 40;
      assign(gq_rv_ar_dim1_1, std::vector<Eigen::Matrix<double, 1, -1>>{
        d_rv1}, "assigning variable gq_rv_ar_dim1_1");
      std::vector<Eigen::Matrix<double, 1, -1>> gq_rv_ar_dim1_2 = std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      current_statement__ = 41;
      assign(gq_rv_ar_dim1_2, std::vector<Eigen::Matrix<double, 1, -1>>{
        d_rv1, d_rv2}, "assigning variable gq_rv_ar_dim1_2");
      std::vector<Eigen::Matrix<double, 1, -1>> gq_rv_ar_dim1_3 = std::vector<Eigen::Matrix<double, 1, -1>>(1, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      current_statement__ = 42;
      assign(gq_rv_ar_dim1_3, std::vector<Eigen::Matrix<double, 1, -1>>{
        rvalue(d_rv_ar, "d_rv_ar", index_uni(3))},
        "assigning variable gq_rv_ar_dim1_3");
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> gq_rv_ar_dim2_1 = 
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(1, std::vector<Eigen::Matrix<double, 1, -1>>(1, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 43;
      assign(gq_rv_ar_dim2_1,
        std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>{
        std::vector<Eigen::Matrix<double, 1, -1>>{d_rv1}},
        "assigning variable gq_rv_ar_dim2_1");
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> gq_rv_ar_dim2_2 = 
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(2, std::vector<Eigen::Matrix<double, 1, -1>>(3, Eigen::Matrix<double, 1, -1>::Constant(d, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 44;
      assign(gq_rv_ar_dim2_2,
        std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>{
        std::vector<Eigen::Matrix<double, 1, -1>>{d_rv1, d_rv1, d_rv1},
        std::vector<Eigen::Matrix<double, 1, -1>>{d_rv2, d_rv2, d_rv2}},
        "assigning variable gq_rv_ar_dim2_2");
      std::vector<Eigen::Matrix<double, -1, -1>> gq_m_ar_dim1_1 = std::vector<Eigen::Matrix<double, -1, -1>>(1, Eigen::Matrix<double, -1, -1>::Constant(d, d, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      current_statement__ = 45;
      assign(gq_m_ar_dim1_1, std::vector<Eigen::Matrix<double, -1, -1>>{d_m},
        "assigning variable gq_m_ar_dim1_1");
      std::vector<Eigen::Matrix<double, -1, -1>> gq_m_ar_dim1_2 = std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(d, d, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      current_statement__ = 46;
      assign(gq_m_ar_dim1_2, std::vector<Eigen::Matrix<double, -1, -1>>{d_m,
        d_m}, "assigning variable gq_m_ar_dim1_2");
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> gq_m_ar_dim2_1 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(1, std::vector<Eigen::Matrix<double, -1, -1>>(1, Eigen::Matrix<double, -1, -1>::Constant(d, d, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 47;
      assign(gq_m_ar_dim2_1,
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>{
        std::vector<Eigen::Matrix<double, -1, -1>>{d_m}},
        "assigning variable gq_m_ar_dim2_1");
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> gq_m_ar_dim2_2 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(2, std::vector<Eigen::Matrix<double, -1, -1>>(3, Eigen::Matrix<double, -1, -1>::Constant(d, d, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 48;
      assign(gq_m_ar_dim2_2,
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>{
        std::vector<Eigen::Matrix<double, -1, -1>>{d_m, d_m, d_m},
        std::vector<Eigen::Matrix<double, -1, -1>>{d_m, d_m, d_m}},
        "assigning variable gq_m_ar_dim2_2");
      current_statement__ = 49;
      if (pstream__) {
        stan_print(pstream__, "gq_v_ar_dim1_1 = ");
        stan_print(pstream__, gq_v_ar_dim1_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 50;
      if (pstream__) {
        stan_print(pstream__, "gq_v_ar_dim1_2 = ");
        stan_print(pstream__, gq_v_ar_dim1_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 51;
      if (pstream__) {
        stan_print(pstream__, "gq_v_ar_dim1_3 = ");
        stan_print(pstream__, gq_v_ar_dim1_3);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 52;
      if (pstream__) {
        stan_print(pstream__, "gq_v_ar_dim1_4 = ");
        stan_print(pstream__, gq_v_ar_dim1_4);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 53;
      if (pstream__) {
        stan_print(pstream__, "gq_v_ar_dim2_1 = ");
        stan_print(pstream__, gq_v_ar_dim2_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 54;
      if (pstream__) {
        stan_print(pstream__, "gq_v_ar_dim2_2 = ");
        stan_print(pstream__, gq_v_ar_dim2_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 55;
      if (pstream__) {
        stan_print(pstream__, "gq_rv_ar_dim1_1 = ");
        stan_print(pstream__, gq_rv_ar_dim1_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 56;
      if (pstream__) {
        stan_print(pstream__, "gq_rv_ar_dim1_2 = ");
        stan_print(pstream__, gq_rv_ar_dim1_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 57;
      if (pstream__) {
        stan_print(pstream__, "gq_rv_ar_dim1_3 = ");
        stan_print(pstream__, gq_rv_ar_dim1_3);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 58;
      if (pstream__) {
        stan_print(pstream__, "gq_rv_ar_dim2_1 = ");
        stan_print(pstream__, gq_rv_ar_dim2_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 59;
      if (pstream__) {
        stan_print(pstream__, "gq_rv_ar_dim2_2 = ");
        stan_print(pstream__, gq_rv_ar_dim2_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 60;
      if (pstream__) {
        stan_print(pstream__, "gq_m_ar_dim1_1 = ");
        stan_print(pstream__, gq_m_ar_dim1_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 61;
      if (pstream__) {
        stan_print(pstream__, "gq_m_ar_dim1_2 = ");
        stan_print(pstream__, gq_m_ar_dim1_2);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 62;
      if (pstream__) {
        stan_print(pstream__, "gq_m_ar_dim2_1 = ");
        stan_print(pstream__, gq_m_ar_dim2_1);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 63;
      if (pstream__) {
        stan_print(pstream__, "gq_m_ar_dim2_2 = ");
        stan_print(pstream__, gq_m_ar_dim2_2);
        stan_print(pstream__, "\n");
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
          vars__.emplace_back(gq_v_ar_dim1_1[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(gq_v_ar_dim1_2[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
          vars__.emplace_back(gq_v_ar_dim1_3[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
          vars__.emplace_back(gq_v_ar_dim1_4[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
            vars__.emplace_back(
              gq_v_ar_dim2_1[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            vars__.emplace_back(
              gq_v_ar_dim2_2[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
          vars__.emplace_back(gq_rv_ar_dim1_1[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(gq_rv_ar_dim1_2[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
          vars__.emplace_back(gq_rv_ar_dim1_3[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
            vars__.emplace_back(
              gq_rv_ar_dim2_1[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            vars__.emplace_back(
              gq_rv_ar_dim2_2[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
            vars__.emplace_back(
              rvalue(gq_m_ar_dim1_1, "gq_m_ar_dim1_1",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            vars__.emplace_back(
              rvalue(gq_m_ar_dim1_2, "gq_m_ar_dim1_2",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= 1; ++sym4__) {
              vars__.emplace_back(
                rvalue(gq_m_ar_dim2_1, "gq_m_ar_dim2_1",
                  index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                    index_uni(sym1__)));
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
              vars__.emplace_back(
                rvalue(gq_m_ar_dim2_2, "gq_m_ar_dim2_2",
                  index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                    index_uni(sym1__)));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"tp_v_ar_dim1_1", "tp_v_ar_dim1_2",
      "tp_v_ar_dim1_3", "tp_v1", "tp_v_ar_dim1_4", "tp_v_ar_dim1_5",
      "tp_v_ar_dim2_1", "tp_v_ar_dim2_2", "tp_rv_ar_dim1_1",
      "tp_rv_ar_dim1_2", "tp_rv_ar_dim1_3", "tp_rv_ar_dim2_1",
      "tp_rv_ar_dim2_2", "tp_m_ar_dim1_1", "tp_m_ar_dim1_2",
      "tp_m_ar_dim2_1", "tp_m_ar_dim2_2", "gq_v_ar_dim1_1", "gq_v_ar_dim1_2",
      "gq_v_ar_dim1_3", "gq_v_ar_dim1_4", "gq_v_ar_dim2_1", "gq_v_ar_dim2_2",
      "gq_rv_ar_dim1_1", "gq_rv_ar_dim1_2", "gq_rv_ar_dim1_3",
      "gq_rv_ar_dim2_1", "gq_rv_ar_dim2_2", "gq_m_ar_dim1_1",
      "gq_m_ar_dim1_2", "gq_m_ar_dim2_1", "gq_m_ar_dim2_2"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(1)
                                                                   ,
                                                                   static_cast<size_t>(d)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(1),
                          static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3),
                          static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(1),
                          static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3),
                          static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(d),
                          static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(d),
                          static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(1),
                          static_cast<size_t>(d), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3),
                          static_cast<size_t>(d), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(1),
                          static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3),
                          static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(1),
                          static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3),
                          static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(d),
                          static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(d),
                          static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(1),
                          static_cast<size_t>(d), static_cast<size_t>(d)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3),
                          static_cast<size_t>(d), static_cast<size_t>(d)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_v_ar_dim1_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_v_ar_dim1_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_v_ar_dim1_3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_v1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_v_ar_dim1_4" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_v_ar_dim1_5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_v_ar_dim2_1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_v_ar_dim2_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_rv_ar_dim1_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_rv_ar_dim1_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_rv_ar_dim1_3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_rv_ar_dim2_1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_rv_ar_dim2_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_m_ar_dim1_1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_m_ar_dim1_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 1; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tp_m_ar_dim2_1" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tp_m_ar_dim2_2" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_v_ar_dim1_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_v_ar_dim1_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_v_ar_dim1_3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_v_ar_dim1_4" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_v_ar_dim2_1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_v_ar_dim2_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_rv_ar_dim1_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_rv_ar_dim1_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_rv_ar_dim1_3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_rv_ar_dim2_1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_rv_ar_dim2_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_m_ar_dim1_1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_m_ar_dim1_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 1; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "gq_m_ar_dim2_1" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "gq_m_ar_dim2_2" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_v_ar_dim1_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_v_ar_dim1_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_v_ar_dim1_3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_v1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_v_ar_dim1_4" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_v_ar_dim1_5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_v_ar_dim2_1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_v_ar_dim2_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_rv_ar_dim1_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_rv_ar_dim1_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_rv_ar_dim1_3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_rv_ar_dim2_1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_rv_ar_dim2_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_m_ar_dim1_1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_m_ar_dim1_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 1; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tp_m_ar_dim2_1" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tp_m_ar_dim2_2" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_v_ar_dim1_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_v_ar_dim1_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_v_ar_dim1_3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_v_ar_dim1_4" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_v_ar_dim2_1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_v_ar_dim2_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_rv_ar_dim1_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_rv_ar_dim1_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_rv_ar_dim1_3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_rv_ar_dim2_1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_rv_ar_dim2_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_m_ar_dim1_1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_m_ar_dim1_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 1; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 1; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "gq_m_ar_dim2_1" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "gq_m_ar_dim2_2" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"tp_v_ar_dim1_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_v_ar_dim1_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_v_ar_dim1_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_v1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_v_ar_dim1_4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_v_ar_dim1_5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_v_ar_dim2_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_v_ar_dim2_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_rv_ar_dim1_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_rv_ar_dim1_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_rv_ar_dim1_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_rv_ar_dim2_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_rv_ar_dim2_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_m_ar_dim1_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_m_ar_dim1_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_m_ar_dim2_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_m_ar_dim2_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"gq_v_ar_dim1_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_v_ar_dim1_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_v_ar_dim1_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_v_ar_dim1_4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_v_ar_dim2_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_v_ar_dim2_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_rv_ar_dim1_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_rv_ar_dim1_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_rv_ar_dim1_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_rv_ar_dim2_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_rv_ar_dim2_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_m_ar_dim1_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_m_ar_dim1_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_m_ar_dim2_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_m_ar_dim2_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"tp_v_ar_dim1_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_v_ar_dim1_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_v_ar_dim1_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_v1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_v_ar_dim1_4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_v_ar_dim1_5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_v_ar_dim2_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_v_ar_dim2_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_rv_ar_dim1_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_rv_ar_dim1_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_rv_ar_dim1_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_rv_ar_dim2_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_rv_ar_dim2_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_m_ar_dim1_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_m_ar_dim1_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_m_ar_dim2_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_m_ar_dim2_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"gq_v_ar_dim1_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_v_ar_dim1_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_v_ar_dim1_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_v_ar_dim1_4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_v_ar_dim2_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_v_ar_dim2_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_rv_ar_dim1_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_rv_ar_dim1_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_rv_ar_dim1_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_rv_ar_dim2_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_rv_ar_dim2_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_m_ar_dim1_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_m_ar_dim1_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_m_ar_dim2_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_m_ar_dim2_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = validate_array_expr_containers_model_namespace::validate_array_expr_containers_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return validate_array_expr_containers_model_namespace::profiles__;
}

#endif


