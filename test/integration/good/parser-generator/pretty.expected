  $ ../../../../../install/default/bin/stanc --auto-format algebra_solver.stan
functions {
  vector algebra_system(vector y, vector theta, array[] real x_r,
                        array[] int x_i) {
    vector[2] f_y;
    f_y[1] = y[1] - theta[1];
    f_y[2] = y[2] - theta[2];
    return f_y;
  }
}
data {
  vector[2] y;
}
transformed data {
  array[0] real x_r;
  array[0] int x_i;
}
parameters {
  vector[2] theta;
  real dummy_parameter;
}
transformed parameters {
  
}
model {
  dummy_parameter ~ normal(0, 1);
}
generated quantities {
  vector[2] y_s;
  y_s = algebra_solver(algebra_system, y, theta, x_r, x_i);
}

  $ ../../../../../install/default/bin/stanc --auto-format cholesky_cov_data_block.stan
data {
  cholesky_factor_cov[5, 4] cfcov_54;
  cholesky_factor_cov[3] cfcov_33;
}

  $ ../../../../../install/default/bin/stanc --auto-format cholesky_cov_gqs_block.stan
generated quantities {
  cholesky_factor_cov[5, 4] cfcov_54;
  cholesky_factor_cov[3] cfcov_33;
}

  $ ../../../../../install/default/bin/stanc --auto-format cholesky_cov_param_block.stan
parameters {
  cholesky_factor_cov[5, 4] cfcov_54;
  cholesky_factor_cov[3] cfcov_33;
}

  $ ../../../../../install/default/bin/stanc --auto-format cholesky_cov_transform_data_block.stan
transformed data {
  cholesky_factor_cov[5, 4] cfcov_54;
  cholesky_factor_cov[3] cfcov_33;
}

  $ ../../../../../install/default/bin/stanc --auto-format cholesky_cov_transform_param_block.stan
transformed parameters {
  cholesky_factor_cov[5, 4] cfcov_54;
  cholesky_factor_cov[3] cfcov_33;
}

  $ ../../../../../install/default/bin/stanc --auto-format complex_scalar.stan
functions {
  complex foo() {
    return to_complex();
  }
  real foo1(complex z) {
    return 1.0;
  }
  complex foo2(real r) {
    return to_complex(r);
  }
  complex foo3(complex z) {
    return z;
  }
  array[] complex foo4() {
    return {to_complex(), to_complex()};
  }
  real foo5(array[] complex z) {
    return 1.0;
  }
  array[] complex foo6(real r) {
    return {to_complex(r), to_complex(r, r)};
  }
  array[] complex foo7(array[] complex z) {
    return z;
  }
}
data {
  int<lower=0> N;
  complex d_complex;
  array[N] complex d_complex_array;
  array[N, 2] complex d_complex_array_2d;
  array[N, 2, 3] complex d_complex_array_3d;
}
transformed data {
  complex td_complex = d_complex;
  td_complex = 1;
  td_complex = to_complex(1, 2);
  array[N] complex td_complex_array = d_complex_array;
  array[2, 3] complex td_complex_array_2d;
  array[2, 3, 4] complex td_complex_array_3d;
  for (td_i in 1 : 2) {
    for (td_j in 1 : 3) {
      for (td_k in 1 : 4) {
        td_complex_array_3d[td_i, td_j, td_k] = to_complex(1, 2.2);
      }
    }
  }
  real td_r = get_real(td_complex);
  real td_i = get_imag(td_complex);
}
parameters {
  complex p_complex;
  array[N] complex p_complex_array;
  array[N, 2] complex p_complex_array_2d;
  array[N, 2, 3] complex p_complex_array_3d;
}
transformed parameters {
  complex tp_complex = p_complex;
  tp_complex = 1;
  tp_complex = to_complex(1, 2);
  array[N] complex tp_complex_array = p_complex_array;
  array[2, 3] complex tp_complex_array_2d;
  array[2, 3, 4] complex tp_complex_array_3d;
  for (tp_i in 1 : 2) {
    for (tp_j in 1 : 3) {
      for (tp_k in 1 : 4) {
        tp_complex_array_3d[tp_i, tp_j, tp_k] = to_complex(1, 2.2);
      }
    }
  }
  real tp_r = get_real(tp_complex);
  real tp_i = get_imag(tp_complex);
}
model {
  abs(p_complex) ~ normal(0, 1);
}
generated quantities {
  complex gq_complex;
  array[2] complex gq_complex_array;
  array[2, 3] complex gq_complex_array_2d = {{1, 2, 3},
                                             {to_complex(), to_complex(
                                              1.1), to_complex(1, 2.1)}};
  array[2, 3, 4] complex gq_complex_array_3d;
  gq_complex = 3;
  gq_complex_array[1] = to_complex(5.1, 6);
  gq_complex = foo();
  real gq_r = foo1(gq_complex);
  gq_complex = foo2(gq_r);
  gq_complex = foo3(gq_complex);
  gq_complex_array = foo4();
  gq_r = foo5(gq_complex_array);
  gq_complex_array = foo6(gq_r);
  gq_complex_array = foo7(gq_complex_array);
  
  // test imaginary literal
  complex zi = 1 + 3.14i;
  zi = zi * 0i;
  complex yi = to_complex(0, 1.1) + to_complex(0.0, 2.2) + to_complex();
  real x = get_real(3i - 40e-3i);
}

  $ ../../../../../install/default/bin/stanc --auto-format data_qualifier_scope_xformed_data.stan
functions {
  vector target_(vector y, vector theta, array[] real x_r, array[] int x_i) {
    vector[2] deltas;
    deltas[1] = y[1] - theta[1] - x_r[1];
    return deltas;
  }
}
transformed data {
  vector[1] td_y;
  {
    vector[1] td_y_guess = [1]';
    vector[1] td_theta = [1]';
    array[0] real td_x_r = {1.0};
    array[0] int td_x_i;
    td_y = algebra_solver(target_, td_y_guess, td_theta, td_x_r, td_x_i);
  }
}
generated quantities {
  vector[1] gq_y;
  {
    vector[1] gq_y_guess = [1]';
    vector[1] gq_theta = [1]';
    array[0] real gq_x_r = {1.0};
    array[0] int gq_x_i;
    gq_y = algebra_solver(target_, gq_y_guess, gq_theta, gq_x_r, gq_x_i);
  }
}

  $ ../../../../../install/default/bin/stanc --auto-format deep-copy-warning.stan
transformed data {
  vector[5] v = [1, 2, 3, 4, 5]';
  real y = 0.1;
  
  print("y: ", y);
  y += 1;
  print("expect 1.1 actual y: ", y);
  
  print("v: ", v);
  v[1] = v[2];
  print("expect: [2,2,3,4,5]  v: ", v);
  v[1 : 2] += 1.0;
  print("expect: [3,3,3,4,5]  v: ", v);
  v[2 : 4] += v[1 : 3] + 1;
  print("expect: [3,7,7,8,5]  v: ", v);
}

  $ ../../../../../install/default/bin/stanc --auto-format function_var.stan
functions {
  void f0(int a1, array[] int a2, array[,] int a3, real a4, array[] real a5,
          array[,] real a6, vector a7, array[] vector a8, array[,] vector a9,
          matrix a10, array[] matrix a11, array[,] matrix a12) {
    print("hi");
  }
  
  int f1(int a1, array[] int a2, array[,] int a3, real a4, array[] real a5,
         array[,] real a6, vector a7, array[] vector a8, array[,] vector a9,
         matrix a10, array[] matrix a11, array[,] matrix a12) {
    return a1;
  }
  
  array[] int f2(int a1, array[] int a2, array[,] int a3, real a4,
                 array[] real a5, array[,] real a6, vector a7,
                 array[] vector a8, array[,] vector a9, matrix a10,
                 array[] matrix a11, array[,] matrix a12) {
    return a2;
  }
  
  array[,] int f3(int a1, array[] int a2, array[,] int a3, real a4,
                  array[] real a5, array[,] real a6, vector a7,
                  array[] vector a8, array[,] vector a9, matrix a10,
                  array[] matrix a11, array[,] matrix a12) {
    return a3;
  }
  
  real f4(int a1, array[] int a2, array[,] int a3, real a4, array[] real a5,
          array[,] real a6, vector a7, array[] vector a8, array[,] vector a9,
          matrix a10, array[] matrix a11, array[,] matrix a12) {
    return a4;
  }
  
  array[] real f5(int a1, array[] int a2, array[,] int a3, real a4,
                  array[] real a5, array[,] real a6, vector a7,
                  array[] vector a8, array[,] vector a9, matrix a10,
                  array[] matrix a11, array[,] matrix a12) {
    return a5;
  }
  
  array[,] real f6(int a1, array[] int a2, array[,] int a3, real a4,
                   array[] real a5, array[,] real a6, vector a7,
                   array[] vector a8, array[,] vector a9, matrix a10,
                   array[] matrix a11, array[,] matrix a12) {
    return a6;
  }
  
  vector f7(int a1, array[] int a2, array[,] int a3, real a4,
            array[] real a5, array[,] real a6, vector a7, array[] vector a8,
            array[,] vector a9, matrix a10, array[] matrix a11,
            array[,] matrix a12) {
    return a7;
  }
  
  array[] vector f8(int a1, array[] int a2, array[,] int a3, real a4,
                    array[] real a5, array[,] real a6, vector a7,
                    array[] vector a8, array[,] vector a9, matrix a10,
                    array[] matrix a11, array[,] matrix a12) {
    return a8;
  }
  
  array[,] vector f9(int a1, array[] int a2, array[,] int a3, real a4,
                     array[] real a5, array[,] real a6, vector a7,
                     array[] vector a8, array[,] vector a9, matrix a10,
                     array[] matrix a11, array[,] matrix a12) {
    return a9;
  }
  
  matrix f10(int a1, array[] int a2, array[,] int a3, real a4,
             array[] real a5, array[,] real a6, vector a7, array[] vector a8,
             array[,] vector a9, matrix a10, array[] matrix a11,
             array[,] matrix a12) {
    return a10;
  }
  
  array[] matrix f11(int a1, array[] int a2, array[,] int a3, real a4,
                     array[] real a5, array[,] real a6, vector a7,
                     array[] vector a8, array[,] vector a9, matrix a10,
                     array[] matrix a11, array[,] matrix a12) {
    return a11;
  }
  
  array[,] matrix f12(int a1, array[] int a2, array[,] int a3, real a4,
                      array[] real a5, array[,] real a6, vector a7,
                      array[] vector a8, array[,] vector a9, matrix a10,
                      array[] matrix a11, array[,] matrix a12) {
    return a12;
  }
}

  $ ../../../../../install/default/bin/stanc --auto-format function_var_array_syntax.stan
functions {
  void f0(int a1, array[] int a2, array[,] int a3, real a4, array[] real a5,
          array[,] real a6, vector a7, array[] vector a8, array[,] vector a9,
          matrix a10, array[] matrix a11, array[,] matrix a12) {
    print("hi");
  }
  
  int f1(int a1, array[] int a2, array[,] int a3, real a4, array[] real a5,
         array[,] real a6, vector a7, array[] vector a8, array[,] vector a9,
         matrix a10, array[] matrix a11, array[,] matrix a12) {
    return a1;
  }
  
  array[] int f2(int a1, array[] int a2, array[,] int a3, real a4,
                 array[] real a5, array[,] real a6, vector a7,
                 array[] vector a8, array[,] vector a9, matrix a10,
                 array[] matrix a11, array[,] matrix a12) {
    return a2;
  }
  
  array[,] int f3(int a1, array[] int a2, array[,] int a3, real a4,
                  array[] real a5, array[,] real a6, vector a7,
                  array[] vector a8, array[,] vector a9, matrix a10,
                  array[] matrix a11, array[,] matrix a12) {
    return a3;
  }
  
  real f4(int a1, array[] int a2, array[,] int a3, real a4, array[] real a5,
          array[,] real a6, vector a7, array[] vector a8, array[,] vector a9,
          matrix a10, array[] matrix a11, array[,] matrix a12) {
    return a4;
  }
  
  array[] real f5(int a1, array[] int a2, array[,] int a3, real a4,
                  array[] real a5, array[,] real a6, vector a7,
                  array[] vector a8, array[,] vector a9, matrix a10,
                  array[] matrix a11, array[,] matrix a12) {
    return a5;
  }
  
  array[,] real f6(int a1, array[] int a2, array[,] int a3, real a4,
                   array[] real a5, array[,] real a6, vector a7,
                   array[] vector a8, array[,] vector a9, matrix a10,
                   array[] matrix a11, array[,] matrix a12) {
    return a6;
  }
  
  vector f7(int a1, array[] int a2, array[,] int a3, real a4,
            array[] real a5, array[,] real a6, vector a7, array[] vector a8,
            array[,] vector a9, matrix a10, array[] matrix a11,
            array[,] matrix a12) {
    return a7;
  }
  
  array[] vector f8(int a1, array[] int a2, array[,] int a3, real a4,
                    array[] real a5, array[,] real a6, vector a7,
                    array[] vector a8, array[,] vector a9, matrix a10,
                    array[] matrix a11, array[,] matrix a12) {
    return a8;
  }
  
  array[,] vector f9(int a1, array[] int a2, array[,] int a3, real a4,
                     array[] real a5, array[,] real a6, vector a7,
                     array[] vector a8, array[,] vector a9, matrix a10,
                     array[] matrix a11, array[,] matrix a12) {
    return a9;
  }
  
  matrix f10(int a1, array[] int a2, array[,] int a3, real a4,
             array[] real a5, array[,] real a6, vector a7, array[] vector a8,
             array[,] vector a9, matrix a10, array[] matrix a11,
             array[,] matrix a12) {
    return a10;
  }
  
  array[] matrix f11(int a1, array[] int a2, array[,] int a3, real a4,
                     array[] real a5, array[,] real a6, vector a7,
                     array[] vector a8, array[,] vector a9, matrix a10,
                     array[] matrix a11, array[,] matrix a12) {
    return a11;
  }
  
  array[,] matrix f12(int a1, array[] int a2, array[,] int a3, real a4,
                      array[] real a5, array[,] real a6, vector a7,
                      array[] vector a8, array[,] vector a9, matrix a10,
                      array[] matrix a11, array[,] matrix a12) {
    return a12;
  }
  
  array[,,,,] matrix f13(int a1, array[,,,] int a2, array[,,,,] int a3,
                         real a4, array[,,,] real a5, array[,,,,] real a6,
                         vector a7, array[,,,] vector a8,
                         array[,,,,] vector a9, matrix a10,
                         array[,,,] matrix a11, array[,,,,] matrix a12) {
    return a12;
  }
}

  $ ../../../../../install/default/bin/stanc --auto-format local_var_function_body.stan
functions {
  void foo() {
    int a;
    real b;
    array[20, 30] real c;
    array[60, 70] matrix[40, 50] ar_mat;
    ar_mat[1, 1, 1, 1] = b;
  }
}

  $ ../../../../../install/default/bin/stanc --auto-format local_var_gqs.stan
generated quantities {
  real p2;
  for (x in 1 : 10) 
    p2 = x;
  {
    int a;
    array[20, 30] real b;
    array[60, 70] matrix[40, 50] ar_mat;
    ar_mat[1, 1, 1, 1] = 1.0;
    p2 = b[1, 1];
  }
}

  $ ../../../../../install/default/bin/stanc --auto-format local_var_transformed_data_block.stan
transformed data {
  int a1;
  real d1;
  {
    int a2;
    real d2;
    array[20, 30] real b;
    array[60, 70] matrix[40, 50] ar_mat;
    ar_mat[1, 1, 1, 1] = 1.0;
    a1 = a2;
    d1 = b[1, 1];
  }
}

  $ ../../../../../install/default/bin/stanc --auto-format local_var_transformed_param_block.stan
transformed parameters {
  real p2;
  for (x in 1 : 10) 
    p2 = x;
  {
    int a;
    array[2] int vs;
    array[20, 30] real b;
    array[60, 70] matrix[40, 50] ar_mat;
    ar_mat[1, 1, 1, 1] = 1.0;
    p2 = b[1, 1];
  }
}

  $ ../../../../../install/default/bin/stanc --auto-format multidim_var_all_ar45_mat23.stan
functions {
  void bar(array[,] matrix a) {
    print("hello world");
  }
}
data {
  array[4, 5] matrix<lower=0, upper=1>[2, 3] ar_mat;
}
transformed data {
  int td_a = 1;
  real td_b = 2;
  array[4, 5] matrix<lower=0, upper=1>[2, 3] td_ar_mat;
  for (i in 1 : 4) {
    for (j in 1 : 5) {
      matrix[2, 3] foo = ar_mat[i, j];
      print("ar dim1: ", i, " ar dim2: ", j, " matrix: ", foo);
    }
  }
  bar(td_ar_mat);
}
parameters {
  real p_b;
  array[4, 5] matrix<lower=0, upper=1>[2, 3] p_ar_mat;
}
transformed parameters {
  real tp_b = 2;
  array[4, 5] matrix[2, 3] tp_ar_mat = ar_mat;
}
generated quantities {
  real gq_b = 2;
  array[4, 5] matrix[2, 3] gq_ar_mat = ar_mat;
}

  $ ../../../../../install/default/bin/stanc --auto-format multidim_var_data_ar45_mat23.stan
data {
  array[4, 5] matrix<lower=0, upper=1>[2, 3] ar_mat;
}
transformed data {
  for (i in 1 : 4) {
    for (j in 1 : 5) {
      matrix[2, 3] foo = ar_mat[i, j];
      print("ar dim1: ", i, " ar dim2: ", j, " matrix: ", foo);
    }
  }
}

  $ ../../../../../install/default/bin/stanc --auto-format multidim_var_gen_qs_ar45_mat23.stan
generated quantities {
  array[4, 5] matrix<lower=0, upper=1>[2, 3] ar_mat;
}

  $ ../../../../../install/default/bin/stanc --auto-format multidim_var_param_ar45_mat23.stan
parameters {
  array[4, 5] matrix<lower=0, upper=1>[2, 3] ar_mat;
}

  $ ../../../../../install/default/bin/stanc --auto-format multidim_var_transform_data_ar45_mat23.stan
transformed data {
  array[4, 5] matrix<lower=0, upper=1>[2, 3] ar_mat;
}

  $ ../../../../../install/default/bin/stanc --auto-format multidim_var_transform_param_ar45_mat23.stan
transformed parameters {
  array[4, 5] matrix<lower=0, upper=1>[2, 3] ar_mat;
  real x;
  x = 1;
}

  $ ../../../../../install/default/bin/stanc --auto-format ode.stan
functions {
  array[] real sho(real t, array[] real y, array[] real theta,
                   array[] real x, array[] int x_int) {
    array[2] real dydt;
    dydt[1] = y[2];
    dydt[2] = -y[1] - theta[1] * y[2];
    return dydt;
  }
}
data {
  int<lower=1> T;
  array[2] real y0;
  real t0;
  array[T] real ts;
  array[1] real theta;
}
transformed data {
  array[0] real x;
  array[0] int x_int;
}
model {
  
}
generated quantities {
  array[T, 2] real y_hat;
  y_hat = integrate_ode(sho, y0, t0, ts, theta, x, x_int);
  
  // add measurement error
  for (t in 1 : T) {
    y_hat[t, 1] = y_hat[t, 1] + normal_rng(0, 0.1);
    y_hat[t, 2] = y_hat[t, 2] + normal_rng(0, 0.1);
  }
}

Warning in 'ode.stan', line 26, column 10: integrate_ode is deprecated and
    will be removed in Stan 3.0. Use ode_rk45 instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
  $ ../../../../../install/default/bin/stanc --auto-format ode_control.stan
functions {
  array[] real sho(real t, array[] real y, array[] real theta,
                   array[] real x, array[] int x_int) {
    array[2] real dydt;
    dydt[1] = y[2];
    dydt[2] = -y[1] - theta[1] * y[2];
    return dydt;
  }
}
data {
  int<lower=1> T;
  array[2] real y0;
  real t0;
  array[T] real ts;
  array[1] real theta;
}
transformed data {
  array[0] real x;
  array[0] int x_int;
}
model {
  
}
generated quantities {
  array[T, 3] real y_hat;
  y_hat = integrate_ode_rk45(sho, y0, t0, ts, theta, x, x_int, 1e-10, 1e-10,
                             1e6);
  y_hat = integrate_ode_bdf(sho, y0, t0, ts, theta, x, x_int, 1e-10, 1e-10,
                            1e6);
  y_hat = integrate_ode_adams(sho, y0, t0, ts, theta, x, x_int, 1e-10, 1e-10,
                              1e6);
  
  // add measurement error
  for (t in 1 : T) {
    y_hat[t, 1] = y_hat[t, 1] + normal_rng(0, 0.1);
    y_hat[t, 2] = y_hat[t, 2] + normal_rng(0, 0.1);
    y_hat[t, 3] = y_hat[t, 3] + normal_rng(0, 0.1);
  }
}

Warning in 'ode_control.stan', line 26, column 10: integrate_ode_rk45 is
    deprecated and will be removed in Stan 3.0. Use ode_rk45 instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'ode_control.stan', line 28, column 10: integrate_ode_bdf is
    deprecated and will be removed in Stan 3.0. Use ode_bdf instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'ode_control.stan', line 30, column 10: integrate_ode_adams is
    deprecated and will be removed in Stan 3.0. Use ode_adams instead. 
    The new interface is slightly different, see:
    https://mc-stan.org/users/documentation/case-studies/convert_odes.html
  $ ../../../../../install/default/bin/stanc --auto-format prim_var_data_block.stan
data {
  int<lower=0, upper=1> p1;
  real p2;
  array[3] int ar_p1;
  array[4] real<lower=0, upper=1> ar_p2;
}

  $ ../../../../../install/default/bin/stanc --auto-format prim_var_gqs.stan
generated quantities {
  int<lower=0, upper=1> p1;
  real p2;
  array[3] int ar_p1;
  array[4] real<lower=0, upper=1> ar_p2;
}

  $ ../../../../../install/default/bin/stanc --auto-format prim_var_param_block.stan
parameters {
  real p2;
  array[4] real<lower=0, upper=1> ar_p2;
}

  $ ../../../../../install/default/bin/stanc --auto-format prim_var_transformed_data_block.stan
transformed data {
  int<lower=0, upper=1> p1;
  real p2;
  array[3] int ar_p1;
  array[4] real<lower=0, upper=1> ar_p2;
}

  $ ../../../../../install/default/bin/stanc --auto-format prim_var_transformed_param_block.stan
transformed parameters {
  real p2;
  array[4] real<lower=0, upper=1> ar_p2;
}

  $ ../../../../../install/default/bin/stanc --auto-format row_vector_expr_terms.stan
data {
  real x;
  real y;
}
transformed data {
  row_vector[2] X = [1, 2];
  X = [x, y];
  X = [x + y, x - y];
  X = [x ^ 2, y ^ 2];
}
parameters {
  real z;
}
transformed parameters {
  vector[3] WT = [1, 1, 1]';
  row_vector[2] Z = [1, z];
  Z = [x, y];
}
model {
  z ~ normal(0, 1);
}

  $ ../../../../../install/default/bin/stanc --auto-format test_transform_inits.stan
parameters {
  real<lower=0> nu;
  real<lower=0, upper=(nu == 0 ? 1 : positive_infinity())> lambda;
}

  $ ../../../../../install/default/bin/stanc --auto-format user-function-struct-const.stan
functions {
  real foo(real x) {
    return x;
  }
}
model {
  
}

