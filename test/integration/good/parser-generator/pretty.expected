  $ ../../../../../install/default/bin/stanc --auto_format algebra_solver.stan
functions {
  vector algebra_system(vector y, vector theta, real[] x_r, int[] x_i) {
    vector[2] f_y;
    f_y[1] = y[1] - theta[1];
    f_y[2] = y[2] - theta[2];
    return f_y;
  }
}
data {
  vector[2] y;
}
transformed data {
  real x_r[0];
  int x_i[0];
}
parameters {
  vector[2] theta;
  real dummy_parameter;
}
transformed parameters {

}
model {
  dummy_parameter ~ normal(0, 1);
}
generated quantities {
  vector[2] y_s;
  y_s = algebra_solver(algebra_system, y, theta, x_r, x_i);
}

  $ ../../../../../install/default/bin/stanc --auto_format cholesky_cov_data_block.stan
data {
  cholesky_factor_cov[5, 4] cfcov_54;
  cholesky_factor_cov[3] cfcov_33;
}

  $ ../../../../../install/default/bin/stanc --auto_format cholesky_cov_gqs_block.stan
generated quantities {
  cholesky_factor_cov[5, 4] cfcov_54;
  cholesky_factor_cov[3] cfcov_33;
}

  $ ../../../../../install/default/bin/stanc --auto_format cholesky_cov_param_block.stan
parameters {
  cholesky_factor_cov[5, 4] cfcov_54;
  cholesky_factor_cov[3] cfcov_33;
}

  $ ../../../../../install/default/bin/stanc --auto_format cholesky_cov_transform_data_block.stan
transformed data {
  cholesky_factor_cov[5, 4] cfcov_54;
  cholesky_factor_cov[3] cfcov_33;
}

  $ ../../../../../install/default/bin/stanc --auto_format cholesky_cov_transform_param_block.stan
transformed parameters {
  cholesky_factor_cov[5, 4] cfcov_54;
  cholesky_factor_cov[3] cfcov_33;
}

  $ ../../../../../install/default/bin/stanc --auto_format data_qualifier_scope_xformed_data.stan
functions {
  vector target_(vector y, vector theta, real[] x_r, int[] x_i) {
    vector[2] deltas;
    deltas[1] = y[1] - theta[1] - x_r[1];
    return deltas;
  }
}
transformed data {
  vector[1] td_y;
  {
    vector[1] td_y_guess = [1]';
    vector[1] td_theta = [1]';
    real td_x_r[0] = {1.0};
    int td_x_i[0];
    td_y = algebra_solver(target_, td_y_guess, td_theta, td_x_r, td_x_i);
  }
}
generated quantities {
  vector[1] gq_y;
  {
    vector[1] gq_y_guess = [1]';
    vector[1] gq_theta = [1]';
    real gq_x_r[0] = {1.0};
    int gq_x_i[0];
    gq_y = algebra_solver(target_, gq_y_guess, gq_theta, gq_x_r, gq_x_i);
  }
}

  $ ../../../../../install/default/bin/stanc --auto_format deep-copy-warning.stan
transformed data {
  vector[5] v = [1, 2, 3, 4, 5]';
  real y = 0.1;
  print("y: ", y);
  y += 1;
  print("expect 1.1 actual y: ", y);
  print("v: ", v);
  v[1] = v[2];
  print("expect: [2,2,3,4,5]  v: ", v);
  v[1 : 2] += 1.0;
  print("expect: [3,3,3,4,5]  v: ", v);
  v[2 : 4] += v[1 : 3] + 1;
  print("expect: [3,7,7,8,5]  v: ", v);
}

  $ ../../../../../install/default/bin/stanc --auto_format function_var.stan
functions {
  void f0(int a1, int[] a2, int[,] a3, real a4, real[] a5, real[,] a6,
          vector a7, vector[] a8, vector[,] a9, matrix a10, matrix[] a11,
          matrix[,] a12) {
    print("hi");
  }
  int f1(int a1, int[] a2, int[,] a3, real a4, real[] a5, real[,] a6,
         vector a7, vector[] a8, vector[,] a9, matrix a10, matrix[] a11,
         matrix[,] a12) {
    return a1;
  }
  int[] f2(int a1, int[] a2, int[,] a3, real a4, real[] a5, real[,] a6,
           vector a7, vector[] a8, vector[,] a9, matrix a10, matrix[] a11,
           matrix[,] a12) {
    return a2;
  }
  int[,] f3(int a1, int[] a2, int[,] a3, real a4, real[] a5, real[,] a6,
            vector a7, vector[] a8, vector[,] a9, matrix a10, matrix[] a11,
            matrix[,] a12) {
    return a3;
  }
  real f4(int a1, int[] a2, int[,] a3, real a4, real[] a5, real[,] a6,
          vector a7, vector[] a8, vector[,] a9, matrix a10, matrix[] a11,
          matrix[,] a12) {
    return a4;
  }
  real[] f5(int a1, int[] a2, int[,] a3, real a4, real[] a5, real[,] a6,
            vector a7, vector[] a8, vector[,] a9, matrix a10, matrix[] a11,
            matrix[,] a12) {
    return a5;
  }
  real[,] f6(int a1, int[] a2, int[,] a3, real a4, real[] a5, real[,] a6,
             vector a7, vector[] a8, vector[,] a9, matrix a10, matrix[] a11,
             matrix[,] a12) {
    return a6;
  }
  vector f7(int a1, int[] a2, int[,] a3, real a4, real[] a5, real[,] a6,
            vector a7, vector[] a8, vector[,] a9, matrix a10, matrix[] a11,
            matrix[,] a12) {
    return a7;
  }
  vector[] f8(int a1, int[] a2, int[,] a3, real a4, real[] a5, real[,] a6,
              vector a7, vector[] a8, vector[,] a9, matrix a10, matrix[] a11,
              matrix[,] a12) {
    return a8;
  }
  vector[,] f9(int a1, int[] a2, int[,] a3, real a4, real[] a5, real[,] a6,
               vector a7, vector[] a8, vector[,] a9, matrix a10,
               matrix[] a11, matrix[,] a12) {
    return a9;
  }
  matrix f10(int a1, int[] a2, int[,] a3, real a4, real[] a5, real[,] a6,
             vector a7, vector[] a8, vector[,] a9, matrix a10, matrix[] a11,
             matrix[,] a12) {
    return a10;
  }
  matrix[] f11(int a1, int[] a2, int[,] a3, real a4, real[] a5, real[,] a6,
               vector a7, vector[] a8, vector[,] a9, matrix a10,
               matrix[] a11, matrix[,] a12) {
    return a11;
  }
  matrix[,] f12(int a1, int[] a2, int[,] a3, real a4, real[] a5, real[,] a6,
                vector a7, vector[] a8, vector[,] a9, matrix a10,
                matrix[] a11, matrix[,] a12) {
    return a12;
  }
}

  $ ../../../../../install/default/bin/stanc --auto_format local_var_function_body.stan
functions {
  void foo() {
    int a;
    real b;
    real c[20, 30];
    matrix[40, 50] ar_mat[60, 70];
    ar_mat[1, 1, 1, 1] = b;
  }
}

  $ ../../../../../install/default/bin/stanc --auto_format local_var_gqs.stan
generated quantities {
  real p2;
  for (x in 1 : 10) 
    p2 = x;
  {
    int a;
    real b[20, 30];
    matrix[40, 50] ar_mat[60, 70];
    ar_mat[1, 1, 1, 1] = 1.0;
    p2 = b[1, 1];
  }
}

  $ ../../../../../install/default/bin/stanc --auto_format local_var_transformed_data_block.stan
transformed data {
  int a1;
  real d1;
  {
    int a2;
    real d2;
    real b[20, 30];
    matrix[40, 50] ar_mat[60, 70];
    ar_mat[1, 1, 1, 1] = 1.0;
    a1 = a2;
    d1 = b[1, 1];
  }
}

  $ ../../../../../install/default/bin/stanc --auto_format local_var_transformed_param_block.stan
transformed parameters {
  real p2;
  for (x in 1 : 10) 
    p2 = x;
  {
    int a;
    int vs[2];
    real b[20, 30];
    matrix[40, 50] ar_mat[60, 70];
    ar_mat[1, 1, 1, 1] = 1.0;
    p2 = b[1, 1];
  }
}

  $ ../../../../../install/default/bin/stanc --auto_format multidim_var_all_ar45_mat23.stan
functions {
  void bar(matrix[,] a) {
    print("hello world");
  }
}
data {
  matrix<lower=0, upper=1>[2, 3] ar_mat[4, 5];
}
transformed data {
  int td_a = 1;
  real td_b = 2;
  matrix<lower=0, upper=1>[2, 3] td_ar_mat[4, 5];
  for (i in 1 : 4) {
    for (j in 1 : 5) {
      matrix[2, 3] foo = ar_mat[i, j];
      print("ar dim1: ", i, " ar dim2: ", j, " matrix: ", foo);
    }
  }
  bar(td_ar_mat);
}
parameters {
  real p_b;
  matrix<lower=0, upper=1>[2, 3] p_ar_mat[4, 5];
}
transformed parameters {
  real tp_b = 2;
  matrix[2, 3] tp_ar_mat[4, 5] = ar_mat;
}
generated quantities {
  real gq_b = 2;
  matrix[2, 3] gq_ar_mat[4, 5] = ar_mat;
}

  $ ../../../../../install/default/bin/stanc --auto_format multidim_var_data_ar45_mat23.stan
data {
  matrix<lower=0, upper=1>[2, 3] ar_mat[4, 5];
}
transformed data {
  for (i in 1 : 4) {
    for (j in 1 : 5) {
      matrix[2, 3] foo = ar_mat[i, j];
      print("ar dim1: ", i, " ar dim2: ", j, " matrix: ", foo);
    }
  }
}

  $ ../../../../../install/default/bin/stanc --auto_format multidim_var_gen_qs_ar45_mat23.stan
generated quantities {
  matrix<lower=0, upper=1>[2, 3] ar_mat[4, 5];
}

  $ ../../../../../install/default/bin/stanc --auto_format multidim_var_param_ar45_mat23.stan
parameters {
  matrix<lower=0, upper=1>[2, 3] ar_mat[4, 5];
}

  $ ../../../../../install/default/bin/stanc --auto_format multidim_var_transform_data_ar45_mat23.stan
transformed data {
  matrix<lower=0, upper=1>[2, 3] ar_mat[4, 5];
}

  $ ../../../../../install/default/bin/stanc --auto_format multidim_var_transform_param_ar45_mat23.stan
transformed parameters {
  matrix<lower=0, upper=1>[2, 3] ar_mat[4, 5];
  real x;
  x = 1;
}

  $ ../../../../../install/default/bin/stanc --auto_format ode.stan
functions {
  real[] sho(real t, real[] y, real[] theta, real[] x, int[] x_int) {
    real dydt[2];
    dydt[1] = y[2];
    dydt[2] = -y[1] - theta[1] * y[2];
    return dydt;
  }
}
data {
  int<lower=1> T;
  real y0[2];
  real t0;
  real ts[T];
  real theta[1];
}
transformed data {
  real x[0];
  int x_int[0];
}
model {

}
generated quantities {
  real y_hat[T, 2];
  y_hat = integrate_ode(sho, y0, t0, ts, theta, x, x_int);
  for (t in 1 : T) {
    y_hat[t, 1] = y_hat[t, 1] + normal_rng(0, 0.1);
    y_hat[t, 2] = y_hat[t, 2] + normal_rng(0, 0.1);
  }
}

  $ ../../../../../install/default/bin/stanc --auto_format ode_control.stan
functions {
  real[] sho(real t, real[] y, real[] theta, real[] x, int[] x_int) {
    real dydt[2];
    dydt[1] = y[2];
    dydt[2] = -y[1] - theta[1] * y[2];
    return dydt;
  }
}
data {
  int<lower=1> T;
  real y0[2];
  real t0;
  real ts[T];
  real theta[1];
}
transformed data {
  real x[0];
  int x_int[0];
}
model {

}
generated quantities {
  real y_hat[T, 3];
  y_hat = integrate_ode_rk45(sho, y0, t0, ts, theta, x, x_int, 1e-10, 1e-10,
                             1e6);
  y_hat = integrate_ode_bdf(sho, y0, t0, ts, theta, x, x_int, 1e-10, 1e-10,
                            1e6);
  y_hat = integrate_ode_adams(sho, y0, t0, ts, theta, x, x_int, 1e-10, 1e-10,
                              1e6);
  for (t in 1 : T) {
    y_hat[t, 1] = y_hat[t, 1] + normal_rng(0, 0.1);
    y_hat[t, 2] = y_hat[t, 2] + normal_rng(0, 0.1);
    y_hat[t, 3] = y_hat[t, 3] + normal_rng(0, 0.1);
  }
}

  $ ../../../../../install/default/bin/stanc --auto_format prim_var_data_block.stan
data {
  int<lower=0, upper=1> p1;
  real p2;
  int ar_p1[3];
  real<lower=0, upper=1> ar_p2[4];
}

  $ ../../../../../install/default/bin/stanc --auto_format prim_var_gqs.stan
generated quantities {
  int<lower=0, upper=1> p1;
  real p2;
  int ar_p1[3];
  real<lower=0, upper=1> ar_p2[4];
}

  $ ../../../../../install/default/bin/stanc --auto_format prim_var_param_block.stan
parameters {
  real p2;
  real<lower=0, upper=1> ar_p2[4];
}

  $ ../../../../../install/default/bin/stanc --auto_format prim_var_transformed_data_block.stan
transformed data {
  int<lower=0, upper=1> p1;
  real p2;
  int ar_p1[3];
  real<lower=0, upper=1> ar_p2[4];
}

  $ ../../../../../install/default/bin/stanc --auto_format prim_var_transformed_param_block.stan
transformed parameters {
  real p2;
  real<lower=0, upper=1> ar_p2[4];
}

  $ ../../../../../install/default/bin/stanc --auto_format row_vector_expr_terms.stan
data {
  real x;
  real y;
}
transformed data {
  row_vector[2] X = [1, 2];
  X = [x, y];
  X = [x + y, x - y];
  X = [x ^ 2, y ^ 2];
}
parameters {
  real z;
}
transformed parameters {
  vector[3] WT = [1, 1, 1]';
  row_vector[2] Z = [1, z];
  Z = [x, y];
}
model {
  z ~ normal(0, 1);
}

  $ ../../../../../install/default/bin/stanc --auto_format user-function-struct-const.stan
functions {
  real foo(real x) {
    return x;
  }
}
model {

}

