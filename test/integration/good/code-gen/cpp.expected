  $ ../../../../../install/default/bin/stanc --print-cpp 8_schools_ncp.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace _8_schools_ncp_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 16> locations_array__ = 
{" (found before start of program)",
 " (in '8_schools_ncp.stan', line 8, column 2 to column 10)",
 " (in '8_schools_ncp.stan', line 9, column 2 to column 20)",
 " (in '8_schools_ncp.stan', line 10, column 2 to column 24)",
 " (in '8_schools_ncp.stan', line 14, column 2 to column 43)",
 " (in '8_schools_ncp.stan', line 18, column 2 to column 20)",
 " (in '8_schools_ncp.stan', line 19, column 2 to column 21)",
 " (in '8_schools_ncp.stan', line 20, column 2 to column 29)",
 " (in '8_schools_ncp.stan', line 21, column 2 to column 27)",
 " (in '8_schools_ncp.stan', line 2, column 2 to column 17)",
 " (in '8_schools_ncp.stan', line 3, column 9 to column 10)",
 " (in '8_schools_ncp.stan', line 3, column 2 to column 12)",
 " (in '8_schools_ncp.stan', line 4, column 22 to column 23)",
 " (in '8_schools_ncp.stan', line 4, column 2 to column 25)",
 " (in '8_schools_ncp.stan', line 10, column 9 to column 10)",
 " (in '8_schools_ncp.stan', line 14, column 9 to column 10)"};



class _8_schools_ncp_model final : public model_base_crtp<_8_schools_ncp_model> {

 private:
  int J;
  std::vector<double> y;
  std::vector<double> sigma; 
  
 
 public:
  ~_8_schools_ncp_model() { }
  
  inline std::string model_name() const final { return "_8_schools_ncp_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  _8_schools_ncp_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "_8_schools_ncp_model_namespace::_8_schools_ncp_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 9;
      context__.validate_dims("data initialization","J","int",
           std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      
      current_statement__ = 9;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 9;
      check_greater_or_equal(function__, "J", J, 0);
      current_statement__ = 10;
      validate_non_negative_index("y", "J", J);
      current_statement__ = 11;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(J)});
      y = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      y = context__.vals_r("y");
      current_statement__ = 12;
      validate_non_negative_index("sigma", "J", J);
      current_statement__ = 13;
      context__.validate_dims("data initialization","sigma","double",
           std::vector<size_t>{static_cast<size_t>(J)});
      sigma = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 13;
      sigma = context__.vals_r("sigma");
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 13;
        check_greater_or_equal(function__, "sigma[sym1__]",
                               sigma[(sym1__ - 1)], 0);
      }
      current_statement__ = 14;
      validate_non_negative_index("theta_tilde", "J", J);
      current_statement__ = 15;
      validate_non_negative_index("theta", "J", J);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + J;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "_8_schools_ncp_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mu = DUMMY_VAR__;
      
      current_statement__ = 1;
      mu = in__.template read<local_scalar_t__>();
      local_scalar_t__ tau = DUMMY_VAR__;
      
      current_statement__ = 2;
      tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> theta_tilde = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(J, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 3;
      theta_tilde = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                      J);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> theta = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(J, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 4;
      assign(theta, add(mu, multiply(tau, theta_tilde)),
        "assigning variable theta");
      {
        current_statement__ = 5;
        lp_accum__.add(normal_lpdf<propto__>(mu, 0, 5));
        current_statement__ = 6;
        lp_accum__.add(normal_lpdf<propto__>(tau, 0, 5));
        current_statement__ = 7;
        lp_accum__.add(normal_lpdf<propto__>(theta_tilde, 0, 1));
        current_statement__ = 8;
        lp_accum__.add(normal_lpdf<propto__>(y, theta, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "_8_schools_ncp_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu = in__.template read<local_scalar_t__>();
      double tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<double, -1, 1> theta_tilde = Eigen::Matrix<double, -1, 1>::Constant(J, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      current_statement__ = 3;
      theta_tilde = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                      J);
      Eigen::Matrix<double, -1, 1> theta = Eigen::Matrix<double, -1, 1>::Constant(J, std::numeric_limits<double>::quiet_NaN());
                                           
      
      vars__.emplace_back(mu);
      vars__.emplace_back(tau);
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(theta_tilde[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      assign(theta, add(mu, multiply(tau, theta_tilde)),
        "assigning variable theta");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          vars__.emplace_back(theta[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu = context__.vals_r("mu")[(1 - 1)];
      double tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      tau = context__.vals_r("tau")[(1 - 1)];
      double tau_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      tau_free__ = stan::math::lb_free(tau, 0);
      Eigen::Matrix<double, -1, 1> theta_tilde = Eigen::Matrix<double, -1, 1>::Constant(J, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      {
        std::vector<local_scalar_t__> theta_tilde_flat__;
        current_statement__ = 3;
        theta_tilde_flat__ = context__.vals_r("theta_tilde");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 3;
          assign(theta_tilde, theta_tilde_flat__[(pos__ - 1)],
            "assigning variable theta_tilde", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      vars__.emplace_back(mu);
      vars__.emplace_back(tau_free__);
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(theta_tilde[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu", "tau", "theta_tilde", "theta"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(J)},
      std::vector<size_t>{static_cast<size_t>(J)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "tau");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_tilde" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "tau");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_tilde" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = _8_schools_ncp_model_namespace::_8_schools_ncp_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return _8_schools_ncp_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp 8start_with_number.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace _8start_with_number_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 3> locations_array__ = 
{" (found before start of program)",
 " (in '8start_with_number.stan', line 6, column 3 to column 12)",
 " (in '8start_with_number.stan', line 3, column 2 to column 17)"};



class _8start_with_number_model final : public model_base_crtp<_8start_with_number_model> {

 private:
  int good_model; 
  
 
 public:
  ~_8start_with_number_model() { }
  
  inline std::string model_name() const final { return "_8start_with_number_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  _8start_with_number_model(stan::io::var_context& context__,
                            unsigned int random_seed__ = 0,
                            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "_8start_with_number_model_namespace::_8start_with_number_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 2;
      context__.validate_dims("data initialization","good_model","int",
           std::vector<size_t>{});
      good_model = std::numeric_limits<int>::min();
      
      current_statement__ = 2;
      good_model = context__.vals_i("good_model")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "_8start_with_number_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ bar = DUMMY_VAR__;
      
      current_statement__ = 1;
      bar = in__.template read<local_scalar_t__>();
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "_8start_with_number_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double bar = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      bar = in__.template read<local_scalar_t__>();
      vars__.emplace_back(bar);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double bar = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      bar = context__.vals_r("bar")[(1 - 1)];
      vars__.emplace_back(bar);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"bar"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "bar");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "bar");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"bar\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"bar\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = _8start_with_number_model_namespace::_8start_with_number_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return _8start_with_number_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp eight_schools_ncp.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace eight_schools_ncp_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 16> locations_array__ = 
{" (found before start of program)",
 " (in 'eight_schools_ncp.stan', line 8, column 2 to column 10)",
 " (in 'eight_schools_ncp.stan', line 9, column 2 to column 20)",
 " (in 'eight_schools_ncp.stan', line 10, column 2 to column 24)",
 " (in 'eight_schools_ncp.stan', line 14, column 2 to column 43)",
 " (in 'eight_schools_ncp.stan', line 18, column 2 to column 20)",
 " (in 'eight_schools_ncp.stan', line 19, column 2 to column 21)",
 " (in 'eight_schools_ncp.stan', line 20, column 2 to column 29)",
 " (in 'eight_schools_ncp.stan', line 21, column 2 to column 27)",
 " (in 'eight_schools_ncp.stan', line 2, column 2 to column 17)",
 " (in 'eight_schools_ncp.stan', line 3, column 9 to column 10)",
 " (in 'eight_schools_ncp.stan', line 3, column 2 to column 12)",
 " (in 'eight_schools_ncp.stan', line 4, column 22 to column 23)",
 " (in 'eight_schools_ncp.stan', line 4, column 2 to column 25)",
 " (in 'eight_schools_ncp.stan', line 10, column 9 to column 10)",
 " (in 'eight_schools_ncp.stan', line 14, column 9 to column 10)"};



class eight_schools_ncp_model final : public model_base_crtp<eight_schools_ncp_model> {

 private:
  int J;
  std::vector<double> y;
  std::vector<double> sigma; 
  
 
 public:
  ~eight_schools_ncp_model() { }
  
  inline std::string model_name() const final { return "eight_schools_ncp_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  eight_schools_ncp_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "eight_schools_ncp_model_namespace::eight_schools_ncp_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 9;
      context__.validate_dims("data initialization","J","int",
           std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      
      current_statement__ = 9;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 9;
      check_greater_or_equal(function__, "J", J, 0);
      current_statement__ = 10;
      validate_non_negative_index("y", "J", J);
      current_statement__ = 11;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(J)});
      y = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      y = context__.vals_r("y");
      current_statement__ = 12;
      validate_non_negative_index("sigma", "J", J);
      current_statement__ = 13;
      context__.validate_dims("data initialization","sigma","double",
           std::vector<size_t>{static_cast<size_t>(J)});
      sigma = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 13;
      sigma = context__.vals_r("sigma");
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 13;
        check_greater_or_equal(function__, "sigma[sym1__]",
                               sigma[(sym1__ - 1)], 0);
      }
      current_statement__ = 14;
      validate_non_negative_index("theta_tilde", "J", J);
      current_statement__ = 15;
      validate_non_negative_index("theta", "J", J);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + J;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "eight_schools_ncp_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mu = DUMMY_VAR__;
      
      current_statement__ = 1;
      mu = in__.template read<local_scalar_t__>();
      local_scalar_t__ tau = DUMMY_VAR__;
      
      current_statement__ = 2;
      tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> theta_tilde = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(J, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 3;
      theta_tilde = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                      J);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> theta = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(J, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 4;
      assign(theta, add(mu, multiply(tau, theta_tilde)),
        "assigning variable theta");
      {
        current_statement__ = 5;
        lp_accum__.add(normal_lpdf<propto__>(mu, 0, 5));
        current_statement__ = 6;
        lp_accum__.add(normal_lpdf<propto__>(tau, 0, 5));
        current_statement__ = 7;
        lp_accum__.add(normal_lpdf<propto__>(theta_tilde, 0, 1));
        current_statement__ = 8;
        lp_accum__.add(normal_lpdf<propto__>(y, theta, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "eight_schools_ncp_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu = in__.template read<local_scalar_t__>();
      double tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<double, -1, 1> theta_tilde = Eigen::Matrix<double, -1, 1>::Constant(J, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      current_statement__ = 3;
      theta_tilde = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                      J);
      Eigen::Matrix<double, -1, 1> theta = Eigen::Matrix<double, -1, 1>::Constant(J, std::numeric_limits<double>::quiet_NaN());
                                           
      
      vars__.emplace_back(mu);
      vars__.emplace_back(tau);
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(theta_tilde[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      assign(theta, add(mu, multiply(tau, theta_tilde)),
        "assigning variable theta");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          vars__.emplace_back(theta[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu = context__.vals_r("mu")[(1 - 1)];
      double tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      tau = context__.vals_r("tau")[(1 - 1)];
      double tau_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      tau_free__ = stan::math::lb_free(tau, 0);
      Eigen::Matrix<double, -1, 1> theta_tilde = Eigen::Matrix<double, -1, 1>::Constant(J, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      {
        std::vector<local_scalar_t__> theta_tilde_flat__;
        current_statement__ = 3;
        theta_tilde_flat__ = context__.vals_r("theta_tilde");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 3;
          assign(theta_tilde, theta_tilde_flat__[(pos__ - 1)],
            "assigning variable theta_tilde", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      vars__.emplace_back(mu);
      vars__.emplace_back(tau_free__);
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(theta_tilde[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu", "tau", "theta_tilde", "theta"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(J)},
      std::vector<size_t>{static_cast<size_t>(J)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "tau");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_tilde" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "tau");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_tilde" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = eight_schools_ncp_model_namespace::eight_schools_ncp_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return eight_schools_ncp_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp mem_patterns.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace mem_patterns_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 111> locations_array__ = 
{" (found before start of program)",
 " (in 'mem_patterns.stan', line 16, column 2 to column 13)",
 " (in 'mem_patterns.stan', line 18, column 2 to column 24)",
 " (in 'mem_patterns.stan', line 19, column 2 to column 25)",
 " (in 'mem_patterns.stan', line 20, column 2 to column 38)",
 " (in 'mem_patterns.stan', line 21, column 2 to column 36)",
 " (in 'mem_patterns.stan', line 22, column 2 to column 30)",
 " (in 'mem_patterns.stan', line 23, column 2 to column 41)",
 " (in 'mem_patterns.stan', line 24, column 2 to column 35)",
 " (in 'mem_patterns.stan', line 25, column 2 to column 31)",
 " (in 'mem_patterns.stan', line 26, column 2 to column 48)",
 " (in 'mem_patterns.stan', line 27, column 2 to column 33)",
 " (in 'mem_patterns.stan', line 30, column 2 to column 38)",
 " (in 'mem_patterns.stan', line 32, column 2 to column 38)",
 " (in 'mem_patterns.stan', line 34, column 2 to column 37)",
 " (in 'mem_patterns.stan', line 36, column 2 to column 43)",
 " (in 'mem_patterns.stan', line 37, column 2 to column 41)",
 " (in 'mem_patterns.stan', line 38, column 2 to column 47)",
 " (in 'mem_patterns.stan', line 41, column 2 to column 25)",
 " (in 'mem_patterns.stan', line 43, column 2 to column 48)",
 " (in 'mem_patterns.stan', line 44, column 2 to column 48)",
 " (in 'mem_patterns.stan', line 49, column 2 to column 41)",
 " (in 'mem_patterns.stan', line 52, column 2 to column 58)",
 " (in 'mem_patterns.stan', line 55, column 2 to column 63)",
 " (in 'mem_patterns.stan', line 59, column 2 to column 44)",
 " (in 'mem_patterns.stan', line 60, column 2 to column 77)",
 " (in 'mem_patterns.stan', line 61, column 2 to column 68)",
 " (in 'mem_patterns.stan', line 57, column 2 to column 45)",
 " (in 'mem_patterns.stan', line 62, column 2 to column 75)",
 " (in 'mem_patterns.stan', line 66, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 66, column 2 to column 108)",
 " (in 'mem_patterns.stan', line 67, column 2 to column 95)",
 " (in 'mem_patterns.stan', line 68, column 2 to column 56)",
 " (in 'mem_patterns.stan', line 69, column 2 to column 62)",
 " (in 'mem_patterns.stan', line 70, column 2 to column 79)",
 " (in 'mem_patterns.stan', line 71, column 2 to column 81)",
 " (in 'mem_patterns.stan', line 72, column 2 to column 85)",
 " (in 'mem_patterns.stan', line 73, column 2 to column 94)",
 " (in 'mem_patterns.stan', line 74, column 2 to column 106)",
 " (in 'mem_patterns.stan', line 75, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 75, column 2 to column 33)",
 " (in 'mem_patterns.stan', line 76, column 2 to column 32)",
 " (in 'mem_patterns.stan', line 77, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 77, column 2 to column 42)",
 " (in 'mem_patterns.stan', line 78, column 2 to column 86)",
 " (in 'mem_patterns.stan', line 81, column 4 to column 57)",
 " (in 'mem_patterns.stan', line 82, column 4 to column 69)",
 " (in 'mem_patterns.stan', line 83, column 4 to column 69)",
 " (in 'mem_patterns.stan', line 84, column 4 to column 70)",
 " (in 'mem_patterns.stan', line 85, column 4 to column 73)",
 " (in 'mem_patterns.stan', line 86, column 4 to column 69)",
 " (in 'mem_patterns.stan', line 87, column 4 to column 88)",
 " (in 'mem_patterns.stan', line 80, column 18 to line 88, column 3)",
 " (in 'mem_patterns.stan', line 80, column 2 to line 88, column 3)",
 " (in 'mem_patterns.stan', line 90, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 90, column 2 to column 38)",
 " (in 'mem_patterns.stan', line 91, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 91, column 2 to column 44)",
 " (in 'mem_patterns.stan', line 92, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 92, column 2 to column 60)",
 " (in 'mem_patterns.stan', line 95, column 4 to column 84)",
 " (in 'mem_patterns.stan', line 96, column 4 to column 102)",
 " (in 'mem_patterns.stan', line 97, column 4 to column 111)",
 " (in 'mem_patterns.stan', line 99, column 4 to column 70)",
 " (in 'mem_patterns.stan', line 100, column 4 to column 75)",
 " (in 'mem_patterns.stan', line 101, column 4 to line 102, column 73)",
 " (in 'mem_patterns.stan', line 93, column 17 to line 103, column 3)",
 " (in 'mem_patterns.stan', line 93, column 2 to line 103, column 3)",
 " (in 'mem_patterns.stan', line 8, column 1 to column 7)",
 " (in 'mem_patterns.stan', line 9, column 1 to column 7)",
 " (in 'mem_patterns.stan', line 10, column 8 to column 9)",
 " (in 'mem_patterns.stan', line 10, column 11 to column 12)",
 " (in 'mem_patterns.stan', line 10, column 1 to column 20)",
 " (in 'mem_patterns.stan', line 11, column 8 to column 9)",
 " (in 'mem_patterns.stan', line 11, column 1 to column 13)",
 " (in 'mem_patterns.stan', line 12, column 16 to column 17)",
 " (in 'mem_patterns.stan', line 12, column 1 to column 19)",
 " (in 'mem_patterns.stan', line 18, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 19, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 19, column 12 to column 13)",
 " (in 'mem_patterns.stan', line 20, column 19 to column 20)",
 " (in 'mem_patterns.stan', line 21, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 21, column 11 to column 12)",
 " (in 'mem_patterns.stan', line 22, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 23, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 23, column 11 to column 12)",
 " (in 'mem_patterns.stan', line 24, column 13 to column 14)",
 " (in 'mem_patterns.stan', line 25, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 26, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 27, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 30, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 32, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 34, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 36, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 37, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 37, column 11 to column 12)",
 " (in 'mem_patterns.stan', line 38, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 38, column 11 to column 12)",
 " (in 'mem_patterns.stan', line 41, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 41, column 12 to column 13)",
 " (in 'mem_patterns.stan', line 43, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 43, column 12 to column 13)",
 " (in 'mem_patterns.stan', line 44, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 44, column 12 to column 13)",
 " (in 'mem_patterns.stan', line 52, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 55, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 59, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 60, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 61, column 9 to column 10)",
 " (in 'mem_patterns.stan', line 3, column 4 to column 13)",
 " (in 'mem_patterns.stan', line 2, column 22 to line 4, column 3)"};


int
mask_fun(const int& i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 109;
    return i;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct mask_fun_functor__ {
int
operator()(const int& i, std::ostream* pstream__)  const 
{
return mask_fun(i, pstream__);
}
};

class mem_patterns_model final : public model_base_crtp<mem_patterns_model> {

 private:
  int N;
  int M;
  Eigen::Matrix<double, -1, -1> dat_x__;
  Eigen::Matrix<double, -1, 1> y__;
  std::vector<int> idx_tester; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> dat_x{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
 
 public:
  ~mem_patterns_model() { }
  
  inline std::string model_name() const final { return "mem_patterns_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  mem_patterns_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "mem_patterns_model_namespace::mem_patterns_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 68;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 68;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 69;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 69;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 70;
      validate_non_negative_index("dat_x", "N", N);
      current_statement__ = 71;
      validate_non_negative_index("dat_x", "M", M);
      current_statement__ = 72;
      context__.validate_dims("data initialization","dat_x","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(M)});
      dat_x__ = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      new (&dat_x) Eigen::Map<Eigen::Matrix<double, -1, -1>>(dat_x__.data(), N, M);
      
      
      {
        std::vector<local_scalar_t__> dat_x_flat__;
        current_statement__ = 72;
        dat_x_flat__ = context__.vals_r("dat_x");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 72;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 72;
            assign(dat_x, dat_x_flat__[(pos__ - 1)],
              "assigning variable dat_x", index_uni(sym2__),
                                            index_uni(sym1__));
            current_statement__ = 72;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 73;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 74;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y__ = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 74;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 74;
        pos__ = 1;
        current_statement__ = 74;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 74;
          assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", index_uni(sym1__));
          current_statement__ = 74;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 75;
      validate_non_negative_index("idx_tester", "N", N);
      current_statement__ = 76;
      context__.validate_dims("data initialization","idx_tester","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      idx_tester = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 76;
      idx_tester = context__.vals_i("idx_tester");
      current_statement__ = 77;
      validate_non_negative_index("p_soa_vec_v", "M", M);
      current_statement__ = 78;
      validate_non_negative_index("p_soa_mat", "N", N);
      current_statement__ = 79;
      validate_non_negative_index("p_soa_mat", "M", M);
      current_statement__ = 80;
      validate_non_negative_index("p_soa_arr_vec_v", "N", N);
      current_statement__ = 81;
      validate_non_negative_index("p_soa_mat_uni_col_idx", "N", N);
      current_statement__ = 82;
      validate_non_negative_index("p_soa_mat_uni_col_idx", "M", M);
      current_statement__ = 83;
      validate_non_negative_index("p_soa_vec_uni_idx", "N", N);
      current_statement__ = 84;
      validate_non_negative_index("p_soa_loop_mat_uni_col_idx", "N", N);
      current_statement__ = 85;
      validate_non_negative_index("p_soa_loop_mat_uni_col_idx", "M", M);
      current_statement__ = 86;
      validate_non_negative_index("p_soa_lhs_loop_mul", "N", N);
      current_statement__ = 87;
      validate_non_negative_index("p_soa_rhs_loop_mul", "N", N);
      current_statement__ = 88;
      validate_non_negative_index("p_soa_used_with_aos_in_excluded_fun", "N",
                                  N);
      current_statement__ = 89;
      validate_non_negative_index("p_soa_rep_matrix_vec", "N", N);
      current_statement__ = 90;
      validate_non_negative_index("p_aos_vec_v_assign_to_aos", "M", M);
      current_statement__ = 91;
      validate_non_negative_index("p_aos_vec_v_tp_fails_func", "M", M);
      current_statement__ = 92;
      validate_non_negative_index("p_aos_loop_vec_v_uni_idx", "M", M);
      current_statement__ = 93;
      validate_non_negative_index("p_aos_fail_assign_from_top_idx", "M", M);
      current_statement__ = 94;
      validate_non_negative_index("p_aos_loop_mat_uni_uni_idx", "N", N);
      current_statement__ = 95;
      validate_non_negative_index("p_aos_loop_mat_uni_uni_idx", "M", M);
      current_statement__ = 96;
      validate_non_negative_index("p_aos_loop_mat_multi_uni_uni_idx", "N", N);
      current_statement__ = 97;
      validate_non_negative_index("p_aos_loop_mat_multi_uni_uni_idx", "M", M);
      current_statement__ = 98;
      validate_non_negative_index("p_aos_mat", "N", N);
      current_statement__ = 99;
      validate_non_negative_index("p_aos_mat", "M", M);
      current_statement__ = 100;
      validate_non_negative_index("p_aos_mat_fail_func_uni_uni_idx1", "N", N);
      current_statement__ = 101;
      validate_non_negative_index("p_aos_mat_fail_func_uni_uni_idx1", "M", M);
      current_statement__ = 102;
      validate_non_negative_index("p_aos_mat_fail_func_uni_uni_idx2", "N", N);
      current_statement__ = 103;
      validate_non_negative_index("p_aos_mat_fail_func_uni_uni_idx2", "M", M);
      current_statement__ = 104;
      validate_non_negative_index("tp_aos_vec_v", "M", M);
      current_statement__ = 105;
      validate_non_negative_index("tp_aos_fail_func_vec_v", "M", M);
      current_statement__ = 106;
      validate_non_negative_index("tp_aos_fail_assign_from_top_idx", "M", M);
      current_statement__ = 107;
      validate_non_negative_index("tp_soa_rep_matrix_mat", "N", N);
      current_statement__ = 108;
      validate_non_negative_index("tp_soa_rep_matrix_from_data_mat", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + M + (N * M) + (10 * N) + (N * M) + N + (N * M) + 
      N + N + N + N + M + M + M + M + (N * M) + (N * M) + (N * M) + (N * M)
       + (N * M);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mem_patterns_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ alpha = DUMMY_VAR__;
      
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> p_soa_vec_v = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 2;
      p_soa_vec_v = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                      M);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>> p_soa_mat = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 3;
      p_soa_mat = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(
                    N, M);
      stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> p_soa_arr_vec_v = 
      std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(10, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 4;
      p_soa_arr_vec_v = in__.template read<stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
                          10, N);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>> p_soa_mat_uni_col_idx = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 5;
      p_soa_mat_uni_col_idx = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(
                                N, M);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> p_soa_vec_uni_idx = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 6;
      p_soa_vec_uni_idx = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                            N);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>> p_soa_loop_mat_uni_col_idx = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 7;
      p_soa_loop_mat_uni_col_idx = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(
                                     N, M);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>> p_soa_lhs_loop_mul = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>(Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 8;
      p_soa_lhs_loop_mul = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>>(
                             N);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> p_soa_rhs_loop_mul = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 9;
      p_soa_rhs_loop_mul = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                             N);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> p_soa_used_with_aos_in_excluded_fun = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 10;
      p_soa_used_with_aos_in_excluded_fun = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                                              N);
      Eigen::Matrix<local_scalar_t__, -1, 1> p_soa_rep_matrix_vec = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
                                                                    
      
      current_statement__ = 11;
      p_soa_rep_matrix_vec = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                               N);
      Eigen::Matrix<local_scalar_t__, -1, 1> p_aos_vec_v_assign_to_aos = 
      Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      
      current_statement__ = 12;
      p_aos_vec_v_assign_to_aos = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                    M);
      Eigen::Matrix<local_scalar_t__, -1, 1> p_aos_vec_v_tp_fails_func = 
      Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      
      current_statement__ = 13;
      p_aos_vec_v_tp_fails_func = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                    M);
      Eigen::Matrix<local_scalar_t__, -1, 1> p_aos_loop_vec_v_uni_idx = 
      Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      
      current_statement__ = 14;
      p_aos_loop_vec_v_uni_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                   M);
      Eigen::Matrix<local_scalar_t__, -1, 1> p_aos_fail_assign_from_top_idx = 
      Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      
      current_statement__ = 15;
      p_aos_fail_assign_from_top_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                         M);
      Eigen::Matrix<local_scalar_t__, -1, -1> p_aos_loop_mat_uni_uni_idx = 
      Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, M, DUMMY_VAR__);
      
      current_statement__ = 16;
      p_aos_loop_mat_uni_uni_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                     N, M);
      Eigen::Matrix<local_scalar_t__, -1, -1> p_aos_loop_mat_multi_uni_uni_idx = 
      Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, M, DUMMY_VAR__);
      
      current_statement__ = 17;
      p_aos_loop_mat_multi_uni_uni_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                           N, M);
      Eigen::Matrix<local_scalar_t__, -1, -1> p_aos_mat = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, M, DUMMY_VAR__);
                                                          
      
      current_statement__ = 18;
      p_aos_mat = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    N, M);
      Eigen::Matrix<local_scalar_t__, -1, -1> p_aos_mat_fail_func_uni_uni_idx1 = 
      Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, M, DUMMY_VAR__);
      
      current_statement__ = 19;
      p_aos_mat_fail_func_uni_uni_idx1 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                           N, M);
      Eigen::Matrix<local_scalar_t__, -1, -1> p_aos_mat_fail_func_uni_uni_idx2 = 
      Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, M, DUMMY_VAR__);
      
      current_statement__ = 20;
      p_aos_mat_fail_func_uni_uni_idx2 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                           N, M);
      local_scalar_t__ tp_real_from_aos = DUMMY_VAR__;
      
      current_statement__ = 21;
      tp_real_from_aos = rvalue(p_soa_vec_v, "p_soa_vec_v", index_uni(1));
      Eigen::Matrix<local_scalar_t__, -1, 1> tp_aos_vec_v = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
                                                            
      
      current_statement__ = 22;
      assign(tp_aos_vec_v, inv(p_aos_vec_v_assign_to_aos),
        "assigning variable tp_aos_vec_v");
      Eigen::Matrix<local_scalar_t__, -1, 1> tp_aos_fail_func_vec_v = 
      Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      
      current_statement__ = 23;
      assign(tp_aos_fail_func_vec_v, p_aos_vec_v_tp_fails_func,
        "assigning variable tp_aos_fail_func_vec_v");
      current_statement__ = 27;
      assign(tp_aos_fail_func_vec_v,
        rvalue(p_soa_vec_v, "p_soa_vec_v", index_uni(1)),
        "assigning variable tp_aos_fail_func_vec_v", index_uni(1));
      Eigen::Matrix<local_scalar_t__, -1, 1> tp_aos_fail_assign_from_top_idx = 
      Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> tp_soa_rep_matrix_mat = 
      Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, 10, DUMMY_VAR__);
      
      current_statement__ = 25;
      assign(tp_soa_rep_matrix_mat, rep_matrix(p_soa_rep_matrix_vec, 10),
        "assigning variable tp_soa_rep_matrix_mat");
      Eigen::Matrix<local_scalar_t__, -1, -1> tp_soa_rep_matrix_from_data_mat = 
      Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, 10, DUMMY_VAR__);
      
      current_statement__ = 26;
      assign(tp_soa_rep_matrix_from_data_mat, rep_matrix(y, 10),
        "assigning variable tp_soa_rep_matrix_from_data_mat");
      current_statement__ = 28;
      assign(tp_aos_fail_assign_from_top_idx,
        rvalue(p_aos_fail_assign_from_top_idx,
          "p_aos_fail_assign_from_top_idx", index_min(1)),
        "assigning variable tp_aos_fail_assign_from_top_idx", index_min(1));
      {
        current_statement__ = 29;
        validate_non_negative_index("tp_soa_used_with_aos_in_excluded_fun",
                                    "N", N);
        stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> tp_soa_used_with_aos_in_excluded_fun = 
        stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
        
        
        current_statement__ = 30;
        assign(tp_soa_used_with_aos_in_excluded_fun,
          multiply(p_soa_used_with_aos_in_excluded_fun, size(tp_aos_vec_v)),
          "assigning variable tp_soa_used_with_aos_in_excluded_fun");
        current_statement__ = 31;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            add(alpha,
              multiply(dat_x,
                add(p_soa_vec_v, tp_soa_used_with_aos_in_excluded_fun))),
            1.0));
        current_statement__ = 32;
        lp_accum__.add(
          normal_lpdf<propto__>(y, add(alpha, multiply(dat_x, p_soa_vec_v)),
            1.0));
        current_statement__ = 33;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            multiply(dat_x,
              rvalue(p_soa_mat_uni_col_idx, "p_soa_mat_uni_col_idx",
                index_omni(), index_uni(N))), 1.0));
        current_statement__ = 34;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            multiply(dat_x,
              rvalue(p_soa_mat_uni_col_idx, "p_soa_mat_uni_col_idx",
                index_omni(), index_uni(N))),
            rvalue(p_soa_vec_uni_idx, "p_soa_vec_uni_idx", index_uni(N))));
        current_statement__ = 35;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            multiply(dat_x, inv(tp_aos_fail_func_vec_v)),
            rvalue(p_soa_vec_uni_idx, "p_soa_vec_uni_idx", index_uni(N))));
        current_statement__ = 36;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            multiply(p_soa_mat, inv(tp_aos_fail_func_vec_v)),
            rvalue(p_soa_vec_uni_idx, "p_soa_vec_uni_idx", index_uni(N))));
        current_statement__ = 37;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            multiply(p_soa_mat, inv(tp_aos_fail_assign_from_top_idx)),
            rvalue(p_soa_vec_uni_idx, "p_soa_vec_uni_idx", index_uni(N))));
        current_statement__ = 38;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            multiply(p_soa_mat,
              inv(multiply(p_aos_mat, tp_aos_fail_func_vec_v))),
            rvalue(p_soa_vec_uni_idx, "p_soa_vec_uni_idx", index_uni(N))));
        current_statement__ = 39;
        validate_non_negative_index("tp_soa_single_assign", "N", N);
        stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> tp_soa_single_assign = 
        stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
        
        
        current_statement__ = 41;
        assign(tp_soa_single_assign, 2.0,
          "assigning variable tp_soa_single_assign", index_uni(1));
        current_statement__ = 42;
        validate_non_negative_index("tp_soa_single_assign_from_soa", "N", N);
        stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> tp_soa_single_assign_from_soa = 
        stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
        
        
        current_statement__ = 44;
        assign(tp_soa_single_assign_from_soa,
          multiply(p_soa_lhs_loop_mul, p_soa_rhs_loop_mul),
          "assigning variable tp_soa_single_assign_from_soa", index_uni(2));
        current_statement__ = 53;
        for (int i = 1; i <= 10; ++i) {
          current_statement__ = 45;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(dat_x,
                rvalue(p_soa_arr_vec_v, "p_soa_arr_vec_v", index_uni(i))),
              1.0));
          current_statement__ = 46;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(dat_x,
                rvalue(p_soa_loop_mat_uni_col_idx,
                  "p_soa_loop_mat_uni_col_idx", index_omni(), index_uni(i))),
              1.0));
          current_statement__ = 47;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(
                rvalue(p_soa_loop_mat_uni_col_idx,
                  "p_soa_loop_mat_uni_col_idx", index_uni(i), index_omni()),
                dat_x), 1.0));
          current_statement__ = 48;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(dat_x,
                transpose(
                  rvalue(p_soa_loop_mat_uni_col_idx,
                    "p_soa_loop_mat_uni_col_idx", index_uni(i), index_omni()))),
              1.0));
          current_statement__ = 49;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(dat_x,
                rvalue(p_soa_loop_mat_uni_col_idx,
                  "p_soa_loop_mat_uni_col_idx",
                  index_min_max(1, N), index_uni(1))), 1.0));
          current_statement__ = 50;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(dat_x,
                transpose(
                  rvalue(p_soa_loop_mat_uni_col_idx,
                    "p_soa_loop_mat_uni_col_idx", index_uni(i)))), 1.0));
          current_statement__ = 51;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(dat_x,
                transpose(
                  rvalue(p_aos_loop_mat_multi_uni_uni_idx,
                    "p_aos_loop_mat_multi_uni_uni_idx",
                    index_uni(rvalue(idx_tester, "idx_tester", index_uni(i))),
                      index_omni()))), 1.0));
        }
        current_statement__ = 54;
        validate_non_negative_index("tp_aos_loop_vec_v_uni_idx", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> tp_aos_loop_vec_v_uni_idx = 
        Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
        
        current_statement__ = 56;
        validate_non_negative_index("tp_aos_loop_vec_v_multi_uni_idx", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> tp_aos_loop_vec_v_multi_uni_idx = 
        Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
        
        current_statement__ = 58;
        validate_non_negative_index("tp_aos_loop_vec_v_double_brackets_multi_uni_idx",
                                    "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> tp_aos_loop_vec_v_double_brackets_multi_uni_idx = 
        Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
        
        current_statement__ = 67;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 60;
          assign(tp_aos_loop_vec_v_uni_idx,
            multiply(p_soa_lhs_loop_mul, p_soa_rhs_loop_mul),
            "assigning variable tp_aos_loop_vec_v_uni_idx", index_uni(i));
          current_statement__ = 61;
          assign(tp_aos_loop_vec_v_multi_uni_idx,
            multiply(p_soa_lhs_loop_mul, p_soa_rhs_loop_mul),
            "assigning variable tp_aos_loop_vec_v_multi_uni_idx", index_uni(
                                                                    rvalue(
                                                                    idx_tester,
                                                                    "idx_tester",
                                                                    index_uni(i))));
          current_statement__ = 62;
          assign(tp_aos_loop_vec_v_double_brackets_multi_uni_idx,
            multiply(p_soa_lhs_loop_mul, p_soa_rhs_loop_mul),
            "assigning variable tp_aos_loop_vec_v_double_brackets_multi_uni_idx", 
            index_min_max(1, N), index_uni(i));
          current_statement__ = 63;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(rvalue(dat_x, "dat_x", index_omni(), index_uni(i)),
                rvalue(p_aos_loop_vec_v_uni_idx, "p_aos_loop_vec_v_uni_idx",
                  index_uni(i))), 1.0));
          current_statement__ = 64;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(rvalue(dat_x, "dat_x", index_omni(), index_uni(i)),
                rvalue(p_aos_loop_mat_uni_uni_idx,
                  "p_aos_loop_mat_uni_uni_idx", index_uni(i), index_uni(i))),
              1.0));
          current_statement__ = 65;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(rvalue(dat_x, "dat_x", index_omni(), index_uni(i)),
                rvalue(
                  transpose(
  multiply(p_aos_mat_fail_func_uni_uni_idx1,
    p_aos_mat_fail_func_uni_uni_idx2)),
                  "transpose(multiply(p_aos_mat_fail_func_uni_uni_idx1,\np_aos_mat_fail_func_uni_uni_idx2))",
                  index_uni(mask_fun(i, pstream__)),
                    index_uni(mask_fun(i, pstream__)))), 1.0));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mem_patterns_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> p_soa_vec_v = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      current_statement__ = 2;
      p_soa_vec_v = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                      M);
      Eigen::Matrix<double, -1, -1> p_soa_mat = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                
      
      current_statement__ = 3;
      p_soa_mat = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    N, M);
      std::vector<Eigen::Matrix<double, -1, 1>> p_soa_arr_vec_v = std::vector<Eigen::Matrix<double, -1, 1>>(10, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      current_statement__ = 4;
      p_soa_arr_vec_v = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                          10, N);
      Eigen::Matrix<double, -1, -1> p_soa_mat_uni_col_idx = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                            
      
      current_statement__ = 5;
      p_soa_mat_uni_col_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                N, M);
      Eigen::Matrix<double, -1, 1> p_soa_vec_uni_idx = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                       
      
      current_statement__ = 6;
      p_soa_vec_uni_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                            N);
      Eigen::Matrix<double, -1, -1> p_soa_loop_mat_uni_col_idx = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                                 
      
      current_statement__ = 7;
      p_soa_loop_mat_uni_col_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                     N, M);
      Eigen::Matrix<double, 1, -1> p_soa_lhs_loop_mul = Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                        
      
      current_statement__ = 8;
      p_soa_lhs_loop_mul = in__.template read<Eigen::Matrix<local_scalar_t__, 1, -1>>(
                             N);
      Eigen::Matrix<double, -1, 1> p_soa_rhs_loop_mul = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                        
      
      current_statement__ = 9;
      p_soa_rhs_loop_mul = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                             N);
      Eigen::Matrix<double, -1, 1> p_soa_used_with_aos_in_excluded_fun = 
      Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 10;
      p_soa_used_with_aos_in_excluded_fun = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                              N);
      Eigen::Matrix<double, -1, 1> p_soa_rep_matrix_vec = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                          
      
      current_statement__ = 11;
      p_soa_rep_matrix_vec = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                               N);
      Eigen::Matrix<double, -1, 1> p_aos_vec_v_assign_to_aos = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                               
      
      current_statement__ = 12;
      p_aos_vec_v_assign_to_aos = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                    M);
      Eigen::Matrix<double, -1, 1> p_aos_vec_v_tp_fails_func = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                               
      
      current_statement__ = 13;
      p_aos_vec_v_tp_fails_func = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                    M);
      Eigen::Matrix<double, -1, 1> p_aos_loop_vec_v_uni_idx = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                              
      
      current_statement__ = 14;
      p_aos_loop_vec_v_uni_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                   M);
      Eigen::Matrix<double, -1, 1> p_aos_fail_assign_from_top_idx = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                                    
      
      current_statement__ = 15;
      p_aos_fail_assign_from_top_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                         M);
      Eigen::Matrix<double, -1, -1> p_aos_loop_mat_uni_uni_idx = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                                 
      
      current_statement__ = 16;
      p_aos_loop_mat_uni_uni_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                     N, M);
      Eigen::Matrix<double, -1, -1> p_aos_loop_mat_multi_uni_uni_idx = 
      Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 17;
      p_aos_loop_mat_multi_uni_uni_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                           N, M);
      Eigen::Matrix<double, -1, -1> p_aos_mat = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                
      
      current_statement__ = 18;
      p_aos_mat = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    N, M);
      Eigen::Matrix<double, -1, -1> p_aos_mat_fail_func_uni_uni_idx1 = 
      Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 19;
      p_aos_mat_fail_func_uni_uni_idx1 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                           N, M);
      Eigen::Matrix<double, -1, -1> p_aos_mat_fail_func_uni_uni_idx2 = 
      Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 20;
      p_aos_mat_fail_func_uni_uni_idx2 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                           N, M);
      double tp_real_from_aos = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> tp_aos_vec_v = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                  
      
      Eigen::Matrix<double, -1, 1> tp_aos_fail_func_vec_v = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                            
      
      Eigen::Matrix<double, -1, 1> tp_aos_fail_assign_from_top_idx = 
      Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, -1> tp_soa_rep_matrix_mat = Eigen::Matrix<double, -1, -1>::Constant(N, 10, std::numeric_limits<double>::quiet_NaN());
                                                            
      
      Eigen::Matrix<double, -1, -1> tp_soa_rep_matrix_from_data_mat = 
      Eigen::Matrix<double, -1, -1>::Constant(N, 10, std::numeric_limits<double>::quiet_NaN());
      
      
      vars__.emplace_back(alpha);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_soa_vec_v[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_soa_mat, "p_soa_mat",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
          vars__.emplace_back(p_soa_arr_vec_v[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_soa_mat_uni_col_idx, "p_soa_mat_uni_col_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_vec_uni_idx[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_soa_loop_mat_uni_col_idx, "p_soa_loop_mat_uni_col_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_lhs_loop_mul[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_rhs_loop_mul[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(
          p_soa_used_with_aos_in_excluded_fun[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_rep_matrix_vec[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_vec_v_assign_to_aos[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_vec_v_tp_fails_func[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_loop_vec_v_uni_idx[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_fail_assign_from_top_idx[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_loop_mat_uni_uni_idx, "p_aos_loop_mat_uni_uni_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_loop_mat_multi_uni_uni_idx,
              "p_aos_loop_mat_multi_uni_uni_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_mat, "p_aos_mat",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_mat_fail_func_uni_uni_idx1,
              "p_aos_mat_fail_func_uni_uni_idx1",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_mat_fail_func_uni_uni_idx2,
              "p_aos_mat_fail_func_uni_uni_idx2",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 21;
      tp_real_from_aos = rvalue(p_soa_vec_v, "p_soa_vec_v", index_uni(1));
      current_statement__ = 22;
      assign(tp_aos_vec_v, inv(p_aos_vec_v_assign_to_aos),
        "assigning variable tp_aos_vec_v");
      current_statement__ = 23;
      assign(tp_aos_fail_func_vec_v, p_aos_vec_v_tp_fails_func,
        "assigning variable tp_aos_fail_func_vec_v");
      current_statement__ = 27;
      assign(tp_aos_fail_func_vec_v,
        rvalue(p_soa_vec_v, "p_soa_vec_v", index_uni(1)),
        "assigning variable tp_aos_fail_func_vec_v", index_uni(1));
      current_statement__ = 25;
      assign(tp_soa_rep_matrix_mat, rep_matrix(p_soa_rep_matrix_vec, 10),
        "assigning variable tp_soa_rep_matrix_mat");
      current_statement__ = 26;
      assign(tp_soa_rep_matrix_from_data_mat, rep_matrix(y, 10),
        "assigning variable tp_soa_rep_matrix_from_data_mat");
      current_statement__ = 28;
      assign(tp_aos_fail_assign_from_top_idx,
        rvalue(p_aos_fail_assign_from_top_idx,
          "p_aos_fail_assign_from_top_idx", index_min(1)),
        "assigning variable tp_aos_fail_assign_from_top_idx", index_min(1));
      if (emit_transformed_parameters__) {
        vars__.emplace_back(tp_real_from_aos);
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          vars__.emplace_back(tp_aos_vec_v[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          vars__.emplace_back(tp_aos_fail_func_vec_v[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          vars__.emplace_back(tp_aos_fail_assign_from_top_idx[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(tp_soa_rep_matrix_mat, "tp_soa_rep_matrix_mat",
                index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(tp_soa_rep_matrix_from_data_mat,
                "tp_soa_rep_matrix_from_data_mat",
                index_uni(sym2__), index_uni(sym1__)));
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> p_soa_vec_v = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      {
        std::vector<local_scalar_t__> p_soa_vec_v_flat__;
        current_statement__ = 2;
        p_soa_vec_v_flat__ = context__.vals_r("p_soa_vec_v");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 2;
          assign(p_soa_vec_v, p_soa_vec_v_flat__[(pos__ - 1)],
            "assigning variable p_soa_vec_v", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, -1> p_soa_mat = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                
      
      {
        std::vector<local_scalar_t__> p_soa_mat_flat__;
        current_statement__ = 3;
        p_soa_mat_flat__ = context__.vals_r("p_soa_mat");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 3;
            assign(p_soa_mat, p_soa_mat_flat__[(pos__ - 1)],
              "assigning variable p_soa_mat", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 3;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<Eigen::Matrix<double, -1, 1>> p_soa_arr_vec_v = std::vector<Eigen::Matrix<double, -1, 1>>(10, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      {
        std::vector<local_scalar_t__> p_soa_arr_vec_v_flat__;
        current_statement__ = 4;
        p_soa_arr_vec_v_flat__ = context__.vals_r("p_soa_arr_vec_v");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
            current_statement__ = 4;
            assign(p_soa_arr_vec_v, p_soa_arr_vec_v_flat__[(pos__ - 1)],
              "assigning variable p_soa_arr_vec_v", index_uni(sym2__),
                                                      index_uni(sym1__));
            current_statement__ = 4;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> p_soa_mat_uni_col_idx = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                            
      
      {
        std::vector<local_scalar_t__> p_soa_mat_uni_col_idx_flat__;
        current_statement__ = 5;
        p_soa_mat_uni_col_idx_flat__ = context__.vals_r("p_soa_mat_uni_col_idx");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 5;
            assign(p_soa_mat_uni_col_idx,
              p_soa_mat_uni_col_idx_flat__[(pos__ - 1)],
              "assigning variable p_soa_mat_uni_col_idx", index_uni(sym2__),
                                                            index_uni(sym1__));
            current_statement__ = 5;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, 1> p_soa_vec_uni_idx = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                       
      
      {
        std::vector<local_scalar_t__> p_soa_vec_uni_idx_flat__;
        current_statement__ = 6;
        p_soa_vec_uni_idx_flat__ = context__.vals_r("p_soa_vec_uni_idx");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 6;
          assign(p_soa_vec_uni_idx, p_soa_vec_uni_idx_flat__[(pos__ - 1)],
            "assigning variable p_soa_vec_uni_idx", index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, -1> p_soa_loop_mat_uni_col_idx = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                                 
      
      {
        std::vector<local_scalar_t__> p_soa_loop_mat_uni_col_idx_flat__;
        current_statement__ = 7;
        p_soa_loop_mat_uni_col_idx_flat__ = context__.vals_r("p_soa_loop_mat_uni_col_idx");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 7;
            assign(p_soa_loop_mat_uni_col_idx,
              p_soa_loop_mat_uni_col_idx_flat__[(pos__ - 1)],
              "assigning variable p_soa_loop_mat_uni_col_idx", index_uni(sym2__),
                                                                 index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, 1, -1> p_soa_lhs_loop_mul = Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                        
      
      {
        std::vector<local_scalar_t__> p_soa_lhs_loop_mul_flat__;
        current_statement__ = 8;
        p_soa_lhs_loop_mul_flat__ = context__.vals_r("p_soa_lhs_loop_mul");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 8;
          assign(p_soa_lhs_loop_mul, p_soa_lhs_loop_mul_flat__[(pos__ - 1)],
            "assigning variable p_soa_lhs_loop_mul", index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_soa_rhs_loop_mul = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                        
      
      {
        std::vector<local_scalar_t__> p_soa_rhs_loop_mul_flat__;
        current_statement__ = 9;
        p_soa_rhs_loop_mul_flat__ = context__.vals_r("p_soa_rhs_loop_mul");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 9;
          assign(p_soa_rhs_loop_mul, p_soa_rhs_loop_mul_flat__[(pos__ - 1)],
            "assigning variable p_soa_rhs_loop_mul", index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_soa_used_with_aos_in_excluded_fun = 
      Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
      
      
      {
        std::vector<local_scalar_t__> p_soa_used_with_aos_in_excluded_fun_flat__;
        current_statement__ = 10;
        p_soa_used_with_aos_in_excluded_fun_flat__ = context__.vals_r("p_soa_used_with_aos_in_excluded_fun");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 10;
          assign(p_soa_used_with_aos_in_excluded_fun,
            p_soa_used_with_aos_in_excluded_fun_flat__[(pos__ - 1)],
            "assigning variable p_soa_used_with_aos_in_excluded_fun", 
            index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_soa_rep_matrix_vec = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                          
      
      {
        std::vector<local_scalar_t__> p_soa_rep_matrix_vec_flat__;
        current_statement__ = 11;
        p_soa_rep_matrix_vec_flat__ = context__.vals_r("p_soa_rep_matrix_vec");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 11;
          assign(p_soa_rep_matrix_vec,
            p_soa_rep_matrix_vec_flat__[(pos__ - 1)],
            "assigning variable p_soa_rep_matrix_vec", index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_aos_vec_v_assign_to_aos = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                               
      
      {
        std::vector<local_scalar_t__> p_aos_vec_v_assign_to_aos_flat__;
        current_statement__ = 12;
        p_aos_vec_v_assign_to_aos_flat__ = context__.vals_r("p_aos_vec_v_assign_to_aos");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 12;
          assign(p_aos_vec_v_assign_to_aos,
            p_aos_vec_v_assign_to_aos_flat__[(pos__ - 1)],
            "assigning variable p_aos_vec_v_assign_to_aos", index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_aos_vec_v_tp_fails_func = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                               
      
      {
        std::vector<local_scalar_t__> p_aos_vec_v_tp_fails_func_flat__;
        current_statement__ = 13;
        p_aos_vec_v_tp_fails_func_flat__ = context__.vals_r("p_aos_vec_v_tp_fails_func");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 13;
          assign(p_aos_vec_v_tp_fails_func,
            p_aos_vec_v_tp_fails_func_flat__[(pos__ - 1)],
            "assigning variable p_aos_vec_v_tp_fails_func", index_uni(sym1__));
          current_statement__ = 13;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_aos_loop_vec_v_uni_idx = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                              
      
      {
        std::vector<local_scalar_t__> p_aos_loop_vec_v_uni_idx_flat__;
        current_statement__ = 14;
        p_aos_loop_vec_v_uni_idx_flat__ = context__.vals_r("p_aos_loop_vec_v_uni_idx");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 14;
          assign(p_aos_loop_vec_v_uni_idx,
            p_aos_loop_vec_v_uni_idx_flat__[(pos__ - 1)],
            "assigning variable p_aos_loop_vec_v_uni_idx", index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_aos_fail_assign_from_top_idx = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                                    
      
      {
        std::vector<local_scalar_t__> p_aos_fail_assign_from_top_idx_flat__;
        current_statement__ = 15;
        p_aos_fail_assign_from_top_idx_flat__ = context__.vals_r("p_aos_fail_assign_from_top_idx");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 15;
          assign(p_aos_fail_assign_from_top_idx,
            p_aos_fail_assign_from_top_idx_flat__[(pos__ - 1)],
            "assigning variable p_aos_fail_assign_from_top_idx", index_uni(sym1__));
          current_statement__ = 15;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, -1> p_aos_loop_mat_uni_uni_idx = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                                 
      
      {
        std::vector<local_scalar_t__> p_aos_loop_mat_uni_uni_idx_flat__;
        current_statement__ = 16;
        p_aos_loop_mat_uni_uni_idx_flat__ = context__.vals_r("p_aos_loop_mat_uni_uni_idx");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 16;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 16;
            assign(p_aos_loop_mat_uni_uni_idx,
              p_aos_loop_mat_uni_uni_idx_flat__[(pos__ - 1)],
              "assigning variable p_aos_loop_mat_uni_uni_idx", index_uni(sym2__),
                                                                 index_uni(sym1__));
            current_statement__ = 16;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> p_aos_loop_mat_multi_uni_uni_idx = 
      Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      
      
      {
        std::vector<local_scalar_t__> p_aos_loop_mat_multi_uni_uni_idx_flat__;
        current_statement__ = 17;
        p_aos_loop_mat_multi_uni_uni_idx_flat__ = context__.vals_r("p_aos_loop_mat_multi_uni_uni_idx");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 17;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 17;
            assign(p_aos_loop_mat_multi_uni_uni_idx,
              p_aos_loop_mat_multi_uni_uni_idx_flat__[(pos__ - 1)],
              "assigning variable p_aos_loop_mat_multi_uni_uni_idx", 
              index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 17;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> p_aos_mat = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                
      
      {
        std::vector<local_scalar_t__> p_aos_mat_flat__;
        current_statement__ = 18;
        p_aos_mat_flat__ = context__.vals_r("p_aos_mat");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 18;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 18;
            assign(p_aos_mat, p_aos_mat_flat__[(pos__ - 1)],
              "assigning variable p_aos_mat", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 18;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> p_aos_mat_fail_func_uni_uni_idx1 = 
      Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      
      
      {
        std::vector<local_scalar_t__> p_aos_mat_fail_func_uni_uni_idx1_flat__;
        current_statement__ = 19;
        p_aos_mat_fail_func_uni_uni_idx1_flat__ = context__.vals_r("p_aos_mat_fail_func_uni_uni_idx1");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 19;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 19;
            assign(p_aos_mat_fail_func_uni_uni_idx1,
              p_aos_mat_fail_func_uni_uni_idx1_flat__[(pos__ - 1)],
              "assigning variable p_aos_mat_fail_func_uni_uni_idx1", 
              index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 19;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> p_aos_mat_fail_func_uni_uni_idx2 = 
      Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      
      
      {
        std::vector<local_scalar_t__> p_aos_mat_fail_func_uni_uni_idx2_flat__;
        current_statement__ = 20;
        p_aos_mat_fail_func_uni_uni_idx2_flat__ = context__.vals_r("p_aos_mat_fail_func_uni_uni_idx2");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 20;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 20;
            assign(p_aos_mat_fail_func_uni_uni_idx2,
              p_aos_mat_fail_func_uni_uni_idx2_flat__[(pos__ - 1)],
              "assigning variable p_aos_mat_fail_func_uni_uni_idx2", 
              index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 20;
            pos__ = (pos__ + 1);
          }
        }
      }
      vars__.emplace_back(alpha);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_soa_vec_v[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_soa_mat, "p_soa_mat",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(p_soa_arr_vec_v[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_soa_mat_uni_col_idx, "p_soa_mat_uni_col_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_vec_uni_idx[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_soa_loop_mat_uni_col_idx, "p_soa_loop_mat_uni_col_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_lhs_loop_mul[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_rhs_loop_mul[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(
          p_soa_used_with_aos_in_excluded_fun[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_rep_matrix_vec[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_vec_v_assign_to_aos[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_vec_v_tp_fails_func[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_loop_vec_v_uni_idx[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_fail_assign_from_top_idx[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_loop_mat_uni_uni_idx, "p_aos_loop_mat_uni_uni_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_loop_mat_multi_uni_uni_idx,
              "p_aos_loop_mat_multi_uni_uni_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_mat, "p_aos_mat",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_mat_fail_func_uni_uni_idx1,
              "p_aos_mat_fail_func_uni_uni_idx1",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_mat_fail_func_uni_uni_idx2,
              "p_aos_mat_fail_func_uni_uni_idx2",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha", "p_soa_vec_v", "p_soa_mat",
      "p_soa_arr_vec_v", "p_soa_mat_uni_col_idx", "p_soa_vec_uni_idx",
      "p_soa_loop_mat_uni_col_idx", "p_soa_lhs_loop_mul",
      "p_soa_rhs_loop_mul", "p_soa_used_with_aos_in_excluded_fun",
      "p_soa_rep_matrix_vec", "p_aos_vec_v_assign_to_aos",
      "p_aos_vec_v_tp_fails_func", "p_aos_loop_vec_v_uni_idx",
      "p_aos_fail_assign_from_top_idx", "p_aos_loop_mat_uni_uni_idx",
      "p_aos_loop_mat_multi_uni_uni_idx", "p_aos_mat",
      "p_aos_mat_fail_func_uni_uni_idx1", "p_aos_mat_fail_func_uni_uni_idx2",
      "tp_real_from_aos", "tp_aos_vec_v", "tp_aos_fail_func_vec_v",
      "tp_aos_fail_assign_from_top_idx", "tp_soa_rep_matrix_mat",
      "tp_soa_rep_matrix_from_data_mat"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(10), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(10)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(10)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_vec_v" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_arr_vec_v" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_mat_uni_col_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_vec_uni_idx" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_loop_mat_uni_col_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_lhs_loop_mul" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_rhs_loop_mul" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_used_with_aos_in_excluded_fun" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_rep_matrix_vec" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_vec_v_assign_to_aos" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_vec_v_tp_fails_func" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_loop_vec_v_uni_idx" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_fail_assign_from_top_idx" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_loop_mat_uni_uni_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_loop_mat_multi_uni_uni_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_mat_fail_func_uni_uni_idx1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_mat_fail_func_uni_uni_idx2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "tp_real_from_aos");
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_aos_vec_v" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_aos_fail_func_vec_v" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_aos_fail_assign_from_top_idx" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_soa_rep_matrix_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_soa_rep_matrix_from_data_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_vec_v" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_arr_vec_v" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_mat_uni_col_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_vec_uni_idx" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_loop_mat_uni_col_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_lhs_loop_mul" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_rhs_loop_mul" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_used_with_aos_in_excluded_fun" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_rep_matrix_vec" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_vec_v_assign_to_aos" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_vec_v_tp_fails_func" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_loop_vec_v_uni_idx" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_fail_assign_from_top_idx" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_loop_mat_uni_uni_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_loop_mat_multi_uni_uni_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_mat_fail_func_uni_uni_idx1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_mat_fail_func_uni_uni_idx2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "tp_real_from_aos");
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_aos_vec_v" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_aos_fail_func_vec_v" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_aos_fail_assign_from_top_idx" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_soa_rep_matrix_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_soa_rep_matrix_from_data_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_soa_vec_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_arr_vec_v\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(10) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"p_soa_mat_uni_col_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_vec_uni_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_loop_mat_uni_col_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_lhs_loop_mul\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_rhs_loop_mul\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_used_with_aos_in_excluded_fun\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_rep_matrix_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_vec_v_assign_to_aos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_vec_v_tp_fails_func\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_loop_vec_v_uni_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_fail_assign_from_top_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_loop_mat_uni_uni_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_loop_mat_multi_uni_uni_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_mat_fail_func_uni_uni_idx1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_mat_fail_func_uni_uni_idx2\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"tp_real_from_aos\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_aos_vec_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_aos_fail_func_vec_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_aos_fail_assign_from_top_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_soa_rep_matrix_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(10) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_soa_rep_matrix_from_data_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(10) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_soa_vec_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_arr_vec_v\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(10) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"p_soa_mat_uni_col_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_vec_uni_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_loop_mat_uni_col_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_lhs_loop_mul\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_rhs_loop_mul\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_used_with_aos_in_excluded_fun\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_rep_matrix_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_vec_v_assign_to_aos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_vec_v_tp_fails_func\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_loop_vec_v_uni_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_fail_assign_from_top_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_loop_mat_uni_uni_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_loop_mat_multi_uni_uni_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_mat_fail_func_uni_uni_idx1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_mat_fail_func_uni_uni_idx2\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"tp_real_from_aos\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_aos_vec_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_aos_fail_func_vec_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_aos_fail_assign_from_top_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_soa_rep_matrix_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(10) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_soa_rep_matrix_from_data_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(10) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = mem_patterns_model_namespace::mem_patterns_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return mem_patterns_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp mixed_type_arrays.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace mixed_type_arrays_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 6> locations_array__ = 
{" (found before start of program)",
 " (in 'mixed_type_arrays.stan', line 5, column 2 to column 13)",
 " (in 'mixed_type_arrays.stan', line 8, column 2 to column 26)",
 " (in 'mixed_type_arrays.stan', line 9, column 2 to column 34)",
 " (in 'mixed_type_arrays.stan', line 10, column 2 to line 13, column 25)",
 " (in 'mixed_type_arrays.stan', line 2, column 2 to column 12)"};



class mixed_type_arrays_model final : public model_base_crtp<mixed_type_arrays_model> {

 private:
  std::vector<double> x; 
  
 
 public:
  ~mixed_type_arrays_model() { }
  
  inline std::string model_name() const final { return "mixed_type_arrays_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  mixed_type_arrays_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "mixed_type_arrays_model_namespace::mixed_type_arrays_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 5;
      x = std::vector<double>(3, std::numeric_limits<double>::quiet_NaN());
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 3;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mixed_type_arrays_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> xx = std::vector<local_scalar_t__>(3, DUMMY_VAR__);
                                         
      
      current_statement__ = 1;
      xx = in__.template read<std::vector<local_scalar_t__>>(3);
      std::vector<std::vector<local_scalar_t__>> y = std::vector<std::vector<local_scalar_t__>>(3, std::vector<local_scalar_t__>(3, DUMMY_VAR__));
                                                     
      
      current_statement__ = 2;
      assign(y, std::vector<std::vector<local_scalar_t__>>{
        stan::math::promote_scalar<local_scalar_t__>(x), xx, xx},
        "assigning variable y");
      std::vector<std::vector<local_scalar_t__>> w = std::vector<std::vector<local_scalar_t__>>(3, std::vector<local_scalar_t__>(3, DUMMY_VAR__));
                                                     
      
      current_statement__ = 3;
      assign(w, std::vector<std::vector<local_scalar_t__>>{
        std::vector<local_scalar_t__>{
        stan::math::promote_scalar<local_scalar_t__>(1.0),
        stan::math::promote_scalar<local_scalar_t__>(2),
        stan::math::promote_scalar<local_scalar_t__>(3)}, xx, xx},
        "assigning variable w");
      std::vector<std::vector<local_scalar_t__>> td_arr33 = std::vector<std::vector<local_scalar_t__>>(3, std::vector<local_scalar_t__>(3, DUMMY_VAR__));
                                                            
      
      current_statement__ = 4;
      assign(td_arr33, std::vector<std::vector<double>>{std::vector<double>{
        stan::math::promote_scalar<double>(1),
        stan::math::promote_scalar<double>(2),
        stan::math::promote_scalar<double>(3)}, std::vector<double>{
        stan::math::promote_scalar<double>(1), 2.,
        stan::math::promote_scalar<double>(3)}, std::vector<double>{1., 2.,
        stan::math::promote_scalar<double>(3)}},
        "assigning variable td_arr33");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mixed_type_arrays_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> xx = std::vector<double>(3, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 1;
      xx = in__.template read<std::vector<local_scalar_t__>>(3);
      std::vector<std::vector<double>> y = std::vector<std::vector<double>>(3, std::vector<double>(3, std::numeric_limits<double>::quiet_NaN()));
                                           
      
      std::vector<std::vector<double>> w = std::vector<std::vector<double>>(3, std::vector<double>(3, std::numeric_limits<double>::quiet_NaN()));
                                           
      
      std::vector<std::vector<double>> td_arr33 = std::vector<std::vector<double>>(3, std::vector<double>(3, std::numeric_limits<double>::quiet_NaN()));
                                                  
      
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(xx[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 2;
      assign(y, std::vector<std::vector<local_scalar_t__>>{
        stan::math::promote_scalar<local_scalar_t__>(x), xx, xx},
        "assigning variable y");
      current_statement__ = 3;
      assign(w, std::vector<std::vector<local_scalar_t__>>{
        std::vector<local_scalar_t__>{
        stan::math::promote_scalar<local_scalar_t__>(1.0),
        stan::math::promote_scalar<local_scalar_t__>(2),
        stan::math::promote_scalar<local_scalar_t__>(3)}, xx, xx},
        "assigning variable w");
      current_statement__ = 4;
      assign(td_arr33, std::vector<std::vector<double>>{std::vector<double>{
        stan::math::promote_scalar<double>(1),
        stan::math::promote_scalar<double>(2),
        stan::math::promote_scalar<double>(3)}, std::vector<double>{
        stan::math::promote_scalar<double>(1), 2.,
        stan::math::promote_scalar<double>(3)}, std::vector<double>{1., 2.,
        stan::math::promote_scalar<double>(3)}},
        "assigning variable td_arr33");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            vars__.emplace_back(y[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            vars__.emplace_back(w[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            vars__.emplace_back(td_arr33[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> xx = std::vector<double>(3, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 1;
      xx = context__.vals_r("xx");
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(xx[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"xx", "y", "w", "td_arr33"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(3)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "xx" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "w" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "td_arr33" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "xx" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "w" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "td_arr33" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"xx\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"td_arr33\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"xx\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"td_arr33\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = mixed_type_arrays_model_namespace::mixed_type_arrays_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return mixed_type_arrays_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp mother.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace mother_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 787> locations_array__ = 
{" (found before start of program)",
 " (in 'mother.stan', line 555, column 2 to column 14)",
 " (in 'mother.stan', line 556, column 2 to column 29)",
 " (in 'mother.stan', line 557, column 2 to column 30)",
 " (in 'mother.stan', line 558, column 2 to column 52)",
 " (in 'mother.stan', line 559, column 2 to column 45)",
 " (in 'mother.stan', line 560, column 2 to column 41)",
 " (in 'mother.stan', line 561, column 2 to column 32)",
 " (in 'mother.stan', line 562, column 2 to column 36)",
 " (in 'mother.stan', line 563, column 2 to column 27)",
 " (in 'mother.stan', line 564, column 2 to column 24)",
 " (in 'mother.stan', line 565, column 2 to column 28)",
 " (in 'mother.stan', line 566, column 2 to column 26)",
 " (in 'mother.stan', line 567, column 2 to column 32)",
 " (in 'mother.stan', line 568, column 2 to column 36)",
 " (in 'mother.stan', line 569, column 2 to column 21)",
 " (in 'mother.stan', line 570, column 2 to column 45)",
 " (in 'mother.stan', line 571, column 2 to column 23)",
 " (in 'mother.stan', line 572, column 2 to column 29)",
 " (in 'mother.stan', line 573, column 2 to column 33)",
 " (in 'mother.stan', line 574, column 2 to column 38)",
 " (in 'mother.stan', line 575, column 2 to column 36)",
 " (in 'mother.stan', line 576, column 2 to column 42)",
 " (in 'mother.stan', line 577, column 2 to column 16)",
 " (in 'mother.stan', line 578, column 2 to column 16)",
 " (in 'mother.stan', line 581, column 2 to column 33)",
 " (in 'mother.stan', line 582, column 2 to column 37)",
 " (in 'mother.stan', line 583, column 2 to column 28)",
 " (in 'mother.stan', line 584, column 2 to column 25)",
 " (in 'mother.stan', line 585, column 2 to column 29)",
 " (in 'mother.stan', line 586, column 2 to column 27)",
 " (in 'mother.stan', line 587, column 2 to column 33)",
 " (in 'mother.stan', line 588, column 2 to column 37)",
 " (in 'mother.stan', line 589, column 2 to column 22)",
 " (in 'mother.stan', line 590, column 2 to column 46)",
 " (in 'mother.stan', line 591, column 2 to column 24)",
 " (in 'mother.stan', line 592, column 2 to column 30)",
 " (in 'mother.stan', line 593, column 2 to column 34)",
 " (in 'mother.stan', line 594, column 2 to column 39)",
 " (in 'mother.stan', line 595, column 2 to column 37)",
 " (in 'mother.stan', line 596, column 2 to column 43)",
 " (in 'mother.stan', line 597, column 2 to column 20)",
 " (in 'mother.stan', line 598, column 2 to column 15)",
 " (in 'mother.stan', line 600, column 2 to column 31)",
 " (in 'mother.stan', line 601, column 2 to column 31)",
 " (in 'mother.stan', line 602, column 2 to column 23)",
 " (in 'mother.stan', line 603, column 2 to column 23)",
 " (in 'mother.stan', line 605, column 2 to column 25)",
 " (in 'mother.stan', line 606, column 2 to column 31)",
 " (in 'mother.stan', line 607, column 2 to column 31)",
 " (in 'mother.stan', line 609, column 2 to column 27)",
 " (in 'mother.stan', line 610, column 2 to column 27)",
 " (in 'mother.stan', line 611, column 2 to column 33)",
 " (in 'mother.stan', line 613, column 2 to column 41)",
 " (in 'mother.stan', line 614, column 2 to column 36)",
 " (in 'mother.stan', line 620, column 10 to column 38)",
 " (in 'mother.stan', line 619, column 23 to line 620, column 39)",
 " (in 'mother.stan', line 619, column 8 to line 620, column 39)",
 " (in 'mother.stan', line 618, column 21 to line 620, column 40)",
 " (in 'mother.stan', line 618, column 6 to line 620, column 40)",
 " (in 'mother.stan', line 617, column 19 to line 620, column 41)",
 " (in 'mother.stan', line 617, column 4 to line 620, column 41)",
 " (in 'mother.stan', line 616, column 17 to line 620, column 42)",
 " (in 'mother.stan', line 616, column 2 to line 620, column 42)",
 " (in 'mother.stan', line 622, column 17 to column 45)",
 " (in 'mother.stan', line 622, column 2 to column 45)",
 " (in 'mother.stan', line 623, column 2 to column 29)",
 " (in 'mother.stan', line 624, column 2 to column 31)",
 " (in 'mother.stan', line 625, column 2 to column 31)",
 " (in 'mother.stan', line 627, column 2 to column 63)",
 " (in 'mother.stan', line 628, column 2 to column 79)",
 " (in 'mother.stan', line 629, column 2 to column 81)",
 " (in 'mother.stan', line 630, column 2 to column 65)",
 " (in 'mother.stan', line 631, column 2 to column 81)",
 " (in 'mother.stan', line 632, column 2 to column 67)",
 " (in 'mother.stan', line 633, column 2 to column 83)",
 " (in 'mother.stan', line 635, column 2 to column 29)",
 " (in 'mother.stan', line 636, column 2 to column 29)",
 " (in 'mother.stan', line 680, column 2 to column 32)",
 " (in 'mother.stan', line 681, column 2 to column 27)",
 " (in 'mother.stan', line 682, column 2 to column 35)",
 " (in 'mother.stan', line 683, column 2 to column 39)",
 " (in 'mother.stan', line 684, column 2 to column 28)",
 " (in 'mother.stan', line 685, column 2 to column 25)",
 " (in 'mother.stan', line 686, column 2 to column 29)",
 " (in 'mother.stan', line 687, column 2 to column 27)",
 " (in 'mother.stan', line 688, column 2 to column 33)",
 " (in 'mother.stan', line 689, column 2 to column 37)",
 " (in 'mother.stan', line 690, column 2 to column 46)",
 " (in 'mother.stan', line 691, column 2 to column 24)",
 " (in 'mother.stan', line 692, column 2 to column 30)",
 " (in 'mother.stan', line 693, column 2 to column 34)",
 " (in 'mother.stan', line 694, column 2 to column 39)",
 " (in 'mother.stan', line 695, column 2 to column 37)",
 " (in 'mother.stan', line 696, column 2 to column 43)",
 " (in 'mother.stan', line 697, column 2 to column 29)",
 " (in 'mother.stan', line 698, column 2 to column 31)",
 " (in 'mother.stan', line 699, column 2 to column 27)",
 " (in 'mother.stan', line 700, column 2 to column 27)",
 " (in 'mother.stan', line 701, column 2 to column 27)",
 " (in 'mother.stan', line 702, column 2 to column 28)",
 " (in 'mother.stan', line 703, column 2 to column 28)",
 " (in 'mother.stan', line 704, column 2 to column 28)",
 " (in 'mother.stan', line 705, column 2 to column 28)",
 " (in 'mother.stan', line 706, column 2 to column 24)",
 " (in 'mother.stan', line 708, column 2 to column 35)",
 " (in 'mother.stan', line 709, column 2 to column 31)",
 " (in 'mother.stan', line 710, column 2 to column 23)",
 " (in 'mother.stan', line 711, column 2 to column 23)",
 " (in 'mother.stan', line 712, column 2 to column 25)",
 " (in 'mother.stan', line 713, column 2 to column 31)",
 " (in 'mother.stan', line 714, column 2 to column 31)",
 " (in 'mother.stan', line 716, column 2 to column 35)",
 " (in 'mother.stan', line 717, column 2 to column 31)",
 " (in 'mother.stan', line 718, column 2 to column 31)",
 " (in 'mother.stan', line 720, column 2 to column 27)",
 " (in 'mother.stan', line 721, column 2 to column 27)",
 " (in 'mother.stan', line 722, column 2 to column 33)",
 " (in 'mother.stan', line 728, column 10 to column 38)",
 " (in 'mother.stan', line 727, column 23 to line 728, column 39)",
 " (in 'mother.stan', line 727, column 8 to line 728, column 39)",
 " (in 'mother.stan', line 726, column 21 to line 728, column 40)",
 " (in 'mother.stan', line 726, column 6 to line 728, column 40)",
 " (in 'mother.stan', line 725, column 19 to line 728, column 41)",
 " (in 'mother.stan', line 725, column 4 to line 728, column 41)",
 " (in 'mother.stan', line 724, column 17 to line 728, column 42)",
 " (in 'mother.stan', line 724, column 2 to line 728, column 42)",
 " (in 'mother.stan', line 730, column 17 to column 45)",
 " (in 'mother.stan', line 730, column 2 to column 45)",
 " (in 'mother.stan', line 736, column 8 to column 49)",
 " (in 'mother.stan', line 735, column 6 to line 736, column 49)",
 " (in 'mother.stan', line 734, column 4 to line 736, column 49)",
 " (in 'mother.stan', line 733, column 2 to line 736, column 49)",
 " (in 'mother.stan', line 741, column 6 to column 60)",
 " (in 'mother.stan', line 740, column 4 to line 741, column 60)",
 " (in 'mother.stan', line 739, column 2 to line 741, column 60)",
 " (in 'mother.stan', line 743, column 2 to column 45)",
 " (in 'mother.stan', line 744, column 64 to column 97)",
 " (in 'mother.stan', line 744, column 2 to column 97)",
 " (in 'mother.stan', line 749, column 6 to column 51)",
 " (in 'mother.stan', line 748, column 4 to line 749, column 51)",
 " (in 'mother.stan', line 747, column 2 to line 749, column 51)",
 " (in 'mother.stan', line 750, column 2 to column 39)",
 " (in 'mother.stan', line 752, column 58 to column 91)",
 " (in 'mother.stan', line 752, column 2 to column 91)",
 " (in 'mother.stan', line 758, column 8 to column 68)",
 " (in 'mother.stan', line 757, column 6 to line 758, column 68)",
 " (in 'mother.stan', line 756, column 4 to line 758, column 68)",
 " (in 'mother.stan', line 755, column 2 to line 758, column 68)",
 " (in 'mother.stan', line 759, column 2 to column 48)",
 " (in 'mother.stan', line 760, column 67 to column 100)",
 " (in 'mother.stan', line 760, column 2 to column 100)",
 " (in 'mother.stan', line 762, column 2 to column 36)",
 " (in 'mother.stan', line 763, column 2 to column 38)",
 " (in 'mother.stan', line 639, column 2 to column 16)",
 " (in 'mother.stan', line 640, column 2 to column 20)",
 " (in 'mother.stan', line 641, column 2 to column 29)",
 " (in 'mother.stan', line 642, column 2 to column 24)",
 " (in 'mother.stan', line 643, column 2 to column 23)",
 " (in 'mother.stan', line 644, column 2 to column 35)",
 " (in 'mother.stan', line 646, column 2 to column 38)",
 " (in 'mother.stan', line 647, column 2 to column 38)",
 " (in 'mother.stan', line 649, column 2 to column 41)",
 " (in 'mother.stan', line 651, column 4 to column 42)",
 " (in 'mother.stan', line 652, column 4 to column 46)",
 " (in 'mother.stan', line 653, column 4 to column 46)",
 " (in 'mother.stan', line 656, column 8 to column 68)",
 " (in 'mother.stan', line 657, column 8 to column 76)",
 " (in 'mother.stan', line 658, column 8 to column 76)",
 " (in 'mother.stan', line 659, column 8 to column 65)",
 " (in 'mother.stan', line 655, column 21 to line 660, column 7)",
 " (in 'mother.stan', line 655, column 6 to line 660, column 7)",
 " (in 'mother.stan', line 654, column 19 to line 661, column 5)",
 " (in 'mother.stan', line 654, column 4 to line 661, column 5)",
 " (in 'mother.stan', line 650, column 17 to line 662, column 3)",
 " (in 'mother.stan', line 650, column 2 to line 662, column 3)",
 " (in 'mother.stan', line 665, column 6 to column 47)",
 " (in 'mother.stan', line 664, column 19 to line 666, column 5)",
 " (in 'mother.stan', line 664, column 4 to line 666, column 5)",
 " (in 'mother.stan', line 663, column 17 to line 667, column 3)",
 " (in 'mother.stan', line 663, column 2 to line 667, column 3)",
 " (in 'mother.stan', line 669, column 4 to column 47)",
 " (in 'mother.stan', line 668, column 17 to line 670, column 3)",
 " (in 'mother.stan', line 668, column 2 to line 670, column 3)",
 " (in 'mother.stan', line 671, column 2 to column 38)",
 " (in 'mother.stan', line 672, column 2 to column 38)",
 " (in 'mother.stan', line 673, column 2 to column 38)",
 " (in 'mother.stan', line 674, column 2 to column 39)",
 " (in 'mother.stan', line 675, column 2 to column 39)",
 " (in 'mother.stan', line 677, column 2 to column 53)",
 " (in 'mother.stan', line 316, column 2 to column 17)",
 " (in 'mother.stan', line 317, column 2 to column 17)",
 " (in 'mother.stan', line 318, column 2 to column 28)",
 " (in 'mother.stan', line 319, column 27 to column 28)",
 " (in 'mother.stan', line 319, column 2 to column 30)",
 " (in 'mother.stan', line 320, column 27 to column 28)",
 " (in 'mother.stan', line 320, column 29 to column 30)",
 " (in 'mother.stan', line 320, column 31 to column 32)",
 " (in 'mother.stan', line 320, column 2 to column 34)",
 " (in 'mother.stan', line 321, column 2 to column 32)",
 " (in 'mother.stan', line 322, column 20 to column 21)",
 " (in 'mother.stan', line 322, column 2 to column 23)",
 " (in 'mother.stan', line 323, column 20 to column 21)",
 " (in 'mother.stan', line 323, column 22 to column 23)",
 " (in 'mother.stan', line 323, column 24 to column 25)",
 " (in 'mother.stan', line 323, column 2 to column 27)",
 " (in 'mother.stan', line 324, column 9 to column 10)",
 " (in 'mother.stan', line 324, column 2 to column 18)",
 " (in 'mother.stan', line 325, column 21 to column 22)",
 " (in 'mother.stan', line 325, column 9 to column 10)",
 " (in 'mother.stan', line 325, column 2 to column 24)",
 " (in 'mother.stan', line 326, column 21 to column 22)",
 " (in 'mother.stan', line 326, column 23 to column 24)",
 " (in 'mother.stan', line 326, column 25 to column 26)",
 " (in 'mother.stan', line 326, column 9 to column 10)",
 " (in 'mother.stan', line 326, column 2 to column 28)",
 " (in 'mother.stan', line 327, column 13 to column 14)",
 " (in 'mother.stan', line 327, column 2 to column 26)",
 " (in 'mother.stan', line 328, column 29 to column 30)",
 " (in 'mother.stan', line 328, column 13 to column 14)",
 " (in 'mother.stan', line 328, column 2 to column 32)",
 " (in 'mother.stan', line 329, column 29 to column 30)",
 " (in 'mother.stan', line 329, column 31 to column 32)",
 " (in 'mother.stan', line 329, column 33 to column 34)",
 " (in 'mother.stan', line 329, column 13 to column 14)",
 " (in 'mother.stan', line 329, column 2 to column 36)",
 " (in 'mother.stan', line 330, column 2 to column 45)",
 " (in 'mother.stan', line 331, column 10 to column 11)",
 " (in 'mother.stan', line 331, column 2 to column 23)",
 " (in 'mother.stan', line 332, column 26 to column 27)",
 " (in 'mother.stan', line 332, column 10 to column 11)",
 " (in 'mother.stan', line 332, column 2 to column 29)",
 " (in 'mother.stan', line 333, column 26 to column 27)",
 " (in 'mother.stan', line 333, column 28 to column 29)",
 " (in 'mother.stan', line 333, column 30 to column 31)",
 " (in 'mother.stan', line 333, column 10 to column 11)",
 " (in 'mother.stan', line 333, column 2 to column 33)",
 " (in 'mother.stan', line 334, column 2 to column 38)",
 " (in 'mother.stan', line 335, column 2 to column 36)",
 " (in 'mother.stan', line 336, column 39 to column 40)",
 " (in 'mother.stan', line 336, column 2 to column 42)",
 " (in 'mother.stan', line 337, column 2 to column 12)",
 " (in 'mother.stan', line 338, column 18 to column 23)",
 " (in 'mother.stan', line 338, column 2 to column 25)",
 " (in 'mother.stan', line 339, column 21 to column 26)",
 " (in 'mother.stan', line 339, column 2 to column 30)",
 " (in 'mother.stan', line 340, column 21 to column 26)",
 " (in 'mother.stan', line 340, column 2 to column 32)",
 " (in 'mother.stan', line 341, column 2 to column 14)",
 " (in 'mother.stan', line 342, column 20 to column 25)",
 " (in 'mother.stan', line 342, column 2 to column 27)",
 " (in 'mother.stan', line 343, column 23 to column 28)",
 " (in 'mother.stan', line 343, column 2 to column 32)",
 " (in 'mother.stan', line 344, column 23 to column 28)",
 " (in 'mother.stan', line 344, column 2 to column 34)",
 " (in 'mother.stan', line 345, column 9 to column 14)",
 " (in 'mother.stan', line 345, column 15 to column 20)",
 " (in 'mother.stan', line 345, column 2 to column 31)",
 " (in 'mother.stan', line 346, column 37 to column 42)",
 " (in 'mother.stan', line 346, column 9 to column 14)",
 " (in 'mother.stan', line 346, column 15 to column 20)",
 " (in 'mother.stan', line 346, column 2 to column 44)",
 " (in 'mother.stan', line 347, column 40 to column 45)",
 " (in 'mother.stan', line 347, column 9 to column 14)",
 " (in 'mother.stan', line 347, column 15 to column 20)",
 " (in 'mother.stan', line 347, column 2 to column 49)",
 " (in 'mother.stan', line 348, column 40 to column 45)",
 " (in 'mother.stan', line 348, column 9 to column 14)",
 " (in 'mother.stan', line 348, column 15 to column 20)",
 " (in 'mother.stan', line 348, column 2 to column 51)",
 " (in 'mother.stan', line 349, column 9 to column 14)",
 " (in 'mother.stan', line 349, column 2 to column 25)",
 " (in 'mother.stan', line 350, column 31 to column 36)",
 " (in 'mother.stan', line 350, column 9 to column 14)",
 " (in 'mother.stan', line 350, column 2 to column 38)",
 " (in 'mother.stan', line 351, column 34 to column 39)",
 " (in 'mother.stan', line 351, column 9 to column 14)",
 " (in 'mother.stan', line 351, column 2 to column 43)",
 " (in 'mother.stan', line 352, column 34 to column 39)",
 " (in 'mother.stan', line 352, column 9 to column 14)",
 " (in 'mother.stan', line 352, column 2 to column 45)",
 " (in 'mother.stan', line 353, column 13 to column 18)",
 " (in 'mother.stan', line 353, column 2 to column 33)",
 " (in 'mother.stan', line 354, column 39 to column 44)",
 " (in 'mother.stan', line 354, column 13 to column 18)",
 " (in 'mother.stan', line 354, column 2 to column 46)",
 " (in 'mother.stan', line 355, column 42 to column 47)",
 " (in 'mother.stan', line 355, column 13 to column 18)",
 " (in 'mother.stan', line 355, column 2 to column 51)",
 " (in 'mother.stan', line 356, column 42 to column 47)",
 " (in 'mother.stan', line 356, column 13 to column 18)",
 " (in 'mother.stan', line 356, column 2 to column 53)",
 " (in 'mother.stan', line 359, column 2 to column 13)",
 " (in 'mother.stan', line 360, column 12 to column 13)",
 " (in 'mother.stan', line 360, column 2 to column 15)",
 " (in 'mother.stan', line 361, column 13 to column 14)",
 " (in 'mother.stan', line 361, column 2 to column 34)",
 " (in 'mother.stan', line 362, column 2 to column 15)",
 " (in 'mother.stan', line 363, column 2 to column 20)",
 " (in 'mother.stan', line 364, column 2 to column 29)",
 " (in 'mother.stan', line 365, column 2 to column 46)",
 " (in 'mother.stan', line 366, column 10 to column 11)",
 " (in 'mother.stan', line 366, column 2 to column 24)",
 " (in 'mother.stan', line 367, column 27 to column 28)",
 " (in 'mother.stan', line 367, column 10 to column 11)",
 " (in 'mother.stan', line 367, column 2 to column 30)",
 " (in 'mother.stan', line 368, column 27 to column 28)",
 " (in 'mother.stan', line 368, column 29 to column 30)",
 " (in 'mother.stan', line 368, column 31 to column 32)",
 " (in 'mother.stan', line 368, column 10 to column 11)",
 " (in 'mother.stan', line 368, column 2 to column 34)",
 " (in 'mother.stan', line 369, column 2 to column 39)",
 " (in 'mother.stan', line 370, column 2 to column 37)",
 " (in 'mother.stan', line 371, column 2 to column 14)",
 " (in 'mother.stan', line 372, column 2 to column 14)",
 " (in 'mother.stan', line 373, column 2 to column 14)",
 " (in 'mother.stan', line 374, column 2 to column 17)",
 " (in 'mother.stan', line 375, column 2 to column 17)",
 " (in 'mother.stan', line 376, column 2 to column 16)",
 " (in 'mother.stan', line 377, column 2 to column 18)",
 " (in 'mother.stan', line 378, column 2 to column 18)",
 " (in 'mother.stan', line 383, column 10 to column 38)",
 " (in 'mother.stan', line 382, column 23 to line 383, column 39)",
 " (in 'mother.stan', line 382, column 8 to line 383, column 39)",
 " (in 'mother.stan', line 381, column 21 to line 383, column 40)",
 " (in 'mother.stan', line 381, column 6 to line 383, column 40)",
 " (in 'mother.stan', line 380, column 19 to line 383, column 41)",
 " (in 'mother.stan', line 380, column 4 to line 383, column 41)",
 " (in 'mother.stan', line 379, column 17 to line 383, column 42)",
 " (in 'mother.stan', line 379, column 2 to line 383, column 42)",
 " (in 'mother.stan', line 385, column 4 to column 28)",
 " (in 'mother.stan', line 387, column 6 to column 36)",
 " (in 'mother.stan', line 390, column 10 to column 46)",
 " (in 'mother.stan', line 389, column 23 to line 390, column 47)",
 " (in 'mother.stan', line 389, column 8 to line 390, column 47)",
 " (in 'mother.stan', line 388, column 21 to line 390, column 48)",
 " (in 'mother.stan', line 388, column 6 to line 390, column 48)",
 " (in 'mother.stan', line 386, column 19 to line 390, column 49)",
 " (in 'mother.stan', line 386, column 4 to line 390, column 49)",
 " (in 'mother.stan', line 384, column 17 to line 390, column 50)",
 " (in 'mother.stan', line 384, column 2 to line 390, column 50)",
 " (in 'mother.stan', line 393, column 6 to column 40)",
 " (in 'mother.stan', line 394, column 6 to column 63)",
 " (in 'mother.stan', line 392, column 19 to line 395, column 5)",
 " (in 'mother.stan', line 392, column 4 to line 395, column 5)",
 " (in 'mother.stan', line 391, column 17 to line 395, column 6)",
 " (in 'mother.stan', line 391, column 2 to line 395, column 6)",
 " (in 'mother.stan', line 396, column 2 to column 62)",
 " (in 'mother.stan', line 397, column 2 to column 62)",
 " (in 'mother.stan', line 399, column 4 to column 11)",
 " (in 'mother.stan', line 400, column 4 to column 35)",
 " (in 'mother.stan', line 401, column 4 to line 403, column 5)",
 " (in 'mother.stan', line 402, column 6 to column 12)",
 " (in 'mother.stan', line 404, column 4 to column 31)",
 " (in 'mother.stan', line 405, column 4 to line 407, column 5)",
 " (in 'mother.stan', line 406, column 6 to column 12)",
 " (in 'mother.stan', line 398, column 2 to line 408, column 3)",
 " (in 'mother.stan', line 410, column 2 to column 25)",
 " (in 'mother.stan', line 411, column 2 to column 34)",
 " (in 'mother.stan', line 412, column 2 to column 33)",
 " (in 'mother.stan', line 413, column 2 to column 36)",
 " (in 'mother.stan', line 415, column 2 to column 23)",
 " (in 'mother.stan', line 416, column 2 to column 30)",
 " (in 'mother.stan', line 418, column 2 to column 28)",
 " (in 'mother.stan', line 420, column 2 to column 29)",
 " (in 'mother.stan', line 421, column 35 to column 40)",
 " (in 'mother.stan', line 421, column 2 to column 42)",
 " (in 'mother.stan', line 422, column 38 to column 43)",
 " (in 'mother.stan', line 422, column 2 to column 47)",
 " (in 'mother.stan', line 423, column 38 to column 43)",
 " (in 'mother.stan', line 423, column 2 to column 49)",
 " (in 'mother.stan', line 424, column 9 to column 14)",
 " (in 'mother.stan', line 424, column 15 to column 20)",
 " (in 'mother.stan', line 424, column 2 to column 46)",
 " (in 'mother.stan', line 425, column 52 to column 57)",
 " (in 'mother.stan', line 425, column 9 to column 14)",
 " (in 'mother.stan', line 425, column 15 to column 20)",
 " (in 'mother.stan', line 425, column 2 to column 59)",
 " (in 'mother.stan', line 426, column 55 to column 60)",
 " (in 'mother.stan', line 426, column 9 to column 14)",
 " (in 'mother.stan', line 426, column 15 to column 20)",
 " (in 'mother.stan', line 426, column 2 to column 64)",
 " (in 'mother.stan', line 427, column 55 to column 60)",
 " (in 'mother.stan', line 427, column 9 to column 14)",
 " (in 'mother.stan', line 427, column 15 to column 20)",
 " (in 'mother.stan', line 427, column 2 to column 66)",
 " (in 'mother.stan', line 428, column 9 to column 14)",
 " (in 'mother.stan', line 428, column 2 to column 40)",
 " (in 'mother.stan', line 429, column 46 to column 51)",
 " (in 'mother.stan', line 429, column 9 to column 14)",
 " (in 'mother.stan', line 429, column 2 to column 53)",
 " (in 'mother.stan', line 430, column 49 to column 54)",
 " (in 'mother.stan', line 430, column 9 to column 14)",
 " (in 'mother.stan', line 430, column 2 to column 58)",
 " (in 'mother.stan', line 431, column 49 to column 54)",
 " (in 'mother.stan', line 431, column 9 to column 14)",
 " (in 'mother.stan', line 431, column 2 to column 60)",
 " (in 'mother.stan', line 432, column 13 to column 18)",
 " (in 'mother.stan', line 432, column 2 to column 48)",
 " (in 'mother.stan', line 433, column 54 to column 59)",
 " (in 'mother.stan', line 433, column 13 to column 18)",
 " (in 'mother.stan', line 433, column 2 to column 61)",
 " (in 'mother.stan', line 434, column 57 to column 62)",
 " (in 'mother.stan', line 434, column 13 to column 18)",
 " (in 'mother.stan', line 434, column 2 to column 66)",
 " (in 'mother.stan', line 435, column 57 to column 62)",
 " (in 'mother.stan', line 435, column 13 to column 18)",
 " (in 'mother.stan', line 435, column 2 to column 68)",
 " (in 'mother.stan', line 437, column 2 to column 41)",
 " (in 'mother.stan', line 438, column 2 to column 42)",
 " (in 'mother.stan', line 439, column 2 to column 42)",
 " (in 'mother.stan', line 440, column 2 to column 43)",
 " (in 'mother.stan', line 441, column 2 to column 53)",
 " (in 'mother.stan', line 442, column 2 to column 54)",
 " (in 'mother.stan', line 443, column 2 to column 59)",
 " (in 'mother.stan', line 444, column 2 to column 60)",
 " (in 'mother.stan', line 445, column 2 to column 59)",
 " (in 'mother.stan', line 446, column 2 to column 60)",
 " (in 'mother.stan', line 447, column 2 to column 53)",
 " (in 'mother.stan', line 448, column 2 to column 54)",
 " (in 'mother.stan', line 449, column 2 to column 59)",
 " (in 'mother.stan', line 450, column 2 to column 60)",
 " (in 'mother.stan', line 451, column 2 to column 59)",
 " (in 'mother.stan', line 452, column 2 to column 60)",
 " (in 'mother.stan', line 454, column 2 to column 54)",
 " (in 'mother.stan', line 455, column 2 to column 55)",
 " (in 'mother.stan', line 456, column 2 to column 60)",
 " (in 'mother.stan', line 457, column 2 to column 61)",
 " (in 'mother.stan', line 458, column 2 to column 60)",
 " (in 'mother.stan', line 459, column 2 to column 61)",
 " (in 'mother.stan', line 461, column 2 to column 54)",
 " (in 'mother.stan', line 462, column 2 to column 55)",
 " (in 'mother.stan', line 463, column 2 to column 60)",
 " (in 'mother.stan', line 464, column 2 to column 61)",
 " (in 'mother.stan', line 465, column 2 to column 60)",
 " (in 'mother.stan', line 466, column 2 to column 61)",
 " (in 'mother.stan', line 468, column 2 to column 59)",
 " (in 'mother.stan', line 469, column 2 to column 61)",
 " (in 'mother.stan', line 470, column 2 to column 68)",
 " (in 'mother.stan', line 471, column 2 to column 70)",
 " (in 'mother.stan', line 472, column 2 to column 68)",
 " (in 'mother.stan', line 473, column 2 to column 70)",
 " (in 'mother.stan', line 475, column 2 to column 46)",
 " (in 'mother.stan', line 476, column 2 to column 47)",
 " (in 'mother.stan', line 477, column 2 to column 62)",
 " (in 'mother.stan', line 478, column 2 to column 60)",
 " (in 'mother.stan', line 479, column 2 to column 58)",
 " (in 'mother.stan', line 480, column 2 to column 58)",
 " (in 'mother.stan', line 481, column 2 to column 59)",
 " (in 'mother.stan', line 482, column 2 to column 64)",
 " (in 'mother.stan', line 483, column 2 to column 65)",
 " (in 'mother.stan', line 484, column 2 to column 64)",
 " (in 'mother.stan', line 485, column 2 to column 65)",
 " (in 'mother.stan', line 487, column 2 to column 46)",
 " (in 'mother.stan', line 488, column 2 to column 47)",
 " (in 'mother.stan', line 489, column 2 to column 58)",
 " (in 'mother.stan', line 490, column 2 to column 59)",
 " (in 'mother.stan', line 491, column 2 to column 64)",
 " (in 'mother.stan', line 492, column 2 to column 65)",
 " (in 'mother.stan', line 493, column 2 to column 64)",
 " (in 'mother.stan', line 494, column 2 to column 65)",
 " (in 'mother.stan', line 496, column 2 to column 49)",
 " (in 'mother.stan', line 497, column 2 to column 62)",
 " (in 'mother.stan', line 498, column 2 to column 60)",
 " (in 'mother.stan', line 499, column 2 to column 67)",
 " (in 'mother.stan', line 500, column 2 to column 76)",
 " (in 'mother.stan', line 501, column 2 to column 76)",
 " (in 'mother.stan', line 503, column 2 to column 54)",
 " (in 'mother.stan', line 504, column 2 to column 55)",
 " (in 'mother.stan', line 505, column 2 to column 66)",
 " (in 'mother.stan', line 506, column 2 to column 67)",
 " (in 'mother.stan', line 507, column 2 to column 72)",
 " (in 'mother.stan', line 508, column 2 to column 73)",
 " (in 'mother.stan', line 509, column 2 to column 72)",
 " (in 'mother.stan', line 510, column 2 to column 73)",
 " (in 'mother.stan', line 512, column 2 to column 54)",
 " (in 'mother.stan', line 513, column 2 to column 55)",
 " (in 'mother.stan', line 514, column 2 to column 66)",
 " (in 'mother.stan', line 515, column 2 to column 67)",
 " (in 'mother.stan', line 516, column 2 to column 72)",
 " (in 'mother.stan', line 517, column 2 to column 73)",
 " (in 'mother.stan', line 518, column 2 to column 72)",
 " (in 'mother.stan', line 519, column 2 to column 73)",
 " (in 'mother.stan', line 521, column 2 to column 61)",
 " (in 'mother.stan', line 522, column 2 to column 79)",
 " (in 'mother.stan', line 523, column 2 to column 88)",
 " (in 'mother.stan', line 524, column 2 to column 88)",
 " (in 'mother.stan', line 526, column 2 to column 46)",
 " (in 'mother.stan', line 527, column 2 to column 47)",
 " (in 'mother.stan', line 528, column 2 to column 62)",
 " (in 'mother.stan', line 529, column 2 to column 60)",
 " (in 'mother.stan', line 530, column 2 to column 58)",
 " (in 'mother.stan', line 531, column 2 to column 59)",
 " (in 'mother.stan', line 532, column 2 to column 64)",
 " (in 'mother.stan', line 533, column 2 to column 65)",
 " (in 'mother.stan', line 534, column 2 to column 64)",
 " (in 'mother.stan', line 535, column 2 to column 65)",
 " (in 'mother.stan', line 537, column 2 to column 46)",
 " (in 'mother.stan', line 538, column 2 to column 47)",
 " (in 'mother.stan', line 539, column 2 to column 58)",
 " (in 'mother.stan', line 540, column 2 to column 59)",
 " (in 'mother.stan', line 541, column 2 to column 64)",
 " (in 'mother.stan', line 542, column 2 to column 65)",
 " (in 'mother.stan', line 543, column 2 to column 64)",
 " (in 'mother.stan', line 544, column 2 to column 65)",
 " (in 'mother.stan', line 546, column 2 to column 49)",
 " (in 'mother.stan', line 547, column 2 to column 67)",
 " (in 'mother.stan', line 548, column 2 to column 76)",
 " (in 'mother.stan', line 549, column 2 to column 76)",
 " (in 'mother.stan', line 551, column 2 to column 26)",
 " (in 'mother.stan', line 552, column 2 to column 43)",
 " (in 'mother.stan', line 561, column 29 to column 30)",
 " (in 'mother.stan', line 562, column 29 to column 30)",
 " (in 'mother.stan', line 562, column 31 to column 32)",
 " (in 'mother.stan', line 562, column 33 to column 34)",
 " (in 'mother.stan', line 563, column 18 to column 19)",
 " (in 'mother.stan', line 564, column 21 to column 22)",
 " (in 'mother.stan', line 564, column 9 to column 10)",
 " (in 'mother.stan', line 565, column 21 to column 22)",
 " (in 'mother.stan', line 565, column 23 to column 24)",
 " (in 'mother.stan', line 565, column 25 to column 26)",
 " (in 'mother.stan', line 565, column 9 to column 10)",
 " (in 'mother.stan', line 566, column 13 to column 14)",
 " (in 'mother.stan', line 567, column 29 to column 30)",
 " (in 'mother.stan', line 567, column 13 to column 14)",
 " (in 'mother.stan', line 568, column 29 to column 30)",
 " (in 'mother.stan', line 568, column 31 to column 32)",
 " (in 'mother.stan', line 568, column 33 to column 34)",
 " (in 'mother.stan', line 568, column 13 to column 14)",
 " (in 'mother.stan', line 571, column 10 to column 11)",
 " (in 'mother.stan', line 572, column 26 to column 27)",
 " (in 'mother.stan', line 572, column 10 to column 11)",
 " (in 'mother.stan', line 573, column 26 to column 27)",
 " (in 'mother.stan', line 573, column 28 to column 29)",
 " (in 'mother.stan', line 573, column 30 to column 31)",
 " (in 'mother.stan', line 573, column 10 to column 11)",
 " (in 'mother.stan', line 574, column 22 to column 23)",
 " (in 'mother.stan', line 575, column 22 to column 23)",
 " (in 'mother.stan', line 576, column 39 to column 40)",
 " (in 'mother.stan', line 576, column 22 to column 23)",
 " (in 'mother.stan', line 581, column 30 to column 31)",
 " (in 'mother.stan', line 582, column 30 to column 31)",
 " (in 'mother.stan', line 582, column 32 to column 33)",
 " (in 'mother.stan', line 582, column 34 to column 35)",
 " (in 'mother.stan', line 583, column 18 to column 19)",
 " (in 'mother.stan', line 584, column 22 to column 23)",
 " (in 'mother.stan', line 584, column 9 to column 10)",
 " (in 'mother.stan', line 585, column 22 to column 23)",
 " (in 'mother.stan', line 585, column 24 to column 25)",
 " (in 'mother.stan', line 585, column 26 to column 27)",
 " (in 'mother.stan', line 585, column 9 to column 10)",
 " (in 'mother.stan', line 586, column 13 to column 14)",
 " (in 'mother.stan', line 587, column 30 to column 31)",
 " (in 'mother.stan', line 587, column 13 to column 14)",
 " (in 'mother.stan', line 588, column 30 to column 31)",
 " (in 'mother.stan', line 588, column 32 to column 33)",
 " (in 'mother.stan', line 588, column 34 to column 35)",
 " (in 'mother.stan', line 588, column 13 to column 14)",
 " (in 'mother.stan', line 591, column 10 to column 11)",
 " (in 'mother.stan', line 592, column 27 to column 28)",
 " (in 'mother.stan', line 592, column 10 to column 11)",
 " (in 'mother.stan', line 593, column 27 to column 28)",
 " (in 'mother.stan', line 593, column 29 to column 30)",
 " (in 'mother.stan', line 593, column 31 to column 32)",
 " (in 'mother.stan', line 593, column 10 to column 11)",
 " (in 'mother.stan', line 596, column 40 to column 41)",
 " (in 'mother.stan', line 682, column 32 to column 33)",
 " (in 'mother.stan', line 683, column 32 to column 33)",
 " (in 'mother.stan', line 683, column 34 to column 35)",
 " (in 'mother.stan', line 683, column 36 to column 37)",
 " (in 'mother.stan', line 684, column 18 to column 19)",
 " (in 'mother.stan', line 685, column 22 to column 23)",
 " (in 'mother.stan', line 685, column 9 to column 10)",
 " (in 'mother.stan', line 686, column 22 to column 23)",
 " (in 'mother.stan', line 686, column 24 to column 25)",
 " (in 'mother.stan', line 686, column 26 to column 27)",
 " (in 'mother.stan', line 686, column 9 to column 10)",
 " (in 'mother.stan', line 687, column 13 to column 14)",
 " (in 'mother.stan', line 688, column 30 to column 31)",
 " (in 'mother.stan', line 688, column 13 to column 14)",
 " (in 'mother.stan', line 689, column 30 to column 31)",
 " (in 'mother.stan', line 689, column 32 to column 33)",
 " (in 'mother.stan', line 689, column 34 to column 35)",
 " (in 'mother.stan', line 689, column 13 to column 14)",
 " (in 'mother.stan', line 691, column 10 to column 11)",
 " (in 'mother.stan', line 692, column 27 to column 28)",
 " (in 'mother.stan', line 692, column 10 to column 11)",
 " (in 'mother.stan', line 693, column 27 to column 28)",
 " (in 'mother.stan', line 693, column 29 to column 30)",
 " (in 'mother.stan', line 693, column 31 to column 32)",
 " (in 'mother.stan', line 693, column 10 to column 11)",
 " (in 'mother.stan', line 696, column 40 to column 41)",
 " (in 'mother.stan', line 13, column 16 to column 25)",
 " (in 'mother.stan', line 13, column 4 to column 25)",
 " (in 'mother.stan', line 14, column 4 to column 26)",
 " (in 'mother.stan', line 12, column 17 to line 15, column 3)",
 " (in 'mother.stan', line 29, column 4 to column 17)",
 " (in 'mother.stan', line 30, column 4 to column 19)",
 " (in 'mother.stan', line 31, column 4 to column 38)",
 " (in 'mother.stan', line 32, column 4 to column 16)",
 " (in 'mother.stan', line 28, column 31 to line 33, column 3)",
 " (in 'mother.stan', line 36, column 4 to column 15)",
 " (in 'mother.stan', line 35, column 18 to line 37, column 3)",
 " (in 'mother.stan', line 40, column 4 to column 15)",
 " (in 'mother.stan', line 39, column 24 to line 41, column 3)",
 " (in 'mother.stan', line 44, column 4 to column 15)",
 " (in 'mother.stan', line 43, column 32 to line 45, column 3)",
 " (in 'mother.stan', line 48, column 4 to column 15)",
 " (in 'mother.stan', line 47, column 36 to line 49, column 3)",
 " (in 'mother.stan', line 52, column 4 to column 15)",
 " (in 'mother.stan', line 51, column 36 to line 53, column 3)",
 " (in 'mother.stan', line 56, column 4 to column 15)",
 " (in 'mother.stan', line 55, column 37 to line 57, column 3)",
 " (in 'mother.stan', line 59, column 4 to column 33)",
 " (in 'mother.stan', line 58, column 36 to line 60, column 3)",
 " (in 'mother.stan', line 63, column 4 to column 42)",
 " (in 'mother.stan', line 64, column 4 to column 26)",
 " (in 'mother.stan', line 62, column 30 to line 65, column 3)",
 " (in 'mother.stan', line 69, column 14 to column 20)",
 " (in 'mother.stan', line 69, column 4 to column 20)",
 " (in 'mother.stan', line 70, column 14 to column 23)",
 " (in 'mother.stan', line 70, column 4 to column 23)",
 " (in 'mother.stan', line 73, column 20 to column 26)",
 " (in 'mother.stan', line 73, column 4 to column 26)",
 " (in 'mother.stan', line 74, column 20 to column 29)",
 " (in 'mother.stan', line 74, column 4 to column 29)",
 " (in 'mother.stan', line 78, column 6 to column 12)",
 " (in 'mother.stan', line 79, column 6 to column 12)",
 " (in 'mother.stan', line 80, column 6 to column 12)",
 " (in 'mother.stan', line 77, column 14 to line 81, column 5)",
 " (in 'mother.stan', line 77, column 4 to line 81, column 5)",
 " (in 'mother.stan', line 87, column 11 to column 17)",
 " (in 'mother.stan', line 86, column 18 to column 24)",
 " (in 'mother.stan', line 86, column 11 to line 87, column 17)",
 " (in 'mother.stan', line 85, column 13 to column 19)",
 " (in 'mother.stan', line 85, column 6 to line 87, column 17)",
 " (in 'mother.stan', line 84, column 14 to line 88, column 5)",
 " (in 'mother.stan', line 84, column 4 to line 88, column 5)",
 " (in 'mother.stan', line 91, column 24 to column 30)",
 " (in 'mother.stan', line 91, column 14 to column 30)",
 " (in 'mother.stan', line 91, column 4 to column 30)",
 " (in 'mother.stan', line 95, column 22 to column 28)",
 " (in 'mother.stan', line 95, column 6 to column 28)",
 " (in 'mother.stan', line 94, column 14 to line 96, column 5)",
 " (in 'mother.stan', line 94, column 4 to line 96, column 5)",
 " (in 'mother.stan', line 100, column 6 to column 19)",
 " (in 'mother.stan', line 101, column 6 to column 12)",
 " (in 'mother.stan', line 102, column 6 to line 105, column 7)",
 " (in 'mother.stan', line 103, column 8 to column 14)",
 " (in 'mother.stan', line 104, column 8 to column 14)",
 " (in 'mother.stan', line 106, column 6 to line 109, column 7)",
 " (in 'mother.stan', line 107, column 8 to column 14)",
 " (in 'mother.stan', line 108, column 8 to column 17)",
 " (in 'mother.stan', line 110, column 6 to line 116, column 7)",
 " (in 'mother.stan', line 111, column 8 to line 114, column 9)",
 " (in 'mother.stan', line 112, column 10 to column 16)",
 " (in 'mother.stan', line 113, column 10 to column 16)",
 " (in 'mother.stan', line 115, column 8 to column 14)",
 " (in 'mother.stan', line 99, column 14 to line 117, column 5)",
 " (in 'mother.stan', line 99, column 4 to line 117, column 5)",
 " (in 'mother.stan', line 121, column 6 to column 13)",
 " (in 'mother.stan', line 122, column 6 to column 21)",
 " (in 'mother.stan', line 123, column 6 to line 126, column 7)",
 " (in 'mother.stan', line 124, column 8 to column 14)",
 " (in 'mother.stan', line 125, column 8 to column 14)",
 " (in 'mother.stan', line 127, column 6 to line 130, column 7)",
 " (in 'mother.stan', line 128, column 8 to column 16)",
 " (in 'mother.stan', line 129, column 8 to column 17)",
 " (in 'mother.stan', line 120, column 14 to line 131, column 5)",
 " (in 'mother.stan', line 120, column 4 to line 131, column 5)",
 " (in 'mother.stan', line 135, column 6 to column 13)",
 " (in 'mother.stan', line 136, column 6 to column 19)",
 " (in 'mother.stan', line 137, column 6 to line 140, column 7)",
 " (in 'mother.stan', line 138, column 8 to column 14)",
 " (in 'mother.stan', line 139, column 8 to column 14)",
 " (in 'mother.stan', line 141, column 6 to line 144, column 7)",
 " (in 'mother.stan', line 142, column 8 to column 16)",
 " (in 'mother.stan', line 143, column 8 to column 17)",
 " (in 'mother.stan', line 134, column 14 to line 145, column 5)",
 " (in 'mother.stan', line 134, column 4 to line 145, column 5)",
 " (in 'mother.stan', line 149, column 6 to column 13)",
 " (in 'mother.stan', line 150, column 6 to column 23)",
 " (in 'mother.stan', line 151, column 6 to line 154, column 7)",
 " (in 'mother.stan', line 152, column 8 to column 14)",
 " (in 'mother.stan', line 153, column 8 to column 14)",
 " (in 'mother.stan', line 155, column 6 to line 158, column 7)",
 " (in 'mother.stan', line 156, column 8 to column 16)",
 " (in 'mother.stan', line 157, column 8 to column 17)",
 " (in 'mother.stan', line 148, column 14 to line 159, column 5)",
 " (in 'mother.stan', line 148, column 4 to line 159, column 5)",
 " (in 'mother.stan', line 163, column 6 to column 12)",
 " (in 'mother.stan', line 164, column 6 to column 12)",
 " (in 'mother.stan', line 166, column 8 to column 14)",
 " (in 'mother.stan', line 167, column 8 to column 14)",
 " (in 'mother.stan', line 168, column 8 to column 14)",
 " (in 'mother.stan', line 165, column 6 to line 169, column 7)",
 " (in 'mother.stan', line 162, column 14 to line 170, column 5)",
 " (in 'mother.stan', line 162, column 4 to line 170, column 5)",
 " (in 'mother.stan', line 172, column 4 to column 13)",
 " (in 'mother.stan', line 67, column 19 to line 173, column 3)",
 " (in 'mother.stan', line 176, column 4 to column 14)",
 " (in 'mother.stan', line 177, column 4 to column 10)",
 " (in 'mother.stan', line 178, column 4 to column 24)",
 " (in 'mother.stan', line 178, column 18 to column 24)",
 " (in 'mother.stan', line 179, column 4 to column 13)",
 " (in 'mother.stan', line 175, column 19 to line 180, column 3)",
 " (in 'mother.stan', line 183, column 4 to column 26)",
 " (in 'mother.stan', line 182, column 30 to line 184, column 3)",
 " (in 'mother.stan', line 187, column 4 to column 24)",
 " (in 'mother.stan', line 186, column 22 to line 188, column 3)",
 " (in 'mother.stan', line 191, column 4 to column 42)",
 " (in 'mother.stan', line 190, column 21 to line 192, column 3)",
 " (in 'mother.stan', line 195, column 4 to column 18)",
 " (in 'mother.stan', line 196, column 4 to column 19)",
 " (in 'mother.stan', line 197, column 4 to column 27)",
 " (in 'mother.stan', line 198, column 4 to column 40)",
 " (in 'mother.stan', line 200, column 6 to column 81)",
 " (in 'mother.stan', line 199, column 4 to line 200, column 81)",
 " (in 'mother.stan', line 202, column 6 to column 81)",
 " (in 'mother.stan', line 201, column 4 to line 202, column 81)",
 " (in 'mother.stan', line 203, column 4 to column 32)",
 " (in 'mother.stan', line 194, column 59 to line 204, column 3)",
 " (in 'mother.stan', line 208, column 4 to column 22)",
 " (in 'mother.stan', line 207, column 52 to line 209, column 3)",
 " (in 'mother.stan', line 212, column 4 to column 14)",
 " (in 'mother.stan', line 211, column 66 to line 213, column 3)",
 " (in 'mother.stan', line 215, column 4 to column 14)",
 " (in 'mother.stan', line 214, column 78 to line 216, column 3)",
 " (in 'mother.stan', line 219, column 11 to column 20)",
 " (in 'mother.stan', line 219, column 22 to column 31)",
 " (in 'mother.stan', line 219, column 4 to column 35)",
 " (in 'mother.stan', line 220, column 4 to column 12)",
 " (in 'mother.stan', line 221, column 4 to column 16)",
 " (in 'mother.stan', line 222, column 4 to column 20)",
 " (in 'mother.stan', line 223, column 4 to column 13)",
 " (in 'mother.stan', line 218, column 49 to line 224, column 3)",
 " (in 'mother.stan', line 226, column 4 to column 16)",
 " (in 'mother.stan', line 225, column 150 to line 227, column 3)",
 " (in 'mother.stan', line 230, column 4 to column 14)",
 " (in 'mother.stan', line 229, column 149 to line 231, column 3)",
 " (in 'mother.stan', line 234, column 4 to column 14)",
 " (in 'mother.stan', line 233, column 151 to line 235, column 3)",
 " (in 'mother.stan', line 238, column 4 to column 14)",
 " (in 'mother.stan', line 237, column 152 to line 239, column 3)",
 " (in 'mother.stan', line 242, column 4 to column 14)",
 " (in 'mother.stan', line 241, column 150 to line 243, column 3)",
 " (in 'mother.stan', line 246, column 4 to column 14)",
 " (in 'mother.stan', line 245, column 152 to line 247, column 3)",
 " (in 'mother.stan', line 250, column 4 to column 14)",
 " (in 'mother.stan', line 249, column 153 to line 251, column 3)",
 " (in 'mother.stan', line 254, column 4 to column 14)",
 " (in 'mother.stan', line 253, column 152 to line 255, column 3)",
 " (in 'mother.stan', line 258, column 4 to column 14)",
 " (in 'mother.stan', line 257, column 154 to line 259, column 3)",
 " (in 'mother.stan', line 262, column 4 to column 14)",
 " (in 'mother.stan', line 261, column 155 to line 263, column 3)",
 " (in 'mother.stan', line 266, column 4 to column 15)",
 " (in 'mother.stan', line 265, column 153 to line 267, column 3)",
 " (in 'mother.stan', line 270, column 4 to column 15)",
 " (in 'mother.stan', line 269, column 155 to line 271, column 3)",
 " (in 'mother.stan', line 274, column 4 to column 15)",
 " (in 'mother.stan', line 273, column 156 to line 275, column 3)",
 " (in 'mother.stan', line 277, column 4 to column 10)",
 " (in 'mother.stan', line 278, column 4 to column 11)",
 " (in 'mother.stan', line 279, column 4 to column 18)",
 " (in 'mother.stan', line 280, column 4 to column 32)",
 " (in 'mother.stan', line 281, column 4 to column 24)",
 " (in 'mother.stan', line 276, column 14 to line 282, column 3)",
 " (in 'mother.stan', line 284, column 4 to line 286, column 40)",
 " (in 'mother.stan', line 283, column 18 to line 287, column 3)",
 " (in 'mother.stan', line 289, column 4 to column 35)",
 " (in 'mother.stan', line 288, column 18 to line 290, column 3)",
 " (in 'mother.stan', line 292, column 4 to column 33)",
 " (in 'mother.stan', line 293, column 4 to column 13)",
 " (in 'mother.stan', line 291, column 27 to line 294, column 3)",
 " (in 'mother.stan', line 296, column 4 to column 48)",
 " (in 'mother.stan', line 297, column 4 to column 26)",
 " (in 'mother.stan', line 295, column 27 to line 298, column 3)",
 " (in 'mother.stan', line 303, column 4 to column 18)",
 " (in 'mother.stan', line 304, column 4 to column 25)",
 " (in 'mother.stan', line 305, column 4 to column 25)",
 " (in 'mother.stan', line 306, column 4 to column 15)",
 " (in 'mother.stan', line 302, column 39 to line 307, column 3)",
 " (in 'mother.stan', line 310, column 4 to column 19)",
 " (in 'mother.stan', line 311, column 4 to column 18)",
 " (in 'mother.stan', line 312, column 4 to column 16)",
 " (in 'mother.stan', line 309, column 78 to line 313, column 3)"};


int
foo(const int& n, std::ostream* pstream__) ;

int
foo(const int& n, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 593;
    if (logical_eq(n, 0)) {
      current_statement__ = 592;
      return 1;
    } 
    current_statement__ = 594;
    return (n * foo((n - 1), pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_functor__ {
int
operator()(const int& n, std::ostream* pstream__)  const 
{
return foo(n, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
sho(const T0__& t, const std::vector<T1__>& y,
    const std::vector<T2__>& theta, const std::vector<double>& x,
    const std::vector<int>& x_int, std::ostream* pstream__) ;

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
sho(const T0__& t, const std::vector<T1__>& y,
    const std::vector<T2__>& theta, const std::vector<double>& x,
    const std::vector<int>& x_int, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> dydt = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
                                         
    
    current_statement__ = 597;
    assign(dydt, rvalue(y, "y", index_uni(2)),
      "assigning variable dydt", index_uni(1));
    current_statement__ = 598;
    assign(dydt,
      (-rvalue(y, "y", index_uni(1)) -
        (rvalue(theta, "theta", index_uni(1)) * rvalue(y, "y", index_uni(2)))),
      "assigning variable dydt", index_uni(2));
    current_statement__ = 599;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sho_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const T0__& t, const std::vector<T1__>& y,
           const std::vector<T2__>& theta, const std::vector<double>& x,
           const std::vector<int>& x_int, std::ostream* pstream__)  const 
{
return sho(t, y, theta, x, x_int, pstream__);
}
};

double
foo_bar0(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 601;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_bar0_functor__ {
double
operator()(std::ostream* pstream__)  const 
{
return foo_bar0(pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
foo_bar1(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 603;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_bar1_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return foo_bar1(x, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
foo_bar2(const T0__& x, const T1__& y, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 605;
    return 2.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_bar2_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& x, const T1__& y, std::ostream* pstream__)  const 
{
return foo_bar2(x, y, pstream__);
}
};

template <bool propto__, typename T1__>
stan::promote_args_t<T1__>
foo_lpmf(const int& y, const T1__& lambda, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 607;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_lpmf_functor__ {
template <bool propto__, typename T1__>
stan::promote_args_t<T1__>
operator()(const int& y, const T1__& lambda, std::ostream* pstream__)  const 
{
return foo_lpmf<propto__>(y, lambda, pstream__);
}
};

template <typename T1__>
stan::promote_args_t<T1__>
foo_lcdf(const int& y, const T1__& lambda, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 609;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_lcdf_functor__ {
template <typename T1__>
stan::promote_args_t<T1__>
operator()(const int& y, const T1__& lambda, std::ostream* pstream__)  const 
{
return foo_lcdf(y, lambda, pstream__);
}
};

template <typename T1__>
stan::promote_args_t<T1__>
foo_lccdf(const int& y, const T1__& lambda, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 611;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_lccdf_functor__ {
template <typename T1__>
stan::promote_args_t<T1__>
operator()(const int& y, const T1__& lambda, std::ostream* pstream__)  const 
{
return foo_lccdf(y, lambda, pstream__);
}
};

template <typename T0__, typename T1__, typename RNG>
stan::promote_args_t<T0__,
T1__>
foo_rng(const T0__& mu, const T1__& sigma, RNG& base_rng__,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 613;
    return normal_rng(mu, sigma, base_rng__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_rng_functor__ {
template <typename T0__, typename T1__, typename RNG>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& mu, const T1__& sigma, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return foo_rng(mu, sigma, base_rng__, pstream__);
}
};

template <bool propto__, typename T0__, typename T_lp__,
typename T_lp_accum__>
void
unit_normal_lp(const T0__& u, T_lp__& lp__, T_lp_accum__& lp_accum__,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 615;
    lp_accum__.add(normal_log<false>(u, 0, 1));
    current_statement__ = 616;
    lp_accum__.add(uniform_lpdf<propto__>(u, -100, 100));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct unit_normal_lp_functor__ {
template <bool propto__, typename T0__, typename T_lp__,
typename T_lp_accum__>
void
operator()(const T0__& u, T_lp__& lp__, T_lp_accum__& lp_accum__,
           std::ostream* pstream__)  const 
{
return unit_normal_lp<propto__>(u, lp__, lp_accum__, pstream__);
}
};

int
foo_1(const int& a, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 619;
    while (1) {
      break;
    }
    current_statement__ = 621;
    while (0) {
      continue;
    }
    current_statement__ = 623;
    for (int i = 1; i <= 10; ++i) { break;}
    current_statement__ = 625;
    for (int i = 1; i <= 10; ++i) { continue;}
    current_statement__ = 630;
    while (1) {
      int b = std::numeric_limits<int>::min();
      
      current_statement__ = 627;
      b = 5;
      break;
    }
    current_statement__ = 637;
    while (1) {
      current_statement__ = 635;
      if (0) {
        break;
      } else {
        current_statement__ = 633;
        if (1) {
          break;
        } else {
          break;
        }
      }
    }
    current_statement__ = 640;
    while (1) {
      current_statement__ = 639;
      while (0) {
        break;
      }
    }
    current_statement__ = 644;
    while (1) {
      current_statement__ = 642;
      for (int i = 1; i <= 10; ++i) { break;}
    }
    current_statement__ = 659;
    while (1) {
      std::vector<std::vector<int>> vs = std::vector<std::vector<int>>(2, std::vector<int>(3, std::numeric_limits<int>::min()));
                                         
      
      int z = std::numeric_limits<int>::min();
      
      current_statement__ = 647;
      for (int sym1__ = 1; sym1__ <= stan::math::size(vs); ++sym1__) {
        {
          std::vector<int> v;
          current_statement__ = 647;
          assign(v, vs[(sym1__ - 1)], "assigning variable v");
          current_statement__ = 648;
          z = 0;
          break;
        }
      }
      current_statement__ = 650;
      for (int sym1__ = 1; sym1__ <= stan::math::size(vs); ++sym1__) {
        {
          std::vector<int> v;
          current_statement__ = 650;
          assign(v, vs[(sym1__ - 1)], "assigning variable v");
          current_statement__ = 651;
          z = 0;
          continue;
        }
      }
      current_statement__ = 653;
      for (int sym1__ = 1; sym1__ <= stan::math::size(vs); ++sym1__) {
        {
          std::vector<int> v;
          current_statement__ = 653;
          assign(v, vs[(sym1__ - 1)], "assigning variable v");
          current_statement__ = 654;
          for (int sym1__ = 1; sym1__ <= stan::math::size(v); ++sym1__) {
            {
              int vv;
              current_statement__ = 654;
              vv = v[(sym1__ - 1)];
              current_statement__ = 655;
              z = 0;
              break;
            }
          }
          current_statement__ = 657;
          z = 1;
        }
      }
    }
    current_statement__ = 669;
    while (1) {
      local_scalar_t__ z = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, -1> vs = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(2, 3, DUMMY_VAR__);
                                                   
      
      current_statement__ = 662;
      for (int sym1__ = 1; sym1__ <= rows(vs); ++sym1__) {
        current_statement__ = 662;
        for (int sym2__ = 1;
             sym2__ <= stan::math::size(rvalue(vs, "vs", index_uni(sym1__)));
             ++sym2__) {
          {
            local_scalar_t__ v;
            current_statement__ = 662;
            v = rvalue(vs, "vs", index_uni(sym1__), index_uni(sym2__));
            current_statement__ = 663;
            z = 0;
            break;
          }
        }
      }
      current_statement__ = 665;
      for (int sym1__ = 1; sym1__ <= rows(vs); ++sym1__) {
        current_statement__ = 665;
        for (int sym2__ = 1;
             sym2__ <= stan::math::size(rvalue(vs, "vs", index_uni(sym1__)));
             ++sym2__) {
          {
            local_scalar_t__ v;
            current_statement__ = 665;
            v = rvalue(vs, "vs", index_uni(sym1__), index_uni(sym2__));
            current_statement__ = 666;
            z = 3.1;
            continue;
          }
        }
      }
    }
    current_statement__ = 679;
    while (1) {
      local_scalar_t__ z = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> vs = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
                                                  
      
      current_statement__ = 672;
      for (int sym1__ = 1; sym1__ <= stan::math::size(vs); ++sym1__) {
        {
          local_scalar_t__ v;
          current_statement__ = 672;
          v = vs[(sym1__ - 1)];
          current_statement__ = 673;
          z = 0;
          break;
        }
      }
      current_statement__ = 675;
      for (int sym1__ = 1; sym1__ <= stan::math::size(vs); ++sym1__) {
        {
          local_scalar_t__ v;
          current_statement__ = 675;
          v = vs[(sym1__ - 1)];
          current_statement__ = 676;
          z = 3.2;
          continue;
        }
      }
    }
    current_statement__ = 689;
    while (1) {
      local_scalar_t__ z = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, 1, -1> vs = Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(2, DUMMY_VAR__);
                                                  
      
      current_statement__ = 682;
      for (int sym1__ = 1; sym1__ <= stan::math::size(vs); ++sym1__) {
        {
          local_scalar_t__ v;
          current_statement__ = 682;
          v = vs[(sym1__ - 1)];
          current_statement__ = 683;
          z = 0;
          break;
        }
      }
      current_statement__ = 685;
      for (int sym1__ = 1; sym1__ <= stan::math::size(vs); ++sym1__) {
        {
          local_scalar_t__ v;
          current_statement__ = 685;
          v = vs[(sym1__ - 1)];
          current_statement__ = 686;
          z = 3.3;
          continue;
        }
      }
    }
    current_statement__ = 697;
    while (1) {
      int b = std::numeric_limits<int>::min();
      
      current_statement__ = 691;
      b = 5;
      {
        int c = std::numeric_limits<int>::min();
        
        current_statement__ = 693;
        c = 6;
        break;
      }
    }
    current_statement__ = 698;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_1_functor__ {
int
operator()(const int& a, std::ostream* pstream__)  const 
{
return foo_1(a, pstream__);
}
};

int
foo_2(const int& a, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> vs = std::vector<int>(2, std::numeric_limits<int>::min());
                          
    
    int y = std::numeric_limits<int>::min();
    
    current_statement__ = 702;
    for (int sym1__ = 1; sym1__ <= stan::math::size(vs); ++sym1__) {
      {
        int v;
        current_statement__ = 702;
        v = vs[(sym1__ - 1)];
        current_statement__ = 703;
        y = v;
      }
    }
    current_statement__ = 704;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_2_functor__ {
int
operator()(const int& a, std::ostream* pstream__)  const 
{
return foo_2(a, pstream__);
}
};

template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
foo_3(const T0__& t, const int& n, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 706;
    return rep_array(t, n);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_3_functor__ {
template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
operator()(const T0__& t, const int& n, std::ostream* pstream__)  const 
{
return foo_3(t, n, pstream__);
}
};

template <bool propto__, typename T0__, typename T_lp__,
typename T_lp_accum__>
stan::promote_args_t<T0__>
foo_lp(const T0__& x, T_lp__& lp__, T_lp_accum__& lp_accum__,
       std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 708;
    return (x + get_lp(lp__, lp_accum__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_lp_functor__ {
template <bool propto__, typename T0__, typename T_lp__,
typename T_lp_accum__>
stan::promote_args_t<T0__>
operator()(const T0__& x, T_lp__& lp__, T_lp_accum__& lp_accum__,
           std::ostream* pstream__)  const 
{
return foo_lp<propto__>(x, lp__, lp_accum__, pstream__);
}
};

template <typename T0__>
void
foo_4(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 710;
    std::stringstream errmsg_stream__;
    errmsg_stream__ << "user-specified rejection";
    errmsg_stream__ << x;
    throw std::domain_error(errmsg_stream__.str());
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_4_functor__ {
template <typename T0__>
void
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return foo_4(x, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
relative_diff(const T0__& x, const T1__& y, const T2__& max_,
              const T3__& min_, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ abs_diff = DUMMY_VAR__;
    
    local_scalar_t__ avg_scale = DUMMY_VAR__;
    
    current_statement__ = 714;
    abs_diff = stan::math::fabs((x - y));
    current_statement__ = 715;
    avg_scale = ((stan::math::fabs(x) + stan::math::fabs(y)) / 2);
    current_statement__ = 717;
    if (logical_gt((abs_diff / avg_scale), max_)) {
      current_statement__ = 716;
      std::stringstream errmsg_stream__;
      errmsg_stream__ << "user-specified rejection, difference above ";
      errmsg_stream__ << max_;
      errmsg_stream__ << " x:";
      errmsg_stream__ << x;
      errmsg_stream__ << " y:";
      errmsg_stream__ << y;
      throw std::domain_error(errmsg_stream__.str());
    } 
    current_statement__ = 719;
    if (logical_lt((abs_diff / avg_scale), min_)) {
      current_statement__ = 718;
      std::stringstream errmsg_stream__;
      errmsg_stream__ << "user-specified rejection, difference below ";
      errmsg_stream__ << min_;
      errmsg_stream__ << " x:";
      errmsg_stream__ << x;
      errmsg_stream__ << " y:";
      errmsg_stream__ << y;
      throw std::domain_error(errmsg_stream__.str());
    } 
    current_statement__ = 720;
    return (abs_diff / avg_scale);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct relative_diff_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& x, const T1__& y, const T2__& max_, const T3__& min_,
           std::ostream* pstream__)  const 
{
return relative_diff(x, y, max_, min_, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
foo_5(const T0__& shared_params_arg__, const T1__& job_params_arg__,
      const std::vector<double>& data_r, const std::vector<int>& data_i,
      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  int current_statement__ = 0; 
  const auto& shared_params = to_ref(shared_params_arg__);
  const auto& job_params = to_ref(job_params_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 722;
    return (Eigen::Matrix<double,-1,1>(3) << 1, 2, 3).finished();
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_5_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& shared_params, const T1__& job_params,
           const std::vector<double>& data_r, const std::vector<int>& data_i,
           std::ostream* pstream__)  const 
{
return foo_5(shared_params, job_params, data_r, data_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
foo_five_args(const T0__& x1, const T1__& x2, const T2__& x3, const T3__& x4,
              const T4__& x5, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 724;
    return x1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_five_args_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
operator()(const T0__& x1, const T1__& x2, const T2__& x3, const T3__& x4,
           const T4__& x5, std::ostream* pstream__)  const 
{
return foo_five_args(x1, x2, x3, x4, x5, pstream__);
}
};

template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__, typename T5__, typename T_lp__,
typename T_lp_accum__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__, stan::promote_args_t<T5__>>
foo_five_args_lp(const T0__& x1, const T1__& x2, const T2__& x3,
                 const T3__& x4, const T4__& x5, const T5__& x6,
                 T_lp__& lp__, T_lp_accum__& lp_accum__,
                 std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__, stan::promote_args_t<T5__>>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 726;
    return x1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_five_args_lp_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__, typename T5__, typename T_lp__,
typename T_lp_accum__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__, stan::promote_args_t<T5__>>
operator()(const T0__& x1, const T1__& x2, const T2__& x3, const T3__& x4,
           const T4__& x5, const T5__& x6, T_lp__& lp__,
           T_lp_accum__& lp_accum__, std::ostream* pstream__)  const 
{
return foo_five_args_lp<propto__>(x1, x2, x3, x4, x5, x6, lp__, lp_accum__,
         pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
covsqrt2corsqrt(const T0__& mat_arg__, const int& invert,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  int current_statement__ = 0; 
  const auto& mat = to_ref(mat_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 728;
    validate_non_negative_index("o", "rows(mat)", rows(mat));
    current_statement__ = 729;
    validate_non_negative_index("o", "cols(mat)", cols(mat));
    Eigen::Matrix<local_scalar_t__, -1, -1> o = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(
                                                  rows(mat), cols(mat), DUMMY_VAR__);
                                                
    
    current_statement__ = 731;
    assign(o, mat, "assigning variable o");
    current_statement__ = 732;
    assign(o, rvalue(o, "o", index_uni(2)),
      "assigning variable o", index_uni(1));
    current_statement__ = 733;
    assign(o, rvalue(o, "o", index_min_max(1, 2)),
      "assigning variable o", index_min_max(3, 4));
    current_statement__ = 734;
    return o;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct covsqrt2corsqrt_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
operator()(const T0__& mat, const int& invert, std::ostream* pstream__)  const 
{
return covsqrt2corsqrt(mat, invert, pstream__);
}
};

template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
void
f0(const int& a1, const std::vector<int>& a2,
   const std::vector<std::vector<int>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const T6__& a7_arg__, const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const T9__& a10_arg__,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          stan::value_type_t<T6__>,
          T7__, stan::promote_args_t<T8__,
          stan::value_type_t<T9__>,
          T10__,
          T11__>>;
  int current_statement__ = 0; 
  const auto& a7 = to_ref(a7_arg__);
  const auto& a10 = to_ref(a10_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 736;
    if (pstream__) {
      stan_print(pstream__, "hi");
      stan_print(pstream__, "\n");
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f0_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
void
operator()(const int& a1, const std::vector<int>& a2,
           const std::vector<std::vector<int>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6, const T6__& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const T9__& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
int
f1(const int& a1, const std::vector<int>& a2,
   const std::vector<std::vector<int>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const T6__& a7_arg__, const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const T9__& a10_arg__,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          stan::value_type_t<T6__>,
          T7__, stan::promote_args_t<T8__,
          stan::value_type_t<T9__>,
          T10__,
          T11__>>;
  int current_statement__ = 0; 
  const auto& a7 = to_ref(a7_arg__);
  const auto& a10 = to_ref(a10_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 738;
    return a1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f1_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
int
operator()(const int& a1, const std::vector<int>& a2,
           const std::vector<std::vector<int>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6, const T6__& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const T9__& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f1(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<int>
f2(const int& a1, const std::vector<int>& a2,
   const std::vector<std::vector<int>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const T6__& a7_arg__, const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const T9__& a10_arg__,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          stan::value_type_t<T6__>,
          T7__, stan::promote_args_t<T8__,
          stan::value_type_t<T9__>,
          T10__,
          T11__>>;
  int current_statement__ = 0; 
  const auto& a7 = to_ref(a7_arg__);
  const auto& a10 = to_ref(a10_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 740;
    return a2;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f2_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<int>
operator()(const int& a1, const std::vector<int>& a2,
           const std::vector<std::vector<int>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6, const T6__& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const T9__& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f2(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<std::vector<int>>
f3(const int& a1, const std::vector<int>& a2,
   const std::vector<std::vector<int>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const T6__& a7_arg__, const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const T9__& a10_arg__,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          stan::value_type_t<T6__>,
          T7__, stan::promote_args_t<T8__,
          stan::value_type_t<T9__>,
          T10__,
          T11__>>;
  int current_statement__ = 0; 
  const auto& a7 = to_ref(a7_arg__);
  const auto& a10 = to_ref(a10_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 742;
    return a3;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f3_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<std::vector<int>>
operator()(const int& a1, const std::vector<int>& a2,
           const std::vector<std::vector<int>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6, const T6__& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const T9__& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f3(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>
f4(const int& a1, const std::vector<int>& a2,
   const std::vector<std::vector<int>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const T6__& a7_arg__, const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const T9__& a10_arg__,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          stan::value_type_t<T6__>,
          T7__, stan::promote_args_t<T8__,
          stan::value_type_t<T9__>,
          T10__,
          T11__>>;
  int current_statement__ = 0; 
  const auto& a7 = to_ref(a7_arg__);
  const auto& a10 = to_ref(a10_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 744;
    return a4;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f4_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>
operator()(const int& a1, const std::vector<int>& a2,
           const std::vector<std::vector<int>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6, const T6__& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const T9__& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>>
f5(const int& a1, const std::vector<int>& a2,
   const std::vector<std::vector<int>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const T6__& a7_arg__, const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const T9__& a10_arg__,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          stan::value_type_t<T6__>,
          T7__, stan::promote_args_t<T8__,
          stan::value_type_t<T9__>,
          T10__,
          T11__>>;
  int current_statement__ = 0; 
  const auto& a7 = to_ref(a7_arg__);
  const auto& a10 = to_ref(a10_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 746;
    return a5;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f5_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>>
operator()(const int& a1, const std::vector<int>& a2,
           const std::vector<std::vector<int>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6, const T6__& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const T9__& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f5(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<std::vector<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>>>
f6(const int& a1, const std::vector<int>& a2,
   const std::vector<std::vector<int>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const T6__& a7_arg__, const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const T9__& a10_arg__,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          stan::value_type_t<T6__>,
          T7__, stan::promote_args_t<T8__,
          stan::value_type_t<T9__>,
          T10__,
          T11__>>;
  int current_statement__ = 0; 
  const auto& a7 = to_ref(a7_arg__);
  const auto& a10 = to_ref(a10_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 748;
    return a6;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f6_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<std::vector<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>>>
operator()(const int& a1, const std::vector<int>& a2,
           const std::vector<std::vector<int>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6, const T6__& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const T9__& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f6(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
Eigen::Matrix<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>, -1, 1>
f7(const int& a1, const std::vector<int>& a2,
   const std::vector<std::vector<int>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const T6__& a7_arg__, const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const T9__& a10_arg__,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          stan::value_type_t<T6__>,
          T7__, stan::promote_args_t<T8__,
          stan::value_type_t<T9__>,
          T10__,
          T11__>>;
  int current_statement__ = 0; 
  const auto& a7 = to_ref(a7_arg__);
  const auto& a10 = to_ref(a10_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 750;
    return a7;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f7_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
Eigen::Matrix<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>, -1, 1>
operator()(const int& a1, const std::vector<int>& a2,
           const std::vector<std::vector<int>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6, const T6__& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const T9__& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f7(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<Eigen::Matrix<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>, -1, 1>>
f8(const int& a1, const std::vector<int>& a2,
   const std::vector<std::vector<int>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const T6__& a7_arg__, const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const T9__& a10_arg__,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          stan::value_type_t<T6__>,
          T7__, stan::promote_args_t<T8__,
          stan::value_type_t<T9__>,
          T10__,
          T11__>>;
  int current_statement__ = 0; 
  const auto& a7 = to_ref(a7_arg__);
  const auto& a10 = to_ref(a10_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 752;
    return a8;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f8_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<Eigen::Matrix<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>, -1, 1>>
operator()(const int& a1, const std::vector<int>& a2,
           const std::vector<std::vector<int>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6, const T6__& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const T9__& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<std::vector<Eigen::Matrix<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>, -1, 1>>>
f9(const int& a1, const std::vector<int>& a2,
   const std::vector<std::vector<int>>& a3, const T3__& a4,
   const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
   const T6__& a7_arg__, const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
   const T9__& a10_arg__,
   const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
   const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          stan::value_type_t<T6__>,
          T7__, stan::promote_args_t<T8__,
          stan::value_type_t<T9__>,
          T10__,
          T11__>>;
  int current_statement__ = 0; 
  const auto& a7 = to_ref(a7_arg__);
  const auto& a10 = to_ref(a10_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 754;
    return a9;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f9_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<std::vector<Eigen::Matrix<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>, -1, 1>>>
operator()(const int& a1, const std::vector<int>& a2,
           const std::vector<std::vector<int>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6, const T6__& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const T9__& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f9(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
Eigen::Matrix<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>, -1, -1>
f10(const int& a1, const std::vector<int>& a2,
    const std::vector<std::vector<int>>& a3, const T3__& a4,
    const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
    const T6__& a7_arg__, const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
    const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
    const T9__& a10_arg__,
    const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
    const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          stan::value_type_t<T6__>,
          T7__, stan::promote_args_t<T8__,
          stan::value_type_t<T9__>,
          T10__,
          T11__>>;
  int current_statement__ = 0; 
  const auto& a7 = to_ref(a7_arg__);
  const auto& a10 = to_ref(a10_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 756;
    return a10;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f10_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
Eigen::Matrix<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>, -1, -1>
operator()(const int& a1, const std::vector<int>& a2,
           const std::vector<std::vector<int>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6, const T6__& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const T9__& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f10(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<Eigen::Matrix<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>, -1, -1>>
f11(const int& a1, const std::vector<int>& a2,
    const std::vector<std::vector<int>>& a3, const T3__& a4,
    const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
    const T6__& a7_arg__, const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
    const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
    const T9__& a10_arg__,
    const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
    const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          stan::value_type_t<T6__>,
          T7__, stan::promote_args_t<T8__,
          stan::value_type_t<T9__>,
          T10__,
          T11__>>;
  int current_statement__ = 0; 
  const auto& a7 = to_ref(a7_arg__);
  const auto& a10 = to_ref(a10_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 758;
    return a11;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f11_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<Eigen::Matrix<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>, -1, -1>>
operator()(const int& a1, const std::vector<int>& a2,
           const std::vector<std::vector<int>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6, const T6__& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const T9__& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f11(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<std::vector<Eigen::Matrix<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>, -1, -1>>>
f12(const int& a1, const std::vector<int>& a2,
    const std::vector<std::vector<int>>& a3, const T3__& a4,
    const std::vector<T4__>& a5, const std::vector<std::vector<T5__>>& a6,
    const T6__& a7_arg__, const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
    const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
    const T9__& a10_arg__,
    const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
    const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          stan::value_type_t<T6__>,
          T7__, stan::promote_args_t<T8__,
          stan::value_type_t<T9__>,
          T10__,
          T11__>>;
  int current_statement__ = 0; 
  const auto& a7 = to_ref(a7_arg__);
  const auto& a10 = to_ref(a10_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 760;
    return a12;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f12_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<std::vector<Eigen::Matrix<stan::promote_args_t<T3__, T4__, T5__, stan::value_type_t<T6__>,
T7__, stan::promote_args_t<T8__, stan::value_type_t<T9__>, T10__,
T11__>>, -1, -1>>>
operator()(const int& a1, const std::vector<int>& a2,
           const std::vector<std::vector<int>>& a3, const T3__& a4,
           const std::vector<T4__>& a5,
           const std::vector<std::vector<T5__>>& a6, const T6__& a7,
           const std::vector<Eigen::Matrix<T7__, -1, 1>>& a8,
           const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& a9,
           const T9__& a10,
           const std::vector<Eigen::Matrix<T10__, -1, -1>>& a11,
           const std::vector<std::vector<Eigen::Matrix<T11__, -1, -1>>>& a12,
           std::ostream* pstream__)  const 
{
return f12(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, pstream__);
}
};

void
foo_6(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int a = std::numeric_limits<int>::min();
    
    local_scalar_t__ b = DUMMY_VAR__;
    
    std::vector<std::vector<local_scalar_t__>> c = std::vector<std::vector<local_scalar_t__>>(20, std::vector<local_scalar_t__>(30, DUMMY_VAR__));
                                                   
    
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> ar_mat = 
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(60, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(70, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(40, 50, DUMMY_VAR__)));
    
    
    current_statement__ = 766;
    assign(ar_mat, b,
      "assigning variable ar_mat", index_uni(1), index_uni(1), index_uni(1),
                                     index_uni(1));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_6_functor__ {
void
operator()(std::ostream* pstream__)  const 
{
return foo_6(pstream__);
}
};

Eigen::Matrix<double, -1, -1>
matfoo(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 768;
    return stan::math::to_matrix(std::vector<Eigen::Matrix<double, 1, -1>>{
        (Eigen::Matrix<double,1,-1>(10) << 1, 2, 3, 4, 5, 6, 7, 8, 9,
        10).finished(), (Eigen::Matrix<double,1,-1>(10) << 1, 2, 3, 4, 5, 6,
        7, 8, 9, 10).finished(), (Eigen::Matrix<double,1,-1>(10) << 1, 2, 3,
        4, 5, 6, 7, 8, 9, 10).finished()});
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct matfoo_functor__ {
Eigen::Matrix<double, -1, -1>
operator()(std::ostream* pstream__)  const 
{
return matfoo(pstream__);
}
};

Eigen::Matrix<double, -1, 1>
vecfoo(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 770;
    return (Eigen::Matrix<double,-1,1>(10) << 1, 2, 3, 4, 5, 6, 7, 8, 9,
        10).finished();
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct vecfoo_functor__ {
Eigen::Matrix<double, -1, 1>
operator()(std::ostream* pstream__)  const 
{
return vecfoo(pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
vecmufoo(const T0__& mu, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> l = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(10, DUMMY_VAR__);
                                               
    
    current_statement__ = 772;
    assign(l, multiply(mu, vecfoo(pstream__)), "assigning variable l");
    current_statement__ = 773;
    return l;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct vecmufoo_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
operator()(const T0__& mu, std::ostream* pstream__)  const 
{
return vecmufoo(mu, pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
vecmubar(const T0__& mu, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> l = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(10, DUMMY_VAR__);
                                               
    
    current_statement__ = 775;
    assign(l,
      multiply(mu, (Eigen::Matrix<double,-1,1>(10) << 1, 2, 3, 4, 5, 6, 7, 8,
        9, 10).finished()), "assigning variable l");
    current_statement__ = 776;
    return rvalue(l, "l", index_multi(std::vector<int>{1, 2, 3, 4, 5}));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct vecmubar_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
operator()(const T0__& mu, std::ostream* pstream__)  const 
{
return vecmubar(mu, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
algebra_system(const T0__& x_arg__, const T1__& y_arg__,
               const std::vector<T2__>& dat, const std::vector<int>& dat_int,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& x = to_ref(x_arg__);
  const auto& y = to_ref(y_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> f_x = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
                                                 
    
    current_statement__ = 779;
    assign(f_x,
      (rvalue(x, "x", index_uni(1)) - rvalue(y, "y", index_uni(1))),
      "assigning variable f_x", index_uni(1));
    current_statement__ = 780;
    assign(f_x,
      (rvalue(x, "x", index_uni(2)) - rvalue(y, "y", index_uni(2))),
      "assigning variable f_x", index_uni(2));
    current_statement__ = 781;
    return f_x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct algebra_system_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& x, const T1__& y, const std::vector<T2__>& dat,
           const std::vector<int>& dat_int, std::ostream* pstream__)  const 
{
return algebra_system(x, y, dat, dat_int, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
binomialf(const T0__& phi_arg__, const T1__& theta_arg__,
          const std::vector<double>& x_r, const std::vector<int>& x_i,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  int current_statement__ = 0; 
  const auto& phi = to_ref(phi_arg__);
  const auto& theta = to_ref(theta_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> lpmf = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(1, DUMMY_VAR__);
                                                  
    
    current_statement__ = 784;
    assign(lpmf, 0.0, "assigning variable lpmf", index_uni(1));
    current_statement__ = 785;
    return lpmf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct binomialf_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& phi, const T1__& theta,
           const std::vector<double>& x_r, const std::vector<int>& x_i,
           std::ostream* pstream__)  const 
{
return binomialf(phi, theta, x_r, x_i, pstream__);
}
};

class mother_model final : public model_base_crtp<mother_model> {

 private:
  int N;
  int M;
  int K;
  std::vector<int> d_int_1d_ar;
  std::vector<std::vector<std::vector<int>>> d_int_3d_ar;
  double J;
  std::vector<double> d_real_1d_ar;
  std::vector<std::vector<std::vector<double>>> d_real_3d_ar;
  Eigen::Matrix<double, -1, 1> d_vec__;
  std::vector<Eigen::Matrix<double, -1, 1>> d_1d_vec;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> d_3d_vec;
  Eigen::Matrix<double, 1, -1> d_row_vec__;
  std::vector<Eigen::Matrix<double, 1, -1>> d_1d_row_vec;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> d_3d_row_vec;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> d_ar_mat;
  Eigen::Matrix<double, -1, 1> d_simplex__;
  std::vector<Eigen::Matrix<double, -1, 1>> d_1d_simplex;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> d_3d_simplex;
  Eigen::Matrix<double, -1, -1> d_cfcov_54__;
  Eigen::Matrix<double, -1, -1> d_cfcov_33__;
  std::vector<Eigen::Matrix<double, -1, -1>> d_cfcov_33_ar;
  int d_int;
  std::vector<int> d_int_array;
  std::vector<std::vector<int>> d_int_array_2d;
  std::vector<std::vector<std::vector<int>>> d_int_array_3d;
  double d_real;
  std::vector<double> d_real_array;
  std::vector<std::vector<double>> d_real_array_2d;
  std::vector<std::vector<std::vector<double>>> d_real_array_3d;
  Eigen::Matrix<double, -1, -1> d_matrix__;
  std::vector<Eigen::Matrix<double, -1, -1>> d_matrix_array;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> d_matrix_array_2d;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>> d_matrix_array_3d;
  Eigen::Matrix<double, -1, 1> d_vector__;
  std::vector<Eigen::Matrix<double, -1, 1>> d_vector_array;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> d_vector_array_2d;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> d_vector_array_3d;
  Eigen::Matrix<double, 1, -1> d_row_vector__;
  std::vector<Eigen::Matrix<double, 1, -1>> d_row_vector_array;
  std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> d_row_vector_array_2d;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> d_row_vector_array_3d;
  int td_int;
  std::vector<int> td_1d;
  std::vector<int> td_1dk;
  int td_a;
  double td_b;
  double td_c;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> td_ar_mat;
  Eigen::Matrix<double, -1, 1> td_simplex__;
  std::vector<Eigen::Matrix<double, -1, 1>> td_1d_simplex;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> td_3d_simplex;
  Eigen::Matrix<double, -1, -1> td_cfcov_54__;
  Eigen::Matrix<double, -1, -1> td_cfcov_33__;
  Eigen::Matrix<double, -1, 1> x__;
  Eigen::Matrix<double, -1, 1> y__;
  std::vector<double> dat;
  std::vector<int> dat_int;
  std::vector<std::vector<double>> x_r;
  std::vector<std::vector<int>> x_i;
  std::vector<std::vector<int>> arr_mul_ind;
  std::vector<double> x_mul_ind;
  double transformed_data_real;
  std::vector<double> transformed_data_real_array;
  std::vector<std::vector<double>> transformed_data_real_array_2d;
  std::vector<std::vector<std::vector<double>>> transformed_data_real_array_3d;
  Eigen::Matrix<double, -1, -1> transformed_data_matrix__;
  std::vector<Eigen::Matrix<double, -1, -1>> transformed_data_matrix_array;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> transformed_data_matrix_array_2d;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>> transformed_data_matrix_array_3d;
  Eigen::Matrix<double, -1, 1> transformed_data_vector__;
  std::vector<Eigen::Matrix<double, -1, 1>> transformed_data_vector_array;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> transformed_data_vector_array_2d;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> transformed_data_vector_array_3d;
  Eigen::Matrix<double, 1, -1> transformed_data_row_vector__;
  std::vector<Eigen::Matrix<double, 1, -1>> transformed_data_row_vector_array;
  std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> transformed_data_row_vector_array_2d;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> transformed_data_row_vector_array_3d; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> d_vec{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> d_row_vec{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> d_simplex{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> d_cfcov_54{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> d_cfcov_33{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> d_matrix{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> d_vector{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> d_row_vector{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> td_simplex{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> td_cfcov_54{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> td_cfcov_33{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> transformed_data_matrix{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> transformed_data_vector{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> transformed_data_row_vector{nullptr, 0};
 
 public:
  ~mother_model() { }
  
  inline std::string model_name() const final { return "mother_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  mother_model(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "mother_model_namespace::mother_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 190;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 190;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 190;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 191;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 191;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 191;
      check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 192;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 192;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 192;
      check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 192;
      check_less_or_equal(function__, "K", K, (N * M));
      current_statement__ = 193;
      validate_non_negative_index("d_int_1d_ar", "N", N);
      current_statement__ = 194;
      context__.validate_dims("data initialization","d_int_1d_ar","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      d_int_1d_ar = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 194;
      d_int_1d_ar = context__.vals_i("d_int_1d_ar");
      current_statement__ = 194;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 194;
        check_less_or_equal(function__, "d_int_1d_ar[sym1__]",
                            d_int_1d_ar[(sym1__ - 1)], N);
      }
      current_statement__ = 195;
      validate_non_negative_index("d_int_3d_ar", "N", N);
      current_statement__ = 196;
      validate_non_negative_index("d_int_3d_ar", "M", M);
      current_statement__ = 197;
      validate_non_negative_index("d_int_3d_ar", "K", K);
      current_statement__ = 198;
      context__.validate_dims("data initialization","d_int_3d_ar","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(M), static_cast<size_t>(K)});
      d_int_3d_ar = std::vector<std::vector<std::vector<int>>>(N, std::vector<std::vector<int>>(M, std::vector<int>(K, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> d_int_3d_ar_flat__;
        current_statement__ = 198;
        d_int_3d_ar_flat__ = context__.vals_i("d_int_3d_ar");
        current_statement__ = 198;
        pos__ = 1;
        current_statement__ = 198;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 198;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 198;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 198;
              assign(d_int_3d_ar, d_int_3d_ar_flat__[(pos__ - 1)],
                "assigning variable d_int_3d_ar", index_uni(sym3__),
                                                    index_uni(sym2__),
                                                    index_uni(sym1__));
              current_statement__ = 198;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 198;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 198;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 198;
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 198;
            check_less_or_equal(function__, "d_int_3d_ar[sym1__, sym2__, sym3__]",
                                d_int_3d_ar[(sym1__ - 1)][(sym2__ - 1)][
                                (sym3__ - 1)], N);
          }
        }
      }
      current_statement__ = 199;
      context__.validate_dims("data initialization","J","double",
           std::vector<size_t>{});
      J = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 199;
      J = context__.vals_r("J")[(1 - 1)];
      current_statement__ = 199;
      check_greater_or_equal(function__, "J", J, -2.0);
      current_statement__ = 199;
      check_less_or_equal(function__, "J", J, 2.0);
      current_statement__ = 200;
      validate_non_negative_index("d_real_1d_ar", "N", N);
      current_statement__ = 201;
      context__.validate_dims("data initialization","d_real_1d_ar","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      d_real_1d_ar = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 201;
      d_real_1d_ar = context__.vals_r("d_real_1d_ar");
      current_statement__ = 202;
      validate_non_negative_index("d_real_3d_ar", "N", N);
      current_statement__ = 203;
      validate_non_negative_index("d_real_3d_ar", "M", M);
      current_statement__ = 204;
      validate_non_negative_index("d_real_3d_ar", "K", K);
      current_statement__ = 205;
      context__.validate_dims("data initialization","d_real_3d_ar","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(M), static_cast<size_t>(K)});
      d_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> d_real_3d_ar_flat__;
        current_statement__ = 205;
        d_real_3d_ar_flat__ = context__.vals_r("d_real_3d_ar");
        current_statement__ = 205;
        pos__ = 1;
        current_statement__ = 205;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 205;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 205;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 205;
              assign(d_real_3d_ar, d_real_3d_ar_flat__[(pos__ - 1)],
                "assigning variable d_real_3d_ar", index_uni(sym3__),
                                                     index_uni(sym2__),
                                                     index_uni(sym1__));
              current_statement__ = 205;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 206;
      validate_non_negative_index("d_vec", "N", N);
      current_statement__ = 207;
      context__.validate_dims("data initialization","d_vec","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      d_vec__ = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
      new (&d_vec) Eigen::Map<Eigen::Matrix<double, -1, 1>>(d_vec__.data(), N);
      
      
      {
        std::vector<local_scalar_t__> d_vec_flat__;
        current_statement__ = 207;
        d_vec_flat__ = context__.vals_r("d_vec");
        current_statement__ = 207;
        pos__ = 1;
        current_statement__ = 207;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 207;
          assign(d_vec, d_vec_flat__[(pos__ - 1)],
            "assigning variable d_vec", index_uni(sym1__));
          current_statement__ = 207;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 208;
      validate_non_negative_index("d_1d_vec", "N", N);
      current_statement__ = 209;
      validate_non_negative_index("d_1d_vec", "N", N);
      current_statement__ = 210;
      context__.validate_dims("data initialization","d_1d_vec","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N)});
      d_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> d_1d_vec_flat__;
        current_statement__ = 210;
        d_1d_vec_flat__ = context__.vals_r("d_1d_vec");
        current_statement__ = 210;
        pos__ = 1;
        current_statement__ = 210;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 210;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 210;
            assign(d_1d_vec, d_1d_vec_flat__[(pos__ - 1)],
              "assigning variable d_1d_vec", index_uni(sym2__),
                                               index_uni(sym1__));
            current_statement__ = 210;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 211;
      validate_non_negative_index("d_3d_vec", "N", N);
      current_statement__ = 212;
      validate_non_negative_index("d_3d_vec", "M", M);
      current_statement__ = 213;
      validate_non_negative_index("d_3d_vec", "K", K);
      current_statement__ = 214;
      validate_non_negative_index("d_3d_vec", "N", N);
      current_statement__ = 215;
      context__.validate_dims("data initialization","d_3d_vec","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(M), static_cast<size_t>(K),
            static_cast<size_t>(N)});
      d_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      {
        std::vector<local_scalar_t__> d_3d_vec_flat__;
        current_statement__ = 215;
        d_3d_vec_flat__ = context__.vals_r("d_3d_vec");
        current_statement__ = 215;
        pos__ = 1;
        current_statement__ = 215;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 215;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 215;
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              current_statement__ = 215;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 215;
                assign(d_3d_vec, d_3d_vec_flat__[(pos__ - 1)],
                  "assigning variable d_3d_vec", index_uni(sym4__),
                                                   index_uni(sym3__),
                                                   index_uni(sym2__),
                                                   index_uni(sym1__));
                current_statement__ = 215;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 216;
      validate_non_negative_index("d_row_vec", "N", N);
      current_statement__ = 217;
      context__.validate_dims("data initialization","d_row_vec","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      d_row_vec__ = Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
      new (&d_row_vec) Eigen::Map<Eigen::Matrix<double, 1, -1>>(d_row_vec__.data(), N);
      
      
      {
        std::vector<local_scalar_t__> d_row_vec_flat__;
        current_statement__ = 217;
        d_row_vec_flat__ = context__.vals_r("d_row_vec");
        current_statement__ = 217;
        pos__ = 1;
        current_statement__ = 217;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 217;
          assign(d_row_vec, d_row_vec_flat__[(pos__ - 1)],
            "assigning variable d_row_vec", index_uni(sym1__));
          current_statement__ = 217;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 218;
      validate_non_negative_index("d_1d_row_vec", "N", N);
      current_statement__ = 219;
      validate_non_negative_index("d_1d_row_vec", "N", N);
      current_statement__ = 220;
      context__.validate_dims("data initialization","d_1d_row_vec","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N)});
      d_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> d_1d_row_vec_flat__;
        current_statement__ = 220;
        d_1d_row_vec_flat__ = context__.vals_r("d_1d_row_vec");
        current_statement__ = 220;
        pos__ = 1;
        current_statement__ = 220;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 220;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 220;
            assign(d_1d_row_vec, d_1d_row_vec_flat__[(pos__ - 1)],
              "assigning variable d_1d_row_vec", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 220;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 221;
      validate_non_negative_index("d_3d_row_vec", "N", N);
      current_statement__ = 222;
      validate_non_negative_index("d_3d_row_vec", "M", M);
      current_statement__ = 223;
      validate_non_negative_index("d_3d_row_vec", "K", K);
      current_statement__ = 224;
      validate_non_negative_index("d_3d_row_vec", "N", N);
      current_statement__ = 225;
      context__.validate_dims("data initialization","d_3d_row_vec","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(M), static_cast<size_t>(K),
            static_cast<size_t>(N)});
      d_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      {
        std::vector<local_scalar_t__> d_3d_row_vec_flat__;
        current_statement__ = 225;
        d_3d_row_vec_flat__ = context__.vals_r("d_3d_row_vec");
        current_statement__ = 225;
        pos__ = 1;
        current_statement__ = 225;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 225;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 225;
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              current_statement__ = 225;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 225;
                assign(d_3d_row_vec, d_3d_row_vec_flat__[(pos__ - 1)],
                  "assigning variable d_3d_row_vec", index_uni(sym4__),
                                                       index_uni(sym3__),
                                                       index_uni(sym2__),
                                                       index_uni(sym1__));
                current_statement__ = 225;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 226;
      context__.validate_dims("data initialization","d_ar_mat","double",
           std::vector<size_t>{static_cast<size_t>(4),
            static_cast<size_t>(5), static_cast<size_t>(2),
            static_cast<size_t>(3)});
      d_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>::Constant(2, 3, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> d_ar_mat_flat__;
        current_statement__ = 226;
        d_ar_mat_flat__ = context__.vals_r("d_ar_mat");
        current_statement__ = 226;
        pos__ = 1;
        current_statement__ = 226;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 226;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 226;
            for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
              current_statement__ = 226;
              for (int sym4__ = 1; sym4__ <= 4; ++sym4__) {
                current_statement__ = 226;
                assign(d_ar_mat, d_ar_mat_flat__[(pos__ - 1)],
                  "assigning variable d_ar_mat", index_uni(sym4__),
                                                   index_uni(sym3__),
                                                   index_uni(sym2__),
                                                   index_uni(sym1__));
                current_statement__ = 226;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 226;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 226;
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 226;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 226;
            for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
              current_statement__ = 226;
              check_greater_or_equal(function__, "d_ar_mat[sym1__, sym2__, sym3__, sym4__]",
                                     rvalue(d_ar_mat, "d_ar_mat",
                                       index_uni(sym1__), index_uni(sym2__),
                                         index_uni(sym3__), index_uni(sym4__)),
                                     0);
            }
          }
        }
      }
      current_statement__ = 226;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 226;
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 226;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 226;
            for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
              current_statement__ = 226;
              check_less_or_equal(function__, "d_ar_mat[sym1__, sym2__, sym3__, sym4__]",
                                  rvalue(d_ar_mat, "d_ar_mat",
                                    index_uni(sym1__), index_uni(sym2__),
                                      index_uni(sym3__), index_uni(sym4__)),
                                  1);
            }
          }
        }
      }
      current_statement__ = 227;
      validate_non_negative_index("d_simplex", "N", N);
      current_statement__ = 228;
      context__.validate_dims("data initialization","d_simplex","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      d_simplex__ = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
      new (&d_simplex) Eigen::Map<Eigen::Matrix<double, -1, 1>>(d_simplex__.data(), N);
      
      
      {
        std::vector<local_scalar_t__> d_simplex_flat__;
        current_statement__ = 228;
        d_simplex_flat__ = context__.vals_r("d_simplex");
        current_statement__ = 228;
        pos__ = 1;
        current_statement__ = 228;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 228;
          assign(d_simplex, d_simplex_flat__[(pos__ - 1)],
            "assigning variable d_simplex", index_uni(sym1__));
          current_statement__ = 228;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 228;
      check_simplex(function__, "d_simplex", d_simplex);
      current_statement__ = 229;
      validate_non_negative_index("d_1d_simplex", "N", N);
      current_statement__ = 230;
      validate_non_negative_index("d_1d_simplex", "N", N);
      current_statement__ = 231;
      context__.validate_dims("data initialization","d_1d_simplex","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N)});
      d_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> d_1d_simplex_flat__;
        current_statement__ = 231;
        d_1d_simplex_flat__ = context__.vals_r("d_1d_simplex");
        current_statement__ = 231;
        pos__ = 1;
        current_statement__ = 231;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 231;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 231;
            assign(d_1d_simplex, d_1d_simplex_flat__[(pos__ - 1)],
              "assigning variable d_1d_simplex", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 231;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 231;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 231;
        check_simplex(function__, "d_1d_simplex[sym1__]",
                      d_1d_simplex[(sym1__ - 1)]);
      }
      current_statement__ = 232;
      validate_non_negative_index("d_3d_simplex", "N", N);
      current_statement__ = 233;
      validate_non_negative_index("d_3d_simplex", "M", M);
      current_statement__ = 234;
      validate_non_negative_index("d_3d_simplex", "K", K);
      current_statement__ = 235;
      validate_non_negative_index("d_3d_simplex", "N", N);
      current_statement__ = 236;
      context__.validate_dims("data initialization","d_3d_simplex","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(M), static_cast<size_t>(K),
            static_cast<size_t>(N)});
      d_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      {
        std::vector<local_scalar_t__> d_3d_simplex_flat__;
        current_statement__ = 236;
        d_3d_simplex_flat__ = context__.vals_r("d_3d_simplex");
        current_statement__ = 236;
        pos__ = 1;
        current_statement__ = 236;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 236;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 236;
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              current_statement__ = 236;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 236;
                assign(d_3d_simplex, d_3d_simplex_flat__[(pos__ - 1)],
                  "assigning variable d_3d_simplex", index_uni(sym4__),
                                                       index_uni(sym3__),
                                                       index_uni(sym2__),
                                                       index_uni(sym1__));
                current_statement__ = 236;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 236;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 236;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 236;
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 236;
            check_simplex(function__, "d_3d_simplex[sym1__, sym2__, sym3__]",
                          d_3d_simplex[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)]);
          }
        }
      }
      current_statement__ = 237;
      context__.validate_dims("data initialization","d_cfcov_54","double",
           std::vector<size_t>{static_cast<size_t>(5),
            static_cast<size_t>(4)});
      d_cfcov_54__ = Eigen::Matrix<double, -1, -1>::Constant(5, 4, std::numeric_limits<double>::quiet_NaN());
      new (&d_cfcov_54) Eigen::Map<Eigen::Matrix<double, -1, -1>>(d_cfcov_54__.data(), 5, 4);
      
      
      {
        std::vector<local_scalar_t__> d_cfcov_54_flat__;
        current_statement__ = 237;
        d_cfcov_54_flat__ = context__.vals_r("d_cfcov_54");
        current_statement__ = 237;
        pos__ = 1;
        current_statement__ = 237;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 237;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 237;
            assign(d_cfcov_54, d_cfcov_54_flat__[(pos__ - 1)],
              "assigning variable d_cfcov_54", index_uni(sym2__),
                                                 index_uni(sym1__));
            current_statement__ = 237;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 237;
      check_cholesky_factor(function__, "d_cfcov_54", d_cfcov_54);
      current_statement__ = 238;
      context__.validate_dims("data initialization","d_cfcov_33","double",
           std::vector<size_t>{static_cast<size_t>(3),
            static_cast<size_t>(3)});
      d_cfcov_33__ = Eigen::Matrix<double, -1, -1>::Constant(3, 3, std::numeric_limits<double>::quiet_NaN());
      new (&d_cfcov_33) Eigen::Map<Eigen::Matrix<double, -1, -1>>(d_cfcov_33__.data(), 3, 3);
      
      
      {
        std::vector<local_scalar_t__> d_cfcov_33_flat__;
        current_statement__ = 238;
        d_cfcov_33_flat__ = context__.vals_r("d_cfcov_33");
        current_statement__ = 238;
        pos__ = 1;
        current_statement__ = 238;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 238;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 238;
            assign(d_cfcov_33, d_cfcov_33_flat__[(pos__ - 1)],
              "assigning variable d_cfcov_33", index_uni(sym2__),
                                                 index_uni(sym1__));
            current_statement__ = 238;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 238;
      check_cholesky_factor(function__, "d_cfcov_33", d_cfcov_33);
      current_statement__ = 239;
      validate_non_negative_index("d_cfcov_33_ar", "K", K);
      current_statement__ = 240;
      context__.validate_dims("data initialization","d_cfcov_33_ar","double",
           std::vector<size_t>{static_cast<size_t>(K),
            static_cast<size_t>(3), static_cast<size_t>(3)});
      d_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>::Constant(3, 3, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> d_cfcov_33_ar_flat__;
        current_statement__ = 240;
        d_cfcov_33_ar_flat__ = context__.vals_r("d_cfcov_33_ar");
        current_statement__ = 240;
        pos__ = 1;
        current_statement__ = 240;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 240;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 240;
            for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
              current_statement__ = 240;
              assign(d_cfcov_33_ar, d_cfcov_33_ar_flat__[(pos__ - 1)],
                "assigning variable d_cfcov_33_ar", index_uni(sym3__),
                                                      index_uni(sym2__),
                                                      index_uni(sym1__));
              current_statement__ = 240;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 240;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 240;
        check_cholesky_factor(function__, "d_cfcov_33_ar[sym1__]",
                              d_cfcov_33_ar[(sym1__ - 1)]);
      }
      current_statement__ = 241;
      context__.validate_dims("data initialization","d_int","int",
           std::vector<size_t>{});
      d_int = std::numeric_limits<int>::min();
      
      current_statement__ = 241;
      d_int = context__.vals_i("d_int")[(1 - 1)];
      current_statement__ = 242;
      validate_non_negative_index("d_int_array", "d_int", d_int);
      current_statement__ = 243;
      context__.validate_dims("data initialization","d_int_array","int",
           std::vector<size_t>{static_cast<size_t>(d_int)});
      d_int_array = std::vector<int>(d_int, std::numeric_limits<int>::min());
      
      current_statement__ = 243;
      d_int_array = context__.vals_i("d_int_array");
      current_statement__ = 244;
      validate_non_negative_index("d_int_array_2d", "d_int", d_int);
      current_statement__ = 245;
      context__.validate_dims("data initialization","d_int_array_2d","int",
           std::vector<size_t>{static_cast<size_t>(d_int),
            static_cast<size_t>(2)});
      d_int_array_2d = std::vector<std::vector<int>>(d_int, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> d_int_array_2d_flat__;
        current_statement__ = 245;
        d_int_array_2d_flat__ = context__.vals_i("d_int_array_2d");
        current_statement__ = 245;
        pos__ = 1;
        current_statement__ = 245;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 245;
          for (int sym2__ = 1; sym2__ <= d_int; ++sym2__) {
            current_statement__ = 245;
            assign(d_int_array_2d, d_int_array_2d_flat__[(pos__ - 1)],
              "assigning variable d_int_array_2d", index_uni(sym2__),
                                                     index_uni(sym1__));
            current_statement__ = 245;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 246;
      validate_non_negative_index("d_int_array_3d", "d_int", d_int);
      current_statement__ = 247;
      context__.validate_dims("data initialization","d_int_array_3d","int",
           std::vector<size_t>{static_cast<size_t>(d_int),
            static_cast<size_t>(2), static_cast<size_t>(3)});
      d_int_array_3d = std::vector<std::vector<std::vector<int>>>(d_int, std::vector<std::vector<int>>(2, std::vector<int>(3, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> d_int_array_3d_flat__;
        current_statement__ = 247;
        d_int_array_3d_flat__ = context__.vals_i("d_int_array_3d");
        current_statement__ = 247;
        pos__ = 1;
        current_statement__ = 247;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 247;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 247;
            for (int sym3__ = 1; sym3__ <= d_int; ++sym3__) {
              current_statement__ = 247;
              assign(d_int_array_3d, d_int_array_3d_flat__[(pos__ - 1)],
                "assigning variable d_int_array_3d", index_uni(sym3__),
                                                       index_uni(sym2__),
                                                       index_uni(sym1__));
              current_statement__ = 247;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 248;
      context__.validate_dims("data initialization","d_real","double",
           std::vector<size_t>{});
      d_real = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 248;
      d_real = context__.vals_r("d_real")[(1 - 1)];
      current_statement__ = 249;
      validate_non_negative_index("d_real_array", "d_int", d_int);
      current_statement__ = 250;
      context__.validate_dims("data initialization","d_real_array","double",
           std::vector<size_t>{static_cast<size_t>(d_int)});
      d_real_array = std::vector<double>(d_int, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 250;
      d_real_array = context__.vals_r("d_real_array");
      current_statement__ = 251;
      validate_non_negative_index("d_real_array_2d", "d_int", d_int);
      current_statement__ = 252;
      context__.validate_dims("data initialization","d_real_array_2d",
          "double",
           std::vector<size_t>{static_cast<size_t>(d_int),
            static_cast<size_t>(2)});
      d_real_array_2d = std::vector<std::vector<double>>(d_int, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> d_real_array_2d_flat__;
        current_statement__ = 252;
        d_real_array_2d_flat__ = context__.vals_r("d_real_array_2d");
        current_statement__ = 252;
        pos__ = 1;
        current_statement__ = 252;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 252;
          for (int sym2__ = 1; sym2__ <= d_int; ++sym2__) {
            current_statement__ = 252;
            assign(d_real_array_2d, d_real_array_2d_flat__[(pos__ - 1)],
              "assigning variable d_real_array_2d", index_uni(sym2__),
                                                      index_uni(sym1__));
            current_statement__ = 252;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 253;
      validate_non_negative_index("d_real_array_3d", "d_int", d_int);
      current_statement__ = 254;
      context__.validate_dims("data initialization","d_real_array_3d",
          "double",
           std::vector<size_t>{static_cast<size_t>(d_int),
            static_cast<size_t>(2), static_cast<size_t>(3)});
      d_real_array_3d = std::vector<std::vector<std::vector<double>>>(d_int, std::vector<std::vector<double>>(2, std::vector<double>(3, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> d_real_array_3d_flat__;
        current_statement__ = 254;
        d_real_array_3d_flat__ = context__.vals_r("d_real_array_3d");
        current_statement__ = 254;
        pos__ = 1;
        current_statement__ = 254;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 254;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 254;
            for (int sym3__ = 1; sym3__ <= d_int; ++sym3__) {
              current_statement__ = 254;
              assign(d_real_array_3d, d_real_array_3d_flat__[(pos__ - 1)],
                "assigning variable d_real_array_3d", index_uni(sym3__),
                                                        index_uni(sym2__),
                                                        index_uni(sym1__));
              current_statement__ = 254;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 255;
      validate_non_negative_index("d_matrix", "d_int", d_int);
      current_statement__ = 256;
      validate_non_negative_index("d_matrix", "d_int", d_int);
      current_statement__ = 257;
      context__.validate_dims("data initialization","d_matrix","double",
           std::vector<size_t>{static_cast<size_t>(d_int),
            static_cast<size_t>(d_int)});
      d_matrix__ = Eigen::Matrix<double, -1, -1>::Constant(d_int, d_int, std::numeric_limits<double>::quiet_NaN());
      new (&d_matrix) Eigen::Map<Eigen::Matrix<double, -1, -1>>(d_matrix__.data(), d_int, d_int);
      
      
      {
        std::vector<local_scalar_t__> d_matrix_flat__;
        current_statement__ = 257;
        d_matrix_flat__ = context__.vals_r("d_matrix");
        current_statement__ = 257;
        pos__ = 1;
        current_statement__ = 257;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 257;
          for (int sym2__ = 1; sym2__ <= d_int; ++sym2__) {
            current_statement__ = 257;
            assign(d_matrix, d_matrix_flat__[(pos__ - 1)],
              "assigning variable d_matrix", index_uni(sym2__),
                                               index_uni(sym1__));
            current_statement__ = 257;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 258;
      validate_non_negative_index("d_matrix_array", "d_int", d_int);
      current_statement__ = 259;
      validate_non_negative_index("d_matrix_array", "d_int", d_int);
      current_statement__ = 260;
      validate_non_negative_index("d_matrix_array", "d_int", d_int);
      current_statement__ = 261;
      context__.validate_dims("data initialization","d_matrix_array",
          "double",
           std::vector<size_t>{static_cast<size_t>(d_int),
            static_cast<size_t>(d_int), static_cast<size_t>(d_int)});
      d_matrix_array = std::vector<Eigen::Matrix<double, -1, -1>>(d_int, Eigen::Matrix<double, -1, -1>::Constant(d_int, d_int, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> d_matrix_array_flat__;
        current_statement__ = 261;
        d_matrix_array_flat__ = context__.vals_r("d_matrix_array");
        current_statement__ = 261;
        pos__ = 1;
        current_statement__ = 261;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 261;
          for (int sym2__ = 1; sym2__ <= d_int; ++sym2__) {
            current_statement__ = 261;
            for (int sym3__ = 1; sym3__ <= d_int; ++sym3__) {
              current_statement__ = 261;
              assign(d_matrix_array, d_matrix_array_flat__[(pos__ - 1)],
                "assigning variable d_matrix_array", index_uni(sym3__),
                                                       index_uni(sym2__),
                                                       index_uni(sym1__));
              current_statement__ = 261;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 262;
      validate_non_negative_index("d_matrix_array_2d", "d_int", d_int);
      current_statement__ = 263;
      validate_non_negative_index("d_matrix_array_2d", "d_int", d_int);
      current_statement__ = 264;
      validate_non_negative_index("d_matrix_array_2d", "d_int", d_int);
      current_statement__ = 265;
      context__.validate_dims("data initialization","d_matrix_array_2d",
          "double",
           std::vector<size_t>{static_cast<size_t>(d_int),
            static_cast<size_t>(2), static_cast<size_t>(d_int),
            static_cast<size_t>(d_int)});
      d_matrix_array_2d = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(d_int, std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(d_int, d_int, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> d_matrix_array_2d_flat__;
        current_statement__ = 265;
        d_matrix_array_2d_flat__ = context__.vals_r("d_matrix_array_2d");
        current_statement__ = 265;
        pos__ = 1;
        current_statement__ = 265;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 265;
          for (int sym2__ = 1; sym2__ <= d_int; ++sym2__) {
            current_statement__ = 265;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 265;
              for (int sym4__ = 1; sym4__ <= d_int; ++sym4__) {
                current_statement__ = 265;
                assign(d_matrix_array_2d,
                  d_matrix_array_2d_flat__[(pos__ - 1)],
                  "assigning variable d_matrix_array_2d", index_uni(sym4__),
                                                            index_uni(sym3__),
                                                            index_uni(sym2__),
                                                            index_uni(sym1__));
                current_statement__ = 265;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 266;
      validate_non_negative_index("d_matrix_array_3d", "d_int", d_int);
      current_statement__ = 267;
      validate_non_negative_index("d_matrix_array_3d", "d_int", d_int);
      current_statement__ = 268;
      validate_non_negative_index("d_matrix_array_3d", "d_int", d_int);
      current_statement__ = 269;
      context__.validate_dims("data initialization","d_matrix_array_3d",
          "double",
           std::vector<size_t>{static_cast<size_t>(d_int),
            static_cast<size_t>(2), static_cast<size_t>(3),
            static_cast<size_t>(d_int), static_cast<size_t>(d_int)});
      d_matrix_array_3d = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>>(d_int, std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(2, std::vector<Eigen::Matrix<double, -1, -1>>(3, Eigen::Matrix<double, -1, -1>::Constant(d_int, d_int, std::numeric_limits<double>::quiet_NaN()))));
      
      
      {
        std::vector<local_scalar_t__> d_matrix_array_3d_flat__;
        current_statement__ = 269;
        d_matrix_array_3d_flat__ = context__.vals_r("d_matrix_array_3d");
        current_statement__ = 269;
        pos__ = 1;
        current_statement__ = 269;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 269;
          for (int sym2__ = 1; sym2__ <= d_int; ++sym2__) {
            current_statement__ = 269;
            for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
              current_statement__ = 269;
              for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
                current_statement__ = 269;
                for (int sym5__ = 1; sym5__ <= d_int; ++sym5__) {
                  current_statement__ = 269;
                  assign(d_matrix_array_3d,
                    d_matrix_array_3d_flat__[(pos__ - 1)],
                    "assigning variable d_matrix_array_3d", index_uni(sym5__),
                                                              index_uni(sym4__),
                                                              index_uni(sym3__),
                                                              index_uni(sym2__),
                                                              index_uni(sym1__));
                  current_statement__ = 269;
                  pos__ = (pos__ + 1);
                }
              }
            }
          }
        }
      }
      current_statement__ = 270;
      validate_non_negative_index("d_vector", "d_int", d_int);
      current_statement__ = 271;
      context__.validate_dims("data initialization","d_vector","double",
           std::vector<size_t>{static_cast<size_t>(d_int)});
      d_vector__ = Eigen::Matrix<double, -1, 1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN());
      new (&d_vector) Eigen::Map<Eigen::Matrix<double, -1, 1>>(d_vector__.data(), d_int);
      
      
      {
        std::vector<local_scalar_t__> d_vector_flat__;
        current_statement__ = 271;
        d_vector_flat__ = context__.vals_r("d_vector");
        current_statement__ = 271;
        pos__ = 1;
        current_statement__ = 271;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 271;
          assign(d_vector, d_vector_flat__[(pos__ - 1)],
            "assigning variable d_vector", index_uni(sym1__));
          current_statement__ = 271;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 272;
      validate_non_negative_index("d_vector_array", "d_int", d_int);
      current_statement__ = 273;
      validate_non_negative_index("d_vector_array", "d_int", d_int);
      current_statement__ = 274;
      context__.validate_dims("data initialization","d_vector_array",
          "double",
           std::vector<size_t>{static_cast<size_t>(d_int),
            static_cast<size_t>(d_int)});
      d_vector_array = std::vector<Eigen::Matrix<double, -1, 1>>(d_int, Eigen::Matrix<double, -1, 1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> d_vector_array_flat__;
        current_statement__ = 274;
        d_vector_array_flat__ = context__.vals_r("d_vector_array");
        current_statement__ = 274;
        pos__ = 1;
        current_statement__ = 274;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 274;
          for (int sym2__ = 1; sym2__ <= d_int; ++sym2__) {
            current_statement__ = 274;
            assign(d_vector_array, d_vector_array_flat__[(pos__ - 1)],
              "assigning variable d_vector_array", index_uni(sym2__),
                                                     index_uni(sym1__));
            current_statement__ = 274;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 275;
      validate_non_negative_index("d_vector_array_2d", "d_int", d_int);
      current_statement__ = 276;
      validate_non_negative_index("d_vector_array_2d", "d_int", d_int);
      current_statement__ = 277;
      context__.validate_dims("data initialization","d_vector_array_2d",
          "double",
           std::vector<size_t>{static_cast<size_t>(d_int),
            static_cast<size_t>(2), static_cast<size_t>(d_int)});
      d_vector_array_2d = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(d_int, std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> d_vector_array_2d_flat__;
        current_statement__ = 277;
        d_vector_array_2d_flat__ = context__.vals_r("d_vector_array_2d");
        current_statement__ = 277;
        pos__ = 1;
        current_statement__ = 277;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 277;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 277;
            for (int sym3__ = 1; sym3__ <= d_int; ++sym3__) {
              current_statement__ = 277;
              assign(d_vector_array_2d,
                d_vector_array_2d_flat__[(pos__ - 1)],
                "assigning variable d_vector_array_2d", index_uni(sym3__),
                                                          index_uni(sym2__),
                                                          index_uni(sym1__));
              current_statement__ = 277;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 278;
      validate_non_negative_index("d_vector_array_3d", "d_int", d_int);
      current_statement__ = 279;
      validate_non_negative_index("d_vector_array_3d", "d_int", d_int);
      current_statement__ = 280;
      context__.validate_dims("data initialization","d_vector_array_3d",
          "double",
           std::vector<size_t>{static_cast<size_t>(d_int),
            static_cast<size_t>(2), static_cast<size_t>(3),
            static_cast<size_t>(d_int)});
      d_vector_array_3d = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(d_int, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(3, Eigen::Matrix<double, -1, 1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN()))));
      
      
      {
        std::vector<local_scalar_t__> d_vector_array_3d_flat__;
        current_statement__ = 280;
        d_vector_array_3d_flat__ = context__.vals_r("d_vector_array_3d");
        current_statement__ = 280;
        pos__ = 1;
        current_statement__ = 280;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 280;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 280;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 280;
              for (int sym4__ = 1; sym4__ <= d_int; ++sym4__) {
                current_statement__ = 280;
                assign(d_vector_array_3d,
                  d_vector_array_3d_flat__[(pos__ - 1)],
                  "assigning variable d_vector_array_3d", index_uni(sym4__),
                                                            index_uni(sym3__),
                                                            index_uni(sym2__),
                                                            index_uni(sym1__));
                current_statement__ = 280;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 281;
      validate_non_negative_index("d_row_vector", "d_int", d_int);
      current_statement__ = 282;
      context__.validate_dims("data initialization","d_row_vector","double",
           std::vector<size_t>{static_cast<size_t>(d_int)});
      d_row_vector__ = Eigen::Matrix<double, 1, -1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN());
      new (&d_row_vector) Eigen::Map<Eigen::Matrix<double, 1, -1>>(d_row_vector__.data(), d_int);
      
      
      {
        std::vector<local_scalar_t__> d_row_vector_flat__;
        current_statement__ = 282;
        d_row_vector_flat__ = context__.vals_r("d_row_vector");
        current_statement__ = 282;
        pos__ = 1;
        current_statement__ = 282;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 282;
          assign(d_row_vector, d_row_vector_flat__[(pos__ - 1)],
            "assigning variable d_row_vector", index_uni(sym1__));
          current_statement__ = 282;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 283;
      validate_non_negative_index("d_row_vector_array", "d_int", d_int);
      current_statement__ = 284;
      validate_non_negative_index("d_row_vector_array", "d_int", d_int);
      current_statement__ = 285;
      context__.validate_dims("data initialization","d_row_vector_array",
          "double",
           std::vector<size_t>{static_cast<size_t>(d_int),
            static_cast<size_t>(d_int)});
      d_row_vector_array = std::vector<Eigen::Matrix<double, 1, -1>>(d_int, Eigen::Matrix<double, 1, -1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> d_row_vector_array_flat__;
        current_statement__ = 285;
        d_row_vector_array_flat__ = context__.vals_r("d_row_vector_array");
        current_statement__ = 285;
        pos__ = 1;
        current_statement__ = 285;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 285;
          for (int sym2__ = 1; sym2__ <= d_int; ++sym2__) {
            current_statement__ = 285;
            assign(d_row_vector_array,
              d_row_vector_array_flat__[(pos__ - 1)],
              "assigning variable d_row_vector_array", index_uni(sym2__),
                                                         index_uni(sym1__));
            current_statement__ = 285;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 286;
      validate_non_negative_index("d_row_vector_array_2d", "d_int", d_int);
      current_statement__ = 287;
      validate_non_negative_index("d_row_vector_array_2d", "d_int", d_int);
      current_statement__ = 288;
      context__.validate_dims("data initialization","d_row_vector_array_2d",
          "double",
           std::vector<size_t>{static_cast<size_t>(d_int),
            static_cast<size_t>(2), static_cast<size_t>(d_int)});
      d_row_vector_array_2d = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(d_int, std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> d_row_vector_array_2d_flat__;
        current_statement__ = 288;
        d_row_vector_array_2d_flat__ = context__.vals_r("d_row_vector_array_2d");
        current_statement__ = 288;
        pos__ = 1;
        current_statement__ = 288;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 288;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 288;
            for (int sym3__ = 1; sym3__ <= d_int; ++sym3__) {
              current_statement__ = 288;
              assign(d_row_vector_array_2d,
                d_row_vector_array_2d_flat__[(pos__ - 1)],
                "assigning variable d_row_vector_array_2d", index_uni(sym3__),
                                                              index_uni(sym2__),
                                                              index_uni(sym1__));
              current_statement__ = 288;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 289;
      validate_non_negative_index("d_row_vector_array_3d", "d_int", d_int);
      current_statement__ = 290;
      validate_non_negative_index("d_row_vector_array_3d", "d_int", d_int);
      current_statement__ = 291;
      context__.validate_dims("data initialization","d_row_vector_array_3d",
          "double",
           std::vector<size_t>{static_cast<size_t>(d_int),
            static_cast<size_t>(2), static_cast<size_t>(3),
            static_cast<size_t>(d_int)});
      d_row_vector_array_3d = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(d_int, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(2, std::vector<Eigen::Matrix<double, 1, -1>>(3, Eigen::Matrix<double, 1, -1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN()))));
      
      
      {
        std::vector<local_scalar_t__> d_row_vector_array_3d_flat__;
        current_statement__ = 291;
        d_row_vector_array_3d_flat__ = context__.vals_r("d_row_vector_array_3d");
        current_statement__ = 291;
        pos__ = 1;
        current_statement__ = 291;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 291;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 291;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 291;
              for (int sym4__ = 1; sym4__ <= d_int; ++sym4__) {
                current_statement__ = 291;
                assign(d_row_vector_array_3d,
                  d_row_vector_array_3d_flat__[(pos__ - 1)],
                  "assigning variable d_row_vector_array_3d", index_uni(sym4__),
                                                                index_uni(sym3__),
                                                                index_uni(sym2__),
                                                                index_uni(sym1__));
                current_statement__ = 291;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 292;
      td_int = std::numeric_limits<int>::min();
      
      current_statement__ = 293;
      validate_non_negative_index("td_1d", "N", N);
      current_statement__ = 294;
      td_1d = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 295;
      validate_non_negative_index("td_1dk", "M", M);
      current_statement__ = 296;
      td_1dk = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 296;
      assign(td_1dk, rep_array(1, M), "assigning variable td_1dk");
      current_statement__ = 297;
      td_a = std::numeric_limits<int>::min();
      
      current_statement__ = 297;
      td_a = N;
      current_statement__ = 298;
      td_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 298;
      td_b = (N * J);
      current_statement__ = 299;
      td_c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 299;
      td_c = foo_bar1(td_b, pstream__);
      current_statement__ = 300;
      td_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>::Constant(2, 3, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(td_ar_mat, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 301;
      validate_non_negative_index("td_simplex", "N", N);
      current_statement__ = 302;
      td_simplex__ = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
      new (&td_simplex) Eigen::Map<Eigen::Matrix<double, -1, 1>>(td_simplex__.data(), N);
      stan::math::initialize_fill(td_simplex, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 303;
      validate_non_negative_index("td_1d_simplex", "N", N);
      current_statement__ = 304;
      validate_non_negative_index("td_1d_simplex", "N", N);
      current_statement__ = 305;
      td_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(td_1d_simplex, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 306;
      validate_non_negative_index("td_3d_simplex", "N", N);
      current_statement__ = 307;
      validate_non_negative_index("td_3d_simplex", "M", M);
      current_statement__ = 308;
      validate_non_negative_index("td_3d_simplex", "K", K);
      current_statement__ = 309;
      validate_non_negative_index("td_3d_simplex", "N", N);
      current_statement__ = 310;
      td_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      stan::math::initialize_fill(td_3d_simplex, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 311;
      td_cfcov_54__ = Eigen::Matrix<double, -1, -1>::Constant(5, 5, std::numeric_limits<double>::quiet_NaN());
      new (&td_cfcov_54) Eigen::Map<Eigen::Matrix<double, -1, -1>>(td_cfcov_54__.data(), 5, 5);
      stan::math::initialize_fill(td_cfcov_54, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 312;
      td_cfcov_33__ = Eigen::Matrix<double, -1, -1>::Constant(3, 3, std::numeric_limits<double>::quiet_NaN());
      new (&td_cfcov_33) Eigen::Map<Eigen::Matrix<double, -1, -1>>(td_cfcov_33__.data(), 3, 3);
      stan::math::initialize_fill(td_cfcov_33, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 313;
      x__ = Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double, -1, 1>>(x__.data(), 2);
      stan::math::initialize_fill(x, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 314;
      y__ = Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), 2);
      stan::math::initialize_fill(y, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 315;
      dat = std::vector<double>(0, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 316;
      dat_int = std::vector<int>(0, std::numeric_limits<int>::min());
      
      current_statement__ = 317;
      x_r = std::vector<std::vector<double>>(0, std::vector<double>(0, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 318;
      x_i = std::vector<std::vector<int>>(0, std::vector<int>(0, std::numeric_limits<int>::min()));
      
      
      current_statement__ = 319;
      td_int = (primitive_value(1) || primitive_value(2));
      current_statement__ = 320;
      td_int = (primitive_value(1) && primitive_value(2));
      current_statement__ = 329;
      for (int i = 1; i <= 2; ++i) {
        current_statement__ = 327;
        for (int j = 1; j <= 3; ++j) {
          current_statement__ = 325;
          for (int m = 1; m <= 4; ++m) {
            current_statement__ = 323;
            for (int n = 1; n <= 5; ++n) {
              current_statement__ = 321;
              assign(td_ar_mat, 0.4,
                "assigning variable td_ar_mat", index_uni(m), index_uni(n),
                                                  index_uni(i), index_uni(j));
            }
          }
        }
      }
      current_statement__ = 340;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 330;
        assign(td_simplex, (1.0 / N),
          "assigning variable td_simplex", index_uni(i));
        current_statement__ = 338;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 331;
          assign(td_1d_simplex, (1.0 / N),
            "assigning variable td_1d_simplex", index_uni(n), index_uni(i));
          current_statement__ = 336;
          for (int m = 1; m <= M; ++m) {
            current_statement__ = 334;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 332;
              assign(td_3d_simplex, (1.0 / N),
                "assigning variable td_3d_simplex", index_uni(n),
                                                      index_uni(m),
                                                      index_uni(k),
                                                      index_uni(i));
            }
          }
        }
      }
      current_statement__ = 346;
      for (int i = 1; i <= 4; ++i) {
        current_statement__ = 344;
        for (int j = 1; j <= 5; ++j) {
          Eigen::Matrix<double, -1, -1> l_mat = Eigen::Matrix<double, -1, -1>::Constant(2, 3, std::numeric_limits<double>::quiet_NaN());
                                                
          
          current_statement__ = 341;
          assign(l_mat,
            rvalue(d_ar_mat, "d_ar_mat", index_uni(i), index_uni(j)),
            "assigning variable l_mat");
          current_statement__ = 342;
          if (pstream__) {
            stan_print(pstream__, "ar dim1: ");
            stan_print(pstream__, i);
            stan_print(pstream__, " ar dim2: ");
            stan_print(pstream__, j);
            stan_print(pstream__, " matrix: ");
            stan_print(pstream__, l_mat);
            stan_print(pstream__, "\n");
          }
        }
      }
      current_statement__ = 347;
      assign(td_cfcov_54, diag_matrix(rep_vector(1, rows(td_cfcov_54))),
        "assigning variable td_cfcov_54");
      current_statement__ = 348;
      assign(td_cfcov_33, diag_matrix(rep_vector(1, rows(td_cfcov_33))),
        "assigning variable td_cfcov_33");
      {
        double z = std::numeric_limits<double>::quiet_NaN();
        
        Eigen::Matrix<double, 1, -1> blocked_tdata_vs = Eigen::Matrix<double, 1, -1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
                                                        
        
        current_statement__ = 351;
        for (int sym1__ = 1; sym1__ <= stan::math::size(blocked_tdata_vs);
             ++sym1__) {
          {
            double v;
            current_statement__ = 351;
            v = blocked_tdata_vs[(sym1__ - 1)];
            current_statement__ = 352;
            z = 0;
          }
        }
        std::vector<int> indices = std::vector<int>(4, std::numeric_limits<int>::min());
                                   
        
        current_statement__ = 353;
        assign(indices, std::vector<int>{1, 2, 3, 4},
          "assigning variable indices");
        {
          std::vector<int> sym1__;
          current_statement__ = 354;
          assign(sym1__, rvalue(indices, "indices", index_min_max(1, 3)),
            "assigning variable sym1__");
          current_statement__ = 354;
          for (int sym2__ = 1; sym2__ <= stan::math::size(sym1__); ++sym2__) {
            {
              int i;
              current_statement__ = 354;
              i = sym1__[(sym2__ - 1)];
              current_statement__ = 355;
              z = i;
            }
          }
        }
      }
      current_statement__ = 357;
      assign(td_1dk, rvalue(td_1d, "td_1d", index_multi(td_1dk)),
        "assigning variable td_1dk");
      current_statement__ = 358;
      assign(td_simplex,
        rvalue(td_1d_simplex, "td_1d_simplex", index_uni(1), index_omni()),
        "assigning variable td_simplex");
      current_statement__ = 359;
      assign(td_simplex,
        rvalue(td_1d_simplex, "td_1d_simplex", index_uni(1), index_omni()),
        "assigning variable td_simplex");
      current_statement__ = 360;
      assign(td_simplex,
        rvalue(td_1d_simplex, "td_1d_simplex",
          index_uni(1), index_min_max(1, N)), "assigning variable td_simplex");
      current_statement__ = 361;
      arr_mul_ind = std::vector<std::vector<int>>(2, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      current_statement__ = 362;
      assign(arr_mul_ind, std::vector<int>{1, 1},
        "assigning variable arr_mul_ind", index_uni(1), index_min_max(1, 2));
      current_statement__ = 363;
      x_mul_ind = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 363;
      assign(x_mul_ind, std::vector<int>{1, 2},
        "assigning variable x_mul_ind");
      current_statement__ = 364;
      transformed_data_real = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 365;
      validate_non_negative_index("transformed_data_real_array", "d_int",
                                  d_int);
      current_statement__ = 366;
      transformed_data_real_array = std::vector<double>(d_int, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 367;
      validate_non_negative_index("transformed_data_real_array_2d", "d_int",
                                  d_int);
      current_statement__ = 368;
      transformed_data_real_array_2d = std::vector<std::vector<double>>(d_int, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 369;
      validate_non_negative_index("transformed_data_real_array_3d", "d_int",
                                  d_int);
      current_statement__ = 370;
      transformed_data_real_array_3d = std::vector<std::vector<std::vector<double>>>(d_int, std::vector<std::vector<double>>(2, std::vector<double>(3, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 371;
      validate_non_negative_index("transformed_data_matrix", "d_int", d_int);
      current_statement__ = 372;
      validate_non_negative_index("transformed_data_matrix", "d_int", d_int);
      current_statement__ = 373;
      transformed_data_matrix__ = Eigen::Matrix<double, -1, -1>::Constant(d_int, d_int, std::numeric_limits<double>::quiet_NaN());
      new (&transformed_data_matrix) Eigen::Map<Eigen::Matrix<double, -1, -1>>(transformed_data_matrix__.data(), d_int, d_int);
      stan::math::initialize_fill(transformed_data_matrix, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 374;
      validate_non_negative_index("transformed_data_matrix_array", "d_int",
                                  d_int);
      current_statement__ = 375;
      validate_non_negative_index("transformed_data_matrix_array", "d_int",
                                  d_int);
      current_statement__ = 376;
      validate_non_negative_index("transformed_data_matrix_array", "d_int",
                                  d_int);
      current_statement__ = 377;
      transformed_data_matrix_array = std::vector<Eigen::Matrix<double, -1, -1>>(d_int, Eigen::Matrix<double, -1, -1>::Constant(d_int, d_int, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(transformed_data_matrix_array, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 378;
      validate_non_negative_index("transformed_data_matrix_array_2d",
                                  "d_int", d_int);
      current_statement__ = 379;
      validate_non_negative_index("transformed_data_matrix_array_2d",
                                  "d_int", d_int);
      current_statement__ = 380;
      validate_non_negative_index("transformed_data_matrix_array_2d",
                                  "d_int", d_int);
      current_statement__ = 381;
      transformed_data_matrix_array_2d = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(d_int, std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(d_int, d_int, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(transformed_data_matrix_array_2d, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 382;
      validate_non_negative_index("transformed_data_matrix_array_3d",
                                  "d_int", d_int);
      current_statement__ = 383;
      validate_non_negative_index("transformed_data_matrix_array_3d",
                                  "d_int", d_int);
      current_statement__ = 384;
      validate_non_negative_index("transformed_data_matrix_array_3d",
                                  "d_int", d_int);
      current_statement__ = 385;
      transformed_data_matrix_array_3d = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>>(d_int, std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(2, std::vector<Eigen::Matrix<double, -1, -1>>(3, Eigen::Matrix<double, -1, -1>::Constant(d_int, d_int, std::numeric_limits<double>::quiet_NaN()))));
      stan::math::initialize_fill(transformed_data_matrix_array_3d, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 386;
      validate_non_negative_index("transformed_data_vector", "d_int", d_int);
      current_statement__ = 387;
      transformed_data_vector__ = Eigen::Matrix<double, -1, 1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN());
      new (&transformed_data_vector) Eigen::Map<Eigen::Matrix<double, -1, 1>>(transformed_data_vector__.data(), d_int);
      stan::math::initialize_fill(transformed_data_vector, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 388;
      validate_non_negative_index("transformed_data_vector_array", "d_int",
                                  d_int);
      current_statement__ = 389;
      validate_non_negative_index("transformed_data_vector_array", "d_int",
                                  d_int);
      current_statement__ = 390;
      transformed_data_vector_array = std::vector<Eigen::Matrix<double, -1, 1>>(d_int, Eigen::Matrix<double, -1, 1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(transformed_data_vector_array, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 391;
      validate_non_negative_index("transformed_data_vector_array_2d",
                                  "d_int", d_int);
      current_statement__ = 392;
      validate_non_negative_index("transformed_data_vector_array_2d",
                                  "d_int", d_int);
      current_statement__ = 393;
      transformed_data_vector_array_2d = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(d_int, std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(transformed_data_vector_array_2d, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 394;
      validate_non_negative_index("transformed_data_vector_array_3d",
                                  "d_int", d_int);
      current_statement__ = 395;
      validate_non_negative_index("transformed_data_vector_array_3d",
                                  "d_int", d_int);
      current_statement__ = 396;
      transformed_data_vector_array_3d = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(d_int, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(3, Eigen::Matrix<double, -1, 1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN()))));
      stan::math::initialize_fill(transformed_data_vector_array_3d, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 397;
      validate_non_negative_index("transformed_data_row_vector", "d_int",
                                  d_int);
      current_statement__ = 398;
      transformed_data_row_vector__ = Eigen::Matrix<double, 1, -1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN());
      new (&transformed_data_row_vector) Eigen::Map<Eigen::Matrix<double, 1, -1>>(transformed_data_row_vector__.data(), d_int);
      stan::math::initialize_fill(transformed_data_row_vector, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 399;
      validate_non_negative_index("transformed_data_row_vector_array",
                                  "d_int", d_int);
      current_statement__ = 400;
      validate_non_negative_index("transformed_data_row_vector_array",
                                  "d_int", d_int);
      current_statement__ = 401;
      transformed_data_row_vector_array = std::vector<Eigen::Matrix<double, 1, -1>>(d_int, Eigen::Matrix<double, 1, -1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(transformed_data_row_vector_array, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 402;
      validate_non_negative_index("transformed_data_row_vector_array_2d",
                                  "d_int", d_int);
      current_statement__ = 403;
      validate_non_negative_index("transformed_data_row_vector_array_2d",
                                  "d_int", d_int);
      current_statement__ = 404;
      transformed_data_row_vector_array_2d = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(d_int, std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN())));
      stan::math::initialize_fill(transformed_data_row_vector_array_2d, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 405;
      validate_non_negative_index("transformed_data_row_vector_array_3d",
                                  "d_int", d_int);
      current_statement__ = 406;
      validate_non_negative_index("transformed_data_row_vector_array_3d",
                                  "d_int", d_int);
      current_statement__ = 407;
      transformed_data_row_vector_array_3d = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(d_int, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(2, std::vector<Eigen::Matrix<double, 1, -1>>(3, Eigen::Matrix<double, 1, -1>::Constant(d_int, std::numeric_limits<double>::quiet_NaN()))));
      stan::math::initialize_fill(transformed_data_row_vector_array_3d, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 408;
      transformed_data_real = pow(d_int, d_int);
      current_statement__ = 409;
      transformed_data_real = pow(d_real, d_int);
      current_statement__ = 410;
      transformed_data_real = pow(d_int, d_real);
      current_statement__ = 411;
      transformed_data_real = pow(d_real, d_real);
      current_statement__ = 412;
      assign(transformed_data_real_array, pow(d_int_array, d_int),
        "assigning variable transformed_data_real_array");
      current_statement__ = 413;
      assign(transformed_data_real_array, pow(d_int_array, d_real),
        "assigning variable transformed_data_real_array");
      current_statement__ = 414;
      assign(transformed_data_real_array_2d, pow(d_int_array_2d, d_int),
        "assigning variable transformed_data_real_array_2d");
      current_statement__ = 415;
      assign(transformed_data_real_array_2d, pow(d_int_array_2d, d_real),
        "assigning variable transformed_data_real_array_2d");
      current_statement__ = 416;
      assign(transformed_data_real_array_3d, pow(d_int_array_3d, d_int),
        "assigning variable transformed_data_real_array_3d");
      current_statement__ = 417;
      assign(transformed_data_real_array_3d, pow(d_int_array_3d, d_real),
        "assigning variable transformed_data_real_array_3d");
      current_statement__ = 418;
      assign(transformed_data_real_array, pow(d_int, d_int_array),
        "assigning variable transformed_data_real_array");
      current_statement__ = 419;
      assign(transformed_data_real_array, pow(d_real, d_int_array),
        "assigning variable transformed_data_real_array");
      current_statement__ = 420;
      assign(transformed_data_real_array_2d, pow(d_int, d_int_array_2d),
        "assigning variable transformed_data_real_array_2d");
      current_statement__ = 421;
      assign(transformed_data_real_array_2d, pow(d_real, d_int_array_2d),
        "assigning variable transformed_data_real_array_2d");
      current_statement__ = 422;
      assign(transformed_data_real_array_3d, pow(d_int, d_int_array_3d),
        "assigning variable transformed_data_real_array_3d");
      current_statement__ = 423;
      assign(transformed_data_real_array_3d, pow(d_real, d_int_array_3d),
        "assigning variable transformed_data_real_array_3d");
      current_statement__ = 424;
      assign(transformed_data_real_array, pow(d_int, d_real_array),
        "assigning variable transformed_data_real_array");
      current_statement__ = 425;
      assign(transformed_data_real_array, pow(d_real, d_real_array),
        "assigning variable transformed_data_real_array");
      current_statement__ = 426;
      assign(transformed_data_real_array_2d, pow(d_int, d_real_array_2d),
        "assigning variable transformed_data_real_array_2d");
      current_statement__ = 427;
      assign(transformed_data_real_array_2d, pow(d_real, d_real_array_2d),
        "assigning variable transformed_data_real_array_2d");
      current_statement__ = 428;
      assign(transformed_data_real_array_3d, pow(d_int, d_real_array_3d),
        "assigning variable transformed_data_real_array_3d");
      current_statement__ = 429;
      assign(transformed_data_real_array_3d, pow(d_real, d_real_array_3d),
        "assigning variable transformed_data_real_array_3d");
      current_statement__ = 430;
      assign(transformed_data_real_array, pow(d_real_array, d_int),
        "assigning variable transformed_data_real_array");
      current_statement__ = 431;
      assign(transformed_data_real_array, pow(d_real_array, d_real),
        "assigning variable transformed_data_real_array");
      current_statement__ = 432;
      assign(transformed_data_real_array_2d, pow(d_real_array_2d, d_int),
        "assigning variable transformed_data_real_array_2d");
      current_statement__ = 433;
      assign(transformed_data_real_array_2d, pow(d_real_array_2d, d_real),
        "assigning variable transformed_data_real_array_2d");
      current_statement__ = 434;
      assign(transformed_data_real_array_3d, pow(d_real_array_3d, d_int),
        "assigning variable transformed_data_real_array_3d");
      current_statement__ = 435;
      assign(transformed_data_real_array_3d, pow(d_real_array_3d, d_real),
        "assigning variable transformed_data_real_array_3d");
      current_statement__ = 436;
      assign(transformed_data_real_array, pow(d_int_array, d_int_array),
        "assigning variable transformed_data_real_array");
      current_statement__ = 437;
      assign(transformed_data_real_array, pow(d_real_array, d_real_array),
        "assigning variable transformed_data_real_array");
      current_statement__ = 438;
      assign(transformed_data_real_array_2d,
        pow(d_int_array_2d, d_int_array_2d),
        "assigning variable transformed_data_real_array_2d");
      current_statement__ = 439;
      assign(transformed_data_real_array_2d,
        pow(d_real_array_2d, d_real_array_2d),
        "assigning variable transformed_data_real_array_2d");
      current_statement__ = 440;
      assign(transformed_data_real_array_3d,
        pow(d_int_array_3d, d_int_array_3d),
        "assigning variable transformed_data_real_array_3d");
      current_statement__ = 441;
      assign(transformed_data_real_array_3d,
        pow(d_real_array_3d, d_real_array_3d),
        "assigning variable transformed_data_real_array_3d");
      current_statement__ = 442;
      assign(transformed_data_vector, pow(d_vector, d_int),
        "assigning variable transformed_data_vector");
      current_statement__ = 443;
      assign(transformed_data_vector, pow(d_vector, d_real),
        "assigning variable transformed_data_vector");
      current_statement__ = 444;
      assign(transformed_data_vector,
        stan::math::fma(d_vector, d_vector, d_vector),
        "assigning variable transformed_data_vector");
      current_statement__ = 445;
      assign(transformed_data_vector,
        stan::math::fma(d_vector, d_vector, d_real),
        "assigning variable transformed_data_vector");
      current_statement__ = 446;
      assign(transformed_data_vector,
        stan::math::fma(d_real, d_vector, d_real),
        "assigning variable transformed_data_vector");
      current_statement__ = 447;
      assign(transformed_data_vector_array, pow(d_vector_array, d_int),
        "assigning variable transformed_data_vector_array");
      current_statement__ = 448;
      assign(transformed_data_vector_array, pow(d_vector_array, d_real),
        "assigning variable transformed_data_vector_array");
      current_statement__ = 449;
      assign(transformed_data_vector_array_2d, pow(d_vector_array_2d, d_int),
        "assigning variable transformed_data_vector_array_2d");
      current_statement__ = 450;
      assign(transformed_data_vector_array_2d,
        pow(d_vector_array_2d, d_real),
        "assigning variable transformed_data_vector_array_2d");
      current_statement__ = 451;
      assign(transformed_data_vector_array_3d, pow(d_vector_array_3d, d_int),
        "assigning variable transformed_data_vector_array_3d");
      current_statement__ = 452;
      assign(transformed_data_vector_array_3d,
        pow(d_vector_array_3d, d_real),
        "assigning variable transformed_data_vector_array_3d");
      current_statement__ = 453;
      assign(transformed_data_vector, pow(d_int, d_vector),
        "assigning variable transformed_data_vector");
      current_statement__ = 454;
      assign(transformed_data_vector, pow(d_real, d_vector),
        "assigning variable transformed_data_vector");
      current_statement__ = 455;
      assign(transformed_data_vector_array, pow(d_int, d_vector_array),
        "assigning variable transformed_data_vector_array");
      current_statement__ = 456;
      assign(transformed_data_vector_array, pow(d_real, d_vector_array),
        "assigning variable transformed_data_vector_array");
      current_statement__ = 457;
      assign(transformed_data_vector_array_2d, pow(d_int, d_vector_array_2d),
        "assigning variable transformed_data_vector_array_2d");
      current_statement__ = 458;
      assign(transformed_data_vector_array_2d,
        pow(d_real, d_vector_array_2d),
        "assigning variable transformed_data_vector_array_2d");
      current_statement__ = 459;
      assign(transformed_data_vector_array_3d, pow(d_int, d_vector_array_3d),
        "assigning variable transformed_data_vector_array_3d");
      current_statement__ = 460;
      assign(transformed_data_vector_array_3d,
        pow(d_real, d_vector_array_3d),
        "assigning variable transformed_data_vector_array_3d");
      current_statement__ = 461;
      assign(transformed_data_vector, pow(d_vector, d_vector),
        "assigning variable transformed_data_vector");
      current_statement__ = 462;
      assign(transformed_data_vector,
        stan::math::fma(d_vector, d_vector, d_vector),
        "assigning variable transformed_data_vector");
      current_statement__ = 463;
      assign(transformed_data_vector,
        stan::math::fma(d_vector, d_vector, d_real),
        "assigning variable transformed_data_vector");
      current_statement__ = 464;
      assign(transformed_data_vector_array,
        pow(d_vector_array, d_vector_array),
        "assigning variable transformed_data_vector_array");
      current_statement__ = 465;
      assign(transformed_data_vector_array_2d,
        pow(d_vector_array_2d, d_vector_array_2d),
        "assigning variable transformed_data_vector_array_2d");
      current_statement__ = 466;
      assign(transformed_data_vector_array_3d,
        pow(d_vector_array_3d, d_vector_array_3d),
        "assigning variable transformed_data_vector_array_3d");
      current_statement__ = 467;
      assign(transformed_data_row_vector, pow(d_row_vector, d_int),
        "assigning variable transformed_data_row_vector");
      current_statement__ = 468;
      assign(transformed_data_row_vector, pow(d_row_vector, d_real),
        "assigning variable transformed_data_row_vector");
      current_statement__ = 469;
      assign(transformed_data_row_vector_array,
        pow(d_row_vector_array, d_int),
        "assigning variable transformed_data_row_vector_array");
      current_statement__ = 470;
      assign(transformed_data_row_vector_array,
        pow(d_row_vector_array, d_real),
        "assigning variable transformed_data_row_vector_array");
      current_statement__ = 471;
      assign(transformed_data_row_vector_array_2d,
        pow(d_row_vector_array_2d, d_int),
        "assigning variable transformed_data_row_vector_array_2d");
      current_statement__ = 472;
      assign(transformed_data_row_vector_array_2d,
        pow(d_row_vector_array_2d, d_real),
        "assigning variable transformed_data_row_vector_array_2d");
      current_statement__ = 473;
      assign(transformed_data_row_vector_array_3d,
        pow(d_row_vector_array_3d, d_int),
        "assigning variable transformed_data_row_vector_array_3d");
      current_statement__ = 474;
      assign(transformed_data_row_vector_array_3d,
        pow(d_row_vector_array_3d, d_real),
        "assigning variable transformed_data_row_vector_array_3d");
      current_statement__ = 475;
      assign(transformed_data_row_vector, pow(d_int, d_row_vector),
        "assigning variable transformed_data_row_vector");
      current_statement__ = 476;
      assign(transformed_data_row_vector, pow(d_real, d_row_vector),
        "assigning variable transformed_data_row_vector");
      current_statement__ = 477;
      assign(transformed_data_row_vector_array,
        pow(d_int, d_row_vector_array),
        "assigning variable transformed_data_row_vector_array");
      current_statement__ = 478;
      assign(transformed_data_row_vector_array,
        pow(d_real, d_row_vector_array),
        "assigning variable transformed_data_row_vector_array");
      current_statement__ = 479;
      assign(transformed_data_row_vector_array_2d,
        pow(d_int, d_row_vector_array_2d),
        "assigning variable transformed_data_row_vector_array_2d");
      current_statement__ = 480;
      assign(transformed_data_row_vector_array_2d,
        pow(d_real, d_row_vector_array_2d),
        "assigning variable transformed_data_row_vector_array_2d");
      current_statement__ = 481;
      assign(transformed_data_row_vector_array_3d,
        pow(d_int, d_row_vector_array_3d),
        "assigning variable transformed_data_row_vector_array_3d");
      current_statement__ = 482;
      assign(transformed_data_row_vector_array_3d,
        pow(d_real, d_row_vector_array_3d),
        "assigning variable transformed_data_row_vector_array_3d");
      current_statement__ = 483;
      assign(transformed_data_row_vector, pow(d_row_vector, d_row_vector),
        "assigning variable transformed_data_row_vector");
      current_statement__ = 484;
      assign(transformed_data_row_vector_array,
        pow(d_row_vector_array, d_row_vector_array),
        "assigning variable transformed_data_row_vector_array");
      current_statement__ = 485;
      assign(transformed_data_row_vector_array_2d,
        pow(d_row_vector_array_2d, d_row_vector_array_2d),
        "assigning variable transformed_data_row_vector_array_2d");
      current_statement__ = 486;
      assign(transformed_data_row_vector_array_3d,
        pow(d_row_vector_array_3d, d_row_vector_array_3d),
        "assigning variable transformed_data_row_vector_array_3d");
      current_statement__ = 487;
      assign(transformed_data_matrix, pow(d_matrix, d_int),
        "assigning variable transformed_data_matrix");
      current_statement__ = 488;
      assign(transformed_data_matrix, pow(d_matrix, d_real),
        "assigning variable transformed_data_matrix");
      current_statement__ = 489;
      assign(transformed_data_matrix,
        stan::math::fma(d_matrix, d_matrix, d_matrix),
        "assigning variable transformed_data_matrix");
      current_statement__ = 490;
      assign(transformed_data_matrix,
        stan::math::fma(d_matrix, d_matrix, d_real),
        "assigning variable transformed_data_matrix");
      current_statement__ = 491;
      assign(transformed_data_matrix_array, pow(d_matrix_array, d_int),
        "assigning variable transformed_data_matrix_array");
      current_statement__ = 492;
      assign(transformed_data_matrix_array, pow(d_matrix_array, d_real),
        "assigning variable transformed_data_matrix_array");
      current_statement__ = 493;
      assign(transformed_data_matrix_array_2d, pow(d_matrix_array_2d, d_int),
        "assigning variable transformed_data_matrix_array_2d");
      current_statement__ = 494;
      assign(transformed_data_matrix_array_2d,
        pow(d_matrix_array_2d, d_real),
        "assigning variable transformed_data_matrix_array_2d");
      current_statement__ = 495;
      assign(transformed_data_matrix_array_3d, pow(d_matrix_array_3d, d_int),
        "assigning variable transformed_data_matrix_array_3d");
      current_statement__ = 496;
      assign(transformed_data_matrix_array_3d,
        pow(d_matrix_array_3d, d_real),
        "assigning variable transformed_data_matrix_array_3d");
      current_statement__ = 497;
      assign(transformed_data_matrix, pow(d_int, d_matrix),
        "assigning variable transformed_data_matrix");
      current_statement__ = 498;
      assign(transformed_data_matrix, pow(d_real, d_matrix),
        "assigning variable transformed_data_matrix");
      current_statement__ = 499;
      assign(transformed_data_matrix_array, pow(d_int, d_matrix_array),
        "assigning variable transformed_data_matrix_array");
      current_statement__ = 500;
      assign(transformed_data_matrix_array, pow(d_real, d_matrix_array),
        "assigning variable transformed_data_matrix_array");
      current_statement__ = 501;
      assign(transformed_data_matrix_array_2d, pow(d_int, d_matrix_array_2d),
        "assigning variable transformed_data_matrix_array_2d");
      current_statement__ = 502;
      assign(transformed_data_matrix_array_2d,
        pow(d_real, d_matrix_array_2d),
        "assigning variable transformed_data_matrix_array_2d");
      current_statement__ = 503;
      assign(transformed_data_matrix_array_3d, pow(d_int, d_matrix_array_3d),
        "assigning variable transformed_data_matrix_array_3d");
      current_statement__ = 504;
      assign(transformed_data_matrix_array_3d,
        pow(d_real, d_matrix_array_3d),
        "assigning variable transformed_data_matrix_array_3d");
      current_statement__ = 505;
      assign(transformed_data_matrix, pow(d_matrix, d_matrix),
        "assigning variable transformed_data_matrix");
      current_statement__ = 506;
      assign(transformed_data_matrix_array,
        pow(d_matrix_array, d_matrix_array),
        "assigning variable transformed_data_matrix_array");
      current_statement__ = 507;
      assign(transformed_data_matrix_array_2d,
        pow(d_matrix_array_2d, d_matrix_array_2d),
        "assigning variable transformed_data_matrix_array_2d");
      current_statement__ = 508;
      assign(transformed_data_matrix_array_3d,
        pow(d_matrix_array_3d, d_matrix_array_3d),
        "assigning variable transformed_data_matrix_array_3d");
      current_statement__ = 509;
      td_int = (d_int * d_int);
      current_statement__ = 510;
      transformed_data_real = (d_real * d_real);
      current_statement__ = 300;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 300;
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 300;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 300;
            for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
              current_statement__ = 300;
              check_greater_or_equal(function__, "td_ar_mat[sym1__, sym2__, sym3__, sym4__]",
                                     rvalue(td_ar_mat, "td_ar_mat",
                                       index_uni(sym1__), index_uni(sym2__),
                                         index_uni(sym3__), index_uni(sym4__)),
                                     0);
            }
          }
        }
      }
      current_statement__ = 300;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 300;
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 300;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 300;
            for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
              current_statement__ = 300;
              check_less_or_equal(function__, "td_ar_mat[sym1__, sym2__, sym3__, sym4__]",
                                  rvalue(td_ar_mat, "td_ar_mat",
                                    index_uni(sym1__), index_uni(sym2__),
                                      index_uni(sym3__), index_uni(sym4__)),
                                  1);
            }
          }
        }
      }
      current_statement__ = 302;
      check_simplex(function__, "td_simplex", td_simplex);
      current_statement__ = 305;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 305;
        check_simplex(function__, "td_1d_simplex[sym1__]",
                      td_1d_simplex[(sym1__ - 1)]);
      }
      current_statement__ = 310;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 310;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 310;
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 310;
            check_simplex(function__, "td_3d_simplex[sym1__, sym2__, sym3__]",
                          td_3d_simplex[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)]);
          }
        }
      }
      current_statement__ = 311;
      check_cholesky_factor(function__, "td_cfcov_54", td_cfcov_54);
      current_statement__ = 312;
      check_cholesky_factor(function__, "td_cfcov_33", td_cfcov_33);
      current_statement__ = 511;
      validate_non_negative_index("p_real_1d_ar", "N", N);
      current_statement__ = 512;
      validate_non_negative_index("p_real_3d_ar", "N", N);
      current_statement__ = 513;
      validate_non_negative_index("p_real_3d_ar", "M", M);
      current_statement__ = 514;
      validate_non_negative_index("p_real_3d_ar", "K", K);
      current_statement__ = 515;
      validate_non_negative_index("p_vec", "N", N);
      current_statement__ = 516;
      validate_non_negative_index("p_1d_vec", "N", N);
      current_statement__ = 517;
      validate_non_negative_index("p_1d_vec", "N", N);
      current_statement__ = 518;
      validate_non_negative_index("p_3d_vec", "N", N);
      current_statement__ = 519;
      validate_non_negative_index("p_3d_vec", "M", M);
      current_statement__ = 520;
      validate_non_negative_index("p_3d_vec", "K", K);
      current_statement__ = 521;
      validate_non_negative_index("p_3d_vec", "N", N);
      current_statement__ = 522;
      validate_non_negative_index("p_row_vec", "N", N);
      current_statement__ = 523;
      validate_non_negative_index("p_1d_row_vec", "N", N);
      current_statement__ = 524;
      validate_non_negative_index("p_1d_row_vec", "N", N);
      current_statement__ = 525;
      validate_non_negative_index("p_3d_row_vec", "N", N);
      current_statement__ = 526;
      validate_non_negative_index("p_3d_row_vec", "M", M);
      current_statement__ = 527;
      validate_non_negative_index("p_3d_row_vec", "K", K);
      current_statement__ = 528;
      validate_non_negative_index("p_3d_row_vec", "N", N);
      current_statement__ = 529;
      validate_positive_index("p_simplex", "N", N);
      current_statement__ = 530;
      validate_non_negative_index("p_1d_simplex", "N", N);
      current_statement__ = 531;
      validate_positive_index("p_1d_simplex", "N", N);
      current_statement__ = 532;
      validate_non_negative_index("p_3d_simplex", "N", N);
      current_statement__ = 533;
      validate_non_negative_index("p_3d_simplex", "M", M);
      current_statement__ = 534;
      validate_non_negative_index("p_3d_simplex", "K", K);
      current_statement__ = 535;
      validate_positive_index("p_3d_simplex", "N", N);
      current_statement__ = 536;
      check_greater_or_equal("cholesky_factor_cov p_cfcov_54",
                             "num rows (must be greater or equal to num cols)",
                             5, 4);
      current_statement__ = 537;
      check_greater_or_equal("cholesky_factor_cov p_cfcov_33",
                             "num rows (must be greater or equal to num cols)",
                             3, 3);
      current_statement__ = 538;
      validate_non_negative_index("p_cfcov_33_ar", "K", K);
      current_statement__ = 539;
      check_greater_or_equal("cholesky_factor_cov p_cfcov_33_ar",
                             "num rows (must be greater or equal to num cols)",
                             3, 3);
      current_statement__ = 540;
      validate_non_negative_index("tp_real_1d_ar", "N", N);
      current_statement__ = 541;
      validate_non_negative_index("tp_real_3d_ar", "N", N);
      current_statement__ = 542;
      validate_non_negative_index("tp_real_3d_ar", "M", M);
      current_statement__ = 543;
      validate_non_negative_index("tp_real_3d_ar", "K", K);
      current_statement__ = 544;
      validate_non_negative_index("tp_vec", "N", N);
      current_statement__ = 545;
      validate_non_negative_index("tp_1d_vec", "N", N);
      current_statement__ = 546;
      validate_non_negative_index("tp_1d_vec", "N", N);
      current_statement__ = 547;
      validate_non_negative_index("tp_3d_vec", "N", N);
      current_statement__ = 548;
      validate_non_negative_index("tp_3d_vec", "M", M);
      current_statement__ = 549;
      validate_non_negative_index("tp_3d_vec", "K", K);
      current_statement__ = 550;
      validate_non_negative_index("tp_3d_vec", "N", N);
      current_statement__ = 551;
      validate_non_negative_index("tp_row_vec", "N", N);
      current_statement__ = 552;
      validate_non_negative_index("tp_1d_row_vec", "N", N);
      current_statement__ = 553;
      validate_non_negative_index("tp_1d_row_vec", "N", N);
      current_statement__ = 554;
      validate_non_negative_index("tp_3d_row_vec", "N", N);
      current_statement__ = 555;
      validate_non_negative_index("tp_3d_row_vec", "M", M);
      current_statement__ = 556;
      validate_non_negative_index("tp_3d_row_vec", "K", K);
      current_statement__ = 557;
      validate_non_negative_index("tp_3d_row_vec", "N", N);
      current_statement__ = 558;
      validate_non_negative_index("tp_simplex", "N", N);
      current_statement__ = 559;
      validate_non_negative_index("tp_1d_simplex", "N", N);
      current_statement__ = 560;
      validate_non_negative_index("tp_1d_simplex", "N", N);
      current_statement__ = 561;
      validate_non_negative_index("tp_3d_simplex", "N", N);
      current_statement__ = 562;
      validate_non_negative_index("tp_3d_simplex", "M", M);
      current_statement__ = 563;
      validate_non_negative_index("tp_3d_simplex", "K", K);
      current_statement__ = 564;
      validate_non_negative_index("tp_3d_simplex", "N", N);
      current_statement__ = 565;
      validate_non_negative_index("tp_cfcov_33_ar", "K", K);
      current_statement__ = 566;
      validate_non_negative_index("gq_real_1d_ar", "N", N);
      current_statement__ = 567;
      validate_non_negative_index("gq_real_3d_ar", "N", N);
      current_statement__ = 568;
      validate_non_negative_index("gq_real_3d_ar", "M", M);
      current_statement__ = 569;
      validate_non_negative_index("gq_real_3d_ar", "K", K);
      current_statement__ = 570;
      validate_non_negative_index("gq_vec", "N", N);
      current_statement__ = 571;
      validate_non_negative_index("gq_1d_vec", "N", N);
      current_statement__ = 572;
      validate_non_negative_index("gq_1d_vec", "N", N);
      current_statement__ = 573;
      validate_non_negative_index("gq_3d_vec", "N", N);
      current_statement__ = 574;
      validate_non_negative_index("gq_3d_vec", "M", M);
      current_statement__ = 575;
      validate_non_negative_index("gq_3d_vec", "K", K);
      current_statement__ = 576;
      validate_non_negative_index("gq_3d_vec", "N", N);
      current_statement__ = 577;
      validate_non_negative_index("gq_row_vec", "N", N);
      current_statement__ = 578;
      validate_non_negative_index("gq_1d_row_vec", "N", N);
      current_statement__ = 579;
      validate_non_negative_index("gq_1d_row_vec", "N", N);
      current_statement__ = 580;
      validate_non_negative_index("gq_3d_row_vec", "N", N);
      current_statement__ = 581;
      validate_non_negative_index("gq_3d_row_vec", "M", M);
      current_statement__ = 582;
      validate_non_negative_index("gq_3d_row_vec", "K", K);
      current_statement__ = 583;
      validate_non_negative_index("gq_3d_row_vec", "N", N);
      current_statement__ = 584;
      validate_non_negative_index("gq_simplex", "N", N);
      current_statement__ = 585;
      validate_non_negative_index("gq_1d_simplex", "N", N);
      current_statement__ = 586;
      validate_non_negative_index("gq_1d_simplex", "N", N);
      current_statement__ = 587;
      validate_non_negative_index("gq_3d_simplex", "N", N);
      current_statement__ = 588;
      validate_non_negative_index("gq_3d_simplex", "M", M);
      current_statement__ = 589;
      validate_non_negative_index("gq_3d_simplex", "K", K);
      current_statement__ = 590;
      validate_non_negative_index("gq_3d_simplex", "N", N);
      current_statement__ = 591;
      validate_non_negative_index("gq_cfcov_33_ar", "K", K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + 1 + 5 + 5 + 5 + N + (N * M * K) + N + (N * N)
       + (N * M * K * N) + N + (N * N) + (N * M * K * N) + (5 * 4)
       + (4 * 5 * 2 * 3) + (N - 1) + (N * (N - 1)) + (N * M * K * (N - 1))
       + ((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4))
       + ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))
       + (K * ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))) + 2 + 2;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mother_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ p_real = DUMMY_VAR__;
      
      current_statement__ = 1;
      p_real = in__.template read<local_scalar_t__>();
      local_scalar_t__ p_upper = DUMMY_VAR__;
      
      current_statement__ = 2;
      p_upper = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  p_real, lp__);
      local_scalar_t__ p_lower = DUMMY_VAR__;
      
      current_statement__ = 3;
      p_lower = in__.template read_constrain_ub<local_scalar_t__, jacobian__>(
                  p_upper, lp__);
      std::vector<local_scalar_t__> offset_multiplier = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
                                                        
      
      current_statement__ = 4;
      offset_multiplier = in__.template read_constrain_offset_multiplier<std::vector<local_scalar_t__>, jacobian__>(
                            1, 2, lp__, 5);
      std::vector<local_scalar_t__> no_offset_multiplier = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
                                                           
      
      current_statement__ = 5;
      no_offset_multiplier = in__.template read_constrain_offset_multiplier<std::vector<local_scalar_t__>, jacobian__>(
                               0, 2, lp__, 5);
      std::vector<local_scalar_t__> offset_no_multiplier = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
                                                           
      
      current_statement__ = 6;
      offset_no_multiplier = in__.template read_constrain_offset_multiplier<std::vector<local_scalar_t__>, jacobian__>(
                               3, 1, lp__, 5);
      std::vector<local_scalar_t__> p_real_1d_ar = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
                                                   
      
      current_statement__ = 7;
      p_real_1d_ar = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                       0, lp__, N);
      std::vector<std::vector<std::vector<local_scalar_t__>>> p_real_3d_ar = 
      std::vector<std::vector<std::vector<local_scalar_t__>>>(N, std::vector<std::vector<local_scalar_t__>>(M, std::vector<local_scalar_t__>(K, DUMMY_VAR__)));
      
      
      current_statement__ = 8;
      p_real_3d_ar = in__.template read_constrain_lb<std::vector<std::vector<std::vector<local_scalar_t__>>>, jacobian__>(
                       0, lp__, N, M, K);
      Eigen::Matrix<local_scalar_t__, -1, 1> p_vec = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
                                                     
      
      current_statement__ = 9;
      p_vec = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                0, lp__, N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_1d_vec = 
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      
      
      current_statement__ = 10;
      p_1d_vec = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                   N, N);
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> p_3d_vec = 
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__))));
      
      
      current_statement__ = 11;
      p_3d_vec = in__.template read<std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>>(
                   N, M, K, N);
      Eigen::Matrix<local_scalar_t__, 1, -1> p_row_vec = Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__);
                                                         
      
      current_statement__ = 12;
      p_row_vec = in__.template read<Eigen::Matrix<local_scalar_t__, 1, -1>>(
                    N);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> p_1d_row_vec = 
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__));
      
      
      current_statement__ = 13;
      p_1d_row_vec = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
                       N, N);
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>> p_3d_row_vec = 
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(K, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__))));
      
      
      current_statement__ = 14;
      p_3d_row_vec = in__.template read<std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>>(
                       N, M, K, N);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>> p_mat = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(5, 4, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 15;
      p_mat = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(
                5, 4);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> p_ar_mat = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(4, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(5, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(2, 3, DUMMY_VAR__)));
      
      
      current_statement__ = 16;
      p_ar_mat = in__.template read_constrain_lub<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>, jacobian__>(
                   0, 1, lp__, 4, 5, 2, 3);
      Eigen::Matrix<local_scalar_t__, -1, 1> p_simplex = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
                                                         
      
      current_statement__ = 17;
      p_simplex = in__.template read_constrain_simplex<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                    lp__, N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_1d_simplex = 
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      
      
      current_statement__ = 18;
      p_1d_simplex = in__.template read_constrain_simplex<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>, jacobian__>(
                       lp__, N, N);
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> p_3d_simplex = 
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__))));
      
      
      current_statement__ = 19;
      p_3d_simplex = in__.template read_constrain_simplex<std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>, jacobian__>(
                       lp__, N, M, K, N);
      Eigen::Matrix<local_scalar_t__, -1, -1> p_cfcov_54 = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(5, 4, DUMMY_VAR__);
                                                           
      
      current_statement__ = 20;
      p_cfcov_54 = in__.template read_constrain_cholesky_factor_cov<Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(
                     lp__, 5, 4);
      Eigen::Matrix<local_scalar_t__, -1, -1> p_cfcov_33 = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(3, 3, DUMMY_VAR__);
                                                           
      
      current_statement__ = 21;
      p_cfcov_33 = in__.template read_constrain_cholesky_factor_cov<Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(
                     lp__, 3, 3);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> p_cfcov_33_ar = 
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(K, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(3, 3, DUMMY_VAR__));
      
      
      current_statement__ = 22;
      p_cfcov_33_ar = in__.template read_constrain_cholesky_factor_cov<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>, jacobian__>(
                        lp__, K, 3, 3);
      Eigen::Matrix<local_scalar_t__, -1, 1> x_p = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
                                                   
      
      current_statement__ = 23;
      x_p = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_p = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
                                                   
      
      current_statement__ = 24;
      y_p = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      std::vector<local_scalar_t__> tp_real_1d_ar = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
                                                    
      
      std::vector<std::vector<std::vector<local_scalar_t__>>> tp_real_3d_ar = 
      std::vector<std::vector<std::vector<local_scalar_t__>>>(N, std::vector<std::vector<local_scalar_t__>>(M, std::vector<local_scalar_t__>(K, DUMMY_VAR__)));
      
      
      Eigen::Matrix<local_scalar_t__, -1, 1> tp_vec = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
                                                      
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tp_1d_vec = 
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      
      
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> tp_3d_vec = 
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__))));
      
      
      Eigen::Matrix<local_scalar_t__, 1, -1> tp_row_vec = Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__);
                                                          
      
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> tp_1d_row_vec = 
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__));
      
      
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>> tp_3d_row_vec = 
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(K, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__))));
      
      
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>> tp_mat = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(5, 4, std::numeric_limits<double>::quiet_NaN()));
      
      
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> tp_ar_mat = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(4, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(5, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(2, 3, DUMMY_VAR__)));
      
      
      Eigen::Matrix<local_scalar_t__, -1, 1> tp_simplex = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
                                                          
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tp_1d_simplex = 
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
      
      
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> tp_3d_simplex = 
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__))));
      
      
      Eigen::Matrix<local_scalar_t__, -1, -1> tp_cfcov_54 = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(5, 4, DUMMY_VAR__);
                                                            
      
      Eigen::Matrix<local_scalar_t__, -1, -1> tp_cfcov_33 = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(3, 3, DUMMY_VAR__);
                                                            
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> tp_cfcov_33_ar = 
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(K, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(3, 3, DUMMY_VAR__));
      
      
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_p = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
                                                       
      
      local_scalar_t__ tp_real = DUMMY_VAR__;
      
      current_statement__ = 43;
      assign(tp_real_1d_ar, p_real_1d_ar, "assigning variable tp_real_1d_ar");
      current_statement__ = 44;
      assign(tp_real_3d_ar, p_real_3d_ar, "assigning variable tp_real_3d_ar");
      current_statement__ = 45;
      assign(tp_1d_vec, p_1d_vec, "assigning variable tp_1d_vec");
      current_statement__ = 46;
      assign(tp_3d_vec, p_3d_vec, "assigning variable tp_3d_vec");
      current_statement__ = 47;
      assign(tp_simplex, p_simplex, "assigning variable tp_simplex");
      current_statement__ = 48;
      assign(tp_1d_simplex, p_1d_simplex, "assigning variable tp_1d_simplex");
      current_statement__ = 49;
      assign(tp_3d_simplex, p_3d_simplex, "assigning variable tp_3d_simplex");
      current_statement__ = 50;
      assign(tp_cfcov_54, p_cfcov_54, "assigning variable tp_cfcov_54");
      current_statement__ = 51;
      assign(tp_cfcov_33, p_cfcov_33, "assigning variable tp_cfcov_33");
      current_statement__ = 52;
      assign(tp_cfcov_33_ar, p_cfcov_33_ar,
        "assigning variable tp_cfcov_33_ar");
      current_statement__ = 53;
      assign(tp_mat, stan::math::fma(d_cfcov_54, p_mat, p_mat),
        "assigning variable tp_mat");
      current_statement__ = 54;
      assign(tp_vec, stan::math::fma(d_vec, p_vec, p_vec),
        "assigning variable tp_vec");
      current_statement__ = 63;
      for (int i = 1; i <= 2; ++i) {
        current_statement__ = 61;
        for (int j = 1; j <= 3; ++j) {
          current_statement__ = 59;
          for (int m = 1; m <= 4; ++m) {
            current_statement__ = 57;
            for (int n = 1; n <= 5; ++n) {
              current_statement__ = 55;
              assign(tp_ar_mat, 0.4,
                "assigning variable tp_ar_mat", index_uni(m), index_uni(n),
                                                  index_uni(i), index_uni(j));
            }
          }
        }
      }
      current_statement__ = 65;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 64;
        assign(tp_vec, (-1.0 * rvalue(p_vec, "p_vec", index_uni(i))),
          "assigning variable tp_vec", index_uni(i));
      }
      current_statement__ = 66;
      assign(tp_row_vec,
        transpose(rvalue(tp_1d_vec, "tp_1d_vec", index_uni(1))),
        "assigning variable tp_row_vec");
      current_statement__ = 67;
      assign(tp_1d_row_vec, p_1d_row_vec, "assigning variable tp_1d_row_vec");
      current_statement__ = 68;
      assign(tp_3d_row_vec, p_3d_row_vec, "assigning variable tp_3d_row_vec");
      current_statement__ = 69;
      assign(theta_p,
        algebra_solver(algebra_system_functor__(), x, y, dat, dat_int,
          pstream__), "assigning variable theta_p");
      current_statement__ = 70;
      assign(theta_p,
        algebra_solver(algebra_system_functor__(), x, y, dat, dat_int,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p");
      current_statement__ = 71;
      assign(theta_p,
        algebra_solver(algebra_system_functor__(), x, y_p, dat, dat_int,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p");
      current_statement__ = 72;
      assign(theta_p,
        algebra_solver(algebra_system_functor__(), x_p, y, dat, dat_int,
          pstream__), "assigning variable theta_p");
      current_statement__ = 73;
      assign(theta_p,
        algebra_solver(algebra_system_functor__(), x_p, y, dat, dat_int,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p");
      current_statement__ = 74;
      assign(theta_p,
        algebra_solver(algebra_system_functor__(), x_p, y_p, dat, dat_int,
          pstream__), "assigning variable theta_p");
      current_statement__ = 75;
      assign(theta_p,
        algebra_solver(algebra_system_functor__(), x_p, y_p, dat, dat_int,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p");
      current_statement__ = 76;
      tp_real = (p_real * p_real);
      current_statement__ = 77;
      tp_real = (p_real / p_real);
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 25;
        check_greater_or_equal(function__, "tp_real_1d_ar[sym1__]",
                               tp_real_1d_ar[(sym1__ - 1)], 0);
      }
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 26;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 26;
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 26;
            check_greater_or_equal(function__, "tp_real_3d_ar[sym1__, sym2__, sym3__]",
                                   tp_real_3d_ar[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], 0);
          }
        }
      }
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 27;
        check_less_or_equal(function__, "tp_vec[sym1__]",
                            tp_vec[(sym1__ - 1)], 0);
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 34;
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 34;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 34;
            for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
              current_statement__ = 34;
              check_greater_or_equal(function__, "tp_ar_mat[sym1__, sym2__, sym3__, sym4__]",
                                     rvalue(tp_ar_mat, "tp_ar_mat",
                                       index_uni(sym1__), index_uni(sym2__),
                                         index_uni(sym3__), index_uni(sym4__)),
                                     0);
            }
          }
        }
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 34;
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 34;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 34;
            for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
              current_statement__ = 34;
              check_less_or_equal(function__, "tp_ar_mat[sym1__, sym2__, sym3__, sym4__]",
                                  rvalue(tp_ar_mat, "tp_ar_mat",
                                    index_uni(sym1__), index_uni(sym2__),
                                      index_uni(sym3__), index_uni(sym4__)),
                                  1);
            }
          }
        }
      }
      current_statement__ = 35;
      check_simplex(function__, "tp_simplex",
                    stan::math::value_of(tp_simplex));
      current_statement__ = 36;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 36;
        check_simplex(function__, "tp_1d_simplex[sym1__]",
                      stan::math::value_of(tp_1d_simplex[(sym1__ - 1)]));
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 37;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 37;
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 37;
            check_simplex(function__, "tp_3d_simplex[sym1__, sym2__, sym3__]",
                          stan::math::value_of(tp_3d_simplex[(sym1__ - 1)][
                          (sym2__ - 1)][(sym3__ - 1)]));
          }
        }
      }
      current_statement__ = 38;
      check_cholesky_factor(function__, "tp_cfcov_54",
                            stan::math::value_of(tp_cfcov_54));
      current_statement__ = 39;
      check_cholesky_factor(function__, "tp_cfcov_33",
                            stan::math::value_of(tp_cfcov_33));
      current_statement__ = 40;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 40;
        check_cholesky_factor(function__, "tp_cfcov_33_ar[sym1__]",
                              stan::math::value_of(tp_cfcov_33_ar[(sym1__ -
                                                                    1)]));
      }
      {
        Eigen::Matrix<local_scalar_t__, -1, 1> tmp = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(0, DUMMY_VAR__);
                                                     
        
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tmp2 = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(0, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(0, DUMMY_VAR__));
                                                                   
        
        local_scalar_t__ r1 = DUMMY_VAR__;
        
        current_statement__ = 156;
        r1 = foo_bar1(p_real, pstream__);
        local_scalar_t__ r2 = DUMMY_VAR__;
        
        current_statement__ = 157;
        r2 = foo_bar1(J, pstream__);
        current_statement__ = 158;
        lp_accum__.add(normal_lpdf<propto__>(p_real, 0, 1));
        current_statement__ = 159;
        lp_accum__.add(normal_lpdf<propto__>(offset_multiplier, 0, 1));
        current_statement__ = 160;
        lp_accum__.add(normal_lpdf<propto__>(no_offset_multiplier, 0, 1));
        current_statement__ = 161;
        lp_accum__.add(normal_lpdf<propto__>(offset_no_multiplier, 0, 1));
        current_statement__ = 162;
        lp_accum__.add(normal_lpdf<propto__>(to_vector(p_real_1d_ar), 0, 1));
        current_statement__ = 175;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 163;
          lp_accum__.add(
            normal_lpdf<propto__>(
              to_vector(rvalue(p_1d_vec, "p_1d_vec", index_uni(n))), 0, 1));
          current_statement__ = 164;
          lp_accum__.add(
            normal_lpdf<propto__>(
              to_vector(rvalue(p_1d_row_vec, "p_1d_row_vec", index_uni(n))),
              0, 1));
          current_statement__ = 165;
          lp_accum__.add(
            normal_lpdf<propto__>(
              to_vector(rvalue(p_1d_simplex, "p_1d_simplex", index_uni(n))),
              0, 1));
          current_statement__ = 173;
          for (int m = 1; m <= M; ++m) {
            current_statement__ = 171;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 166;
              lp_accum__.add(
                normal_lpdf<propto__>(
                  to_vector(
                    rvalue(p_3d_vec, "p_3d_vec",
                      index_uni(n), index_uni(m), index_uni(k))),
                  rvalue(d_3d_vec, "d_3d_vec",
                    index_uni(n), index_uni(m), index_uni(k)), 1));
              current_statement__ = 167;
              lp_accum__.add(
                normal_lpdf<propto__>(
                  to_vector(
                    rvalue(p_3d_row_vec, "p_3d_row_vec",
                      index_uni(n), index_uni(m), index_uni(k))),
                  rvalue(d_3d_row_vec, "d_3d_row_vec",
                    index_uni(n), index_uni(m), index_uni(k)), 1));
              current_statement__ = 168;
              lp_accum__.add(
                normal_lpdf<propto__>(
                  to_vector(
                    rvalue(p_3d_simplex, "p_3d_simplex",
                      index_uni(n), index_uni(m), index_uni(k))),
                  rvalue(d_3d_simplex, "d_3d_simplex",
                    index_uni(n), index_uni(m), index_uni(k)), 1));
              current_statement__ = 169;
              lp_accum__.add(
                normal_lpdf<propto__>(
                  rvalue(p_real_3d_ar, "p_real_3d_ar",
                    index_uni(n), index_uni(m), index_uni(k)),
                  rvalue(p_real_3d_ar, "p_real_3d_ar",
                    index_uni(n), index_uni(m), index_uni(k)), 1));
            }
          }
        }
        current_statement__ = 180;
        for (int i = 1; i <= 4; ++i) {
          current_statement__ = 178;
          for (int j = 1; j <= 5; ++j) {
            current_statement__ = 176;
            lp_accum__.add(
              normal_lpdf<propto__>(
                to_vector(
                  rvalue(p_ar_mat, "p_ar_mat", index_uni(i), index_uni(j))),
                0, 1));
          }
        }
        current_statement__ = 183;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 181;
          lp_accum__.add(
            normal_lpdf<propto__>(
              to_vector(rvalue(p_cfcov_33_ar, "p_cfcov_33_ar", index_uni(k))),
              0, 1));
        }
        current_statement__ = 184;
        lp_accum__.add(normal_lpdf<propto__>(to_vector(p_vec), d_vec, 1));
        current_statement__ = 185;
        lp_accum__.add(normal_lpdf<propto__>(to_vector(p_row_vec), 0, 1));
        current_statement__ = 186;
        lp_accum__.add(normal_lpdf<propto__>(to_vector(p_simplex), 0, 1));
        current_statement__ = 187;
        lp_accum__.add(normal_lpdf<propto__>(to_vector(p_cfcov_54), 0, 1));
        current_statement__ = 188;
        lp_accum__.add(normal_lpdf<propto__>(to_vector(p_cfcov_33), 0, 1));
        current_statement__ = 189;
        lp_accum__.add(
          map_rect<1, binomialf_functor__>(tmp, tmp2, x_r, x_i, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mother_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double p_real = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      p_real = in__.template read<local_scalar_t__>();
      double p_upper = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      p_upper = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  p_real, lp__);
      double p_lower = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      p_lower = in__.template read_constrain_ub<local_scalar_t__, jacobian__>(
                  p_upper, lp__);
      std::vector<double> offset_multiplier = std::vector<double>(5, std::numeric_limits<double>::quiet_NaN());
                                              
      
      current_statement__ = 4;
      offset_multiplier = in__.template read_constrain_offset_multiplier<std::vector<local_scalar_t__>, jacobian__>(
                            1, 2, lp__, 5);
      std::vector<double> no_offset_multiplier = std::vector<double>(5, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      current_statement__ = 5;
      no_offset_multiplier = in__.template read_constrain_offset_multiplier<std::vector<local_scalar_t__>, jacobian__>(
                               0, 2, lp__, 5);
      std::vector<double> offset_no_multiplier = std::vector<double>(5, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      current_statement__ = 6;
      offset_no_multiplier = in__.template read_constrain_offset_multiplier<std::vector<local_scalar_t__>, jacobian__>(
                               3, 1, lp__, 5);
      std::vector<double> p_real_1d_ar = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                                         
      
      current_statement__ = 7;
      p_real_1d_ar = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                       0, lp__, N);
      std::vector<std::vector<std::vector<double>>> p_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, std::numeric_limits<double>::quiet_NaN())));
                                                                   
      
      current_statement__ = 8;
      p_real_3d_ar = in__.template read_constrain_lb<std::vector<std::vector<std::vector<local_scalar_t__>>>, jacobian__>(
                       0, lp__, N, M, K);
      Eigen::Matrix<double, -1, 1> p_vec = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                           
      
      current_statement__ = 9;
      p_vec = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                0, lp__, N);
      std::vector<Eigen::Matrix<double, -1, 1>> p_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                           
      
      current_statement__ = 10;
      p_1d_vec = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                   N, N);
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> p_3d_vec = 
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      current_statement__ = 11;
      p_3d_vec = in__.template read<std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>>(
                   N, M, K, N);
      Eigen::Matrix<double, 1, -1> p_row_vec = Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                               
      
      current_statement__ = 12;
      p_row_vec = in__.template read<Eigen::Matrix<local_scalar_t__, 1, -1>>(
                    N);
      std::vector<Eigen::Matrix<double, 1, -1>> p_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                               
      
      current_statement__ = 13;
      p_1d_row_vec = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
                       N, N);
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> p_3d_row_vec = 
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      current_statement__ = 14;
      p_3d_row_vec = in__.template read<std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>>(
                       N, M, K, N);
      Eigen::Matrix<double, -1, -1> p_mat = Eigen::Matrix<double, -1, -1>::Constant(5, 4, std::numeric_limits<double>::quiet_NaN());
                                            
      
      current_statement__ = 15;
      p_mat = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(5,
                4);
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> p_ar_mat = 
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>::Constant(2, 3, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 16;
      p_ar_mat = in__.template read_constrain_lub<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>, jacobian__>(
                   0, 1, lp__, 4, 5, 2, 3);
      Eigen::Matrix<double, -1, 1> p_simplex = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                               
      
      current_statement__ = 17;
      p_simplex = in__.template read_constrain_simplex<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                    lp__, N);
      std::vector<Eigen::Matrix<double, -1, 1>> p_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                               
      
      current_statement__ = 18;
      p_1d_simplex = in__.template read_constrain_simplex<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>, jacobian__>(
                       lp__, N, N);
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> p_3d_simplex = 
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      current_statement__ = 19;
      p_3d_simplex = in__.template read_constrain_simplex<std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>, jacobian__>(
                       lp__, N, M, K, N);
      Eigen::Matrix<double, -1, -1> p_cfcov_54 = Eigen::Matrix<double, -1, -1>::Constant(5, 4, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      current_statement__ = 20;
      p_cfcov_54 = in__.template read_constrain_cholesky_factor_cov<Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(
                     lp__, 5, 4);
      Eigen::Matrix<double, -1, -1> p_cfcov_33 = Eigen::Matrix<double, -1, -1>::Constant(3, 3, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      current_statement__ = 21;
      p_cfcov_33 = in__.template read_constrain_cholesky_factor_cov<Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(
                     lp__, 3, 3);
      std::vector<Eigen::Matrix<double, -1, -1>> p_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>::Constant(3, 3, std::numeric_limits<double>::quiet_NaN()));
                                                                 
      
      current_statement__ = 22;
      p_cfcov_33_ar = in__.template read_constrain_cholesky_factor_cov<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>, jacobian__>(
                        lp__, K, 3, 3);
      Eigen::Matrix<double, -1, 1> x_p = Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
                                         
      
      current_statement__ = 23;
      x_p = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      Eigen::Matrix<double, -1, 1> y_p = Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
                                         
      
      current_statement__ = 24;
      y_p = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      std::vector<double> tp_real_1d_ar = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                                          
      
      std::vector<std::vector<std::vector<double>>> tp_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, std::numeric_limits<double>::quiet_NaN())));
                                                                    
      
      Eigen::Matrix<double, -1, 1> tp_vec = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                            
      
      std::vector<Eigen::Matrix<double, -1, 1>> tp_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                            
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> tp_3d_vec = 
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      Eigen::Matrix<double, 1, -1> tp_row_vec = Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                
      
      std::vector<Eigen::Matrix<double, 1, -1>> tp_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                                
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> tp_3d_row_vec = 
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      Eigen::Matrix<double, -1, -1> tp_mat = Eigen::Matrix<double, -1, -1>::Constant(5, 4, std::numeric_limits<double>::quiet_NaN());
                                             
      
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> tp_ar_mat = 
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>::Constant(2, 3, std::numeric_limits<double>::quiet_NaN())));
      
      
      Eigen::Matrix<double, -1, 1> tp_simplex = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                
      
      std::vector<Eigen::Matrix<double, -1, 1>> tp_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                                
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> tp_3d_simplex = 
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      Eigen::Matrix<double, -1, -1> tp_cfcov_54 = Eigen::Matrix<double, -1, -1>::Constant(5, 4, std::numeric_limits<double>::quiet_NaN());
                                                  
      
      Eigen::Matrix<double, -1, -1> tp_cfcov_33 = Eigen::Matrix<double, -1, -1>::Constant(3, 3, std::numeric_limits<double>::quiet_NaN());
                                                  
      
      std::vector<Eigen::Matrix<double, -1, -1>> tp_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>::Constant(3, 3, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      Eigen::Matrix<double, -1, 1> theta_p = Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
                                             
      
      double tp_real = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(p_real);
      vars__.emplace_back(p_upper);
      vars__.emplace_back(p_lower);
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(offset_multiplier[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(no_offset_multiplier[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(offset_no_multiplier[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_real_1d_ar[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              p_real_3d_ar[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_vec[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(p_1d_vec[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              vars__.emplace_back(
                p_3d_vec[(sym4__ - 1)][(sym3__ - 1)][(sym2__ - 1)][(sym1__ -
                                                                    1)]);
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_row_vec[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(p_1d_row_vec[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              vars__.emplace_back(
                p_3d_row_vec[(sym4__ - 1)][(sym3__ - 1)][(sym2__ - 1)][
                (sym1__ - 1)]);
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_mat, "p_mat", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= 4; ++sym4__) {
              vars__.emplace_back(
                rvalue(p_ar_mat, "p_ar_mat",
                  index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                    index_uni(sym1__)));
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_simplex[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(p_1d_simplex[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              vars__.emplace_back(
                p_3d_simplex[(sym4__ - 1)][(sym3__ - 1)][(sym2__ - 1)][
                (sym1__ - 1)]);
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_cfcov_54, "p_cfcov_54",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_cfcov_33, "p_cfcov_33",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            vars__.emplace_back(
              rvalue(p_cfcov_33_ar, "p_cfcov_33_ar",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(x_p[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(y_p[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 43;
      assign(tp_real_1d_ar, p_real_1d_ar, "assigning variable tp_real_1d_ar");
      current_statement__ = 44;
      assign(tp_real_3d_ar, p_real_3d_ar, "assigning variable tp_real_3d_ar");
      current_statement__ = 45;
      assign(tp_1d_vec, p_1d_vec, "assigning variable tp_1d_vec");
      current_statement__ = 46;
      assign(tp_3d_vec, p_3d_vec, "assigning variable tp_3d_vec");
      current_statement__ = 47;
      assign(tp_simplex, p_simplex, "assigning variable tp_simplex");
      current_statement__ = 48;
      assign(tp_1d_simplex, p_1d_simplex, "assigning variable tp_1d_simplex");
      current_statement__ = 49;
      assign(tp_3d_simplex, p_3d_simplex, "assigning variable tp_3d_simplex");
      current_statement__ = 50;
      assign(tp_cfcov_54, p_cfcov_54, "assigning variable tp_cfcov_54");
      current_statement__ = 51;
      assign(tp_cfcov_33, p_cfcov_33, "assigning variable tp_cfcov_33");
      current_statement__ = 52;
      assign(tp_cfcov_33_ar, p_cfcov_33_ar,
        "assigning variable tp_cfcov_33_ar");
      current_statement__ = 53;
      assign(tp_mat, stan::math::fma(d_cfcov_54, p_mat, p_mat),
        "assigning variable tp_mat");
      current_statement__ = 54;
      assign(tp_vec, stan::math::fma(d_vec, p_vec, p_vec),
        "assigning variable tp_vec");
      current_statement__ = 63;
      for (int i = 1; i <= 2; ++i) {
        current_statement__ = 61;
        for (int j = 1; j <= 3; ++j) {
          current_statement__ = 59;
          for (int m = 1; m <= 4; ++m) {
            current_statement__ = 57;
            for (int n = 1; n <= 5; ++n) {
              current_statement__ = 55;
              assign(tp_ar_mat, 0.4,
                "assigning variable tp_ar_mat", index_uni(m), index_uni(n),
                                                  index_uni(i), index_uni(j));
            }
          }
        }
      }
      current_statement__ = 65;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 64;
        assign(tp_vec, (-1.0 * rvalue(p_vec, "p_vec", index_uni(i))),
          "assigning variable tp_vec", index_uni(i));
      }
      current_statement__ = 66;
      assign(tp_row_vec,
        transpose(rvalue(tp_1d_vec, "tp_1d_vec", index_uni(1))),
        "assigning variable tp_row_vec");
      current_statement__ = 67;
      assign(tp_1d_row_vec, p_1d_row_vec, "assigning variable tp_1d_row_vec");
      current_statement__ = 68;
      assign(tp_3d_row_vec, p_3d_row_vec, "assigning variable tp_3d_row_vec");
      current_statement__ = 69;
      assign(theta_p,
        algebra_solver(algebra_system_functor__(), x, y, dat, dat_int,
          pstream__), "assigning variable theta_p");
      current_statement__ = 70;
      assign(theta_p,
        algebra_solver(algebra_system_functor__(), x, y, dat, dat_int,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p");
      current_statement__ = 71;
      assign(theta_p,
        algebra_solver(algebra_system_functor__(), x, y_p, dat, dat_int,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p");
      current_statement__ = 72;
      assign(theta_p,
        algebra_solver(algebra_system_functor__(), x_p, y, dat, dat_int,
          pstream__), "assigning variable theta_p");
      current_statement__ = 73;
      assign(theta_p,
        algebra_solver(algebra_system_functor__(), x_p, y, dat, dat_int,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p");
      current_statement__ = 74;
      assign(theta_p,
        algebra_solver(algebra_system_functor__(), x_p, y_p, dat, dat_int,
          pstream__), "assigning variable theta_p");
      current_statement__ = 75;
      assign(theta_p,
        algebra_solver(algebra_system_functor__(), x_p, y_p, dat, dat_int,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p");
      current_statement__ = 76;
      tp_real = (p_real * p_real);
      current_statement__ = 77;
      tp_real = (p_real / p_real);
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 25;
        check_greater_or_equal(function__, "tp_real_1d_ar[sym1__]",
                               tp_real_1d_ar[(sym1__ - 1)], 0);
      }
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 26;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 26;
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 26;
            check_greater_or_equal(function__, "tp_real_3d_ar[sym1__, sym2__, sym3__]",
                                   tp_real_3d_ar[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], 0);
          }
        }
      }
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 27;
        check_less_or_equal(function__, "tp_vec[sym1__]",
                            tp_vec[(sym1__ - 1)], 0);
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 34;
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 34;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 34;
            for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
              current_statement__ = 34;
              check_greater_or_equal(function__, "tp_ar_mat[sym1__, sym2__, sym3__, sym4__]",
                                     rvalue(tp_ar_mat, "tp_ar_mat",
                                       index_uni(sym1__), index_uni(sym2__),
                                         index_uni(sym3__), index_uni(sym4__)),
                                     0);
            }
          }
        }
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 34;
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 34;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 34;
            for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
              current_statement__ = 34;
              check_less_or_equal(function__, "tp_ar_mat[sym1__, sym2__, sym3__, sym4__]",
                                  rvalue(tp_ar_mat, "tp_ar_mat",
                                    index_uni(sym1__), index_uni(sym2__),
                                      index_uni(sym3__), index_uni(sym4__)),
                                  1);
            }
          }
        }
      }
      current_statement__ = 35;
      check_simplex(function__, "tp_simplex", tp_simplex);
      current_statement__ = 36;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 36;
        check_simplex(function__, "tp_1d_simplex[sym1__]",
                      tp_1d_simplex[(sym1__ - 1)]);
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 37;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 37;
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 37;
            check_simplex(function__, "tp_3d_simplex[sym1__, sym2__, sym3__]",
                          tp_3d_simplex[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)]);
          }
        }
      }
      current_statement__ = 38;
      check_cholesky_factor(function__, "tp_cfcov_54", tp_cfcov_54);
      current_statement__ = 39;
      check_cholesky_factor(function__, "tp_cfcov_33", tp_cfcov_33);
      current_statement__ = 40;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 40;
        check_cholesky_factor(function__, "tp_cfcov_33_ar[sym1__]",
                              tp_cfcov_33_ar[(sym1__ - 1)]);
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(tp_real_1d_ar[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              vars__.emplace_back(
                tp_real_3d_ar[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(tp_vec[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(tp_1d_vec[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                vars__.emplace_back(
                  tp_3d_vec[(sym4__ - 1)][(sym3__ - 1)][(sym2__ - 1)][
                  (sym1__ - 1)]);
              }
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(tp_row_vec[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(tp_1d_row_vec[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                vars__.emplace_back(
                  tp_3d_row_vec[(sym4__ - 1)][(sym3__ - 1)][(sym2__ - 1)][
                  (sym1__ - 1)]);
              }
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            vars__.emplace_back(
              rvalue(tp_mat, "tp_mat", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
              for (int sym4__ = 1; sym4__ <= 4; ++sym4__) {
                vars__.emplace_back(
                  rvalue(tp_ar_mat, "tp_ar_mat",
                    index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                      index_uni(sym1__)));
              }
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(tp_simplex[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(tp_1d_simplex[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                vars__.emplace_back(
                  tp_3d_simplex[(sym4__ - 1)][(sym3__ - 1)][(sym2__ - 1)][
                  (sym1__ - 1)]);
              }
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            vars__.emplace_back(
              rvalue(tp_cfcov_54, "tp_cfcov_54",
                index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            vars__.emplace_back(
              rvalue(tp_cfcov_33, "tp_cfcov_33",
                index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
              vars__.emplace_back(
                rvalue(tp_cfcov_33_ar, "tp_cfcov_33_ar",
                  index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(theta_p[(sym1__ - 1)]);
        }
        vars__.emplace_back(tp_real);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double gq_r1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 78;
      gq_r1 = foo_bar1(p_real, pstream__);
      double gq_r2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 79;
      gq_r2 = foo_bar1(J, pstream__);
      std::vector<double> gq_real_1d_ar = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                                          
      
      std::vector<std::vector<std::vector<double>>> gq_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, std::numeric_limits<double>::quiet_NaN())));
                                                                    
      
      Eigen::Matrix<double, -1, 1> gq_vec = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                            
      
      std::vector<Eigen::Matrix<double, -1, 1>> gq_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                            
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> gq_3d_vec = 
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      Eigen::Matrix<double, 1, -1> gq_row_vec = Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                
      
      std::vector<Eigen::Matrix<double, 1, -1>> gq_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                                
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> gq_3d_row_vec = 
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> gq_ar_mat = 
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>::Constant(2, 3, std::numeric_limits<double>::quiet_NaN())));
      
      
      Eigen::Matrix<double, -1, 1> gq_simplex = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                
      
      std::vector<Eigen::Matrix<double, -1, 1>> gq_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                                
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> gq_3d_simplex = 
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      Eigen::Matrix<double, -1, -1> gq_cfcov_54 = Eigen::Matrix<double, -1, -1>::Constant(5, 4, std::numeric_limits<double>::quiet_NaN());
                                                  
      
      Eigen::Matrix<double, -1, -1> gq_cfcov_33 = Eigen::Matrix<double, -1, -1>::Constant(3, 3, std::numeric_limits<double>::quiet_NaN());
                                                  
      
      std::vector<Eigen::Matrix<double, -1, -1>> gq_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>::Constant(3, 3, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      std::vector<int> indices = std::vector<int>(3, std::numeric_limits<int>::min());
                                 
      
      current_statement__ = 95;
      assign(indices, std::vector<int>{2, 3, 1}, "assigning variable indices");
      std::vector<Eigen::Matrix<double, -1, -1>> indexing_mat = std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>::Constant(3, 4, std::numeric_limits<double>::quiet_NaN()));
                                                                
      
      std::vector<Eigen::Matrix<double, -1, -1>> idx_res1 = std::vector<Eigen::Matrix<double, -1, -1>>(3, Eigen::Matrix<double, -1, -1>::Constant(3, 4, std::numeric_limits<double>::quiet_NaN()));
                                                            
      
      std::vector<Eigen::Matrix<double, -1, -1>> idx_res2 = std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>::Constant(3, 4, std::numeric_limits<double>::quiet_NaN()));
                                                            
      
      std::vector<Eigen::Matrix<double, -1, -1>> idx_res3 = std::vector<Eigen::Matrix<double, -1, -1>>(3, Eigen::Matrix<double, -1, -1>::Constant(3, 3, std::numeric_limits<double>::quiet_NaN()));
                                                            
      
      std::vector<Eigen::Matrix<double, -1, -1>> idx_res11 = std::vector<Eigen::Matrix<double, -1, -1>>(3, Eigen::Matrix<double, -1, -1>::Constant(3, 4, std::numeric_limits<double>::quiet_NaN()));
                                                             
      
      std::vector<Eigen::Matrix<double, -1, -1>> idx_res21 = std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>::Constant(3, 4, std::numeric_limits<double>::quiet_NaN()));
                                                             
      
      std::vector<Eigen::Matrix<double, -1, -1>> idx_res31 = std::vector<Eigen::Matrix<double, -1, -1>>(3, Eigen::Matrix<double, -1, -1>::Constant(3, 3, std::numeric_limits<double>::quiet_NaN()));
                                                             
      
      std::vector<Eigen::Matrix<double, 1, -1>> idx_res4 = std::vector<Eigen::Matrix<double, 1, -1>>(3, Eigen::Matrix<double, 1, -1>::Constant(4, std::numeric_limits<double>::quiet_NaN()));
                                                           
      
      std::vector<Eigen::Matrix<double, -1, 1>> idx_res5 = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN()));
                                                           
      
      current_statement__ = 105;
      assign(gq_real_1d_ar,
        rvalue(p_1d_simplex, "p_1d_simplex", index_omni(), index_uni(1)),
        "assigning variable gq_real_1d_ar");
      current_statement__ = 106;
      assign(gq_real_3d_ar, p_real_3d_ar, "assigning variable gq_real_3d_ar");
      current_statement__ = 107;
      assign(gq_1d_vec, p_1d_vec, "assigning variable gq_1d_vec");
      current_statement__ = 108;
      assign(gq_3d_vec, p_3d_vec, "assigning variable gq_3d_vec");
      current_statement__ = 109;
      assign(gq_row_vec, p_row_vec, "assigning variable gq_row_vec");
      current_statement__ = 110;
      assign(gq_1d_row_vec, p_1d_row_vec, "assigning variable gq_1d_row_vec");
      current_statement__ = 111;
      assign(gq_3d_row_vec, p_3d_row_vec, "assigning variable gq_3d_row_vec");
      current_statement__ = 112;
      assign(gq_simplex,
        rvalue(p_1d_simplex, "p_1d_simplex",
          index_uni(1), index_min_max(1, N)), "assigning variable gq_simplex");
      current_statement__ = 113;
      assign(gq_1d_simplex, p_1d_simplex, "assigning variable gq_1d_simplex");
      current_statement__ = 114;
      assign(gq_3d_simplex, p_3d_simplex, "assigning variable gq_3d_simplex");
      current_statement__ = 115;
      assign(gq_cfcov_54, p_cfcov_54, "assigning variable gq_cfcov_54");
      current_statement__ = 116;
      assign(gq_cfcov_33, p_cfcov_33, "assigning variable gq_cfcov_33");
      current_statement__ = 117;
      assign(gq_cfcov_33_ar, p_cfcov_33_ar,
        "assigning variable gq_cfcov_33_ar");
      current_statement__ = 126;
      for (int i = 1; i <= 2; ++i) {
        current_statement__ = 124;
        for (int j = 1; j <= 3; ++j) {
          current_statement__ = 122;
          for (int m = 1; m <= 4; ++m) {
            current_statement__ = 120;
            for (int n = 1; n <= 5; ++n) {
              current_statement__ = 118;
              assign(gq_ar_mat, 0.4,
                "assigning variable gq_ar_mat", index_uni(m), index_uni(n),
                                                  index_uni(i), index_uni(j));
            }
          }
        }
      }
      current_statement__ = 128;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 127;
        assign(gq_vec, (-1.0 * rvalue(p_vec, "p_vec", index_uni(i))),
          "assigning variable gq_vec", index_uni(i));
      }
      current_statement__ = 132;
      for (int i = 1; i <= 3; ++i) {
        current_statement__ = 131;
        for (int j = 1; j <= 4; ++j) {
          current_statement__ = 130;
          for (int k = 1; k <= 5; ++k) {
            current_statement__ = 129;
            assign(indexing_mat, normal_rng(0, 1, base_rng__),
              "assigning variable indexing_mat", index_uni(k), index_uni(i),
                                                   index_uni(j));
          }
        }
      }
      current_statement__ = 135;
      for (int i = 1; i <= size(indices); ++i) {
        current_statement__ = 134;
        for (int j = 1; j <= size(indices); ++j) {
          current_statement__ = 133;
          assign(idx_res1,
            rvalue(indexing_mat, "indexing_mat",
              index_uni(rvalue(indices, "indices", index_uni(i))),
                index_uni(rvalue(indices, "indices", index_uni(j)))),
            "assigning variable idx_res1", index_uni(i), index_uni(j));
        }
      }
      current_statement__ = 136;
      assign(idx_res11,
        rvalue(indexing_mat, "indexing_mat",
          index_multi(indices), index_multi(indices)),
        "assigning variable idx_res11");
      current_statement__ = 138;
      if (logical_neq(
            rvalue(
              rvalue(indexing_mat, "indexing_mat",
  index_multi(indices), index_multi(indices)),
              "indexing_mat[indices, indices]",
              index_uni(2), index_uni(1), index_uni(1)),
            rvalue(idx_res1, "idx_res1",
              index_uni(2), index_uni(1), index_uni(1)))) {
        current_statement__ = 137;
        std::stringstream errmsg_stream__;
        errmsg_stream__ << "indexing test 1 failed";
        throw std::domain_error(errmsg_stream__.str());
      } 
      current_statement__ = 141;
      for (int i = 1; i <= 5; ++i) {
        current_statement__ = 140;
        for (int j = 1; j <= size(indices); ++j) {
          current_statement__ = 139;
          assign(idx_res2,
            rvalue(indexing_mat, "indexing_mat",
              index_uni(i),
                index_uni(rvalue(indices, "indices", index_uni(j)))),
            "assigning variable idx_res2", index_uni(i), index_uni(j));
        }
      }
      current_statement__ = 142;
      assign(idx_res21,
        rvalue(indexing_mat, "indexing_mat",
          index_omni(), index_multi(indices)), "assigning variable idx_res21");
      current_statement__ = 144;
      if (logical_neq(
            rvalue(
              rvalue(indexing_mat, "indexing_mat", index_omni(), index_multi(indices)),
              "indexing_mat[:, indices]",
              index_uni(2), index_uni(1), index_uni(1)),
            rvalue(idx_res2, "idx_res2",
              index_uni(2), index_uni(1), index_uni(1)))) {
        current_statement__ = 143;
        std::stringstream errmsg_stream__;
        errmsg_stream__ << "indexing test 2 failed";
        throw std::domain_error(errmsg_stream__.str());
      } 
      current_statement__ = 148;
      for (int i = 1; i <= size(indices); ++i) {
        current_statement__ = 147;
        for (int j = 1; j <= 3; ++j) {
          current_statement__ = 146;
          for (int k = 1; k <= size(indices); ++k) {
            current_statement__ = 145;
            assign(idx_res3,
              rvalue(indexing_mat, "indexing_mat",
                index_uni(rvalue(indices, "indices", index_uni(i))),
                  index_uni(j),
                  index_uni(rvalue(indices, "indices", index_uni(k)))),
              "assigning variable idx_res3", index_uni(i), index_uni(j),
                                               index_uni(k));
          }
        }
      }
      current_statement__ = 149;
      assign(idx_res31,
        rvalue(indexing_mat, "indexing_mat",
          index_multi(indices), index_omni(), index_multi(indices)),
        "assigning variable idx_res31");
      current_statement__ = 151;
      if (logical_neq(
            rvalue(
              rvalue(indexing_mat, "indexing_mat",
  index_multi(indices), index_omni(), index_multi(indices)),
              "indexing_mat[indices, :, indices]",
              index_uni(2), index_uni(1), index_uni(1)),
            rvalue(idx_res3, "idx_res3",
              index_uni(2), index_uni(1), index_uni(1)))) {
        current_statement__ = 150;
        std::stringstream errmsg_stream__;
        errmsg_stream__ << "indexing test 3 failed";
        throw std::domain_error(errmsg_stream__.str());
      } 
      current_statement__ = 152;
      assign(idx_res4,
        rvalue(indexing_mat, "indexing_mat",
          index_min_max(1, 3), index_uni(1), index_omni()),
        "assigning variable idx_res4");
      current_statement__ = 153;
      assign(idx_res5,
        rvalue(indexing_mat, "indexing_mat",
          index_min(4), index_min_max(2, 3), index_uni(1)),
        "assigning variable idx_res5");
      current_statement__ = 80;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 80;
        check_greater_or_equal(function__, "gq_real_1d_ar[sym1__]",
                               gq_real_1d_ar[(sym1__ - 1)], 0);
      }
      current_statement__ = 81;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 81;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 81;
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 81;
            check_greater_or_equal(function__, "gq_real_3d_ar[sym1__, sym2__, sym3__]",
                                   gq_real_3d_ar[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], 0);
          }
        }
      }
      current_statement__ = 82;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 82;
        check_less_or_equal(function__, "gq_vec[sym1__]",
                            gq_vec[(sym1__ - 1)], 1);
      }
      current_statement__ = 88;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 88;
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 88;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 88;
            for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
              current_statement__ = 88;
              check_greater_or_equal(function__, "gq_ar_mat[sym1__, sym2__, sym3__, sym4__]",
                                     rvalue(gq_ar_mat, "gq_ar_mat",
                                       index_uni(sym1__), index_uni(sym2__),
                                         index_uni(sym3__), index_uni(sym4__)),
                                     0);
            }
          }
        }
      }
      current_statement__ = 88;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 88;
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 88;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 88;
            for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
              current_statement__ = 88;
              check_less_or_equal(function__, "gq_ar_mat[sym1__, sym2__, sym3__, sym4__]",
                                  rvalue(gq_ar_mat, "gq_ar_mat",
                                    index_uni(sym1__), index_uni(sym2__),
                                      index_uni(sym3__), index_uni(sym4__)),
                                  1);
            }
          }
        }
      }
      current_statement__ = 89;
      check_simplex(function__, "gq_simplex", gq_simplex);
      current_statement__ = 90;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 90;
        check_simplex(function__, "gq_1d_simplex[sym1__]",
                      gq_1d_simplex[(sym1__ - 1)]);
      }
      current_statement__ = 91;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 91;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 91;
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 91;
            check_simplex(function__, "gq_3d_simplex[sym1__, sym2__, sym3__]",
                          gq_3d_simplex[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)]);
          }
        }
      }
      current_statement__ = 92;
      check_cholesky_factor(function__, "gq_cfcov_54", gq_cfcov_54);
      current_statement__ = 93;
      check_cholesky_factor(function__, "gq_cfcov_33", gq_cfcov_33);
      current_statement__ = 94;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 94;
        check_cholesky_factor(function__, "gq_cfcov_33_ar[sym1__]",
                              gq_cfcov_33_ar[(sym1__ - 1)]);
      }
      vars__.emplace_back(gq_r1);
      vars__.emplace_back(gq_r2);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(gq_real_1d_ar[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              gq_real_3d_ar[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(gq_vec[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(gq_1d_vec[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              vars__.emplace_back(
                gq_3d_vec[(sym4__ - 1)][(sym3__ - 1)][(sym2__ - 1)][(sym1__ -
                                                                    1)]);
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(gq_row_vec[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(gq_1d_row_vec[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              vars__.emplace_back(
                gq_3d_row_vec[(sym4__ - 1)][(sym3__ - 1)][(sym2__ - 1)][
                (sym1__ - 1)]);
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= 4; ++sym4__) {
              vars__.emplace_back(
                rvalue(gq_ar_mat, "gq_ar_mat",
                  index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                    index_uni(sym1__)));
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(gq_simplex[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(gq_1d_simplex[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              vars__.emplace_back(
                gq_3d_simplex[(sym4__ - 1)][(sym3__ - 1)][(sym2__ - 1)][
                (sym1__ - 1)]);
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          vars__.emplace_back(
            rvalue(gq_cfcov_54, "gq_cfcov_54",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          vars__.emplace_back(
            rvalue(gq_cfcov_33, "gq_cfcov_33",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            vars__.emplace_back(
              rvalue(gq_cfcov_33_ar, "gq_cfcov_33_ar",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(indices[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
            vars__.emplace_back(
              rvalue(indexing_mat, "indexing_mat",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
            vars__.emplace_back(
              rvalue(idx_res1, "idx_res1",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
            vars__.emplace_back(
              rvalue(idx_res2, "idx_res2",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
            vars__.emplace_back(
              rvalue(idx_res3, "idx_res3",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
            vars__.emplace_back(
              rvalue(idx_res11, "idx_res11",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
            vars__.emplace_back(
              rvalue(idx_res21, "idx_res21",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
            vars__.emplace_back(
              rvalue(idx_res31, "idx_res31",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          vars__.emplace_back(idx_res4[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(idx_res5[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double p_real = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      p_real = context__.vals_r("p_real")[(1 - 1)];
      double p_upper = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      p_upper = context__.vals_r("p_upper")[(1 - 1)];
      double p_upper_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      p_upper_free__ = stan::math::lb_free(p_upper, p_real);
      double p_lower = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      p_lower = context__.vals_r("p_lower")[(1 - 1)];
      double p_lower_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      p_lower_free__ = stan::math::ub_free(p_lower, p_upper);
      std::vector<double> offset_multiplier = std::vector<double>(5, std::numeric_limits<double>::quiet_NaN());
                                              
      
      current_statement__ = 4;
      offset_multiplier = context__.vals_r("offset_multiplier");
      std::vector<double> offset_multiplier_free__ = std::vector<double>(5, std::numeric_limits<double>::quiet_NaN());
                                                     
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        current_statement__ = 4;
        assign(offset_multiplier_free__,
          stan::math::offset_multiplier_free(offset_multiplier[(sym1__ - 1)],
            1, 2),
          "assigning variable offset_multiplier_free__", index_uni(sym1__));
      }
      std::vector<double> no_offset_multiplier = std::vector<double>(5, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      current_statement__ = 5;
      no_offset_multiplier = context__.vals_r("no_offset_multiplier");
      std::vector<double> no_offset_multiplier_free__ = std::vector<double>(5, std::numeric_limits<double>::quiet_NaN());
                                                        
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        current_statement__ = 5;
        assign(no_offset_multiplier_free__,
          stan::math::offset_multiplier_free(
            no_offset_multiplier[(sym1__ - 1)], 0, 2),
          "assigning variable no_offset_multiplier_free__", index_uni(sym1__));
      }
      std::vector<double> offset_no_multiplier = std::vector<double>(5, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      current_statement__ = 6;
      offset_no_multiplier = context__.vals_r("offset_no_multiplier");
      std::vector<double> offset_no_multiplier_free__ = std::vector<double>(5, std::numeric_limits<double>::quiet_NaN());
                                                        
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        current_statement__ = 6;
        assign(offset_no_multiplier_free__,
          stan::math::offset_multiplier_free(
            offset_no_multiplier[(sym1__ - 1)], 3, 1),
          "assigning variable offset_no_multiplier_free__", index_uni(sym1__));
      }
      std::vector<double> p_real_1d_ar = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                                         
      
      current_statement__ = 7;
      p_real_1d_ar = context__.vals_r("p_real_1d_ar");
      std::vector<double> p_real_1d_ar_free__ = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                                                
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 7;
        assign(p_real_1d_ar_free__,
          stan::math::lb_free(p_real_1d_ar[(sym1__ - 1)], 0),
          "assigning variable p_real_1d_ar_free__", index_uni(sym1__));
      }
      std::vector<std::vector<std::vector<double>>> p_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, std::numeric_limits<double>::quiet_NaN())));
                                                                   
      
      {
        std::vector<local_scalar_t__> p_real_3d_ar_flat__;
        current_statement__ = 8;
        p_real_3d_ar_flat__ = context__.vals_r("p_real_3d_ar");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 8;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 8;
              assign(p_real_3d_ar, p_real_3d_ar_flat__[(pos__ - 1)],
                "assigning variable p_real_3d_ar", index_uni(sym3__),
                                                     index_uni(sym2__),
                                                     index_uni(sym1__));
              current_statement__ = 8;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<std::vector<std::vector<double>>> p_real_3d_ar_free__ = 
      std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 8;
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 8;
            assign(p_real_3d_ar_free__,
              stan::math::lb_free(
                p_real_3d_ar[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)], 0),
              "assigning variable p_real_3d_ar_free__", index_uni(sym1__),
                                                          index_uni(sym2__),
                                                          index_uni(sym3__));
          }
        }
      }
      Eigen::Matrix<double, -1, 1> p_vec = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                           
      
      {
        std::vector<local_scalar_t__> p_vec_flat__;
        current_statement__ = 9;
        p_vec_flat__ = context__.vals_r("p_vec");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 9;
          assign(p_vec, p_vec_flat__[(pos__ - 1)],
            "assigning variable p_vec", index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_vec_free__ = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                  
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 9;
        assign(p_vec_free__, stan::math::lb_free(p_vec[(sym1__ - 1)], 0),
          "assigning variable p_vec_free__", index_uni(sym1__));
      }
      std::vector<Eigen::Matrix<double, -1, 1>> p_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                           
      
      {
        std::vector<local_scalar_t__> p_1d_vec_flat__;
        current_statement__ = 10;
        p_1d_vec_flat__ = context__.vals_r("p_1d_vec");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 10;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 10;
            assign(p_1d_vec, p_1d_vec_flat__[(pos__ - 1)],
              "assigning variable p_1d_vec", index_uni(sym2__),
                                               index_uni(sym1__));
            current_statement__ = 10;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> p_3d_vec = 
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      {
        std::vector<local_scalar_t__> p_3d_vec_flat__;
        current_statement__ = 11;
        p_3d_vec_flat__ = context__.vals_r("p_3d_vec");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 11;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 11;
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              current_statement__ = 11;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 11;
                assign(p_3d_vec, p_3d_vec_flat__[(pos__ - 1)],
                  "assigning variable p_3d_vec", index_uni(sym4__),
                                                   index_uni(sym3__),
                                                   index_uni(sym2__),
                                                   index_uni(sym1__));
                current_statement__ = 11;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      Eigen::Matrix<double, 1, -1> p_row_vec = Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                               
      
      {
        std::vector<local_scalar_t__> p_row_vec_flat__;
        current_statement__ = 12;
        p_row_vec_flat__ = context__.vals_r("p_row_vec");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 12;
          assign(p_row_vec, p_row_vec_flat__[(pos__ - 1)],
            "assigning variable p_row_vec", index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      std::vector<Eigen::Matrix<double, 1, -1>> p_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                               
      
      {
        std::vector<local_scalar_t__> p_1d_row_vec_flat__;
        current_statement__ = 13;
        p_1d_row_vec_flat__ = context__.vals_r("p_1d_row_vec");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 13;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 13;
            assign(p_1d_row_vec, p_1d_row_vec_flat__[(pos__ - 1)],
              "assigning variable p_1d_row_vec", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 13;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> p_3d_row_vec = 
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      {
        std::vector<local_scalar_t__> p_3d_row_vec_flat__;
        current_statement__ = 14;
        p_3d_row_vec_flat__ = context__.vals_r("p_3d_row_vec");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 14;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 14;
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              current_statement__ = 14;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 14;
                assign(p_3d_row_vec, p_3d_row_vec_flat__[(pos__ - 1)],
                  "assigning variable p_3d_row_vec", index_uni(sym4__),
                                                       index_uni(sym3__),
                                                       index_uni(sym2__),
                                                       index_uni(sym1__));
                current_statement__ = 14;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      Eigen::Matrix<double, -1, -1> p_mat = Eigen::Matrix<double, -1, -1>::Constant(5, 4, std::numeric_limits<double>::quiet_NaN());
                                            
      
      {
        std::vector<local_scalar_t__> p_mat_flat__;
        current_statement__ = 15;
        p_mat_flat__ = context__.vals_r("p_mat");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 15;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 15;
            assign(p_mat, p_mat_flat__[(pos__ - 1)],
              "assigning variable p_mat", index_uni(sym2__),
                                            index_uni(sym1__));
            current_statement__ = 15;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> p_ar_mat = 
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>::Constant(2, 3, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> p_ar_mat_flat__;
        current_statement__ = 16;
        p_ar_mat_flat__ = context__.vals_r("p_ar_mat");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 16;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 16;
            for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
              current_statement__ = 16;
              for (int sym4__ = 1; sym4__ <= 4; ++sym4__) {
                current_statement__ = 16;
                assign(p_ar_mat, p_ar_mat_flat__[(pos__ - 1)],
                  "assigning variable p_ar_mat", index_uni(sym4__),
                                                   index_uni(sym3__),
                                                   index_uni(sym2__),
                                                   index_uni(sym1__));
                current_statement__ = 16;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> p_ar_mat_free__ = 
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>::Constant(2, 3, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 16;
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 16;
          for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 16;
            for (int sym4__ = 1; sym4__ <= 3; ++sym4__) {
              current_statement__ = 16;
              assign(p_ar_mat_free__,
                stan::math::lub_free(
                  rvalue(p_ar_mat, "p_ar_mat",
                    index_uni(sym1__), index_uni(sym2__), index_uni(sym3__),
                      index_uni(sym4__)), 0, 1),
                "assigning variable p_ar_mat_free__", index_uni(sym1__),
                                                        index_uni(sym2__),
                                                        index_uni(sym3__),
                                                        index_uni(sym4__));
            }
          }
        }
      }
      Eigen::Matrix<double, -1, 1> p_simplex = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                               
      
      {
        std::vector<local_scalar_t__> p_simplex_flat__;
        current_statement__ = 17;
        p_simplex_flat__ = context__.vals_r("p_simplex");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 17;
          assign(p_simplex, p_simplex_flat__[(pos__ - 1)],
            "assigning variable p_simplex", index_uni(sym1__));
          current_statement__ = 17;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_simplex_free__ = Eigen::Matrix<double, -1, 1>::Constant(
                                                        (N - 1), std::numeric_limits<double>::quiet_NaN());
                                                      
      
      current_statement__ = 17;
      assign(p_simplex_free__, stan::math::simplex_free(p_simplex),
        "assigning variable p_simplex_free__");
      std::vector<Eigen::Matrix<double, -1, 1>> p_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                               
      
      {
        std::vector<local_scalar_t__> p_1d_simplex_flat__;
        current_statement__ = 18;
        p_1d_simplex_flat__ = context__.vals_r("p_1d_simplex");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 18;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 18;
            assign(p_1d_simplex, p_1d_simplex_flat__[(pos__ - 1)],
              "assigning variable p_1d_simplex", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 18;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<Eigen::Matrix<double, -1, 1>> p_1d_simplex_free__ = 
      std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(
        (N - 1), std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 18;
        assign(p_1d_simplex_free__,
          stan::math::simplex_free(p_1d_simplex[(sym1__ - 1)]),
          "assigning variable p_1d_simplex_free__", index_uni(sym1__));
      }
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> p_3d_simplex = 
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()))));
      
      
      {
        std::vector<local_scalar_t__> p_3d_simplex_flat__;
        current_statement__ = 19;
        p_3d_simplex_flat__ = context__.vals_r("p_3d_simplex");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 19;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 19;
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              current_statement__ = 19;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 19;
                assign(p_3d_simplex, p_3d_simplex_flat__[(pos__ - 1)],
                  "assigning variable p_3d_simplex", index_uni(sym4__),
                                                       index_uni(sym3__),
                                                       index_uni(sym2__),
                                                       index_uni(sym1__));
                current_statement__ = 19;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> p_3d_simplex_free__ = 
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>::Constant(
        (N - 1), std::numeric_limits<double>::quiet_NaN()))));
      
      
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 19;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 19;
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 19;
            assign(p_3d_simplex_free__,
              stan::math::simplex_free(
                p_3d_simplex[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]),
              "assigning variable p_3d_simplex_free__", index_uni(sym1__),
                                                          index_uni(sym2__),
                                                          index_uni(sym3__));
          }
        }
      }
      Eigen::Matrix<double, -1, -1> p_cfcov_54 = Eigen::Matrix<double, -1, -1>::Constant(5, 4, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      {
        std::vector<local_scalar_t__> p_cfcov_54_flat__;
        current_statement__ = 20;
        p_cfcov_54_flat__ = context__.vals_r("p_cfcov_54");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 20;
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 20;
            assign(p_cfcov_54, p_cfcov_54_flat__[(pos__ - 1)],
              "assigning variable p_cfcov_54", index_uni(sym2__),
                                                 index_uni(sym1__));
            current_statement__ = 20;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, 1> p_cfcov_54_free__ = Eigen::Matrix<double, -1, 1>::Constant(
                                                         ((((4 * (4 - 1)) /
                                                             2) + 4) +
                                                           ((5 - 4) * 4)), std::numeric_limits<double>::quiet_NaN());
                                                       
      
      current_statement__ = 20;
      assign(p_cfcov_54_free__, stan::math::cholesky_factor_free(p_cfcov_54),
        "assigning variable p_cfcov_54_free__");
      Eigen::Matrix<double, -1, -1> p_cfcov_33 = Eigen::Matrix<double, -1, -1>::Constant(3, 3, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      {
        std::vector<local_scalar_t__> p_cfcov_33_flat__;
        current_statement__ = 21;
        p_cfcov_33_flat__ = context__.vals_r("p_cfcov_33");
        current_statement__ = 21;
        pos__ = 1;
        current_statement__ = 21;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 21;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 21;
            assign(p_cfcov_33, p_cfcov_33_flat__[(pos__ - 1)],
              "assigning variable p_cfcov_33", index_uni(sym2__),
                                                 index_uni(sym1__));
            current_statement__ = 21;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, 1> p_cfcov_33_free__ = Eigen::Matrix<double, -1, 1>::Constant(
                                                         ((((3 * (3 - 1)) /
                                                             2) + 3) +
                                                           ((3 - 3) * 3)), std::numeric_limits<double>::quiet_NaN());
                                                       
      
      current_statement__ = 21;
      assign(p_cfcov_33_free__, stan::math::cholesky_factor_free(p_cfcov_33),
        "assigning variable p_cfcov_33_free__");
      std::vector<Eigen::Matrix<double, -1, -1>> p_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>::Constant(3, 3, std::numeric_limits<double>::quiet_NaN()));
                                                                 
      
      {
        std::vector<local_scalar_t__> p_cfcov_33_ar_flat__;
        current_statement__ = 22;
        p_cfcov_33_ar_flat__ = context__.vals_r("p_cfcov_33_ar");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 22;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 22;
            for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
              current_statement__ = 22;
              assign(p_cfcov_33_ar, p_cfcov_33_ar_flat__[(pos__ - 1)],
                "assigning variable p_cfcov_33_ar", index_uni(sym3__),
                                                      index_uni(sym2__),
                                                      index_uni(sym1__));
              current_statement__ = 22;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<Eigen::Matrix<double, -1, 1>> p_cfcov_33_ar_free__ = 
      std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>::Constant(
        ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)), std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 22;
        assign(p_cfcov_33_ar_free__,
          stan::math::cholesky_factor_free(p_cfcov_33_ar[(sym1__ - 1)]),
          "assigning variable p_cfcov_33_ar_free__", index_uni(sym1__));
      }
      Eigen::Matrix<double, -1, 1> x_p = Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
                                         
      
      {
        std::vector<local_scalar_t__> x_p_flat__;
        current_statement__ = 23;
        x_p_flat__ = context__.vals_r("x_p");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 23;
          assign(x_p, x_p_flat__[(pos__ - 1)],
            "assigning variable x_p", index_uni(sym1__));
          current_statement__ = 23;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> y_p = Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
                                         
      
      {
        std::vector<local_scalar_t__> y_p_flat__;
        current_statement__ = 24;
        y_p_flat__ = context__.vals_r("y_p");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 24;
          assign(y_p, y_p_flat__[(pos__ - 1)],
            "assigning variable y_p", index_uni(sym1__));
          current_statement__ = 24;
          pos__ = (pos__ + 1);
        }
      }
      vars__.emplace_back(p_real);
      vars__.emplace_back(p_upper_free__);
      vars__.emplace_back(p_lower_free__);
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(offset_multiplier_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(no_offset_multiplier_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(offset_no_multiplier_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_real_1d_ar_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            vars__.emplace_back(
              p_real_3d_ar_free__[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_vec_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(p_1d_vec[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              vars__.emplace_back(
                p_3d_vec[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)][(sym4__ -
                                                                    1)]);
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_row_vec[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(p_1d_row_vec[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              vars__.emplace_back(
                p_3d_row_vec[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)][
                (sym4__ - 1)]);
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_mat, "p_mat", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= 2; ++sym4__) {
              vars__.emplace_back(
                rvalue(p_ar_mat_free__, "p_ar_mat_free__",
                  index_uni(sym1__), index_uni(sym2__), index_uni(sym4__),
                    index_uni(sym3__)));
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= (N - 1); ++sym1__) {
        vars__.emplace_back(p_simplex_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= (N - 1); ++sym2__) {
          vars__.emplace_back(
            p_1d_simplex_free__[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= (N - 1); ++sym4__) {
              vars__.emplace_back(
                p_3d_simplex_free__[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)][
                (sym4__ - 1)]);
            }
          }
        }
      }
      for (int sym1__ = 1;
           sym1__ <= ((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)); ++sym1__) {
        vars__.emplace_back(p_cfcov_54_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1;
           sym1__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym1__) {
        vars__.emplace_back(p_cfcov_33_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1;
             sym2__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym2__) {
          vars__.emplace_back(
            p_cfcov_33_ar_free__[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(x_p[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(y_p[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"p_real", "p_upper", "p_lower",
      "offset_multiplier", "no_offset_multiplier", "offset_no_multiplier",
      "p_real_1d_ar", "p_real_3d_ar", "p_vec", "p_1d_vec", "p_3d_vec",
      "p_row_vec", "p_1d_row_vec", "p_3d_row_vec", "p_mat", "p_ar_mat",
      "p_simplex", "p_1d_simplex", "p_3d_simplex", "p_cfcov_54",
      "p_cfcov_33", "p_cfcov_33_ar", "x_p", "y_p", "tp_real_1d_ar",
      "tp_real_3d_ar", "tp_vec", "tp_1d_vec", "tp_3d_vec", "tp_row_vec",
      "tp_1d_row_vec", "tp_3d_row_vec", "tp_mat", "tp_ar_mat", "tp_simplex",
      "tp_1d_simplex", "tp_3d_simplex", "tp_cfcov_54", "tp_cfcov_33",
      "tp_cfcov_33_ar", "theta_p", "tp_real", "gq_r1", "gq_r2",
      "gq_real_1d_ar", "gq_real_3d_ar", "gq_vec", "gq_1d_vec", "gq_3d_vec",
      "gq_row_vec", "gq_1d_row_vec", "gq_3d_row_vec", "gq_ar_mat",
      "gq_simplex", "gq_1d_simplex", "gq_3d_simplex", "gq_cfcov_54",
      "gq_cfcov_33", "gq_cfcov_33_ar", "indices", "indexing_mat", "idx_res1",
      "idx_res2", "idx_res3", "idx_res11", "idx_res21", "idx_res31",
      "idx_res4", "idx_res5"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M),
                          static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M),
                          static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M),
                          static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(4), static_cast<size_t>(5),
                          static_cast<size_t>(2), static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M),
                          static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(3),
                          static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M),
                          static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M),
                          static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M),
                          static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(4), static_cast<size_t>(5),
                          static_cast<size_t>(2), static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M),
                          static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(3),
                          static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M),
                          static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M),
                          static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M),
                          static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(4), static_cast<size_t>(5),
                          static_cast<size_t>(2), static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M),
                          static_cast<size_t>(K), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(3),
                          static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(3),
                          static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3),
                          static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(3),
                          static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3),
                          static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3),
                          static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(3),
                          static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3),
                          static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "p_real");
    param_names__.emplace_back(std::string() + "p_upper");
    param_names__.emplace_back(std::string() + "p_lower");
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "offset_multiplier" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "no_offset_multiplier" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "offset_no_multiplier" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_real_1d_ar" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "p_real_3d_ar" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_vec" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_1d_vec" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "p_3d_vec" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_row_vec" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_1d_row_vec" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "p_3d_row_vec" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= 4; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "p_ar_mat" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_simplex" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_1d_simplex" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "p_3d_simplex" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_cfcov_54" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_cfcov_33" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "p_cfcov_33_ar" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_p" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_p" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_real_1d_ar" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_real_3d_ar" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_vec" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_1d_vec" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tp_3d_vec" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_row_vec" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_1d_row_vec" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tp_3d_row_vec" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 4; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tp_ar_mat" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_simplex" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_1d_simplex" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tp_3d_simplex" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_cfcov_54" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_cfcov_33" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_cfcov_33_ar" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_p" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "tp_real");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "gq_r1");
      param_names__.emplace_back(std::string() + "gq_r2");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_real_1d_ar" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_real_3d_ar" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_vec" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_1d_vec" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "gq_3d_vec" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_row_vec" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_1d_row_vec" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "gq_3d_row_vec" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 4; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "gq_ar_mat" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_simplex" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_1d_simplex" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "gq_3d_simplex" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_cfcov_54" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_cfcov_33" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_cfcov_33_ar" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "indices" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "indexing_mat" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "idx_res1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "idx_res2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "idx_res3" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "idx_res11" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "idx_res21" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "idx_res31" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "idx_res4" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "idx_res5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "p_real");
    param_names__.emplace_back(std::string() + "p_upper");
    param_names__.emplace_back(std::string() + "p_lower");
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "offset_multiplier" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "no_offset_multiplier" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "offset_no_multiplier" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_real_1d_ar" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "p_real_3d_ar" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_vec" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_1d_vec" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "p_3d_vec" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_row_vec" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_1d_row_vec" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "p_3d_row_vec" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= 4; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "p_ar_mat" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= (N - 1); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_simplex" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= (N - 1); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_1d_simplex" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= (N - 1); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "p_3d_simplex" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1;
         sym1__ <= ((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_cfcov_54" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1;
         sym1__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_cfcov_33" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1;
         sym1__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_cfcov_33_ar" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_p" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_p" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_real_1d_ar" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_real_3d_ar" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_vec" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_1d_vec" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tp_3d_vec" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_row_vec" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_1d_row_vec" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tp_3d_row_vec" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 5; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 4; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tp_ar_mat" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= (N - 1); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_simplex" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= (N - 1); ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_1d_simplex" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= (N - 1); ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "tp_3d_simplex" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1;
           sym1__ <= ((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_cfcov_54" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1;
           sym1__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_cfcov_33" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1;
           sym1__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_cfcov_33_ar" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_p" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "tp_real");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "gq_r1");
      param_names__.emplace_back(std::string() + "gq_r2");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_real_1d_ar" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "gq_real_3d_ar" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_vec" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_1d_vec" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "gq_3d_vec" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_row_vec" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_1d_row_vec" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "gq_3d_row_vec" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= 4; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "gq_ar_mat" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= (N - 1); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_simplex" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= (N - 1); ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_1d_simplex" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= (N - 1); ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
                {
                  for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                    {
                      param_names__.emplace_back(std::string() + "gq_3d_simplex" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1;
           sym1__ <= ((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_cfcov_54" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1;
           sym1__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_cfcov_33" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1;
           sym1__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_cfcov_33_ar" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "indices" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "indexing_mat" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "idx_res1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "idx_res2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "idx_res3" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "idx_res11" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 5; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "idx_res21" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= 3; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "idx_res31" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "idx_res4" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "idx_res5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p_real\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_upper\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_lower\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"offset_multiplier\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"no_offset_multiplier\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"offset_no_multiplier\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_real_1d_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_real_3d_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"p_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_1d_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"p_3d_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"parameters\"},{\"name\":\"p_row_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_1d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"p_3d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"parameters\"},{\"name\":\"p_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(4) + "},\"block\":\"parameters\"},{\"name\":\"p_ar_mat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(3) + "}}},\"block\":\"parameters\"},{\"name\":\"p_simplex\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_1d_simplex\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"p_3d_simplex\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"parameters\"},{\"name\":\"p_cfcov_54\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(4) + "},\"block\":\"parameters\"},{\"name\":\"p_cfcov_33\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(3) + "},\"block\":\"parameters\"},{\"name\":\"p_cfcov_33_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(3) + "}},\"block\":\"parameters\"},{\"name\":\"x_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"y_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"tp_real_1d_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_real_3d_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_1d_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_3d_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_row_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_1d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_3d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(4) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_ar_mat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(3) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_simplex\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_1d_simplex\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_3d_simplex\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_cfcov_54\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(4) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_cfcov_33\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_cfcov_33_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(3) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"theta_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_real\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gq_r1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_r2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_real_1d_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"gq_real_3d_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_1d_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_3d_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_row_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_1d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_3d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_ar_mat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(3) + "}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_simplex\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_1d_simplex\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_3d_simplex\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_cfcov_54\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(4) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_cfcov_33\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(3) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_cfcov_33_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(3) + "}},\"block\":\"generated_quantities\"},{\"name\":\"indices\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"indexing_mat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(4) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(4) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(4) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(3) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res11\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(4) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res21\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(4) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res31\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(3) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p_real\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_upper\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_lower\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"offset_multiplier\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"no_offset_multiplier\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"offset_no_multiplier\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_real_1d_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_real_3d_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"p_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_1d_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"p_3d_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"parameters\"},{\"name\":\"p_row_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_1d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"p_3d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"parameters\"},{\"name\":\"p_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(4) + "},\"block\":\"parameters\"},{\"name\":\"p_ar_mat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(3) + "}}},\"block\":\"parameters\"},{\"name\":\"p_simplex\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((N - 1)) + "},\"block\":\"parameters\"},{\"name\":\"p_1d_simplex\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((N - 1)) + "}},\"block\":\"parameters\"},{\"name\":\"p_3d_simplex\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((N - 1)) + "}}}},\"block\":\"parameters\"},{\"name\":\"p_cfcov_54\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4))) + "},\"block\":\"parameters\"},{\"name\":\"p_cfcov_33\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))) + "},\"block\":\"parameters\"},{\"name\":\"p_cfcov_33_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))) + "}},\"block\":\"parameters\"},{\"name\":\"x_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"y_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"tp_real_1d_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_real_3d_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_1d_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_3d_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_row_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_1d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_3d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(5) + ",\"cols\":" + std::to_string(4) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_ar_mat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(3) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_simplex\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((N - 1)) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_1d_simplex\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((N - 1)) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_3d_simplex\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((N - 1)) + "}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_cfcov_54\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4))) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_cfcov_33\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_cfcov_33_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"theta_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_real\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"gq_r1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_r2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_real_1d_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"gq_real_3d_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_1d_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_3d_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_row_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_1d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_3d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_ar_mat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(3) + "}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_simplex\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((N - 1)) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_1d_simplex\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((N - 1)) + "}},\"block\":\"generated_quantities\"},{\"name\":\"gq_3d_simplex\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((N - 1)) + "}}}},\"block\":\"generated_quantities\"},{\"name\":\"gq_cfcov_54\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4))) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_cfcov_33\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_cfcov_33_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))) + "}},\"block\":\"generated_quantities\"},{\"name\":\"indices\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"indexing_mat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(4) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(4) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(4) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(3) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res11\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(4) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res21\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(4) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res31\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(3) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "}},\"block\":\"generated_quantities\"},{\"name\":\"idx_res5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = mother_model_namespace::mother_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return mother_model_namespace::profiles__;
}

#endif


STAN_REGISTER_MAP_RECT(1, mother_model_namespace::binomialf_functor__)
Warning in 'mother.stan', line 63, column 4: increment_log_prob(...); is deprecated and will be removed in the future. Use target += ...; instead.
Warning in 'mother.stan', line 187, column 15: get_lp() function is deprecated. It will be removed in a future release. Use target() instead.
Warning in 'mother.stan', line 63, column 23: normal_log is deprecated and will be removed in the future. Use normal_lpdf instead.
Warning in 'mother.stan', line 187, column 15: The no-argument function `get_lp()` is deprecated. Use the no-argument function `target()` instead.
  $ ../../../../../install/default/bin/stanc --print-cpp motherHOF.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace motherHOF_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 158> locations_array__ = 
{" (found before start of program)",
 " (in 'motherHOF.stan', line 52, column 2 to column 15)",
 " (in 'motherHOF.stan', line 53, column 2 to column 18)",
 " (in 'motherHOF.stan', line 54, column 2 to column 14)",
 " (in 'motherHOF.stan', line 55, column 2 to column 18)",
 " (in 'motherHOF.stan', line 56, column 2 to column 28)",
 " (in 'motherHOF.stan', line 57, column 2 to column 28)",
 " (in 'motherHOF.stan', line 58, column 2 to column 11)",
 " (in 'motherHOF.stan', line 61, column 2 to column 18)",
 " (in 'motherHOF.stan', line 62, column 2 to column 37)",
 " (in 'motherHOF.stan', line 63, column 2 to column 33)",
 " (in 'motherHOF.stan', line 64, column 2 to line 65, column 69)",
 " (in 'motherHOF.stan', line 66, column 2 to line 67, column 69)",
 " (in 'motherHOF.stan', line 68, column 2 to line 69, column 69)",
 " (in 'motherHOF.stan', line 70, column 2 to column 23)",
 " (in 'motherHOF.stan', line 71, column 2 to column 16)",
 " (in 'motherHOF.stan', line 72, column 2 to column 16)",
 " (in 'motherHOF.stan', line 73, column 2 to column 16)",
 " (in 'motherHOF.stan', line 74, column 2 to column 70)",
 " (in 'motherHOF.stan', line 75, column 2 to column 86)",
 " (in 'motherHOF.stan', line 76, column 2 to column 86)",
 " (in 'motherHOF.stan', line 77, column 2 to column 72)",
 " (in 'motherHOF.stan', line 79, column 2 to column 88)",
 " (in 'motherHOF.stan', line 80, column 2 to column 72)",
 " (in 'motherHOF.stan', line 81, column 2 to column 88)",
 " (in 'motherHOF.stan', line 83, column 2 to column 77)",
 " (in 'motherHOF.stan', line 84, column 2 to column 93)",
 " (in 'motherHOF.stan', line 85, column 2 to column 93)",
 " (in 'motherHOF.stan', line 86, column 2 to column 79)",
 " (in 'motherHOF.stan', line 88, column 2 to column 95)",
 " (in 'motherHOF.stan', line 89, column 2 to column 79)",
 " (in 'motherHOF.stan', line 90, column 2 to column 95)",
 " (in 'motherHOF.stan', line 145, column 2 to column 18)",
 " (in 'motherHOF.stan', line 146, column 2 to column 68)",
 " (in 'motherHOF.stan', line 147, column 2 to column 68)",
 " (in 'motherHOF.stan', line 148, column 2 to column 68)",
 " (in 'motherHOF.stan', line 149, column 2 to column 68)",
 " (in 'motherHOF.stan', line 151, column 2 to column 87)",
 " (in 'motherHOF.stan', line 152, column 2 to column 87)",
 " (in 'motherHOF.stan', line 153, column 2 to column 87)",
 " (in 'motherHOF.stan', line 154, column 2 to column 87)",
 " (in 'motherHOF.stan', line 156, column 2 to column 66)",
 " (in 'motherHOF.stan', line 157, column 2 to column 66)",
 " (in 'motherHOF.stan', line 158, column 2 to column 66)",
 " (in 'motherHOF.stan', line 159, column 2 to column 66)",
 " (in 'motherHOF.stan', line 161, column 2 to column 85)",
 " (in 'motherHOF.stan', line 162, column 2 to column 85)",
 " (in 'motherHOF.stan', line 163, column 2 to column 85)",
 " (in 'motherHOF.stan', line 164, column 2 to column 85)",
 " (in 'motherHOF.stan', line 166, column 2 to column 67)",
 " (in 'motherHOF.stan', line 167, column 2 to column 67)",
 " (in 'motherHOF.stan', line 168, column 2 to column 67)",
 " (in 'motherHOF.stan', line 169, column 2 to column 67)",
 " (in 'motherHOF.stan', line 171, column 2 to column 61)",
 " (in 'motherHOF.stan', line 172, column 2 to column 58)",
 " (in 'motherHOF.stan', line 173, column 2 to column 58)",
 " (in 'motherHOF.stan', line 174, column 2 to column 60)",
 " (in 'motherHOF.stan', line 176, column 2 to column 67)",
 " (in 'motherHOF.stan', line 177, column 2 to column 64)",
 " (in 'motherHOF.stan', line 178, column 2 to column 64)",
 " (in 'motherHOF.stan', line 179, column 2 to column 66)",
 " (in 'motherHOF.stan', line 181, column 2 to column 34)",
 " (in 'motherHOF.stan', line 182, column 2 to column 38)",
 " (in 'motherHOF.stan', line 183, column 2 to line 185, column 71)",
 " (in 'motherHOF.stan', line 187, column 2 to line 188, column 69)",
 " (in 'motherHOF.stan', line 190, column 2 to column 22)",
 " (in 'motherHOF.stan', line 191, column 2 to column 69)",
 " (in 'motherHOF.stan', line 192, column 2 to column 85)",
 " (in 'motherHOF.stan', line 193, column 2 to column 85)",
 " (in 'motherHOF.stan', line 194, column 2 to column 71)",
 " (in 'motherHOF.stan', line 196, column 2 to column 87)",
 " (in 'motherHOF.stan', line 197, column 2 to column 71)",
 " (in 'motherHOF.stan', line 198, column 2 to column 87)",
 " (in 'motherHOF.stan', line 200, column 2 to column 76)",
 " (in 'motherHOF.stan', line 201, column 2 to column 92)",
 " (in 'motherHOF.stan', line 202, column 2 to column 92)",
 " (in 'motherHOF.stan', line 203, column 2 to column 78)",
 " (in 'motherHOF.stan', line 205, column 2 to column 94)",
 " (in 'motherHOF.stan', line 206, column 2 to column 78)",
 " (in 'motherHOF.stan', line 207, column 2 to column 94)",
 " (in 'motherHOF.stan', line 94, column 13 to column 14)",
 " (in 'motherHOF.stan', line 94, column 2 to column 18)",
 " (in 'motherHOF.stan', line 95, column 2 to column 68)",
 " (in 'motherHOF.stan', line 96, column 2 to column 68)",
 " (in 'motherHOF.stan', line 97, column 2 to column 68)",
 " (in 'motherHOF.stan', line 99, column 2 to column 87)",
 " (in 'motherHOF.stan', line 100, column 2 to column 87)",
 " (in 'motherHOF.stan', line 101, column 2 to column 87)",
 " (in 'motherHOF.stan', line 103, column 2 to column 66)",
 " (in 'motherHOF.stan', line 104, column 2 to column 66)",
 " (in 'motherHOF.stan', line 105, column 2 to column 66)",
 " (in 'motherHOF.stan', line 106, column 2 to column 66)",
 " (in 'motherHOF.stan', line 108, column 2 to column 85)",
 " (in 'motherHOF.stan', line 109, column 2 to column 85)",
 " (in 'motherHOF.stan', line 110, column 2 to column 85)",
 " (in 'motherHOF.stan', line 111, column 2 to column 85)",
 " (in 'motherHOF.stan', line 113, column 2 to column 67)",
 " (in 'motherHOF.stan', line 114, column 2 to column 67)",
 " (in 'motherHOF.stan', line 115, column 2 to column 67)",
 " (in 'motherHOF.stan', line 116, column 2 to column 67)",
 " (in 'motherHOF.stan', line 118, column 2 to column 61)",
 " (in 'motherHOF.stan', line 119, column 2 to column 58)",
 " (in 'motherHOF.stan', line 120, column 2 to column 58)",
 " (in 'motherHOF.stan', line 121, column 2 to column 60)",
 " (in 'motherHOF.stan', line 122, column 2 to column 56)",
 " (in 'motherHOF.stan', line 123, column 2 to column 58)",
 " (in 'motherHOF.stan', line 124, column 2 to column 58)",
 " (in 'motherHOF.stan', line 125, column 2 to column 60)",
 " (in 'motherHOF.stan', line 126, column 2 to column 62)",
 " (in 'motherHOF.stan', line 127, column 2 to column 62)",
 " (in 'motherHOF.stan', line 128, column 2 to column 64)",
 " (in 'motherHOF.stan', line 130, column 2 to column 67)",
 " (in 'motherHOF.stan', line 131, column 2 to column 64)",
 " (in 'motherHOF.stan', line 132, column 2 to column 64)",
 " (in 'motherHOF.stan', line 133, column 2 to column 66)",
 " (in 'motherHOF.stan', line 134, column 2 to column 62)",
 " (in 'motherHOF.stan', line 135, column 2 to column 64)",
 " (in 'motherHOF.stan', line 136, column 2 to column 64)",
 " (in 'motherHOF.stan', line 137, column 2 to column 66)",
 " (in 'motherHOF.stan', line 138, column 2 to column 68)",
 " (in 'motherHOF.stan', line 139, column 2 to column 68)",
 " (in 'motherHOF.stan', line 140, column 2 to column 70)",
 " (in 'motherHOF.stan', line 142, column 2 to column 36)",
 " (in 'motherHOF.stan', line 37, column 2 to column 17)",
 " (in 'motherHOF.stan', line 38, column 2 to column 15)",
 " (in 'motherHOF.stan', line 39, column 2 to column 10)",
 " (in 'motherHOF.stan', line 40, column 10 to column 11)",
 " (in 'motherHOF.stan', line 40, column 2 to column 13)",
 " (in 'motherHOF.stan', line 41, column 2 to column 18)",
 " (in 'motherHOF.stan', line 42, column 2 to column 12)",
 " (in 'motherHOF.stan', line 43, column 2 to column 15)",
 " (in 'motherHOF.stan', line 44, column 2 to column 16)",
 " (in 'motherHOF.stan', line 45, column 2 to column 15)",
 " (in 'motherHOF.stan', line 46, column 2 to column 28)",
 " (in 'motherHOF.stan', line 47, column 2 to column 28)",
 " (in 'motherHOF.stan', line 48, column 2 to column 20)",
 " (in 'motherHOF.stan', line 49, column 2 to column 19)",
 " (in 'motherHOF.stan', line 53, column 15 to column 16)",
 " (in 'motherHOF.stan', line 54, column 11 to column 12)",
 " (in 'motherHOF.stan', line 145, column 13 to column 14)",
 " (in 'motherHOF.stan', line 7, column 4 to column 17)",
 " (in 'motherHOF.stan', line 8, column 4 to column 19)",
 " (in 'motherHOF.stan', line 9, column 4 to column 38)",
 " (in 'motherHOF.stan', line 10, column 4 to column 16)",
 " (in 'motherHOF.stan', line 6, column 26 to line 11, column 3)",
 " (in 'motherHOF.stan', line 13, column 4 to column 15)",
 " (in 'motherHOF.stan', line 12, column 71 to line 14, column 3)",
 " (in 'motherHOF.stan', line 17, column 4 to column 22)",
 " (in 'motherHOF.stan', line 16, column 42 to line 18, column 3)",
 " (in 'motherHOF.stan', line 21, column 4 to column 22)",
 " (in 'motherHOF.stan', line 20, column 42 to line 22, column 3)",
 " (in 'motherHOF.stan', line 24, column 4 to column 17)",
 " (in 'motherHOF.stan', line 23, column 28 to line 25, column 3)",
 " (in 'motherHOF.stan', line 30, column 4 to column 18)",
 " (in 'motherHOF.stan', line 31, column 4 to column 25)",
 " (in 'motherHOF.stan', line 32, column 4 to column 25)",
 " (in 'motherHOF.stan', line 33, column 4 to column 15)",
 " (in 'motherHOF.stan', line 29, column 39 to line 34, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
sho(const T0__& t, const std::vector<T1__>& y,
    const std::vector<T2__>& theta, const std::vector<T3__>& x,
    const std::vector<int>& x_int, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> dydt = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
                                         
    
    current_statement__ = 141;
    assign(dydt, rvalue(y, "y", index_uni(2)),
      "assigning variable dydt", index_uni(1));
    current_statement__ = 142;
    assign(dydt,
      (-rvalue(y, "y", index_uni(1)) -
        (rvalue(theta, "theta", index_uni(1)) * rvalue(y, "y", index_uni(2)))),
      "assigning variable dydt", index_uni(2));
    current_statement__ = 143;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sho_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& t, const std::vector<T1__>& y,
           const std::vector<T2__>& theta, const std::vector<T3__>& x,
           const std::vector<int>& x_int, std::ostream* pstream__)  const 
{
return sho(t, y, theta, x, x_int, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
integrand(const T0__& x, const T1__& xc, const std::vector<T2__>& theta,
          const std::vector<T3__>& x_r, const std::vector<int>& x_i,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 145;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct integrand_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& x, const T1__& xc, const std::vector<T2__>& theta,
           const std::vector<T3__>& x_r, const std::vector<int>& x_i,
           std::ostream* pstream__)  const 
{
return integrand(x, xc, theta, x_r, x_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
foo(const T0__& shared_params_arg__, const T1__& job_params_arg__,
    const std::vector<T2__>& data_r, const std::vector<int>& data_i,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& shared_params = to_ref(shared_params_arg__);
  const auto& job_params = to_ref(job_params_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 147;
    return (Eigen::Matrix<double,-1,1>(3) << 1, 2, 3).finished();
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& shared_params, const T1__& job_params,
           const std::vector<T2__>& data_r, const std::vector<int>& data_i,
           std::ostream* pstream__)  const 
{
return foo(shared_params, job_params, data_r, data_i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
goo(const T0__& shared_params_arg__, const T1__& job_params_arg__,
    const std::vector<T2__>& data_r, const std::vector<int>& data_i,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& shared_params = to_ref(shared_params_arg__);
  const auto& job_params = to_ref(job_params_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 149;
    return (Eigen::Matrix<double,-1,1>(3) << 4, 5, 6).finished();
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct goo_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& shared_params, const T1__& job_params,
           const std::vector<T2__>& data_r, const std::vector<int>& data_i,
           std::ostream* pstream__)  const 
{
return goo(shared_params, job_params, data_r, data_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
map_rectfake(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 151;
    return (2 * x);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct map_rectfake_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return map_rectfake(x, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
algebra_system(const T0__& x_arg__, const T1__& y_arg__,
               const std::vector<T2__>& dat, const std::vector<int>& dat_int,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& x = to_ref(x_arg__);
  const auto& y = to_ref(y_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> f_x = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
                                                 
    
    current_statement__ = 154;
    assign(f_x,
      (rvalue(x, "x", index_uni(1)) - rvalue(y, "y", index_uni(1))),
      "assigning variable f_x", index_uni(1));
    current_statement__ = 155;
    assign(f_x,
      (rvalue(x, "x", index_uni(2)) - rvalue(y, "y", index_uni(2))),
      "assigning variable f_x", index_uni(2));
    current_statement__ = 156;
    return f_x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct algebra_system_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& x, const T1__& y, const std::vector<T2__>& dat,
           const std::vector<int>& dat_int, std::ostream* pstream__)  const 
{
return algebra_system(x, y, dat, dat_int, pstream__);
}
};

class motherHOF_model final : public model_base_crtp<motherHOF_model> {

 private:
  int T;
  std::vector<double> y0_d;
  double t0;
  std::vector<double> ts;
  std::vector<double> theta_d;
  std::vector<double> x;
  std::vector<int> x_int;
  std::vector<double> x_d_r;
  std::vector<int> x_d_i;
  Eigen::Matrix<double, -1, 1> shared_params_d__;
  std::vector<Eigen::Matrix<double, -1, 1>> job_params_d;
  std::vector<std::vector<double>> data_r;
  std::vector<std::vector<int>> data_i; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> shared_params_d{nullptr, 0};
 
 public:
  ~motherHOF_model() { }
  
  inline std::string model_name() const final { return "motherHOF_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  motherHOF_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "motherHOF_model_namespace::motherHOF_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 123;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      
      current_statement__ = 123;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 123;
      check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 124;
      context__.validate_dims("data initialization","y0_d","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      y0_d = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 124;
      y0_d = context__.vals_r("y0_d");
      current_statement__ = 125;
      context__.validate_dims("data initialization","t0","double",
           std::vector<size_t>{});
      t0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 125;
      t0 = context__.vals_r("t0")[(1 - 1)];
      current_statement__ = 126;
      validate_non_negative_index("ts", "T", T);
      current_statement__ = 127;
      context__.validate_dims("data initialization","ts","double",
           std::vector<size_t>{static_cast<size_t>(T)});
      ts = std::vector<double>(T, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 127;
      ts = context__.vals_r("ts");
      current_statement__ = 128;
      context__.validate_dims("data initialization","theta_d","double",
           std::vector<size_t>{static_cast<size_t>(1)});
      theta_d = std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 128;
      theta_d = context__.vals_r("theta_d");
      current_statement__ = 129;
      context__.validate_dims("data initialization","x","double",
           std::vector<size_t>{static_cast<size_t>(0)});
      x = std::vector<double>(0, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 129;
      x = context__.vals_r("x");
      current_statement__ = 130;
      context__.validate_dims("data initialization","x_int","int",
           std::vector<size_t>{static_cast<size_t>(0)});
      x_int = std::vector<int>(0, std::numeric_limits<int>::min());
      
      current_statement__ = 130;
      x_int = context__.vals_i("x_int");
      current_statement__ = 131;
      context__.validate_dims("data initialization","x_d_r","double",
           std::vector<size_t>{static_cast<size_t>(0)});
      x_d_r = std::vector<double>(0, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 131;
      x_d_r = context__.vals_r("x_d_r");
      current_statement__ = 132;
      context__.validate_dims("data initialization","x_d_i","int",
           std::vector<size_t>{static_cast<size_t>(0)});
      x_d_i = std::vector<int>(0, std::numeric_limits<int>::min());
      
      current_statement__ = 132;
      x_d_i = context__.vals_i("x_d_i");
      current_statement__ = 133;
      context__.validate_dims("data initialization","shared_params_d",
          "double", std::vector<size_t>{static_cast<size_t>(3)});
      shared_params_d__ = Eigen::Matrix<double, -1, 1>::Constant(3, std::numeric_limits<double>::quiet_NaN());
      new (&shared_params_d) Eigen::Map<Eigen::Matrix<double, -1, 1>>(shared_params_d__.data(), 3);
      
      
      {
        std::vector<local_scalar_t__> shared_params_d_flat__;
        current_statement__ = 133;
        shared_params_d_flat__ = context__.vals_r("shared_params_d");
        current_statement__ = 133;
        pos__ = 1;
        current_statement__ = 133;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 133;
          assign(shared_params_d, shared_params_d_flat__[(pos__ - 1)],
            "assigning variable shared_params_d", index_uni(sym1__));
          current_statement__ = 133;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 134;
      context__.validate_dims("data initialization","job_params_d","double",
           std::vector<size_t>{static_cast<size_t>(3),
            static_cast<size_t>(3)});
      job_params_d = std::vector<Eigen::Matrix<double, -1, 1>>(3, Eigen::Matrix<double, -1, 1>::Constant(3, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> job_params_d_flat__;
        current_statement__ = 134;
        job_params_d_flat__ = context__.vals_r("job_params_d");
        current_statement__ = 134;
        pos__ = 1;
        current_statement__ = 134;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 134;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 134;
            assign(job_params_d, job_params_d_flat__[(pos__ - 1)],
              "assigning variable job_params_d", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 134;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 135;
      context__.validate_dims("data initialization","data_r","double",
           std::vector<size_t>{static_cast<size_t>(3),
            static_cast<size_t>(3)});
      data_r = std::vector<std::vector<double>>(3, std::vector<double>(3, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> data_r_flat__;
        current_statement__ = 135;
        data_r_flat__ = context__.vals_r("data_r");
        current_statement__ = 135;
        pos__ = 1;
        current_statement__ = 135;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 135;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 135;
            assign(data_r, data_r_flat__[(pos__ - 1)],
              "assigning variable data_r", index_uni(sym2__),
                                             index_uni(sym1__));
            current_statement__ = 135;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 136;
      context__.validate_dims("data initialization","data_i","int",
           std::vector<size_t>{static_cast<size_t>(3),
            static_cast<size_t>(3)});
      data_i = std::vector<std::vector<int>>(3, std::vector<int>(3, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> data_i_flat__;
        current_statement__ = 136;
        data_i_flat__ = context__.vals_i("data_i");
        current_statement__ = 136;
        pos__ = 1;
        current_statement__ = 136;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 136;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 136;
            assign(data_i, data_i_flat__[(pos__ - 1)],
              "assigning variable data_i", index_uni(sym2__),
                                             index_uni(sym1__));
            current_statement__ = 136;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 137;
      validate_non_negative_index("theta_p", "1", 1);
      current_statement__ = 138;
      validate_non_negative_index("x_p", "1", 1);
      current_statement__ = 139;
      validate_non_negative_index("y_hat", "T", T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 2 + 1 + 1 + 2 + 3 + (3 * 3) + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "motherHOF_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> y0_p = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
                                           
      
      current_statement__ = 1;
      y0_p = in__.template read<std::vector<local_scalar_t__>>(2);
      std::vector<local_scalar_t__> theta_p = std::vector<local_scalar_t__>(1, DUMMY_VAR__);
                                              
      
      current_statement__ = 2;
      theta_p = in__.template read<std::vector<local_scalar_t__>>(1);
      std::vector<local_scalar_t__> x_p = std::vector<local_scalar_t__>(1, DUMMY_VAR__);
                                          
      
      current_statement__ = 3;
      x_p = in__.template read<std::vector<local_scalar_t__>>(1);
      Eigen::Matrix<local_scalar_t__, -1, 1> x_p_v = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
                                                     
      
      current_statement__ = 4;
      x_p_v = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      Eigen::Matrix<local_scalar_t__, -1, 1> shared_params_p = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
                                                               
      
      current_statement__ = 5;
      shared_params_p = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                          3);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> job_params_p = 
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(3, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__));
      
      
      current_statement__ = 6;
      job_params_p = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                       3, 3);
      local_scalar_t__ x_r = DUMMY_VAR__;
      
      current_statement__ = 7;
      x_r = in__.template read<local_scalar_t__>();
      local_scalar_t__ abc1_p = DUMMY_VAR__;
      
      current_statement__ = 8;
      abc1_p = 3;
      local_scalar_t__ abc2_p = DUMMY_VAR__;
      
      current_statement__ = 9;
      abc2_p = map_rectfake(abc1_p, pstream__);
      local_scalar_t__ abc3_p = DUMMY_VAR__;
      
      current_statement__ = 10;
      abc3_p = map_rectfake(12, pstream__);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_hat_tp1 = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
                                                         
      
      current_statement__ = 11;
      assign(y_hat_tp1,
        map_rect<1, foo_functor__>(shared_params_p, job_params_d, data_r,
          data_i, pstream__), "assigning variable y_hat_tp1");
      Eigen::Matrix<local_scalar_t__, -1, 1> y_hat_tp2 = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
                                                         
      
      current_statement__ = 12;
      assign(y_hat_tp2,
        map_rect<2, foo_functor__>(shared_params_d, job_params_p, data_r,
          data_i, pstream__), "assigning variable y_hat_tp2");
      Eigen::Matrix<local_scalar_t__, -1, 1> y_hat_tp3 = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
                                                         
      
      current_statement__ = 13;
      assign(y_hat_tp3,
        map_rect<3, foo_functor__>(shared_params_p, job_params_d, data_r,
          data_i, pstream__), "assigning variable y_hat_tp3");
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_p_as = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
                                                          
      
      Eigen::Matrix<local_scalar_t__, -1, 1> x_v = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
                                                   
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y_v = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
                                                   
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y_p = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
                                                   
      
      current_statement__ = 18;
      assign(theta_p_as,
        algebra_solver(algebra_system_functor__(), x_v, y_v, x_d_r, x_d_i,
          pstream__), "assigning variable theta_p_as");
      current_statement__ = 19;
      assign(theta_p_as,
        algebra_solver(algebra_system_functor__(), x_v, y_v, x_d_r, x_d_i,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      current_statement__ = 20;
      assign(theta_p_as,
        algebra_solver(algebra_system_functor__(), x_v, y_p, x_d_r, x_d_i,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      current_statement__ = 21;
      assign(theta_p_as,
        algebra_solver(algebra_system_functor__(), x_p_v, y_v, x_d_r, x_d_i,
          pstream__), "assigning variable theta_p_as");
      current_statement__ = 22;
      assign(theta_p_as,
        algebra_solver(algebra_system_functor__(), x_p_v, y_v, x_d_r, x_d_i,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      current_statement__ = 23;
      assign(theta_p_as,
        algebra_solver(algebra_system_functor__(), x_p_v, y_p, x_d_r, x_d_i,
          pstream__), "assigning variable theta_p_as");
      current_statement__ = 24;
      assign(theta_p_as,
        algebra_solver(algebra_system_functor__(), x_p_v, y_p, x_d_r, x_d_i,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      current_statement__ = 25;
      assign(theta_p_as,
        algebra_solver_newton(algebra_system_functor__(), x_v, y_v, x_d_r,
          x_d_i, pstream__), "assigning variable theta_p_as");
      current_statement__ = 26;
      assign(theta_p_as,
        algebra_solver_newton(algebra_system_functor__(), x_v, y_v, x_d_r,
          x_d_i, pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      current_statement__ = 27;
      assign(theta_p_as,
        algebra_solver_newton(algebra_system_functor__(), x_v, y_p, x_d_r,
          x_d_i, pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      current_statement__ = 28;
      assign(theta_p_as,
        algebra_solver_newton(algebra_system_functor__(), x_p_v, y_v, x_d_r,
          x_d_i, pstream__), "assigning variable theta_p_as");
      current_statement__ = 29;
      assign(theta_p_as,
        algebra_solver_newton(algebra_system_functor__(), x_p_v, y_v, x_d_r,
          x_d_i, pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      current_statement__ = 30;
      assign(theta_p_as,
        algebra_solver_newton(algebra_system_functor__(), x_p_v, y_p, x_d_r,
          x_d_i, pstream__), "assigning variable theta_p_as");
      current_statement__ = 31;
      assign(theta_p_as,
        algebra_solver_newton(algebra_system_functor__(), x_p_v, y_p, x_d_r,
          x_d_i, pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      {
        current_statement__ = 80;
        validate_non_negative_index("y_hat", "T", T);
        std::vector<std::vector<local_scalar_t__>> y_hat = std::vector<std::vector<local_scalar_t__>>(T, std::vector<local_scalar_t__>(2, DUMMY_VAR__));
                                                           
        
        current_statement__ = 82;
        assign(y_hat,
          integrate_ode_adams(sho_functor__(), y0_d, t0, ts, theta_p, x,
            x_int, pstream__), "assigning variable y_hat");
        current_statement__ = 83;
        assign(y_hat,
          integrate_ode_adams(sho_functor__(), y0_p, t0, ts, theta_d, x,
            x_int, pstream__), "assigning variable y_hat");
        current_statement__ = 84;
        assign(y_hat,
          integrate_ode_adams(sho_functor__(), y0_p, t0, ts, theta_p, x,
            x_int, pstream__), "assigning variable y_hat");
        current_statement__ = 85;
        assign(y_hat,
          integrate_ode_adams(sho_functor__(), y0_d, t0, ts, theta_p, x,
            x_int, pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
        current_statement__ = 86;
        assign(y_hat,
          integrate_ode_adams(sho_functor__(), y0_p, t0, ts, theta_d, x,
            x_int, pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
        current_statement__ = 87;
        assign(y_hat,
          integrate_ode_adams(sho_functor__(), y0_p, t0, ts, theta_p, x,
            x_int, pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
        current_statement__ = 88;
        assign(y_hat,
          integrate_ode_bdf(sho_functor__(), y0_d, t0, ts, theta_d, x, x_int,
            pstream__), "assigning variable y_hat");
        current_statement__ = 89;
        assign(y_hat,
          integrate_ode_bdf(sho_functor__(), y0_d, t0, ts, theta_p, x, x_int,
            pstream__), "assigning variable y_hat");
        current_statement__ = 90;
        assign(y_hat,
          integrate_ode_bdf(sho_functor__(), y0_p, t0, ts, theta_d, x, x_int,
            pstream__), "assigning variable y_hat");
        current_statement__ = 91;
        assign(y_hat,
          integrate_ode_bdf(sho_functor__(), y0_p, t0, ts, theta_p, x, x_int,
            pstream__), "assigning variable y_hat");
        current_statement__ = 92;
        assign(y_hat,
          integrate_ode_bdf(sho_functor__(), y0_d, t0, ts, theta_d, x, x_int,
            pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
        current_statement__ = 93;
        assign(y_hat,
          integrate_ode_bdf(sho_functor__(), y0_d, t0, ts, theta_p, x, x_int,
            pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
        current_statement__ = 94;
        assign(y_hat,
          integrate_ode_bdf(sho_functor__(), y0_p, t0, ts, theta_d, x, x_int,
            pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
        current_statement__ = 95;
        assign(y_hat,
          integrate_ode_bdf(sho_functor__(), y0_p, t0, ts, theta_p, x, x_int,
            pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
        current_statement__ = 96;
        assign(y_hat,
          integrate_ode_rk45(sho_functor__(), y0_d, t0, ts, theta_d, x,
            x_int, pstream__), "assigning variable y_hat");
        current_statement__ = 97;
        assign(y_hat,
          integrate_ode_rk45(sho_functor__(), y0_d, t0, ts, theta_p, x,
            x_int, pstream__), "assigning variable y_hat");
        current_statement__ = 98;
        assign(y_hat,
          integrate_ode_rk45(sho_functor__(), y0_p, t0, ts, theta_d, x,
            x_int, pstream__), "assigning variable y_hat");
        current_statement__ = 99;
        assign(y_hat,
          integrate_ode_rk45(sho_functor__(), y0_p, t0, ts, theta_p, x,
            x_int, pstream__), "assigning variable y_hat");
        local_scalar_t__ y_1d = DUMMY_VAR__;
        
        current_statement__ = 100;
        y_1d = integrate_1d(integrand_functor__(), 0, 1, x, x_d_r, x_d_i,
                 pstream__);
        current_statement__ = 101;
        y_1d = integrate_1d(integrand_functor__(), 0.0, 1, x, x_d_r, x_d_i,
                 pstream__);
        current_statement__ = 102;
        y_1d = integrate_1d(integrand_functor__(), 0, 1.0, x, x_d_r, x_d_i,
                 pstream__);
        current_statement__ = 103;
        y_1d = integrate_1d(integrand_functor__(), 0.0, 1.0, x, x_d_r, x_d_i,
                 pstream__);
        current_statement__ = 104;
        y_1d = integrate_1d(integrand_functor__(), 0, 1, x, x_d_r, x_d_i,
                 pstream__);
        current_statement__ = 105;
        y_1d = integrate_1d(integrand_functor__(), x_r, 1, x, x_d_r, x_d_i,
                 pstream__);
        current_statement__ = 106;
        y_1d = integrate_1d(integrand_functor__(), 0, x_r, x, x_d_r, x_d_i,
                 pstream__);
        current_statement__ = 107;
        y_1d = integrate_1d(integrand_functor__(), x_r, x_r, x, x_d_r, x_d_i,
                 pstream__);
        current_statement__ = 108;
        y_1d = integrate_1d(integrand_functor__(), x_r, 1, x_d_r, x_d_r,
                 x_d_i, pstream__);
        current_statement__ = 109;
        y_1d = integrate_1d(integrand_functor__(), 0, x_r, x_d_r, x_d_r,
                 x_d_i, pstream__);
        current_statement__ = 110;
        y_1d = integrate_1d(integrand_functor__(), x_r, x_r, x_d_r, x_d_r,
                 x_d_i, pstream__);
        local_scalar_t__ z_1d = DUMMY_VAR__;
        
        current_statement__ = 111;
        z_1d = integrate_1d(integrand_functor__(), 0, 1, x, x_d_r, x_d_i,
                 pstream__, 1e-8);
        current_statement__ = 112;
        z_1d = integrate_1d(integrand_functor__(), 0.0, 1, x, x_d_r, x_d_i,
                 pstream__, 1e-8);
        current_statement__ = 113;
        z_1d = integrate_1d(integrand_functor__(), 0, 1.0, x, x_d_r, x_d_i,
                 pstream__, 1e-8);
        current_statement__ = 114;
        z_1d = integrate_1d(integrand_functor__(), 0.0, 1.0, x, x_d_r, x_d_i,
                 pstream__, 1e-8);
        current_statement__ = 115;
        z_1d = integrate_1d(integrand_functor__(), 0, 1, x, x_d_r, x_d_i,
                 pstream__, 1e-8);
        current_statement__ = 116;
        z_1d = integrate_1d(integrand_functor__(), x_r, 1, x, x_d_r, x_d_i,
                 pstream__, 1e-8);
        current_statement__ = 117;
        z_1d = integrate_1d(integrand_functor__(), 0, x_r, x, x_d_r, x_d_i,
                 pstream__, 1e-8);
        current_statement__ = 118;
        z_1d = integrate_1d(integrand_functor__(), x_r, x_r, x, x_d_r, x_d_i,
                 pstream__, 1e-8);
        current_statement__ = 119;
        z_1d = integrate_1d(integrand_functor__(), x_r, 1, x_d_r, x_d_r,
                 x_d_i, pstream__, 1e-8);
        current_statement__ = 120;
        z_1d = integrate_1d(integrand_functor__(), 0, x_r, x_d_r, x_d_r,
                 x_d_i, pstream__, 1e-8);
        current_statement__ = 121;
        z_1d = integrate_1d(integrand_functor__(), x_r, x_r, x_d_r, x_d_r,
                 x_d_i, pstream__, 1e-8);
        local_scalar_t__ abc_m = DUMMY_VAR__;
        
        current_statement__ = 122;
        abc_m = map_rectfake(abc1_p, pstream__);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "motherHOF_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> y0_p = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
                                 
      
      current_statement__ = 1;
      y0_p = in__.template read<std::vector<local_scalar_t__>>(2);
      std::vector<double> theta_p = std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
                                    
      
      current_statement__ = 2;
      theta_p = in__.template read<std::vector<local_scalar_t__>>(1);
      std::vector<double> x_p = std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 3;
      x_p = in__.template read<std::vector<local_scalar_t__>>(1);
      Eigen::Matrix<double, -1, 1> x_p_v = Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
                                           
      
      current_statement__ = 4;
      x_p_v = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      Eigen::Matrix<double, -1, 1> shared_params_p = Eigen::Matrix<double, -1, 1>::Constant(3, std::numeric_limits<double>::quiet_NaN());
                                                     
      
      current_statement__ = 5;
      shared_params_p = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                          3);
      std::vector<Eigen::Matrix<double, -1, 1>> job_params_p = std::vector<Eigen::Matrix<double, -1, 1>>(3, Eigen::Matrix<double, -1, 1>::Constant(3, std::numeric_limits<double>::quiet_NaN()));
                                                               
      
      current_statement__ = 6;
      job_params_p = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                       3, 3);
      double x_r = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      x_r = in__.template read<local_scalar_t__>();
      double abc1_p = std::numeric_limits<double>::quiet_NaN();
      
      double abc2_p = std::numeric_limits<double>::quiet_NaN();
      
      double abc3_p = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> y_hat_tp1 = Eigen::Matrix<double, -1, 1>::Constant(3, std::numeric_limits<double>::quiet_NaN());
                                               
      
      Eigen::Matrix<double, -1, 1> y_hat_tp2 = Eigen::Matrix<double, -1, 1>::Constant(3, std::numeric_limits<double>::quiet_NaN());
                                               
      
      Eigen::Matrix<double, -1, 1> y_hat_tp3 = Eigen::Matrix<double, -1, 1>::Constant(3, std::numeric_limits<double>::quiet_NaN());
                                               
      
      Eigen::Matrix<double, -1, 1> theta_p_as = Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
                                                
      
      Eigen::Matrix<double, -1, 1> x_v = Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
                                         
      
      Eigen::Matrix<double, -1, 1> y_v = Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
                                         
      
      Eigen::Matrix<double, -1, 1> y_p = Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
                                         
      
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(y0_p[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        vars__.emplace_back(theta_p[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        vars__.emplace_back(x_p[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(x_p_v[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(shared_params_p[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          vars__.emplace_back(job_params_p[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      vars__.emplace_back(x_r);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 8;
      abc1_p = 3;
      current_statement__ = 9;
      abc2_p = map_rectfake(abc1_p, pstream__);
      current_statement__ = 10;
      abc3_p = map_rectfake(12, pstream__);
      current_statement__ = 11;
      assign(y_hat_tp1,
        map_rect<4, foo_functor__>(shared_params_p, job_params_d, data_r,
          data_i, pstream__), "assigning variable y_hat_tp1");
      current_statement__ = 12;
      assign(y_hat_tp2,
        map_rect<5, foo_functor__>(shared_params_d, job_params_p, data_r,
          data_i, pstream__), "assigning variable y_hat_tp2");
      current_statement__ = 13;
      assign(y_hat_tp3,
        map_rect<6, foo_functor__>(shared_params_p, job_params_d, data_r,
          data_i, pstream__), "assigning variable y_hat_tp3");
      current_statement__ = 18;
      assign(theta_p_as,
        algebra_solver(algebra_system_functor__(), x_v, y_v, x_d_r, x_d_i,
          pstream__), "assigning variable theta_p_as");
      current_statement__ = 19;
      assign(theta_p_as,
        algebra_solver(algebra_system_functor__(), x_v, y_v, x_d_r, x_d_i,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      current_statement__ = 20;
      assign(theta_p_as,
        algebra_solver(algebra_system_functor__(), x_v, y_p, x_d_r, x_d_i,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      current_statement__ = 21;
      assign(theta_p_as,
        algebra_solver(algebra_system_functor__(), x_p_v, y_v, x_d_r, x_d_i,
          pstream__), "assigning variable theta_p_as");
      current_statement__ = 22;
      assign(theta_p_as,
        algebra_solver(algebra_system_functor__(), x_p_v, y_v, x_d_r, x_d_i,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      current_statement__ = 23;
      assign(theta_p_as,
        algebra_solver(algebra_system_functor__(), x_p_v, y_p, x_d_r, x_d_i,
          pstream__), "assigning variable theta_p_as");
      current_statement__ = 24;
      assign(theta_p_as,
        algebra_solver(algebra_system_functor__(), x_p_v, y_p, x_d_r, x_d_i,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      current_statement__ = 25;
      assign(theta_p_as,
        algebra_solver_newton(algebra_system_functor__(), x_v, y_v, x_d_r,
          x_d_i, pstream__), "assigning variable theta_p_as");
      current_statement__ = 26;
      assign(theta_p_as,
        algebra_solver_newton(algebra_system_functor__(), x_v, y_v, x_d_r,
          x_d_i, pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      current_statement__ = 27;
      assign(theta_p_as,
        algebra_solver_newton(algebra_system_functor__(), x_v, y_p, x_d_r,
          x_d_i, pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      current_statement__ = 28;
      assign(theta_p_as,
        algebra_solver_newton(algebra_system_functor__(), x_p_v, y_v, x_d_r,
          x_d_i, pstream__), "assigning variable theta_p_as");
      current_statement__ = 29;
      assign(theta_p_as,
        algebra_solver_newton(algebra_system_functor__(), x_p_v, y_v, x_d_r,
          x_d_i, pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      current_statement__ = 30;
      assign(theta_p_as,
        algebra_solver_newton(algebra_system_functor__(), x_p_v, y_p, x_d_r,
          x_d_i, pstream__), "assigning variable theta_p_as");
      current_statement__ = 31;
      assign(theta_p_as,
        algebra_solver_newton(algebra_system_functor__(), x_p_v, y_p, x_d_r,
          x_d_i, pstream__, 0.01, 0.01, 10), "assigning variable theta_p_as");
      if (emit_transformed_parameters__) {
        vars__.emplace_back(abc1_p);
        vars__.emplace_back(abc2_p);
        vars__.emplace_back(abc3_p);
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          vars__.emplace_back(y_hat_tp1[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          vars__.emplace_back(y_hat_tp2[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          vars__.emplace_back(y_hat_tp3[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(theta_p_as[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(x_v[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(y_v[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(y_p[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<double>> y_hat = std::vector<std::vector<double>>(T, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
                                               
      
      current_statement__ = 33;
      assign(y_hat,
        integrate_ode_adams(sho_functor__(), y0_d, t0, ts, theta_d, x, x_int,
          pstream__), "assigning variable y_hat");
      current_statement__ = 34;
      assign(y_hat,
        integrate_ode_adams(sho_functor__(), y0_d, t0, ts, theta_p, x, x_int,
          pstream__), "assigning variable y_hat");
      current_statement__ = 35;
      assign(y_hat,
        integrate_ode_adams(sho_functor__(), y0_p, t0, ts, theta_d, x, x_int,
          pstream__), "assigning variable y_hat");
      current_statement__ = 36;
      assign(y_hat,
        integrate_ode_adams(sho_functor__(), y0_p, t0, ts, theta_p, x, x_int,
          pstream__), "assigning variable y_hat");
      current_statement__ = 37;
      assign(y_hat,
        integrate_ode_adams(sho_functor__(), y0_d, t0, ts, theta_d, x, x_int,
          pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
      current_statement__ = 38;
      assign(y_hat,
        integrate_ode_adams(sho_functor__(), y0_d, t0, ts, theta_p, x, x_int,
          pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
      current_statement__ = 39;
      assign(y_hat,
        integrate_ode_adams(sho_functor__(), y0_p, t0, ts, theta_d, x, x_int,
          pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
      current_statement__ = 40;
      assign(y_hat,
        integrate_ode_adams(sho_functor__(), y0_p, t0, ts, theta_p, x, x_int,
          pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
      current_statement__ = 41;
      assign(y_hat,
        integrate_ode_bdf(sho_functor__(), y0_d, t0, ts, theta_d, x, x_int,
          pstream__), "assigning variable y_hat");
      current_statement__ = 42;
      assign(y_hat,
        integrate_ode_bdf(sho_functor__(), y0_d, t0, ts, theta_p, x, x_int,
          pstream__), "assigning variable y_hat");
      current_statement__ = 43;
      assign(y_hat,
        integrate_ode_bdf(sho_functor__(), y0_p, t0, ts, theta_d, x, x_int,
          pstream__), "assigning variable y_hat");
      current_statement__ = 44;
      assign(y_hat,
        integrate_ode_bdf(sho_functor__(), y0_p, t0, ts, theta_p, x, x_int,
          pstream__), "assigning variable y_hat");
      current_statement__ = 45;
      assign(y_hat,
        integrate_ode_bdf(sho_functor__(), y0_d, t0, ts, theta_d, x, x_int,
          pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
      current_statement__ = 46;
      assign(y_hat,
        integrate_ode_bdf(sho_functor__(), y0_d, t0, ts, theta_p, x, x_int,
          pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
      current_statement__ = 47;
      assign(y_hat,
        integrate_ode_bdf(sho_functor__(), y0_p, t0, ts, theta_d, x, x_int,
          pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
      current_statement__ = 48;
      assign(y_hat,
        integrate_ode_bdf(sho_functor__(), y0_p, t0, ts, theta_p, x, x_int,
          pstream__, 1e-10, 1e-10, 1e8), "assigning variable y_hat");
      current_statement__ = 49;
      assign(y_hat,
        integrate_ode_rk45(sho_functor__(), y0_d, t0, ts, theta_d, x, x_int,
          pstream__), "assigning variable y_hat");
      current_statement__ = 50;
      assign(y_hat,
        integrate_ode_rk45(sho_functor__(), y0_d, t0, ts, theta_p, x, x_int,
          pstream__), "assigning variable y_hat");
      current_statement__ = 51;
      assign(y_hat,
        integrate_ode_rk45(sho_functor__(), y0_p, t0, ts, theta_d, x, x_int,
          pstream__), "assigning variable y_hat");
      current_statement__ = 52;
      assign(y_hat,
        integrate_ode_rk45(sho_functor__(), y0_p, t0, ts, theta_p, x, x_int,
          pstream__), "assigning variable y_hat");
      double y_1d = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 53;
      y_1d = integrate_1d(integrand_functor__(), 0, 1, x, x_d_r, x_d_i,
               pstream__);
      current_statement__ = 54;
      y_1d = integrate_1d(integrand_functor__(), 0.0, 1, x, x_d_r, x_d_i,
               pstream__);
      current_statement__ = 55;
      y_1d = integrate_1d(integrand_functor__(), 0, 1.0, x, x_d_r, x_d_i,
               pstream__);
      current_statement__ = 56;
      y_1d = integrate_1d(integrand_functor__(), 0.0, 1.0, x, x_d_r, x_d_i,
               pstream__);
      double z_1d = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 57;
      z_1d = integrate_1d(integrand_functor__(), 0, 1, x, x_d_r, x_d_i,
               pstream__, 1e-8);
      current_statement__ = 58;
      z_1d = integrate_1d(integrand_functor__(), 0.0, 1, x, x_d_r, x_d_i,
               pstream__, 1e-8);
      current_statement__ = 59;
      z_1d = integrate_1d(integrand_functor__(), 0, 1.0, x, x_d_r, x_d_i,
               pstream__, 1e-8);
      current_statement__ = 60;
      z_1d = integrate_1d(integrand_functor__(), 0.0, 1.0, x, x_d_r, x_d_i,
               pstream__, 1e-8);
      double abc1_gq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 61;
      abc1_gq = map_rectfake(12, pstream__);
      double abc2_gq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 62;
      abc2_gq = map_rectfake(abc1_p, pstream__);
      Eigen::Matrix<double, -1, 1> y_hat_gq = Eigen::Matrix<double, -1, 1>::Constant(3, std::numeric_limits<double>::quiet_NaN());
                                              
      
      current_statement__ = 63;
      assign(y_hat_gq,
        add(
          map_rect<7, foo_functor__>(shared_params_d, job_params_d, data_r,
            data_i, pstream__),
          map_rect<8, goo_functor__>(shared_params_d, job_params_d, data_r,
            data_i, pstream__)), "assigning variable y_hat_gq");
      Eigen::Matrix<double, -1, 1> yy_hat_gq = Eigen::Matrix<double, -1, 1>::Constant(3, std::numeric_limits<double>::quiet_NaN());
                                               
      
      current_statement__ = 64;
      assign(yy_hat_gq,
        map_rect<9, goo_functor__>(shared_params_d, job_params_d, data_r,
          data_i, pstream__), "assigning variable yy_hat_gq");
      Eigen::Matrix<double, -1, 1> theta_dbl = Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
                                               
      
      current_statement__ = 66;
      assign(theta_dbl,
        algebra_solver(algebra_system_functor__(), x_v, y_v, x_d_r, x_d_i,
          pstream__), "assigning variable theta_dbl");
      current_statement__ = 67;
      assign(theta_dbl,
        algebra_solver(algebra_system_functor__(), x_v, y_v, x_d_r, x_d_i,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_dbl");
      current_statement__ = 68;
      assign(theta_dbl,
        algebra_solver(algebra_system_functor__(), x_v, y_p, x_d_r, x_d_i,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_dbl");
      current_statement__ = 69;
      assign(theta_dbl,
        algebra_solver(algebra_system_functor__(), x_p_v, y_v, x_d_r, x_d_i,
          pstream__), "assigning variable theta_dbl");
      current_statement__ = 70;
      assign(theta_dbl,
        algebra_solver(algebra_system_functor__(), x_p_v, y_v, x_d_r, x_d_i,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_dbl");
      current_statement__ = 71;
      assign(theta_dbl,
        algebra_solver(algebra_system_functor__(), x_p_v, y_p, x_d_r, x_d_i,
          pstream__), "assigning variable theta_dbl");
      current_statement__ = 72;
      assign(theta_dbl,
        algebra_solver(algebra_system_functor__(), x_p_v, y_p, x_d_r, x_d_i,
          pstream__, 0.01, 0.01, 10), "assigning variable theta_dbl");
      current_statement__ = 73;
      assign(theta_dbl,
        algebra_solver_newton(algebra_system_functor__(), x_v, y_v, x_d_r,
          x_d_i, pstream__), "assigning variable theta_dbl");
      current_statement__ = 74;
      assign(theta_dbl,
        algebra_solver_newton(algebra_system_functor__(), x_v, y_v, x_d_r,
          x_d_i, pstream__, 0.01, 0.01, 10), "assigning variable theta_dbl");
      current_statement__ = 75;
      assign(theta_dbl,
        algebra_solver_newton(algebra_system_functor__(), x_v, y_p, x_d_r,
          x_d_i, pstream__, 0.01, 0.01, 10), "assigning variable theta_dbl");
      current_statement__ = 76;
      assign(theta_dbl,
        algebra_solver_newton(algebra_system_functor__(), x_p_v, y_v, x_d_r,
          x_d_i, pstream__), "assigning variable theta_dbl");
      current_statement__ = 77;
      assign(theta_dbl,
        algebra_solver_newton(algebra_system_functor__(), x_p_v, y_v, x_d_r,
          x_d_i, pstream__, 0.01, 0.01, 10), "assigning variable theta_dbl");
      current_statement__ = 78;
      assign(theta_dbl,
        algebra_solver_newton(algebra_system_functor__(), x_p_v, y_p, x_d_r,
          x_d_i, pstream__), "assigning variable theta_dbl");
      current_statement__ = 79;
      assign(theta_dbl,
        algebra_solver_newton(algebra_system_functor__(), x_p_v, y_p, x_d_r,
          x_d_i, pstream__, 0.01, 0.01, 10), "assigning variable theta_dbl");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          vars__.emplace_back(y_hat[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      vars__.emplace_back(y_1d);
      vars__.emplace_back(z_1d);
      vars__.emplace_back(abc1_gq);
      vars__.emplace_back(abc2_gq);
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(y_hat_gq[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(yy_hat_gq[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(theta_dbl[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> y0_p = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
                                 
      
      current_statement__ = 1;
      y0_p = context__.vals_r("y0_p");
      std::vector<double> theta_p = std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
                                    
      
      current_statement__ = 2;
      theta_p = context__.vals_r("theta_p");
      std::vector<double> x_p = std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 3;
      x_p = context__.vals_r("x_p");
      Eigen::Matrix<double, -1, 1> x_p_v = Eigen::Matrix<double, -1, 1>::Constant(2, std::numeric_limits<double>::quiet_NaN());
                                           
      
      {
        std::vector<local_scalar_t__> x_p_v_flat__;
        current_statement__ = 4;
        x_p_v_flat__ = context__.vals_r("x_p_v");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 4;
          assign(x_p_v, x_p_v_flat__[(pos__ - 1)],
            "assigning variable x_p_v", index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> shared_params_p = Eigen::Matrix<double, -1, 1>::Constant(3, std::numeric_limits<double>::quiet_NaN());
                                                     
      
      {
        std::vector<local_scalar_t__> shared_params_p_flat__;
        current_statement__ = 5;
        shared_params_p_flat__ = context__.vals_r("shared_params_p");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 5;
          assign(shared_params_p, shared_params_p_flat__[(pos__ - 1)],
            "assigning variable shared_params_p", index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      std::vector<Eigen::Matrix<double, -1, 1>> job_params_p = std::vector<Eigen::Matrix<double, -1, 1>>(3, Eigen::Matrix<double, -1, 1>::Constant(3, std::numeric_limits<double>::quiet_NaN()));
                                                               
      
      {
        std::vector<local_scalar_t__> job_params_p_flat__;
        current_statement__ = 6;
        job_params_p_flat__ = context__.vals_r("job_params_p");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 6;
            assign(job_params_p, job_params_p_flat__[(pos__ - 1)],
              "assigning variable job_params_p", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      double x_r = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      x_r = context__.vals_r("x_r")[(1 - 1)];
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(y0_p[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        vars__.emplace_back(theta_p[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        vars__.emplace_back(x_p[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(x_p_v[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(shared_params_p[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          vars__.emplace_back(job_params_p[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      vars__.emplace_back(x_r);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"y0_p", "theta_p", "x_p", "x_p_v",
      "shared_params_p", "job_params_p", "x_r", "abc1_p", "abc2_p", "abc3_p",
      "y_hat_tp1", "y_hat_tp2", "y_hat_tp3", "theta_p_as", "x_v", "y_v",
      "y_p", "y_hat", "y_1d", "z_1d", "abc1_gq", "abc2_gq", "y_hat_gq",
      "yy_hat_gq", "theta_dbl"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(2)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(1)},
      std::vector<size_t>{static_cast<size_t>(1)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(T), static_cast<size_t>(2)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(2)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y0_p" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_p" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_p" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_p_v" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "shared_params_p" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "job_params_p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "x_r");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "abc1_p");
      param_names__.emplace_back(std::string() + "abc2_p");
      param_names__.emplace_back(std::string() + "abc3_p");
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat_tp1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat_tp2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat_tp3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_p_as" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x_v" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_v" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_p" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "y_1d");
      param_names__.emplace_back(std::string() + "z_1d");
      param_names__.emplace_back(std::string() + "abc1_gq");
      param_names__.emplace_back(std::string() + "abc2_gq");
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat_gq" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yy_hat_gq" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_dbl" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y0_p" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_p" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_p" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_p_v" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "shared_params_p" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "job_params_p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "x_r");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "abc1_p");
      param_names__.emplace_back(std::string() + "abc2_p");
      param_names__.emplace_back(std::string() + "abc3_p");
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat_tp1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat_tp2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat_tp3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_p_as" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x_v" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_v" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_p" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "y_1d");
      param_names__.emplace_back(std::string() + "z_1d");
      param_names__.emplace_back(std::string() + "abc1_gq");
      param_names__.emplace_back(std::string() + "abc2_gq");
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat_gq" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yy_hat_gq" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_dbl" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y0_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x_p_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"shared_params_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"parameters\"},{\"name\":\"job_params_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "}},\"block\":\"parameters\"},{\"name\":\"x_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"abc1_p\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"abc2_p\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"abc3_p\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat_tp1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat_tp2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat_tp3\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_p_as\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"x_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_1d\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"z_1d\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"abc1_gq\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"abc2_gq\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"y_hat_gq\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"generated_quantities\"},{\"name\":\"yy_hat_gq\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_dbl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y0_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"x_p_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"shared_params_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"parameters\"},{\"name\":\"job_params_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "}},\"block\":\"parameters\"},{\"name\":\"x_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"abc1_p\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"abc2_p\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"abc3_p\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat_tp1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat_tp2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat_tp3\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_p_as\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"x_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(T) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_1d\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"z_1d\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"abc1_gq\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"abc2_gq\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"y_hat_gq\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"generated_quantities\"},{\"name\":\"yy_hat_gq\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_dbl\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = motherHOF_model_namespace::motherHOF_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return motherHOF_model_namespace::profiles__;
}

#endif


STAN_REGISTER_MAP_RECT(1, motherHOF_model_namespace::foo_functor__)
STAN_REGISTER_MAP_RECT(2, motherHOF_model_namespace::foo_functor__)
STAN_REGISTER_MAP_RECT(3, motherHOF_model_namespace::foo_functor__)
STAN_REGISTER_MAP_RECT(4, motherHOF_model_namespace::foo_functor__)
STAN_REGISTER_MAP_RECT(5, motherHOF_model_namespace::foo_functor__)
STAN_REGISTER_MAP_RECT(6, motherHOF_model_namespace::foo_functor__)
STAN_REGISTER_MAP_RECT(7, motherHOF_model_namespace::foo_functor__)
STAN_REGISTER_MAP_RECT(8, motherHOF_model_namespace::goo_functor__)
STAN_REGISTER_MAP_RECT(9, motherHOF_model_namespace::goo_functor__)
Warning in 'motherHOF.stan', line 95, column 10: integrate_ode_adams is deprecated and will be removed in the future. Use ode_adams instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 96, column 10: integrate_ode_adams is deprecated and will be removed in the future. Use ode_adams instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 97, column 10: integrate_ode_adams is deprecated and will be removed in the future. Use ode_adams instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 99, column 10: integrate_ode_adams is deprecated and will be removed in the future. Use ode_adams instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 100, column 10: integrate_ode_adams is deprecated and will be removed in the future. Use ode_adams instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 101, column 10: integrate_ode_adams is deprecated and will be removed in the future. Use ode_adams instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 103, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 104, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 105, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 106, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 108, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 109, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 110, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 111, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 113, column 10: integrate_ode_rk45 is deprecated and will be removed in the future. Use ode_rk45 instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 114, column 10: integrate_ode_rk45 is deprecated and will be removed in the future. Use ode_rk45 instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 115, column 10: integrate_ode_rk45 is deprecated and will be removed in the future. Use ode_rk45 instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 116, column 10: integrate_ode_rk45 is deprecated and will be removed in the future. Use ode_rk45 instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 146, column 10: integrate_ode_adams is deprecated and will be removed in the future. Use ode_adams instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 147, column 10: integrate_ode_adams is deprecated and will be removed in the future. Use ode_adams instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 148, column 10: integrate_ode_adams is deprecated and will be removed in the future. Use ode_adams instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 149, column 10: integrate_ode_adams is deprecated and will be removed in the future. Use ode_adams instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 151, column 10: integrate_ode_adams is deprecated and will be removed in the future. Use ode_adams instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 152, column 10: integrate_ode_adams is deprecated and will be removed in the future. Use ode_adams instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 153, column 10: integrate_ode_adams is deprecated and will be removed in the future. Use ode_adams instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 154, column 10: integrate_ode_adams is deprecated and will be removed in the future. Use ode_adams instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 156, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 157, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 158, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 159, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 161, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 162, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 163, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 164, column 10: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 166, column 10: integrate_ode_rk45 is deprecated and will be removed in the future. Use ode_rk45 instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 167, column 10: integrate_ode_rk45 is deprecated and will be removed in the future. Use ode_rk45 instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 168, column 10: integrate_ode_rk45 is deprecated and will be removed in the future. Use ode_rk45 instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
Warning in 'motherHOF.stan', line 169, column 10: integrate_ode_rk45 is deprecated and will be removed in the future. Use ode_rk45 instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
  $ ../../../../../install/default/bin/stanc --print-cpp new_integrate_interface.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace new_integrate_interface_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 630> locations_array__ = 
{" (found before start of program)",
 " (in 'new_integrate_interface.stan', line 31, column 2 to column 9)",
 " (in 'new_integrate_interface.stan', line 32, column 2 to column 13)",
 " (in 'new_integrate_interface.stan', line 33, column 2 to column 14)",
 " (in 'new_integrate_interface.stan', line 37, column 2 to column 72)",
 " (in 'new_integrate_interface.stan', line 39, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 40, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 41, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 42, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 43, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 44, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 45, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 46, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 47, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 48, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 49, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 50, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 51, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 52, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 53, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 54, column 2 to column 55)",
 " (in 'new_integrate_interface.stan', line 55, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 56, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 57, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 58, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 59, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 60, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 61, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 62, column 2 to column 55)",
 " (in 'new_integrate_interface.stan', line 63, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 64, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 65, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 66, column 2 to column 55)",
 " (in 'new_integrate_interface.stan', line 67, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 68, column 2 to column 55)",
 " (in 'new_integrate_interface.stan', line 69, column 2 to column 55)",
 " (in 'new_integrate_interface.stan', line 70, column 2 to column 54)",
 " (in 'new_integrate_interface.stan', line 71, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 72, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 73, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 74, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 75, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 76, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 77, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 78, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 79, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 80, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 81, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 82, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 83, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 84, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 85, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 86, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 87, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 88, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 89, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 90, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 91, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 92, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 93, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 94, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 95, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 96, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 97, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 98, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 99, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 100, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 101, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 102, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 103, column 2 to column 55)",
 " (in 'new_integrate_interface.stan', line 104, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 105, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 106, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 107, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 108, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 109, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 110, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 111, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 112, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 113, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 114, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 115, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 116, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 117, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 118, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 119, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 120, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 121, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 122, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 123, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 124, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 125, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 126, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 127, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 128, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 129, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 130, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 131, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 132, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 133, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 134, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 135, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 136, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 137, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 138, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 139, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 140, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 141, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 142, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 143, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 144, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 145, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 146, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 147, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 148, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 149, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 150, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 151, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 152, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 153, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 154, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 155, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 156, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 157, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 158, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 159, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 160, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 161, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 162, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 163, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 164, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 165, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 166, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 167, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 168, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 169, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 170, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 171, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 172, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 173, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 174, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 175, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 176, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 177, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 178, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 179, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 180, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 181, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 182, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 183, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 184, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 185, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 186, column 2 to column 34)",
 " (in 'new_integrate_interface.stan', line 187, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 188, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 189, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 190, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 191, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 192, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 193, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 194, column 2 to column 34)",
 " (in 'new_integrate_interface.stan', line 195, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 196, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 197, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 198, column 2 to column 34)",
 " (in 'new_integrate_interface.stan', line 199, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 200, column 2 to column 34)",
 " (in 'new_integrate_interface.stan', line 201, column 2 to column 34)",
 " (in 'new_integrate_interface.stan', line 202, column 2 to column 33)",
 " (in 'new_integrate_interface.stan', line 203, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 204, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 205, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 206, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 207, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 208, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 209, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 210, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 211, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 212, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 213, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 214, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 215, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 216, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 217, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 218, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 219, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 220, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 221, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 222, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 223, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 224, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 225, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 226, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 227, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 228, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 229, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 230, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 231, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 232, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 233, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 234, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 235, column 2 to column 34)",
 " (in 'new_integrate_interface.stan', line 442, column 2 to column 73)",
 " (in 'new_integrate_interface.stan', line 443, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 444, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 445, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 446, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 447, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 448, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 449, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 450, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 451, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 452, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 453, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 454, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 455, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 456, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 457, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 458, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 459, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 460, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 461, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 462, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 463, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 464, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 465, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 466, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 467, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 468, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 469, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 470, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 471, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 472, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 473, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 474, column 2 to column 55)",
 " (in 'new_integrate_interface.stan', line 475, column 2 to column 62)",
 " (in 'new_integrate_interface.stan', line 476, column 2 to column 62)",
 " (in 'new_integrate_interface.stan', line 477, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 478, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 479, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 480, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 481, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 482, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 483, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 484, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 485, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 486, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 487, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 488, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 489, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 490, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 491, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 492, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 493, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 494, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 495, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 496, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 497, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 498, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 499, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 500, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 501, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 502, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 503, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 504, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 505, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 506, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 507, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 508, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 509, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 510, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 511, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 512, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 513, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 514, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 515, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 516, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 517, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 518, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 519, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 520, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 521, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 522, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 523, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 524, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 525, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 526, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 527, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 528, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 529, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 530, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 531, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 532, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 533, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 534, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 535, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 536, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 537, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 538, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 539, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 540, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 541, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 542, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 543, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 544, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 545, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 546, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 547, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 548, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 549, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 550, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 551, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 552, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 553, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 554, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 555, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 556, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 557, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 558, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 559, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 560, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 561, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 562, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 563, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 564, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 565, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 566, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 567, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 568, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 569, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 570, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 571, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 572, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 573, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 574, column 2 to column 41)",
 " (in 'new_integrate_interface.stan', line 575, column 2 to column 41)",
 " (in 'new_integrate_interface.stan', line 576, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 577, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 578, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 579, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 580, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 581, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 582, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 583, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 584, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 585, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 586, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 587, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 588, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 589, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 590, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 591, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 592, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 593, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 594, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 595, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 596, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 597, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 598, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 599, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 600, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 601, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 602, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 603, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 604, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 605, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 606, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 607, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 608, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 609, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 610, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 611, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 612, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 613, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 614, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 615, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 616, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 617, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 618, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 619, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 620, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 621, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 622, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 623, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 624, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 625, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 626, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 627, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 628, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 629, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 630, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 631, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 632, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 633, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 634, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 635, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 636, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 637, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 638, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 639, column 2 to column 34)",
 " (in 'new_integrate_interface.stan', line 239, column 15 to column 16)",
 " (in 'new_integrate_interface.stan', line 239, column 9 to column 10)",
 " (in 'new_integrate_interface.stan', line 239, column 2 to column 73)",
 " (in 'new_integrate_interface.stan', line 241, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 242, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 243, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 244, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 245, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 246, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 247, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 248, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 249, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 250, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 251, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 252, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 253, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 254, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 255, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 256, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 257, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 258, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 259, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 260, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 261, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 262, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 263, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 264, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 265, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 266, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 267, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 268, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 269, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 270, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 271, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 272, column 2 to column 55)",
 " (in 'new_integrate_interface.stan', line 273, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 274, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 275, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 276, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 277, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 278, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 279, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 280, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 281, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 282, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 283, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 284, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 285, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 286, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 287, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 288, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 289, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 290, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 291, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 292, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 293, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 294, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 295, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 296, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 297, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 298, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 299, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 300, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 301, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 302, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 303, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 304, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 305, column 2 to column 56)",
 " (in 'new_integrate_interface.stan', line 306, column 2 to column 62)",
 " (in 'new_integrate_interface.stan', line 307, column 2 to column 62)",
 " (in 'new_integrate_interface.stan', line 308, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 309, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 310, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 311, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 312, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 313, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 314, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 315, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 316, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 317, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 318, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 319, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 320, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 321, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 322, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 323, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 324, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 325, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 326, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 327, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 328, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 329, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 330, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 331, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 332, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 333, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 334, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 335, column 2 to column 59)",
 " (in 'new_integrate_interface.stan', line 336, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 337, column 2 to column 58)",
 " (in 'new_integrate_interface.stan', line 338, column 2 to column 57)",
 " (in 'new_integrate_interface.stan', line 339, column 2 to column 41)",
 " (in 'new_integrate_interface.stan', line 340, column 2 to column 41)",
 " (in 'new_integrate_interface.stan', line 341, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 342, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 343, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 344, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 345, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 346, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 347, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 348, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 349, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 350, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 351, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 352, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 353, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 354, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 355, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 356, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 357, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 358, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 359, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 360, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 361, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 362, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 363, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 364, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 365, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 366, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 367, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 368, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 369, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 370, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 371, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 372, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 373, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 374, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 375, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 376, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 377, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 378, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 379, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 380, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 381, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 382, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 383, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 384, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 385, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 386, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 387, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 388, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 389, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 390, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 391, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 392, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 393, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 394, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 395, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 396, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 397, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 398, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 399, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 400, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 401, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 402, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 403, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 404, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 405, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 406, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 407, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 408, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 409, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 410, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 411, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 412, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 413, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 414, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 415, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 416, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 417, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 418, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 419, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 420, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 421, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 422, column 2 to column 38)",
 " (in 'new_integrate_interface.stan', line 423, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 424, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 425, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 426, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 427, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 428, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 429, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 430, column 2 to column 37)",
 " (in 'new_integrate_interface.stan', line 431, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 432, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 433, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 434, column 2 to column 36)",
 " (in 'new_integrate_interface.stan', line 435, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 436, column 2 to column 35)",
 " (in 'new_integrate_interface.stan', line 437, column 2 to column 34)",
 " (in 'new_integrate_interface.stan', line 438, column 2 to column 19)",
 " (in 'new_integrate_interface.stan', line 8, column 2 to column 8)",
 " (in 'new_integrate_interface.stan', line 9, column 2 to column 9)",
 " (in 'new_integrate_interface.stan', line 10, column 2 to column 10)",
 " (in 'new_integrate_interface.stan', line 11, column 11 to column 12)",
 " (in 'new_integrate_interface.stan', line 11, column 2 to column 14)",
 " (in 'new_integrate_interface.stan', line 12, column 9 to column 10)",
 " (in 'new_integrate_interface.stan', line 12, column 2 to column 15)",
 " (in 'new_integrate_interface.stan', line 16, column 15 to column 16)",
 " (in 'new_integrate_interface.stan', line 16, column 9 to column 10)",
 " (in 'new_integrate_interface.stan', line 16, column 2 to column 73)",
 " (in 'new_integrate_interface.stan', line 17, column 2 to column 60)",
 " (in 'new_integrate_interface.stan', line 18, column 2 to column 62)",
 " (in 'new_integrate_interface.stan', line 19, column 2 to column 62)",
 " (in 'new_integrate_interface.stan', line 20, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 21, column 2 to column 61)",
 " (in 'new_integrate_interface.stan', line 22, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 23, column 2 to column 39)",
 " (in 'new_integrate_interface.stan', line 24, column 2 to column 41)",
 " (in 'new_integrate_interface.stan', line 25, column 2 to column 41)",
 " (in 'new_integrate_interface.stan', line 26, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 27, column 2 to column 40)",
 " (in 'new_integrate_interface.stan', line 32, column 10 to column 11)",
 " (in 'new_integrate_interface.stan', line 33, column 9 to column 10)",
 " (in 'new_integrate_interface.stan', line 37, column 14 to column 15)",
 " (in 'new_integrate_interface.stan', line 37, column 9 to column 10)",
 " (in 'new_integrate_interface.stan', line 442, column 15 to column 16)",
 " (in 'new_integrate_interface.stan', line 442, column 9 to column 10)",
 " (in 'new_integrate_interface.stan', line 3, column 4 to column 13)",
 " (in 'new_integrate_interface.stan', line 2, column 47 to line 4, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__,
stan::value_type_t<T3__>>, -1, 1>
f(const T0__& t, const T1__& z_arg__, const T2__& a, const T3__& b_arg__,
  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          T2__,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& z = to_ref(z_arg__);
  const auto& b = to_ref(b_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 628;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__,
stan::value_type_t<T3__>>, -1, 1>
operator()(const T0__& t, const T1__& z, const T2__& a, const T3__& b,
           std::ostream* pstream__)  const 
{
return f(t, z, a, b, pstream__);
}
};


struct f_odefunctor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__,
stan::value_type_t<T3__>>, -1, 1>
operator()(const T0__& t, const T1__& z, std::ostream* pstream__,
           const T2__& a, const T3__& b)  const 
{
return f(t, z, a, b, pstream__);
}
};

class new_integrate_interface_model final : public model_base_crtp<new_integrate_interface_model> {

 private:
  int N;
  int id;
  double rd;
  std::vector<double> rad;
  Eigen::Matrix<double, -1, 1> vd__;
  std::vector<Eigen::Matrix<double, -1, 1>> zd; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> vd{nullptr, 0};
 
 public:
  ~new_integrate_interface_model() { }
  
  inline std::string model_name() const final { return "new_integrate_interface_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  new_integrate_interface_model(stan::io::var_context& context__,
                                unsigned int random_seed__ = 0,
                                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "new_integrate_interface_model_namespace::new_integrate_interface_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 601;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 601;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 602;
      context__.validate_dims("data initialization","id","int",
           std::vector<size_t>{});
      id = std::numeric_limits<int>::min();
      
      current_statement__ = 602;
      id = context__.vals_i("id")[(1 - 1)];
      current_statement__ = 603;
      context__.validate_dims("data initialization","rd","double",
           std::vector<size_t>{});
      rd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 603;
      rd = context__.vals_r("rd")[(1 - 1)];
      current_statement__ = 604;
      validate_non_negative_index("rad", "N", N);
      current_statement__ = 605;
      context__.validate_dims("data initialization","rad","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      rad = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 605;
      rad = context__.vals_r("rad");
      current_statement__ = 606;
      validate_non_negative_index("vd", "N", N);
      current_statement__ = 607;
      context__.validate_dims("data initialization","vd","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      vd__ = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
      new (&vd) Eigen::Map<Eigen::Matrix<double, -1, 1>>(vd__.data(), N);
      
      {
        std::vector<local_scalar_t__> vd_flat__;
        current_statement__ = 607;
        vd_flat__ = context__.vals_r("vd");
        current_statement__ = 607;
        pos__ = 1;
        current_statement__ = 607;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 607;
          assign(vd, vd_flat__[(pos__ - 1)],
            "assigning variable vd", index_uni(sym1__));
          current_statement__ = 607;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 608;
      validate_non_negative_index("zd", "N", N);
      current_statement__ = 609;
      validate_non_negative_index("zd", "N", N);
      current_statement__ = 610;
      zd = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      stan::math::initialize_fill(zd, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 610;
      assign(zd,
        ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zd");
      current_statement__ = 611;
      assign(zd,
        ode_bdf_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zd");
      current_statement__ = 612;
      assign(zd,
        ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zd");
      current_statement__ = 613;
      assign(zd,
        ode_adams_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zd");
      current_statement__ = 614;
      assign(zd,
        ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zd");
      current_statement__ = 615;
      assign(zd,
        ode_rk45_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zd");
      current_statement__ = 616;
      assign(zd, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
        "assigning variable zd");
      current_statement__ = 617;
      assign(zd, ode_bdf(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
        "assigning variable zd");
      current_statement__ = 618;
      assign(zd, ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
        "assigning variable zd");
      current_statement__ = 619;
      assign(zd, ode_adams(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
        "assigning variable zd");
      current_statement__ = 620;
      assign(zd, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
        "assigning variable zd");
      current_statement__ = 621;
      assign(zd, ode_rk45(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
        "assigning variable zd");
      current_statement__ = 622;
      validate_non_negative_index("ra", "N", N);
      current_statement__ = 623;
      validate_non_negative_index("v", "N", N);
      current_statement__ = 624;
      validate_non_negative_index("z", "N", N);
      current_statement__ = 625;
      validate_non_negative_index("z", "N", N);
      current_statement__ = 626;
      validate_non_negative_index("zg", "N", N);
      current_statement__ = 627;
      validate_non_negative_index("zg", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + N + N;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "new_integrate_interface_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ r = DUMMY_VAR__;
      
      current_statement__ = 1;
      r = in__.template read<local_scalar_t__>();
      std::vector<local_scalar_t__> ra = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
                                         
      
      current_statement__ = 2;
      ra = in__.template read<std::vector<local_scalar_t__>>(N);
      Eigen::Matrix<local_scalar_t__, -1, 1> v = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
                                                 
      
      current_statement__ = 3;
      v = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> z = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
                                                              
      
      current_statement__ = 4;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 5;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 6;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 7;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 8;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 9;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 10;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 11;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 12;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 13;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 14;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 15;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 16;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 17;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 18;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 19;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 20;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 21;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 22;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 23;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 24;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 25;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 26;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 27;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 28;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 29;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 30;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 31;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 32;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 33;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 34;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 35;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 36;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 37;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 38;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 39;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 40;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 41;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 42;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 43;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 44;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 45;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 46;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 47;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 48;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 49;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 50;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 51;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 52;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 53;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 54;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 55;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 56;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 57;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 58;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 59;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 60;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 61;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 62;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 63;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 64;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 65;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 66;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 67;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 68;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 69;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 70;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 71;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 72;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 73;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 74;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 75;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 76;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 77;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 78;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 79;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 80;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 81;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 82;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 83;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 84;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 85;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 86;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 87;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 88;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 89;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 90;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 91;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 92;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 93;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 94;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 95;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 96;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 97;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 98;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 99;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 100;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 101;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 102;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 103;
      assign(z, ode_adams(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 104;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 105;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 106;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 107;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 108;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 109;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 110;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 111;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 112;
      assign(z, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 113;
      assign(z, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 114;
      assign(z, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 115;
      assign(z, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 116;
      assign(z, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 117;
      assign(z, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 118;
      assign(z, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 119;
      assign(z, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 120;
      assign(z, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 121;
      assign(z, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 122;
      assign(z, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 123;
      assign(z, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 124;
      assign(z, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 125;
      assign(z, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 126;
      assign(z, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 127;
      assign(z, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 128;
      assign(z, ode_adams(f_odefunctor__(), v, r, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 129;
      assign(z, ode_adams(f_odefunctor__(), v, r, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 130;
      assign(z, ode_adams(f_odefunctor__(), v, r, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 131;
      assign(z, ode_adams(f_odefunctor__(), v, r, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 132;
      assign(z, ode_adams(f_odefunctor__(), v, r, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 133;
      assign(z, ode_adams(f_odefunctor__(), v, r, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 134;
      assign(z, ode_adams(f_odefunctor__(), v, r, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 135;
      assign(z, ode_adams(f_odefunctor__(), v, r, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 136;
      assign(z, ode_bdf(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 137;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 138;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 139;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 140;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 141;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 142;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 143;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 144;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 145;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 146;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 147;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 148;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 149;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 150;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 151;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 152;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 153;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 154;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 155;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 156;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 157;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 158;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 159;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 160;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 161;
      assign(z, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 162;
      assign(z, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 163;
      assign(z, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 164;
      assign(z, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 165;
      assign(z, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 166;
      assign(z, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 167;
      assign(z, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 168;
      assign(z, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 169;
      assign(z, ode_rk45(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 170;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 171;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 172;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 173;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 174;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 175;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 176;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 177;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 178;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 179;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 180;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 181;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 182;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 183;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 184;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 185;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 186;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 187;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 188;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 189;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 190;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 191;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 192;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 193;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 194;
      assign(z, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 195;
      assign(z, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 196;
      assign(z, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 197;
      assign(z, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 198;
      assign(z, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 199;
      assign(z, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 200;
      assign(z, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 201;
      assign(z, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, r, v),
        "assigning variable z");
      {
        current_statement__ = 400;
        validate_non_negative_index("zm", "N", N);
        current_statement__ = 401;
        validate_non_negative_index("zm", "N", N);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> zm = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
                                                                 
        
        current_statement__ = 402;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 403;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 404;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 405;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 406;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 407;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 408;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 409;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 410;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 411;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 412;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 413;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 414;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 415;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 416;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 417;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 418;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 419;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 420;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 421;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 422;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 423;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 424;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 425;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 426;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 427;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 428;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 429;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 430;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 431;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
            rd, vd), "assigning variable zm");
        current_statement__ = 432;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
            rd, v), "assigning variable zm");
        current_statement__ = 433;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
            r, vd), "assigning variable zm");
        current_statement__ = 434;
        assign(zm,
          ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
            r, v), "assigning variable zm");
        current_statement__ = 435;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 436;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 437;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 438;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 439;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 440;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 441;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 442;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 443;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 444;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 445;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 446;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 447;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 448;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 449;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 450;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 451;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 452;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 453;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 454;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 455;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 456;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 457;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 458;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 459;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 460;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 461;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 462;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 463;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 464;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 465;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 466;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 467;
        assign(zm,
          ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 468;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 469;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 470;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 471;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 472;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 473;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 474;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 475;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 476;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 477;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 478;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 479;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 480;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 481;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 482;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 483;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 484;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 485;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 486;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 487;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 488;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 489;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 490;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 491;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 492;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 493;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 494;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 495;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 496;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 497;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100,
            pstream__, rd, vd), "assigning variable zm");
        current_statement__ = 498;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100,
            pstream__, rd, v), "assigning variable zm");
        current_statement__ = 499;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100,
            pstream__, r, vd), "assigning variable zm");
        current_statement__ = 500;
        assign(zm,
          ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100,
            pstream__, r, v), "assigning variable zm");
        current_statement__ = 501;
        assign(zm,
          ode_adams(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 502;
        assign(zm,
          ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 503;
        assign(zm,
          ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 504;
        assign(zm,
          ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 505;
        assign(zm, ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 506;
        assign(zm,
          ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 507;
        assign(zm, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 508;
        assign(zm, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 509;
        assign(zm, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 510;
        assign(zm,
          ode_adams(f_odefunctor__(), vd, r, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 511;
        assign(zm, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 512;
        assign(zm, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 513;
        assign(zm, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 514;
        assign(zm, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 515;
        assign(zm, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 516;
        assign(zm, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 517;
        assign(zm, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 518;
        assign(zm,
          ode_adams(f_odefunctor__(), v, rd, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 519;
        assign(zm, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 520;
        assign(zm, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 521;
        assign(zm, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 522;
        assign(zm, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 523;
        assign(zm, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 524;
        assign(zm, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 525;
        assign(zm, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 526;
        assign(zm, ode_adams(f_odefunctor__(), v, r, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 527;
        assign(zm, ode_adams(f_odefunctor__(), v, r, rad, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 528;
        assign(zm, ode_adams(f_odefunctor__(), v, r, rad, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 529;
        assign(zm, ode_adams(f_odefunctor__(), v, r, rad, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 530;
        assign(zm, ode_adams(f_odefunctor__(), v, r, ra, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 531;
        assign(zm, ode_adams(f_odefunctor__(), v, r, ra, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 532;
        assign(zm, ode_adams(f_odefunctor__(), v, r, ra, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 533;
        assign(zm, ode_adams(f_odefunctor__(), v, r, ra, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 534;
        assign(zm,
          ode_rk45(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 535;
        assign(zm,
          ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 536;
        assign(zm, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 537;
        assign(zm, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 538;
        assign(zm, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 539;
        assign(zm, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 540;
        assign(zm, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 541;
        assign(zm, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 542;
        assign(zm, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 543;
        assign(zm, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 544;
        assign(zm, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 545;
        assign(zm, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 546;
        assign(zm, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 547;
        assign(zm, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 548;
        assign(zm, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 549;
        assign(zm, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 550;
        assign(zm, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 551;
        assign(zm, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 552;
        assign(zm, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 553;
        assign(zm, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 554;
        assign(zm, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 555;
        assign(zm, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 556;
        assign(zm, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 557;
        assign(zm, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 558;
        assign(zm, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 559;
        assign(zm, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 560;
        assign(zm, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 561;
        assign(zm, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 562;
        assign(zm, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 563;
        assign(zm, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 564;
        assign(zm, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 565;
        assign(zm, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 566;
        assign(zm, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 567;
        assign(zm, ode_bdf(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 568;
        assign(zm, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 569;
        assign(zm, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 570;
        assign(zm, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 571;
        assign(zm, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 572;
        assign(zm, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 573;
        assign(zm, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 574;
        assign(zm, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 575;
        assign(zm, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 576;
        assign(zm, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 577;
        assign(zm, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 578;
        assign(zm, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 579;
        assign(zm, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 580;
        assign(zm, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 581;
        assign(zm, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 582;
        assign(zm, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 583;
        assign(zm, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 584;
        assign(zm, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 585;
        assign(zm, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 586;
        assign(zm, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 587;
        assign(zm, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 588;
        assign(zm, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 589;
        assign(zm, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 590;
        assign(zm, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 591;
        assign(zm, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 592;
        assign(zm, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 593;
        assign(zm, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 594;
        assign(zm, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 595;
        assign(zm, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 596;
        assign(zm, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, rd, vd),
          "assigning variable zm");
        current_statement__ = 597;
        assign(zm, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, rd, v),
          "assigning variable zm");
        current_statement__ = 598;
        assign(zm, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, r, vd),
          "assigning variable zm");
        current_statement__ = 599;
        assign(zm, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, r, v),
          "assigning variable zm");
        current_statement__ = 600;
        lp_accum__.add(normal_lpdf<propto__>(r, 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "new_integrate_interface_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double r = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      r = in__.template read<local_scalar_t__>();
      std::vector<double> ra = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 2;
      ra = in__.template read<std::vector<local_scalar_t__>>(N);
      Eigen::Matrix<double, -1, 1> v = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                       
      
      current_statement__ = 3;
      v = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      std::vector<Eigen::Matrix<double, -1, 1>> z = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                    
      
      vars__.emplace_back(r);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(ra[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(v[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 5;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 6;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 7;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 8;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 9;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 10;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 11;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 12;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 13;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 14;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 15;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 16;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 17;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 18;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 19;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 20;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 21;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 22;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 23;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 24;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 25;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 26;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 27;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 28;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 29;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 30;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 31;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 32;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 33;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 34;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 35;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 36;
      assign(z,
        ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 37;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 38;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 39;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 40;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 41;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 42;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 43;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 44;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 45;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 46;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 47;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 48;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 49;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 50;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 51;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 52;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 53;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 54;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 55;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 56;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 57;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 58;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 59;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 60;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 61;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 62;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 63;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 64;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 65;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 66;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 67;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 68;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 69;
      assign(z,
        ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 70;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 71;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 72;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 73;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 74;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 75;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 76;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 77;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 78;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 79;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 80;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 81;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 82;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 83;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 84;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 85;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 86;
      assign(z,
        ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 87;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 88;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 89;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 90;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 91;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 92;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 93;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 94;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 95;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable z");
      current_statement__ = 96;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable z");
      current_statement__ = 97;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable z");
      current_statement__ = 98;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable z");
      current_statement__ = 99;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable z");
      current_statement__ = 100;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable z");
      current_statement__ = 101;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable z");
      current_statement__ = 102;
      assign(z,
        ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable z");
      current_statement__ = 103;
      assign(z, ode_adams(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 104;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 105;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 106;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 107;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 108;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 109;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 110;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 111;
      assign(z, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 112;
      assign(z, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 113;
      assign(z, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 114;
      assign(z, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 115;
      assign(z, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 116;
      assign(z, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 117;
      assign(z, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 118;
      assign(z, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 119;
      assign(z, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 120;
      assign(z, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 121;
      assign(z, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 122;
      assign(z, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 123;
      assign(z, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 124;
      assign(z, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 125;
      assign(z, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 126;
      assign(z, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 127;
      assign(z, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 128;
      assign(z, ode_adams(f_odefunctor__(), v, r, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 129;
      assign(z, ode_adams(f_odefunctor__(), v, r, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 130;
      assign(z, ode_adams(f_odefunctor__(), v, r, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 131;
      assign(z, ode_adams(f_odefunctor__(), v, r, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 132;
      assign(z, ode_adams(f_odefunctor__(), v, r, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 133;
      assign(z, ode_adams(f_odefunctor__(), v, r, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 134;
      assign(z, ode_adams(f_odefunctor__(), v, r, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 135;
      assign(z, ode_adams(f_odefunctor__(), v, r, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 136;
      assign(z, ode_bdf(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 137;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 138;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 139;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 140;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 141;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 142;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 143;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 144;
      assign(z, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 145;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 146;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 147;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 148;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 149;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 150;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 151;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 152;
      assign(z, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 153;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 154;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 155;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 156;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 157;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 158;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 159;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 160;
      assign(z, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 161;
      assign(z, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 162;
      assign(z, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 163;
      assign(z, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 164;
      assign(z, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 165;
      assign(z, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 166;
      assign(z, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 167;
      assign(z, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 168;
      assign(z, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 169;
      assign(z, ode_rk45(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 170;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 171;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 172;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 173;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 174;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 175;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 176;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 177;
      assign(z, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 178;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 179;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 180;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 181;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 182;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 183;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 184;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 185;
      assign(z, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 186;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 187;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 188;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 189;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 190;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 191;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 192;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 193;
      assign(z, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 194;
      assign(z, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 195;
      assign(z, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 196;
      assign(z, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 197;
      assign(z, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, r, v),
        "assigning variable z");
      current_statement__ = 198;
      assign(z, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, rd, vd),
        "assigning variable z");
      current_statement__ = 199;
      assign(z, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, rd, v),
        "assigning variable z");
      current_statement__ = 200;
      assign(z, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, r, vd),
        "assigning variable z");
      current_statement__ = 201;
      assign(z, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, r, v),
        "assigning variable z");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(z[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<Eigen::Matrix<double, -1, 1>> zg = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                     
      
      current_statement__ = 202;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 203;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 204;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable zg");
      current_statement__ = 205;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable zg");
      current_statement__ = 206;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable zg");
      current_statement__ = 207;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable zg");
      current_statement__ = 208;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable zg");
      current_statement__ = 209;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable zg");
      current_statement__ = 210;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable zg");
      current_statement__ = 211;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable zg");
      current_statement__ = 212;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable zg");
      current_statement__ = 213;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable zg");
      current_statement__ = 214;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable zg");
      current_statement__ = 215;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable zg");
      current_statement__ = 216;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable zg");
      current_statement__ = 217;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable zg");
      current_statement__ = 218;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable zg");
      current_statement__ = 219;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable zg");
      current_statement__ = 220;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable zg");
      current_statement__ = 221;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable zg");
      current_statement__ = 222;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable zg");
      current_statement__ = 223;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable zg");
      current_statement__ = 224;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable zg");
      current_statement__ = 225;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable zg");
      current_statement__ = 226;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable zg");
      current_statement__ = 227;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable zg");
      current_statement__ = 228;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable zg");
      current_statement__ = 229;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable zg");
      current_statement__ = 230;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable zg");
      current_statement__ = 231;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable zg");
      current_statement__ = 232;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable zg");
      current_statement__ = 233;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable zg");
      current_statement__ = 234;
      assign(zg,
        ode_bdf_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable zg");
      current_statement__ = 235;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 236;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 237;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable zg");
      current_statement__ = 238;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable zg");
      current_statement__ = 239;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable zg");
      current_statement__ = 240;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 241;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable zg");
      current_statement__ = 242;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable zg");
      current_statement__ = 243;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable zg");
      current_statement__ = 244;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 245;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable zg");
      current_statement__ = 246;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable zg");
      current_statement__ = 247;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable zg");
      current_statement__ = 248;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 249;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable zg");
      current_statement__ = 250;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable zg");
      current_statement__ = 251;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable zg");
      current_statement__ = 252;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 253;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable zg");
      current_statement__ = 254;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable zg");
      current_statement__ = 255;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable zg");
      current_statement__ = 256;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 257;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable zg");
      current_statement__ = 258;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable zg");
      current_statement__ = 259;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable zg");
      current_statement__ = 260;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 261;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable zg");
      current_statement__ = 262;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable zg");
      current_statement__ = 263;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable zg");
      current_statement__ = 264;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable zg");
      current_statement__ = 265;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable zg");
      current_statement__ = 266;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable zg");
      current_statement__ = 267;
      assign(zg,
        ode_adams_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable zg");
      current_statement__ = 268;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, id, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 269;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 270;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable zg");
      current_statement__ = 271;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable zg");
      current_statement__ = 272;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable zg");
      current_statement__ = 273;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 274;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable zg");
      current_statement__ = 275;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable zg");
      current_statement__ = 276;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, rd, ra, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable zg");
      current_statement__ = 277;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 278;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable zg");
      current_statement__ = 279;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable zg");
      current_statement__ = 280;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, r, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable zg");
      current_statement__ = 281;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable zg");
      current_statement__ = 282;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable zg");
      current_statement__ = 283;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable zg");
      current_statement__ = 284;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), vd, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable zg");
      current_statement__ = 285;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, vd), "assigning variable zg");
      current_statement__ = 286;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, rd, v), "assigning variable zg");
      current_statement__ = 287;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, vd), "assigning variable zg");
      current_statement__ = 288;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, rd, rad, 1e-6, 1e-6, 100,
          pstream__, r, v), "assigning variable zg");
      current_statement__ = 289;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable zg");
      current_statement__ = 290;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable zg");
      current_statement__ = 291;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable zg");
      current_statement__ = 292;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, rd, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable zg");
      current_statement__ = 293;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable zg");
      current_statement__ = 294;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable zg");
      current_statement__ = 295;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable zg");
      current_statement__ = 296;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, r, rad, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable zg");
      current_statement__ = 297;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, vd), "assigning variable zg");
      current_statement__ = 298;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          rd, v), "assigning variable zg");
      current_statement__ = 299;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, vd), "assigning variable zg");
      current_statement__ = 300;
      assign(zg,
        ode_rk45_tol(f_odefunctor__(), v, r, ra, 1e-6, 1e-6, 100, pstream__,
          r, v), "assigning variable zg");
      current_statement__ = 301;
      assign(zg, ode_rk45(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 302;
      assign(zg, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 303;
      assign(zg, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 304;
      assign(zg, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 305;
      assign(zg, ode_rk45(f_odefunctor__(), vd, rd, rad, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 306;
      assign(zg, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 307;
      assign(zg, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 308;
      assign(zg, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 309;
      assign(zg, ode_rk45(f_odefunctor__(), vd, rd, ra, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 310;
      assign(zg, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 311;
      assign(zg, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 312;
      assign(zg, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 313;
      assign(zg, ode_rk45(f_odefunctor__(), vd, r, rad, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 314;
      assign(zg, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 315;
      assign(zg, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 316;
      assign(zg, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 317;
      assign(zg, ode_rk45(f_odefunctor__(), vd, r, ra, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 318;
      assign(zg, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 319;
      assign(zg, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 320;
      assign(zg, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 321;
      assign(zg, ode_rk45(f_odefunctor__(), v, rd, rad, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 322;
      assign(zg, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 323;
      assign(zg, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 324;
      assign(zg, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 325;
      assign(zg, ode_rk45(f_odefunctor__(), v, rd, ra, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 326;
      assign(zg, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 327;
      assign(zg, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 328;
      assign(zg, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 329;
      assign(zg, ode_rk45(f_odefunctor__(), v, r, rad, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 330;
      assign(zg, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 331;
      assign(zg, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 332;
      assign(zg, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 333;
      assign(zg, ode_rk45(f_odefunctor__(), v, r, ra, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 334;
      assign(zg, ode_adams(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 335;
      assign(zg, ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 336;
      assign(zg, ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 337;
      assign(zg, ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 338;
      assign(zg, ode_adams(f_odefunctor__(), vd, rd, rad, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 339;
      assign(zg, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 340;
      assign(zg, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 341;
      assign(zg, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 342;
      assign(zg, ode_adams(f_odefunctor__(), vd, rd, ra, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 343;
      assign(zg, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 344;
      assign(zg, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 345;
      assign(zg, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 346;
      assign(zg, ode_adams(f_odefunctor__(), vd, r, rad, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 347;
      assign(zg, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 348;
      assign(zg, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 349;
      assign(zg, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 350;
      assign(zg, ode_adams(f_odefunctor__(), vd, r, ra, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 351;
      assign(zg, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 352;
      assign(zg, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 353;
      assign(zg, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 354;
      assign(zg, ode_adams(f_odefunctor__(), v, rd, rad, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 355;
      assign(zg, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 356;
      assign(zg, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 357;
      assign(zg, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 358;
      assign(zg, ode_adams(f_odefunctor__(), v, rd, ra, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 359;
      assign(zg, ode_adams(f_odefunctor__(), v, r, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 360;
      assign(zg, ode_adams(f_odefunctor__(), v, r, rad, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 361;
      assign(zg, ode_adams(f_odefunctor__(), v, r, rad, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 362;
      assign(zg, ode_adams(f_odefunctor__(), v, r, rad, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 363;
      assign(zg, ode_adams(f_odefunctor__(), v, r, ra, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 364;
      assign(zg, ode_adams(f_odefunctor__(), v, r, ra, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 365;
      assign(zg, ode_adams(f_odefunctor__(), v, r, ra, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 366;
      assign(zg, ode_adams(f_odefunctor__(), v, r, ra, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 367;
      assign(zg, ode_bdf(f_odefunctor__(), vd, id, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 368;
      assign(zg, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 369;
      assign(zg, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 370;
      assign(zg, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 371;
      assign(zg, ode_bdf(f_odefunctor__(), vd, rd, rad, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 372;
      assign(zg, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 373;
      assign(zg, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 374;
      assign(zg, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 375;
      assign(zg, ode_bdf(f_odefunctor__(), vd, rd, ra, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 376;
      assign(zg, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 377;
      assign(zg, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 378;
      assign(zg, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 379;
      assign(zg, ode_bdf(f_odefunctor__(), vd, r, rad, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 380;
      assign(zg, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 381;
      assign(zg, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 382;
      assign(zg, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 383;
      assign(zg, ode_bdf(f_odefunctor__(), vd, r, ra, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 384;
      assign(zg, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 385;
      assign(zg, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 386;
      assign(zg, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 387;
      assign(zg, ode_bdf(f_odefunctor__(), v, rd, rad, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 388;
      assign(zg, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 389;
      assign(zg, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 390;
      assign(zg, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 391;
      assign(zg, ode_bdf(f_odefunctor__(), v, rd, ra, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 392;
      assign(zg, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 393;
      assign(zg, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 394;
      assign(zg, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 395;
      assign(zg, ode_bdf(f_odefunctor__(), v, r, rad, pstream__, r, v),
        "assigning variable zg");
      current_statement__ = 396;
      assign(zg, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, rd, vd),
        "assigning variable zg");
      current_statement__ = 397;
      assign(zg, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, rd, v),
        "assigning variable zg");
      current_statement__ = 398;
      assign(zg, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, r, vd),
        "assigning variable zg");
      current_statement__ = 399;
      assign(zg, ode_bdf(f_odefunctor__(), v, r, ra, pstream__, r, v),
        "assigning variable zg");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(zg[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double r = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      r = context__.vals_r("r")[(1 - 1)];
      std::vector<double> ra = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 2;
      ra = context__.vals_r("ra");
      Eigen::Matrix<double, -1, 1> v = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                       
      
      {
        std::vector<local_scalar_t__> v_flat__;
        current_statement__ = 3;
        v_flat__ = context__.vals_r("v");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 3;
          assign(v, v_flat__[(pos__ - 1)],
            "assigning variable v", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      vars__.emplace_back(r);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(ra[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(v[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"r", "ra", "v", "z", "zg"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "r");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ra" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "v" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "zg" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "r");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ra" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "v" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "zg" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ra\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"zg\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ra\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"zg\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = new_integrate_interface_model_namespace::new_integrate_interface_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return new_integrate_interface_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp old_integrate_interface.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace old_integrate_interface_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 35> locations_array__ = 
{" (found before start of program)",
 " (in 'old_integrate_interface.stan', line 27, column 2 to column 24)",
 " (in 'old_integrate_interface.stan', line 28, column 2 to column 23)",
 " (in 'old_integrate_interface.stan', line 29, column 2 to column 24)",
 " (in 'old_integrate_interface.stan', line 30, column 2 to column 24)",
 " (in 'old_integrate_interface.stan', line 31, column 2 to column 28)",
 " (in 'old_integrate_interface.stan', line 32, column 2 to column 27)",
 " (in 'old_integrate_interface.stan', line 35, column 2 to line 38, column 40)",
 " (in 'old_integrate_interface.stan', line 41, column 2 to column 25)",
 " (in 'old_integrate_interface.stan', line 42, column 2 to column 25)",
 " (in 'old_integrate_interface.stan', line 43, column 2 to column 28)",
 " (in 'old_integrate_interface.stan', line 44, column 2 to column 29)",
 " (in 'old_integrate_interface.stan', line 45, column 2 to column 27)",
 " (in 'old_integrate_interface.stan', line 46, column 2 to column 33)",
 " (in 'old_integrate_interface.stan', line 48, column 4 to column 52)",
 " (in 'old_integrate_interface.stan', line 49, column 4 to column 47)",
 " (in 'old_integrate_interface.stan', line 47, column 17 to line 50, column 3)",
 " (in 'old_integrate_interface.stan', line 47, column 2 to line 50, column 3)",
 " (in 'old_integrate_interface.stan', line 21, column 2 to column 19)",
 " (in 'old_integrate_interface.stan', line 22, column 10 to column 11)",
 " (in 'old_integrate_interface.stan', line 22, column 2 to column 13)",
 " (in 'old_integrate_interface.stan', line 23, column 2 to column 17)",
 " (in 'old_integrate_interface.stan', line 24, column 20 to column 21)",
 " (in 'old_integrate_interface.stan', line 24, column 2 to column 26)",
 " (in 'old_integrate_interface.stan', line 35, column 9 to column 10)",
 " (in 'old_integrate_interface.stan', line 7, column 4 to column 18)",
 " (in 'old_integrate_interface.stan', line 8, column 4 to column 18)",
 " (in 'old_integrate_interface.stan', line 10, column 4 to column 26)",
 " (in 'old_integrate_interface.stan', line 11, column 4 to column 25)",
 " (in 'old_integrate_interface.stan', line 12, column 4 to column 26)",
 " (in 'old_integrate_interface.stan', line 13, column 4 to column 26)",
 " (in 'old_integrate_interface.stan', line 15, column 4 to column 40)",
 " (in 'old_integrate_interface.stan', line 16, column 4 to column 42)",
 " (in 'old_integrate_interface.stan', line 17, column 4 to column 28)",
 " (in 'old_integrate_interface.stan', line 6, column 26 to line 18, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
dz_dt(const T0__& t, const std::vector<T1__>& z,
      const std::vector<T2__>& theta, const std::vector<T3__>& x_r,
      const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ u = DUMMY_VAR__;
    
    current_statement__ = 25;
    u = rvalue(z, "z", index_uni(1));
    local_scalar_t__ v = DUMMY_VAR__;
    
    current_statement__ = 26;
    v = rvalue(z, "z", index_uni(2));
    local_scalar_t__ alpha = DUMMY_VAR__;
    
    current_statement__ = 27;
    alpha = rvalue(theta, "theta", index_uni(1));
    local_scalar_t__ beta = DUMMY_VAR__;
    
    current_statement__ = 28;
    beta = rvalue(theta, "theta", index_uni(2));
    local_scalar_t__ gamma = DUMMY_VAR__;
    
    current_statement__ = 29;
    gamma = rvalue(theta, "theta", index_uni(3));
    local_scalar_t__ delta = DUMMY_VAR__;
    
    current_statement__ = 30;
    delta = rvalue(theta, "theta", index_uni(4));
    local_scalar_t__ du_dt = DUMMY_VAR__;
    
    current_statement__ = 31;
    du_dt = ((alpha - (beta * v)) * u);
    local_scalar_t__ dv_dt = DUMMY_VAR__;
    
    current_statement__ = 32;
    dv_dt = ((-gamma + (delta * u)) * v);
    current_statement__ = 33;
    return std::vector<local_scalar_t__>{du_dt, dv_dt};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct dz_dt_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& t, const std::vector<T1__>& z,
           const std::vector<T2__>& theta, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return dz_dt(t, z, theta, x_r, x_i, pstream__);
}
};

class old_integrate_interface_model final : public model_base_crtp<old_integrate_interface_model> {

 private:
  int N;
  std::vector<double> ts;
  std::vector<double> y_init;
  std::vector<std::vector<double>> y; 
  
 
 public:
  ~old_integrate_interface_model() { }
  
  inline std::string model_name() const final { return "old_integrate_interface_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  old_integrate_interface_model(stan::io::var_context& context__,
                                unsigned int random_seed__ = 0,
                                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "old_integrate_interface_model_namespace::old_integrate_interface_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 18;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 18;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 18;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 19;
      validate_non_negative_index("ts", "N", N);
      current_statement__ = 20;
      context__.validate_dims("data initialization","ts","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      ts = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 20;
      ts = context__.vals_r("ts");
      current_statement__ = 21;
      context__.validate_dims("data initialization","y_init","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      y_init = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 21;
      y_init = context__.vals_r("y_init");
      current_statement__ = 22;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 23;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(2)});
      y = std::vector<std::vector<double>>(N, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 23;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 23;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 23;
            assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 23;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 23;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 23;
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 23;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 24;
      validate_non_negative_index("z", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 2 + 2;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "old_integrate_interface_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ alpha = DUMMY_VAR__;
      
      current_statement__ = 1;
      alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ beta = DUMMY_VAR__;
      
      current_statement__ = 2;
      beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ gamma = DUMMY_VAR__;
      
      current_statement__ = 3;
      gamma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ delta = DUMMY_VAR__;
      
      current_statement__ = 4;
      delta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      std::vector<local_scalar_t__> z_init = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
                                             
      
      current_statement__ = 5;
      z_init = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                 0, lp__, 2);
      std::vector<local_scalar_t__> sigma = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
                                            
      
      current_statement__ = 6;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                0, lp__, 2);
      std::vector<std::vector<local_scalar_t__>> z = std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(2, DUMMY_VAR__));
                                                     
      
      current_statement__ = 7;
      assign(z,
        integrate_ode_bdf(dz_dt_functor__(), z_init, 0, ts,
          std::vector<local_scalar_t__>{alpha, beta, gamma, delta},
          rep_array(0.0, 0), rep_array(0, 0), pstream__, 1e-5, 1e-3, 5e2),
        "assigning variable z");
      {
        current_statement__ = 8;
        lp_accum__.add(normal_lpdf<propto__>(alpha, 1, 0.5));
        current_statement__ = 9;
        lp_accum__.add(normal_lpdf<propto__>(gamma, 1, 0.5));
        current_statement__ = 10;
        lp_accum__.add(normal_lpdf<propto__>(beta, 0.05, 0.05));
        current_statement__ = 11;
        lp_accum__.add(normal_lpdf<propto__>(delta, 0.05, 0.05));
        current_statement__ = 12;
        lp_accum__.add(lognormal_lpdf<propto__>(sigma, -1, 1));
        current_statement__ = 13;
        lp_accum__.add(
          lognormal_lpdf<propto__>(z_init, stan::math::log(10), 1));
        current_statement__ = 17;
        for (int k = 1; k <= 2; ++k) {
          current_statement__ = 14;
          lp_accum__.add(
            lognormal_lpdf<propto__>(rvalue(y_init, "y_init", index_uni(k)),
              stan::math::log(rvalue(z_init, "z_init", index_uni(k))),
              rvalue(sigma, "sigma", index_uni(k))));
          current_statement__ = 15;
          lp_accum__.add(
            lognormal_lpdf<propto__>(
              rvalue(y, "y", index_omni(), index_uni(k)),
              stan::math::log(rvalue(z, "z", index_omni(), index_uni(k))),
              rvalue(sigma, "sigma", index_uni(k))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "old_integrate_interface_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      gamma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      delta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      std::vector<double> z_init = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
                                   
      
      current_statement__ = 5;
      z_init = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                 0, lp__, 2);
      std::vector<double> sigma = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
                                  
      
      current_statement__ = 6;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                0, lp__, 2);
      std::vector<std::vector<double>> z = std::vector<std::vector<double>>(N, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
                                           
      
      vars__.emplace_back(alpha);
      vars__.emplace_back(beta);
      vars__.emplace_back(gamma);
      vars__.emplace_back(delta);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(z_init[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      assign(z,
        integrate_ode_bdf(dz_dt_functor__(), z_init, 0, ts,
          std::vector<local_scalar_t__>{alpha, beta, gamma, delta},
          rep_array(0.0, 0), rep_array(0, 0), pstream__, 1e-5, 1e-3, 5e2),
        "assigning variable z");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(z[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      double alpha_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha_free__ = stan::math::lb_free(alpha, 0);
      double beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta = context__.vals_r("beta")[(1 - 1)];
      double beta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta_free__ = stan::math::lb_free(beta, 0);
      double gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      gamma = context__.vals_r("gamma")[(1 - 1)];
      double gamma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      gamma_free__ = stan::math::lb_free(gamma, 0);
      double delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      delta = context__.vals_r("delta")[(1 - 1)];
      double delta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      delta_free__ = stan::math::lb_free(delta, 0);
      std::vector<double> z_init = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
                                   
      
      current_statement__ = 5;
      z_init = context__.vals_r("z_init");
      std::vector<double> z_init_free__ = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
                                          
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 5;
        assign(z_init_free__, stan::math::lb_free(z_init[(sym1__ - 1)], 0),
          "assigning variable z_init_free__", index_uni(sym1__));
      }
      std::vector<double> sigma = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
                                  
      
      current_statement__ = 6;
      sigma = context__.vals_r("sigma");
      std::vector<double> sigma_free__ = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
                                         
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 6;
        assign(sigma_free__, stan::math::lb_free(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma_free__", index_uni(sym1__));
      }
      vars__.emplace_back(alpha_free__);
      vars__.emplace_back(beta_free__);
      vars__.emplace_back(gamma_free__);
      vars__.emplace_back(delta_free__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(z_init_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(sigma_free__[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha", "beta", "gamma", "delta",
      "z_init", "sigma", "z"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "gamma");
    param_names__.emplace_back(std::string() + "delta");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_init" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "gamma");
    param_names__.emplace_back(std::string() + "delta");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_init" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_init\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_init\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = old_integrate_interface_model_namespace::old_integrate_interface_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return old_integrate_interface_model_namespace::profiles__;
}

#endif



Warning in 'old_integrate_interface.stan', line 36, column 4: integrate_ode_bdf is deprecated and will be removed in the future. Use ode_bdf instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
  $ ../../../../../install/default/bin/stanc --print-cpp optimize_glm.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace optimize_glm_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 217> locations_array__ = 
{" (found before start of program)",
 " (in 'optimize_glm.stan', line 27, column 2 to column 20)",
 " (in 'optimize_glm.stan', line 28, column 2 to column 17)",
 " (in 'optimize_glm.stan', line 29, column 2 to column 17)",
 " (in 'optimize_glm.stan', line 30, column 2 to column 22)",
 " (in 'optimize_glm.stan', line 31, column 2 to column 13)",
 " (in 'optimize_glm.stan', line 32, column 2 to column 11)",
 " (in 'optimize_glm.stan', line 33, column 2 to column 19)",
 " (in 'optimize_glm.stan', line 34, column 2 to column 22)",
 " (in 'optimize_glm.stan', line 35, column 2 to column 23)",
 " (in 'optimize_glm.stan', line 39, column 2 to column 64)",
 " (in 'optimize_glm.stan', line 40, column 2 to column 49)",
 " (in 'optimize_glm.stan', line 42, column 2 to column 64)",
 " (in 'optimize_glm.stan', line 43, column 2 to column 49)",
 " (in 'optimize_glm.stan', line 45, column 2 to column 63)",
 " (in 'optimize_glm.stan', line 46, column 2 to column 48)",
 " (in 'optimize_glm.stan', line 48, column 2 to column 63)",
 " (in 'optimize_glm.stan', line 49, column 2 to column 48)",
 " (in 'optimize_glm.stan', line 51, column 2 to column 66)",
 " (in 'optimize_glm.stan', line 52, column 2 to column 51)",
 " (in 'optimize_glm.stan', line 54, column 2 to column 66)",
 " (in 'optimize_glm.stan', line 55, column 2 to column 51)",
 " (in 'optimize_glm.stan', line 57, column 2 to column 70)",
 " (in 'optimize_glm.stan', line 58, column 2 to column 55)",
 " (in 'optimize_glm.stan', line 60, column 2 to column 67)",
 " (in 'optimize_glm.stan', line 61, column 2 to column 52)",
 " (in 'optimize_glm.stan', line 63, column 2 to column 69)",
 " (in 'optimize_glm.stan', line 64, column 2 to column 54)",
 " (in 'optimize_glm.stan', line 66, column 2 to column 66)",
 " (in 'optimize_glm.stan', line 67, column 2 to column 51)",
 " (in 'optimize_glm.stan', line 69, column 2 to column 72)",
 " (in 'optimize_glm.stan', line 70, column 2 to column 57)",
 " (in 'optimize_glm.stan', line 72, column 2 to column 69)",
 " (in 'optimize_glm.stan', line 73, column 2 to column 54)",
 " (in 'optimize_glm.stan', line 75, column 2 to column 63)",
 " (in 'optimize_glm.stan', line 76, column 2 to column 49)",
 " (in 'optimize_glm.stan', line 78, column 2 to column 63)",
 " (in 'optimize_glm.stan', line 79, column 2 to column 49)",
 " (in 'optimize_glm.stan', line 81, column 2 to column 66)",
 " (in 'optimize_glm.stan', line 82, column 2 to column 52)",
 " (in 'optimize_glm.stan', line 84, column 2 to column 66)",
 " (in 'optimize_glm.stan', line 85, column 2 to column 52)",
 " (in 'optimize_glm.stan', line 87, column 2 to column 62)",
 " (in 'optimize_glm.stan', line 88, column 2 to column 48)",
 " (in 'optimize_glm.stan', line 90, column 2 to column 62)",
 " (in 'optimize_glm.stan', line 91, column 2 to column 48)",
 " (in 'optimize_glm.stan', line 93, column 2 to column 69)",
 " (in 'optimize_glm.stan', line 94, column 2 to column 55)",
 " (in 'optimize_glm.stan', line 96, column 2 to column 66)",
 " (in 'optimize_glm.stan', line 97, column 2 to column 52)",
 " (in 'optimize_glm.stan', line 99, column 2 to column 72)",
 " (in 'optimize_glm.stan', line 100, column 2 to column 58)",
 " (in 'optimize_glm.stan', line 102, column 2 to column 69)",
 " (in 'optimize_glm.stan', line 103, column 2 to column 55)",
 " (in 'optimize_glm.stan', line 105, column 2 to column 68)",
 " (in 'optimize_glm.stan', line 106, column 2 to column 54)",
 " (in 'optimize_glm.stan', line 108, column 2 to column 65)",
 " (in 'optimize_glm.stan', line 109, column 2 to column 51)",
 " (in 'optimize_glm.stan', line 111, column 2 to column 59)",
 " (in 'optimize_glm.stan', line 112, column 2 to column 45)",
 " (in 'optimize_glm.stan', line 114, column 2 to column 59)",
 " (in 'optimize_glm.stan', line 115, column 2 to column 45)",
 " (in 'optimize_glm.stan', line 117, column 2 to column 58)",
 " (in 'optimize_glm.stan', line 118, column 2 to column 44)",
 " (in 'optimize_glm.stan', line 120, column 2 to column 58)",
 " (in 'optimize_glm.stan', line 121, column 2 to column 44)",
 " (in 'optimize_glm.stan', line 123, column 2 to column 62)",
 " (in 'optimize_glm.stan', line 124, column 2 to column 48)",
 " (in 'optimize_glm.stan', line 126, column 2 to column 62)",
 " (in 'optimize_glm.stan', line 127, column 2 to column 48)",
 " (in 'optimize_glm.stan', line 129, column 2 to column 65)",
 " (in 'optimize_glm.stan', line 130, column 2 to column 51)",
 " (in 'optimize_glm.stan', line 132, column 2 to column 62)",
 " (in 'optimize_glm.stan', line 133, column 2 to column 48)",
 " (in 'optimize_glm.stan', line 135, column 2 to column 64)",
 " (in 'optimize_glm.stan', line 136, column 2 to column 50)",
 " (in 'optimize_glm.stan', line 138, column 2 to column 61)",
 " (in 'optimize_glm.stan', line 139, column 2 to column 47)",
 " (in 'optimize_glm.stan', line 141, column 2 to column 68)",
 " (in 'optimize_glm.stan', line 142, column 2 to column 54)",
 " (in 'optimize_glm.stan', line 144, column 2 to column 65)",
 " (in 'optimize_glm.stan', line 145, column 2 to column 51)",
 " (in 'optimize_glm.stan', line 147, column 2 to column 71)",
 " (in 'optimize_glm.stan', line 148, column 2 to column 57)",
 " (in 'optimize_glm.stan', line 150, column 2 to column 71)",
 " (in 'optimize_glm.stan', line 151, column 2 to column 57)",
 " (in 'optimize_glm.stan', line 153, column 2 to column 70)",
 " (in 'optimize_glm.stan', line 154, column 2 to column 56)",
 " (in 'optimize_glm.stan', line 156, column 2 to column 70)",
 " (in 'optimize_glm.stan', line 157, column 2 to column 56)",
 " (in 'optimize_glm.stan', line 159, column 2 to column 74)",
 " (in 'optimize_glm.stan', line 160, column 2 to column 60)",
 " (in 'optimize_glm.stan', line 162, column 2 to column 74)",
 " (in 'optimize_glm.stan', line 163, column 2 to column 60)",
 " (in 'optimize_glm.stan', line 165, column 2 to column 77)",
 " (in 'optimize_glm.stan', line 166, column 2 to column 63)",
 " (in 'optimize_glm.stan', line 168, column 2 to column 74)",
 " (in 'optimize_glm.stan', line 169, column 2 to column 60)",
 " (in 'optimize_glm.stan', line 171, column 2 to column 76)",
 " (in 'optimize_glm.stan', line 172, column 2 to column 62)",
 " (in 'optimize_glm.stan', line 174, column 2 to column 73)",
 " (in 'optimize_glm.stan', line 175, column 2 to column 59)",
 " (in 'optimize_glm.stan', line 177, column 2 to column 80)",
 " (in 'optimize_glm.stan', line 178, column 2 to column 66)",
 " (in 'optimize_glm.stan', line 180, column 2 to column 77)",
 " (in 'optimize_glm.stan', line 181, column 2 to column 63)",
 " (in 'optimize_glm.stan', line 183, column 2 to column 62)",
 " (in 'optimize_glm.stan', line 184, column 2 to column 48)",
 " (in 'optimize_glm.stan', line 186, column 2 to column 62)",
 " (in 'optimize_glm.stan', line 187, column 2 to column 48)",
 " (in 'optimize_glm.stan', line 189, column 2 to column 68)",
 " (in 'optimize_glm.stan', line 190, column 2 to column 54)",
 " (in 'optimize_glm.stan', line 192, column 2 to column 65)",
 " (in 'optimize_glm.stan', line 193, column 2 to column 51)",
 " (in 'optimize_glm.stan', line 195, column 2 to column 62)",
 " (in 'optimize_glm.stan', line 196, column 2 to column 48)",
 " (in 'optimize_glm.stan', line 198, column 2 to column 62)",
 " (in 'optimize_glm.stan', line 199, column 2 to column 48)",
 " (in 'optimize_glm.stan', line 201, column 2 to column 68)",
 " (in 'optimize_glm.stan', line 202, column 2 to column 54)",
 " (in 'optimize_glm.stan', line 204, column 2 to column 65)",
 " (in 'optimize_glm.stan', line 205, column 2 to column 51)",
 " (in 'optimize_glm.stan', line 207, column 2 to column 65)",
 " (in 'optimize_glm.stan', line 208, column 2 to column 51)",
 " (in 'optimize_glm.stan', line 210, column 2 to column 65)",
 " (in 'optimize_glm.stan', line 211, column 2 to column 51)",
 " (in 'optimize_glm.stan', line 213, column 2 to column 63)",
 " (in 'optimize_glm.stan', line 214, column 2 to column 49)",
 " (in 'optimize_glm.stan', line 216, column 2 to column 63)",
 " (in 'optimize_glm.stan', line 217, column 2 to column 49)",
 " (in 'optimize_glm.stan', line 219, column 2 to column 69)",
 " (in 'optimize_glm.stan', line 220, column 2 to column 55)",
 " (in 'optimize_glm.stan', line 222, column 2 to column 66)",
 " (in 'optimize_glm.stan', line 223, column 2 to column 53)",
 " (in 'optimize_glm.stan', line 225, column 2 to column 66)",
 " (in 'optimize_glm.stan', line 226, column 2 to column 52)",
 " (in 'optimize_glm.stan', line 228, column 2 to column 66)",
 " (in 'optimize_glm.stan', line 229, column 2 to column 52)",
 " (in 'optimize_glm.stan', line 231, column 2 to column 68)",
 " (in 'optimize_glm.stan', line 232, column 2 to column 54)",
 " (in 'optimize_glm.stan', line 234, column 2 to column 68)",
 " (in 'optimize_glm.stan', line 235, column 2 to column 54)",
 " (in 'optimize_glm.stan', line 237, column 2 to column 74)",
 " (in 'optimize_glm.stan', line 238, column 2 to column 60)",
 " (in 'optimize_glm.stan', line 240, column 2 to column 71)",
 " (in 'optimize_glm.stan', line 241, column 2 to column 57)",
 " (in 'optimize_glm.stan', line 243, column 2 to column 71)",
 " (in 'optimize_glm.stan', line 244, column 2 to column 57)",
 " (in 'optimize_glm.stan', line 246, column 2 to column 71)",
 " (in 'optimize_glm.stan', line 247, column 2 to column 57)",
 " (in 'optimize_glm.stan', line 249, column 2 to column 77)",
 " (in 'optimize_glm.stan', line 250, column 2 to column 63)",
 " (in 'optimize_glm.stan', line 252, column 2 to column 74)",
 " (in 'optimize_glm.stan', line 253, column 2 to column 60)",
 " (in 'optimize_glm.stan', line 255, column 2 to column 69)",
 " (in 'optimize_glm.stan', line 256, column 2 to column 55)",
 " (in 'optimize_glm.stan', line 258, column 2 to column 69)",
 " (in 'optimize_glm.stan', line 259, column 2 to column 55)",
 " (in 'optimize_glm.stan', line 261, column 2 to column 75)",
 " (in 'optimize_glm.stan', line 262, column 2 to column 61)",
 " (in 'optimize_glm.stan', line 264, column 2 to column 72)",
 " (in 'optimize_glm.stan', line 265, column 2 to column 58)",
 " (in 'optimize_glm.stan', line 267, column 2 to column 72)",
 " (in 'optimize_glm.stan', line 268, column 2 to column 58)",
 " (in 'optimize_glm.stan', line 270, column 2 to column 72)",
 " (in 'optimize_glm.stan', line 271, column 2 to column 58)",
 " (in 'optimize_glm.stan', line 273, column 2 to column 78)",
 " (in 'optimize_glm.stan', line 274, column 2 to column 64)",
 " (in 'optimize_glm.stan', line 276, column 2 to column 75)",
 " (in 'optimize_glm.stan', line 277, column 2 to column 61)",
 " (in 'optimize_glm.stan', line 279, column 2 to column 73)",
 " (in 'optimize_glm.stan', line 280, column 2 to column 59)",
 " (in 'optimize_glm.stan', line 282, column 2 to column 76)",
 " (in 'optimize_glm.stan', line 283, column 2 to column 62)",
 " (in 'optimize_glm.stan', line 285, column 2 to column 69)",
 " (in 'optimize_glm.stan', line 286, column 2 to column 54)",
 " (in 'optimize_glm.stan', line 2, column 2 to column 17)",
 " (in 'optimize_glm.stan', line 3, column 2 to column 17)",
 " (in 'optimize_glm.stan', line 4, column 9 to column 10)",
 " (in 'optimize_glm.stan', line 4, column 12 to column 13)",
 " (in 'optimize_glm.stan', line 4, column 2 to column 19)",
 " (in 'optimize_glm.stan', line 5, column 9 to column 10)",
 " (in 'optimize_glm.stan', line 5, column 12 to column 13)",
 " (in 'optimize_glm.stan', line 5, column 2 to column 24)",
 " (in 'optimize_glm.stan', line 6, column 9 to column 10)",
 " (in 'optimize_glm.stan', line 6, column 2 to column 18)",
 " (in 'optimize_glm.stan', line 7, column 13 to column 14)",
 " (in 'optimize_glm.stan', line 7, column 2 to column 23)",
 " (in 'optimize_glm.stan', line 8, column 13 to column 14)",
 " (in 'optimize_glm.stan', line 8, column 2 to column 16)",
 " (in 'optimize_glm.stan', line 9, column 14 to column 15)",
 " (in 'optimize_glm.stan', line 9, column 2 to column 17)",
 " (in 'optimize_glm.stan', line 10, column 2 to column 12)",
 " (in 'optimize_glm.stan', line 11, column 2 to column 13)",
 " (in 'optimize_glm.stan', line 15, column 2 to column 20)",
 " (in 'optimize_glm.stan', line 16, column 2 to column 20)",
 " (in 'optimize_glm.stan', line 17, column 9 to column 10)",
 " (in 'optimize_glm.stan', line 17, column 12 to column 13)",
 " (in 'optimize_glm.stan', line 17, column 2 to column 22)",
 " (in 'optimize_glm.stan', line 18, column 9 to column 10)",
 " (in 'optimize_glm.stan', line 18, column 2 to column 21)",
 " (in 'optimize_glm.stan', line 19, column 13 to column 14)",
 " (in 'optimize_glm.stan', line 19, column 2 to column 26)",
 " (in 'optimize_glm.stan', line 20, column 16 to column 17)",
 " (in 'optimize_glm.stan', line 20, column 2 to column 19)",
 " (in 'optimize_glm.stan', line 21, column 17 to column 18)",
 " (in 'optimize_glm.stan', line 21, column 2 to column 20)",
 " (in 'optimize_glm.stan', line 22, column 2 to column 15)",
 " (in 'optimize_glm.stan', line 23, column 2 to column 16)",
 " (in 'optimize_glm.stan', line 27, column 9 to column 10)",
 " (in 'optimize_glm.stan', line 28, column 9 to column 10)",
 " (in 'optimize_glm.stan', line 29, column 9 to column 10)",
 " (in 'optimize_glm.stan', line 33, column 9 to column 10)",
 " (in 'optimize_glm.stan', line 33, column 12 to column 13)",
 " (in 'optimize_glm.stan', line 34, column 9 to column 10)",
 " (in 'optimize_glm.stan', line 34, column 12 to column 13)",
 " (in 'optimize_glm.stan', line 35, column 13 to column 14)"};



class optimize_glm_model final : public model_base_crtp<optimize_glm_model> {

 private:
  int k;
  int n;
  Eigen::Matrix<double, -1, -1> X_d__;
  std::vector<Eigen::Matrix<double, -1, -1>> X_d_a;
  Eigen::Matrix<double, -1, 1> y_v_d__;
  Eigen::Matrix<double, 1, -1> X_rv_d__;
  std::vector<int> y_vi_d;
  std::vector<int> y2_vi_d;
  int y_s_d;
  double y_r_d;
  int k_td;
  int n_td;
  Eigen::Matrix<double, -1, -1> X_d_td__;
  Eigen::Matrix<double, -1, 1> y_v_d_td__;
  Eigen::Matrix<double, 1, -1> X_rv_d_td__;
  std::vector<int> y_vi_d_td;
  std::vector<int> y2_vi_d_td;
  int y_s_d_td;
  double y_r_d_td; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> X_d{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y_v_d{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> X_rv_d{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> X_d_td{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y_v_d_td{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> X_rv_d_td{nullptr, 0};
 
 public:
  ~optimize_glm_model() { }
  
  inline std::string model_name() const final { return "optimize_glm_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  optimize_glm_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "optimize_glm_model_namespace::optimize_glm_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 176;
      context__.validate_dims("data initialization","k","int",
           std::vector<size_t>{});
      k = std::numeric_limits<int>::min();
      
      current_statement__ = 176;
      k = context__.vals_i("k")[(1 - 1)];
      current_statement__ = 176;
      check_greater_or_equal(function__, "k", k, 1);
      current_statement__ = 177;
      context__.validate_dims("data initialization","n","int",
           std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 177;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 177;
      check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 178;
      validate_non_negative_index("X_d", "n", n);
      current_statement__ = 179;
      validate_non_negative_index("X_d", "k", k);
      current_statement__ = 180;
      context__.validate_dims("data initialization","X_d","double",
           std::vector<size_t>{static_cast<size_t>(n),
            static_cast<size_t>(k)});
      X_d__ = Eigen::Matrix<double, -1, -1>::Constant(n, k, std::numeric_limits<double>::quiet_NaN());
      new (&X_d) Eigen::Map<Eigen::Matrix<double, -1, -1>>(X_d__.data(), n, k);
      
      
      {
        std::vector<local_scalar_t__> X_d_flat__;
        current_statement__ = 180;
        X_d_flat__ = context__.vals_r("X_d");
        current_statement__ = 180;
        pos__ = 1;
        current_statement__ = 180;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 180;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 180;
            assign(X_d, X_d_flat__[(pos__ - 1)],
              "assigning variable X_d", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 180;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 181;
      validate_non_negative_index("X_d_a", "n", n);
      current_statement__ = 182;
      validate_non_negative_index("X_d_a", "k", k);
      current_statement__ = 183;
      context__.validate_dims("data initialization","X_d_a","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(n), static_cast<size_t>(k)});
      X_d_a = std::vector<Eigen::Matrix<double, -1, -1>>(2, Eigen::Matrix<double, -1, -1>::Constant(n, k, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> X_d_a_flat__;
        current_statement__ = 183;
        X_d_a_flat__ = context__.vals_r("X_d_a");
        current_statement__ = 183;
        pos__ = 1;
        current_statement__ = 183;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 183;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 183;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 183;
              assign(X_d_a, X_d_a_flat__[(pos__ - 1)],
                "assigning variable X_d_a", index_uni(sym3__),
                                              index_uni(sym2__),
                                              index_uni(sym1__));
              current_statement__ = 183;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 184;
      validate_non_negative_index("y_v_d", "n", n);
      current_statement__ = 185;
      context__.validate_dims("data initialization","y_v_d","double",
           std::vector<size_t>{static_cast<size_t>(n)});
      y_v_d__ = Eigen::Matrix<double, -1, 1>::Constant(n, std::numeric_limits<double>::quiet_NaN());
      new (&y_v_d) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_v_d__.data(), n);
      
      
      {
        std::vector<local_scalar_t__> y_v_d_flat__;
        current_statement__ = 185;
        y_v_d_flat__ = context__.vals_r("y_v_d");
        current_statement__ = 185;
        pos__ = 1;
        current_statement__ = 185;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 185;
          assign(y_v_d, y_v_d_flat__[(pos__ - 1)],
            "assigning variable y_v_d", index_uni(sym1__));
          current_statement__ = 185;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 186;
      validate_non_negative_index("X_rv_d", "n", n);
      current_statement__ = 187;
      context__.validate_dims("data initialization","X_rv_d","double",
           std::vector<size_t>{static_cast<size_t>(n)});
      X_rv_d__ = Eigen::Matrix<double, 1, -1>::Constant(n, std::numeric_limits<double>::quiet_NaN());
      new (&X_rv_d) Eigen::Map<Eigen::Matrix<double, 1, -1>>(X_rv_d__.data(), n);
      
      
      {
        std::vector<local_scalar_t__> X_rv_d_flat__;
        current_statement__ = 187;
        X_rv_d_flat__ = context__.vals_r("X_rv_d");
        current_statement__ = 187;
        pos__ = 1;
        current_statement__ = 187;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 187;
          assign(X_rv_d, X_rv_d_flat__[(pos__ - 1)],
            "assigning variable X_rv_d", index_uni(sym1__));
          current_statement__ = 187;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 188;
      validate_non_negative_index("y_vi_d", "n", n);
      current_statement__ = 189;
      context__.validate_dims("data initialization","y_vi_d","int",
           std::vector<size_t>{static_cast<size_t>(n)});
      y_vi_d = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 189;
      y_vi_d = context__.vals_i("y_vi_d");
      current_statement__ = 190;
      validate_non_negative_index("y2_vi_d", "n", n);
      current_statement__ = 191;
      context__.validate_dims("data initialization","y2_vi_d","int",
           std::vector<size_t>{static_cast<size_t>(n)});
      y2_vi_d = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 191;
      y2_vi_d = context__.vals_i("y2_vi_d");
      current_statement__ = 192;
      context__.validate_dims("data initialization","y_s_d","int",
           std::vector<size_t>{});
      y_s_d = std::numeric_limits<int>::min();
      
      current_statement__ = 192;
      y_s_d = context__.vals_i("y_s_d")[(1 - 1)];
      current_statement__ = 193;
      context__.validate_dims("data initialization","y_r_d","double",
           std::vector<size_t>{});
      y_r_d = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 193;
      y_r_d = context__.vals_r("y_r_d")[(1 - 1)];
      current_statement__ = 194;
      k_td = std::numeric_limits<int>::min();
      
      current_statement__ = 195;
      n_td = std::numeric_limits<int>::min();
      
      current_statement__ = 196;
      validate_non_negative_index("X_d_td", "n", n);
      current_statement__ = 197;
      validate_non_negative_index("X_d_td", "k", k);
      current_statement__ = 198;
      X_d_td__ = Eigen::Matrix<double, -1, -1>::Constant(n, k, std::numeric_limits<double>::quiet_NaN());
      new (&X_d_td) Eigen::Map<Eigen::Matrix<double, -1, -1>>(X_d_td__.data(), n, k);
      stan::math::initialize_fill(X_d_td, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 199;
      validate_non_negative_index("y_v_d_td", "n", n);
      current_statement__ = 200;
      y_v_d_td__ = Eigen::Matrix<double, -1, 1>::Constant(n, std::numeric_limits<double>::quiet_NaN());
      new (&y_v_d_td) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_v_d_td__.data(), n);
      stan::math::initialize_fill(y_v_d_td, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 201;
      validate_non_negative_index("X_rv_d_td", "n", n);
      current_statement__ = 202;
      X_rv_d_td__ = Eigen::Matrix<double, 1, -1>::Constant(n, std::numeric_limits<double>::quiet_NaN());
      new (&X_rv_d_td) Eigen::Map<Eigen::Matrix<double, 1, -1>>(X_rv_d_td__.data(), n);
      stan::math::initialize_fill(X_rv_d_td, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 203;
      validate_non_negative_index("y_vi_d_td", "n", n);
      current_statement__ = 204;
      y_vi_d_td = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 205;
      validate_non_negative_index("y2_vi_d_td", "n", n);
      current_statement__ = 206;
      y2_vi_d_td = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 207;
      y_s_d_td = std::numeric_limits<int>::min();
      
      current_statement__ = 208;
      y_r_d_td = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 194;
      check_greater_or_equal(function__, "k_td", k_td, 1);
      current_statement__ = 195;
      check_greater_or_equal(function__, "n_td", n_td, 0);
      current_statement__ = 209;
      validate_non_negative_index("alpha_v", "k", k);
      current_statement__ = 210;
      validate_non_negative_index("beta", "k", k);
      current_statement__ = 211;
      validate_non_negative_index("cuts", "k", k);
      current_statement__ = 212;
      validate_non_negative_index("X_p", "n", n);
      current_statement__ = 213;
      validate_non_negative_index("X_p", "k", k);
      current_statement__ = 214;
      validate_non_negative_index("beta_m", "n", n);
      current_statement__ = 215;
      validate_non_negative_index("beta_m", "k", k);
      current_statement__ = 216;
      validate_non_negative_index("X_rv_p", "n", n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = k + k + k + 1 + 1 + 1 + (n * k) + (n * k) + n;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "optimize_glm_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_v = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(k, DUMMY_VAR__);
                                                       
      
      current_statement__ = 1;
      alpha_v = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(k);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(k, DUMMY_VAR__);
                                                    
      
      current_statement__ = 2;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(k);
      Eigen::Matrix<local_scalar_t__, -1, 1> cuts = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(k, DUMMY_VAR__);
                                                    
      
      current_statement__ = 3;
      cuts = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(k);
      local_scalar_t__ sigma = DUMMY_VAR__;
      
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ alpha = DUMMY_VAR__;
      
      current_statement__ = 5;
      alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ phi = DUMMY_VAR__;
      
      current_statement__ = 6;
      phi = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, -1> X_p = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(n, k, DUMMY_VAR__);
                                                    
      
      current_statement__ = 7;
      X_p = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(n, k);
      Eigen::Matrix<local_scalar_t__, -1, -1> beta_m = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(n, k, DUMMY_VAR__);
                                                       
      
      current_statement__ = 8;
      beta_m = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(n,
                 k);
      Eigen::Matrix<local_scalar_t__, 1, -1> X_rv_p = Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(n, DUMMY_VAR__);
                                                      
      
      current_statement__ = 9;
      X_rv_p = in__.template read<Eigen::Matrix<local_scalar_t__, 1, -1>>(n);
      {
        current_statement__ = 10;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d, X_d, alpha, beta, sigma));
        current_statement__ = 11;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d, X_d, alpha, beta, sigma));
        current_statement__ = 12;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d, X_p, alpha, beta, sigma));
        current_statement__ = 13;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d, X_p, alpha, beta, sigma));
        current_statement__ = 14;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_r_d, X_d, alpha, beta, beta));
        current_statement__ = 15;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_r_d, X_d, alpha, beta, beta));
        current_statement__ = 16;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_r_d, X_p, alpha, beta, beta));
        current_statement__ = 17;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_r_d, X_p, alpha, beta, beta));
        current_statement__ = 18;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d, X_rv_d, alpha, beta, beta));
        current_statement__ = 19;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d, X_rv_d, alpha, beta, beta));
        current_statement__ = 20;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d, X_rv_p, alpha, beta, beta));
        current_statement__ = 21;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d, X_rv_p, alpha, beta, beta));
        current_statement__ = 22;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d_td, X_d_td, alpha, beta, sigma));
        current_statement__ = 23;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d_td, X_d_td, alpha, beta, sigma));
        current_statement__ = 24;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d_td, X_p, alpha, beta, sigma));
        current_statement__ = 25;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d_td, X_p, alpha, beta, sigma));
        current_statement__ = 26;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_r_d_td, X_d_td, alpha, beta, beta));
        current_statement__ = 27;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_r_d_td, X_d_td, alpha, beta, beta));
        current_statement__ = 28;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_r_d_td, X_p, alpha, beta, beta));
        current_statement__ = 29;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_r_d_td, X_p, alpha, beta, beta));
        current_statement__ = 30;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d_td, X_rv_d_td, alpha, beta, beta));
        current_statement__ = 31;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d_td, X_rv_d_td, alpha, beta,
            beta));
        current_statement__ = 32;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d_td, X_rv_p, alpha, beta, beta));
        current_statement__ = 33;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d_td, X_rv_p, alpha, beta, beta));
        current_statement__ = 34;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d, X_d, alpha, beta));
        current_statement__ = 35;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d, X_d, alpha, beta));
        current_statement__ = 36;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d, X_p, alpha, beta));
        current_statement__ = 37;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d, X_p, alpha, beta));
        current_statement__ = 38;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d, X_rv_d, alpha, beta));
        current_statement__ = 39;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d, X_rv_d, alpha, beta));
        current_statement__ = 40;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d, X_rv_p, alpha, beta));
        current_statement__ = 41;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d, X_rv_p, alpha, beta));
        current_statement__ = 42;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_s_d, X_d, alpha, beta));
        current_statement__ = 43;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_s_d, X_d, alpha, beta));
        current_statement__ = 44;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_s_d, X_p, alpha, beta));
        current_statement__ = 45;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_s_d, X_p, alpha, beta));
        current_statement__ = 46;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d_td, X_d_td, alpha, beta));
        current_statement__ = 47;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d_td, X_d_td, alpha, beta));
        current_statement__ = 48;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d_td, X_p, alpha, beta));
        current_statement__ = 49;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d_td, X_p, alpha, beta));
        current_statement__ = 50;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d_td, X_rv_d_td, alpha, beta));
        current_statement__ = 51;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d_td, X_rv_d_td, alpha,
            beta));
        current_statement__ = 52;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d_td, X_rv_p, alpha, beta));
        current_statement__ = 53;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d_td, X_rv_p, alpha, beta));
        current_statement__ = 54;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_s_d_td, X_d_td, alpha, beta));
        current_statement__ = 55;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_s_d_td, X_d_td, alpha, beta));
        current_statement__ = 56;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_s_d_td, X_p, alpha, beta));
        current_statement__ = 57;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_s_d_td, X_p, alpha, beta));
        current_statement__ = 58;
        lp_accum__.add(poisson_log_glm_lpmf<false>(y_vi_d, X_d, alpha, beta));
        current_statement__ = 59;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d, X_d, alpha, beta));
        current_statement__ = 60;
        lp_accum__.add(poisson_log_glm_lpmf<false>(y_vi_d, X_p, alpha, beta));
        current_statement__ = 61;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d, X_p, alpha, beta));
        current_statement__ = 62;
        lp_accum__.add(poisson_log_glm_lpmf<false>(y_s_d, X_d, alpha, beta));
        current_statement__ = 63;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_s_d, X_d, alpha, beta));
        current_statement__ = 64;
        lp_accum__.add(poisson_log_glm_lpmf<false>(y_s_d, X_p, alpha, beta));
        current_statement__ = 65;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_s_d, X_p, alpha, beta));
        current_statement__ = 66;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_vi_d, X_rv_d, alpha, beta));
        current_statement__ = 67;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d, X_rv_d, alpha, beta));
        current_statement__ = 68;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_vi_d, X_rv_p, alpha, beta));
        current_statement__ = 69;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d, X_rv_p, alpha, beta));
        current_statement__ = 70;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_vi_d_td, X_d_td, alpha, beta));
        current_statement__ = 71;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d_td, X_d_td, alpha, beta));
        current_statement__ = 72;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_vi_d_td, X_p, alpha, beta));
        current_statement__ = 73;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d_td, X_p, alpha, beta));
        current_statement__ = 74;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_s_d_td, X_d_td, alpha, beta));
        current_statement__ = 75;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_s_d_td, X_d_td, alpha, beta));
        current_statement__ = 76;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_s_d_td, X_p, alpha, beta));
        current_statement__ = 77;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_s_d_td, X_p, alpha, beta));
        current_statement__ = 78;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_vi_d_td, X_rv_d_td, alpha, beta));
        current_statement__ = 79;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d_td, X_rv_d_td, alpha, beta));
        current_statement__ = 80;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_vi_d_td, X_rv_p, alpha, beta));
        current_statement__ = 81;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d_td, X_rv_p, alpha, beta));
        current_statement__ = 82;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d, X_d, alpha, beta, phi));
        current_statement__ = 83;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d, X_d, alpha, beta,
            phi));
        current_statement__ = 84;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d, X_p, alpha, beta, phi));
        current_statement__ = 85;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d, X_p, alpha, beta,
            phi));
        current_statement__ = 86;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_s_d, X_d, alpha, beta, phi));
        current_statement__ = 87;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_s_d, X_d, alpha, beta, phi));
        current_statement__ = 88;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_s_d, X_p, alpha, beta, phi));
        current_statement__ = 89;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_s_d, X_p, alpha, beta, phi));
        current_statement__ = 90;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d, X_rv_d, alpha, beta,
            phi));
        current_statement__ = 91;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d, X_rv_d, alpha, beta,
            phi));
        current_statement__ = 92;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d, X_rv_p, alpha, beta,
            phi));
        current_statement__ = 93;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d, X_rv_p, alpha, beta,
            phi));
        current_statement__ = 94;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d_td, X_d_td, alpha, beta,
            phi));
        current_statement__ = 95;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d_td, X_d_td, alpha,
            beta, phi));
        current_statement__ = 96;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d_td, X_p, alpha, beta,
            phi));
        current_statement__ = 97;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d_td, X_p, alpha, beta,
            phi));
        current_statement__ = 98;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_s_d_td, X_d_td, alpha, beta,
            phi));
        current_statement__ = 99;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_s_d_td, X_d_td, alpha,
            beta, phi));
        current_statement__ = 100;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_s_d_td, X_p, alpha, beta, phi));
        current_statement__ = 101;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_s_d_td, X_p, alpha, beta,
            phi));
        current_statement__ = 102;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d_td, X_rv_d_td, alpha,
            beta, phi));
        current_statement__ = 103;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d_td, X_rv_d_td, alpha,
            beta, phi));
        current_statement__ = 104;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d_td, X_rv_p, alpha, beta,
            phi));
        current_statement__ = 105;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d_td, X_rv_p, alpha,
            beta, phi));
        current_statement__ = 106;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d, X_d, beta, cuts));
        current_statement__ = 107;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d, X_d, beta, cuts));
        current_statement__ = 108;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d, X_p, beta, cuts));
        current_statement__ = 109;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d, X_p, beta, cuts));
        current_statement__ = 110;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d_td, X_d_td, beta, cuts));
        current_statement__ = 111;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d_td, X_d_td, beta, cuts));
        current_statement__ = 112;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d_td, X_p, beta, cuts));
        current_statement__ = 113;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d_td, X_p, beta, cuts));
        current_statement__ = 114;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d, X_d, beta, cuts));
        current_statement__ = 115;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d, X_d, beta, cuts));
        current_statement__ = 116;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d, X_p, beta, cuts));
        current_statement__ = 117;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d, X_p, beta, cuts));
        current_statement__ = 118;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d_td, X_d_td, beta, cuts));
        current_statement__ = 119;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d_td, X_d_td, beta, cuts));
        current_statement__ = 120;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d_td, X_p, beta, cuts));
        current_statement__ = 121;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d_td, X_p, beta, cuts));
        current_statement__ = 122;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d, X_rv_d, beta, cuts));
        current_statement__ = 123;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d, X_rv_d, beta, cuts));
        current_statement__ = 124;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d, X_rv_p, beta, cuts));
        current_statement__ = 125;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d, X_rv_p, beta, cuts));
        current_statement__ = 126;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_vi_d, X_d, beta, cuts));
        current_statement__ = 127;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_vi_d, X_d, beta, cuts));
        current_statement__ = 128;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_vi_d, X_p, beta, cuts));
        current_statement__ = 129;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_vi_d, X_p, beta, cuts));
        current_statement__ = 130;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_vi_d_td, X_d_td, beta, cuts));
        current_statement__ = 131;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_vi_d_td, X_d_td, beta, cuts));
        current_statement__ = 132;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_vi_d_td, X_p, beta, cuts));
        current_statement__ = 133;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_vi_d_td, X_p, beta, cuts));
        current_statement__ = 134;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_vi_d, X_rv_d, beta, cuts));
        current_statement__ = 135;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_vi_d, X_rv_d, beta, cuts));
        current_statement__ = 136;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_vi_d, X_rv_p, beta, cuts));
        current_statement__ = 137;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_vi_d, X_rv_p, beta, cuts));
        current_statement__ = 138;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d, X_d, alpha_v, beta_m));
        current_statement__ = 139;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d, X_d, alpha_v, beta_m));
        current_statement__ = 140;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d, X_p, alpha_v, beta_m));
        current_statement__ = 141;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d, X_p, alpha_v, beta_m));
        current_statement__ = 142;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d_td, X_d_td, alpha_v,
            beta_m));
        current_statement__ = 143;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d_td, X_d_td, alpha_v,
            beta_m));
        current_statement__ = 144;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d_td, X_p, alpha_v, beta_m));
        current_statement__ = 145;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d_td, X_p, alpha_v,
            beta_m));
        current_statement__ = 146;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d, X_rv_d, alpha_v, beta_m));
        current_statement__ = 147;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d, X_rv_d, alpha_v,
            beta_m));
        current_statement__ = 148;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d, X_rv_p, alpha_v, beta_m));
        current_statement__ = 149;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 150;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d_td, X_rv_d_td, alpha_v,
            beta_m));
        current_statement__ = 151;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d_td, X_rv_d_td, alpha_v,
            beta_m));
        current_statement__ = 152;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d_td, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 153;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d_td, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 154;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d, X_d, alpha_v, beta_m));
        current_statement__ = 155;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d, X_d, alpha_v, beta_m));
        current_statement__ = 156;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d, X_p, alpha_v, beta_m));
        current_statement__ = 157;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d, X_p, alpha_v, beta_m));
        current_statement__ = 158;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d_td, X_d_td, alpha_v,
            beta_m));
        current_statement__ = 159;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d_td, X_d_td, alpha_v,
            beta_m));
        current_statement__ = 160;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d_td, X_p, alpha_v, beta_m));
        current_statement__ = 161;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d_td, X_p, alpha_v,
            beta_m));
        current_statement__ = 162;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d, X_rv_d, alpha_v, beta_m));
        current_statement__ = 163;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d, X_rv_d, alpha_v,
            beta_m));
        current_statement__ = 164;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d, X_rv_p, alpha_v, beta_m));
        current_statement__ = 165;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 166;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d_td, X_rv_d_td, alpha_v,
            beta_m));
        current_statement__ = 167;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d_td, X_rv_d_td, alpha_v,
            beta_m));
        current_statement__ = 168;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d_td, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 169;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d_td, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 170;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y2_vi_d, X_rv_p, alpha_v, beta_m));
        current_statement__ = 171;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y2_vi_d, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 172;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y2_vi_d_td, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 173;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y2_vi_d_td, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 174;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d,
            rvalue(X_d_a, "X_d_a", index_uni(1)), alpha, beta, sigma));
        current_statement__ = 175;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d,
            rvalue(X_d_a, "X_d_a", index_uni(1)), alpha, beta, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "optimize_glm_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> alpha_v = Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN());
                                             
      
      current_statement__ = 1;
      alpha_v = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(k);
      Eigen::Matrix<double, -1, 1> beta = Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN());
                                          
      
      current_statement__ = 2;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(k);
      Eigen::Matrix<double, -1, 1> cuts = Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN());
                                          
      
      current_statement__ = 3;
      cuts = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(k);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      alpha = in__.template read<local_scalar_t__>();
      double phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      phi = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, -1> X_p = Eigen::Matrix<double, -1, -1>::Constant(n, k, std::numeric_limits<double>::quiet_NaN());
                                          
      
      current_statement__ = 7;
      X_p = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(n, k);
      Eigen::Matrix<double, -1, -1> beta_m = Eigen::Matrix<double, -1, -1>::Constant(n, k, std::numeric_limits<double>::quiet_NaN());
                                             
      
      current_statement__ = 8;
      beta_m = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(n,
                 k);
      Eigen::Matrix<double, 1, -1> X_rv_p = Eigen::Matrix<double, 1, -1>::Constant(n, std::numeric_limits<double>::quiet_NaN());
                                            
      
      current_statement__ = 9;
      X_rv_p = in__.template read<Eigen::Matrix<local_scalar_t__, 1, -1>>(n);
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(alpha_v[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(cuts[(sym1__ - 1)]);
      }
      vars__.emplace_back(sigma);
      vars__.emplace_back(alpha);
      vars__.emplace_back(phi);
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          vars__.emplace_back(
            rvalue(X_p, "X_p", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          vars__.emplace_back(
            rvalue(beta_m, "beta_m", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.emplace_back(X_rv_p[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> alpha_v = Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN());
                                             
      
      {
        std::vector<local_scalar_t__> alpha_v_flat__;
        current_statement__ = 1;
        alpha_v_flat__ = context__.vals_r("alpha_v");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 1;
          assign(alpha_v, alpha_v_flat__[(pos__ - 1)],
            "assigning variable alpha_v", index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> beta = Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN());
                                          
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 2;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 2;
          assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> cuts = Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN());
                                          
      
      {
        std::vector<local_scalar_t__> cuts_flat__;
        current_statement__ = 3;
        cuts_flat__ = context__.vals_r("cuts");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 3;
          assign(cuts, cuts_flat__[(pos__ - 1)],
            "assigning variable cuts", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      double sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      double alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      double phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      phi = context__.vals_r("phi")[(1 - 1)];
      Eigen::Matrix<double, -1, -1> X_p = Eigen::Matrix<double, -1, -1>::Constant(n, k, std::numeric_limits<double>::quiet_NaN());
                                          
      
      {
        std::vector<local_scalar_t__> X_p_flat__;
        current_statement__ = 7;
        X_p_flat__ = context__.vals_r("X_p");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 7;
            assign(X_p, X_p_flat__[(pos__ - 1)],
              "assigning variable X_p", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> beta_m = Eigen::Matrix<double, -1, -1>::Constant(n, k, std::numeric_limits<double>::quiet_NaN());
                                             
      
      {
        std::vector<local_scalar_t__> beta_m_flat__;
        current_statement__ = 8;
        beta_m_flat__ = context__.vals_r("beta_m");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 8;
            assign(beta_m, beta_m_flat__[(pos__ - 1)],
              "assigning variable beta_m", index_uni(sym2__),
                                             index_uni(sym1__));
            current_statement__ = 8;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, 1, -1> X_rv_p = Eigen::Matrix<double, 1, -1>::Constant(n, std::numeric_limits<double>::quiet_NaN());
                                            
      
      {
        std::vector<local_scalar_t__> X_rv_p_flat__;
        current_statement__ = 9;
        X_rv_p_flat__ = context__.vals_r("X_rv_p");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 9;
          assign(X_rv_p, X_rv_p_flat__[(pos__ - 1)],
            "assigning variable X_rv_p", index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(alpha_v[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(cuts[(sym1__ - 1)]);
      }
      vars__.emplace_back(sigma_free__);
      vars__.emplace_back(alpha);
      vars__.emplace_back(phi);
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          vars__.emplace_back(
            rvalue(X_p, "X_p", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          vars__.emplace_back(
            rvalue(beta_m, "beta_m", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.emplace_back(X_rv_p[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha_v", "beta", "cuts", "sigma",
      "alpha", "phi", "X_p", "beta_m", "X_rv_p"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(k)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(n)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_v" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "cuts" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "phi");
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "X_p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_m" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "X_rv_p" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_v" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "cuts" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "phi");
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "X_p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_m" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "X_rv_p" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"cuts\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"X_p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"beta_m\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"X_rv_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"cuts\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"X_p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"beta_m\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"X_rv_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = optimize_glm_model_namespace::optimize_glm_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return optimize_glm_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp param-constraint.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace param_constraint_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 7> locations_array__ = 
{" (found before start of program)",
 " (in 'param-constraint.stan', line 7, column 2 to column 38)",
 " (in 'param-constraint.stan', line 8, column 2 to column 38)",
 " (in 'param-constraint.stan', line 2, column 2 to column 9)",
 " (in 'param-constraint.stan', line 3, column 2 to column 9)",
 " (in 'param-constraint.stan', line 7, column 34 to column 36)",
 " (in 'param-constraint.stan', line 8, column 31 to column 33)"};



class param_constraint_model final : public model_base_crtp<param_constraint_model> {

 private:
  int nt;
  int NS; 
  
 
 public:
  ~param_constraint_model() { }
  
  inline std::string model_name() const final { return "param_constraint_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  param_constraint_model(stan::io::var_context& context__,
                         unsigned int random_seed__ = 0,
                         std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "param_constraint_model_namespace::param_constraint_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 3;
      context__.validate_dims("data initialization","nt","int",
           std::vector<size_t>{});
      nt = std::numeric_limits<int>::min();
      
      current_statement__ = 3;
      nt = context__.vals_i("nt")[(1 - 1)];
      current_statement__ = 4;
      context__.validate_dims("data initialization","NS","int",
           std::vector<size_t>{});
      NS = std::numeric_limits<int>::min();
      
      current_statement__ = 4;
      NS = context__.vals_i("NS")[(1 - 1)];
      current_statement__ = 5;
      validate_non_negative_index("L_Omega", "nt", nt);
      current_statement__ = 6;
      validate_non_negative_index("z1", "NS", NS);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = (nt * ((2 * (2 - 1)) / 2)) + NS;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "param_constraint_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> L_Omega = 
      std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(nt, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(2, 2, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 1;
      L_Omega = in__.template read_constrain_cholesky_factor_corr<stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>, jacobian__>(
                  lp__, nt, 2);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> z1 = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(NS, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 2;
      z1 = in__.template read_constrain_lb<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>, jacobian__>(
             rvalue(L_Omega, "L_Omega",
               index_uni(1), index_uni(1), index_uni(2)), lp__, NS);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "param_constraint_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<double, -1, -1>> L_Omega = std::vector<Eigen::Matrix<double, -1, -1>>(nt, Eigen::Matrix<double, -1, -1>::Constant(2, 2, std::numeric_limits<double>::quiet_NaN()));
                                                           
      
      current_statement__ = 1;
      L_Omega = in__.template read_constrain_cholesky_factor_corr<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>, jacobian__>(
                  lp__, nt, 2);
      Eigen::Matrix<double, -1, 1> z1 = Eigen::Matrix<double, -1, 1>::Constant(NS, std::numeric_limits<double>::quiet_NaN());
                                        
      
      current_statement__ = 2;
      z1 = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
             rvalue(L_Omega, "L_Omega",
               index_uni(1), index_uni(1), index_uni(2)), lp__, NS);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= nt; ++sym3__) {
            vars__.emplace_back(
              rvalue(L_Omega, "L_Omega",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
        vars__.emplace_back(z1[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<Eigen::Matrix<double, -1, -1>> L_Omega = std::vector<Eigen::Matrix<double, -1, -1>>(nt, Eigen::Matrix<double, -1, -1>::Constant(2, 2, std::numeric_limits<double>::quiet_NaN()));
                                                           
      
      {
        std::vector<local_scalar_t__> L_Omega_flat__;
        current_statement__ = 1;
        L_Omega_flat__ = context__.vals_r("L_Omega");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 1;
            for (int sym3__ = 1; sym3__ <= nt; ++sym3__) {
              current_statement__ = 1;
              assign(L_Omega, L_Omega_flat__[(pos__ - 1)],
                "assigning variable L_Omega", index_uni(sym3__),
                                                index_uni(sym2__),
                                                index_uni(sym1__));
              current_statement__ = 1;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<Eigen::Matrix<double, -1, 1>> L_Omega_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(nt, Eigen::Matrix<double, -1, 1>::Constant(
                                                                   ((2 *
                                                                    (2 - 1))
                                                                    / 2), std::numeric_limits<double>::quiet_NaN()));
                                                                 
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        current_statement__ = 1;
        assign(L_Omega_free__,
          stan::math::cholesky_corr_free(L_Omega[(sym1__ - 1)]),
          "assigning variable L_Omega_free__", index_uni(sym1__));
      }
      Eigen::Matrix<double, -1, 1> z1 = Eigen::Matrix<double, -1, 1>::Constant(NS, std::numeric_limits<double>::quiet_NaN());
                                        
      
      {
        std::vector<local_scalar_t__> z1_flat__;
        current_statement__ = 2;
        z1_flat__ = context__.vals_r("z1");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
          current_statement__ = 2;
          assign(z1, z1_flat__[(pos__ - 1)],
            "assigning variable z1", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> z1_free__ = Eigen::Matrix<double, -1, 1>::Constant(NS, std::numeric_limits<double>::quiet_NaN());
                                               
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
        current_statement__ = 2;
        assign(z1_free__,
          stan::math::lb_free(z1[(sym1__ - 1)],
            rvalue(L_Omega, "L_Omega",
              index_uni(1), index_uni(1), index_uni(2))),
          "assigning variable z1_free__", index_uni(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nt; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ((2 * (2 - 1)) / 2); ++sym2__) {
          vars__.emplace_back(L_Omega_free__[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
        vars__.emplace_back(z1_free__[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"L_Omega", "z1"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(nt)
                                                                   ,
                                                                   static_cast<size_t>(2)
                                                                   ,
                                                                   static_cast<size_t>(2)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(NS)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= nt; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "L_Omega" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z1" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= ((2 * (2 - 1)) / 2); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nt; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L_Omega" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z1" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"L_Omega\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nt) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"z1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NS) + "},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"L_Omega\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nt) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(((2 * (2 - 1)) / 2)) + "}},\"block\":\"parameters\"},{\"name\":\"z1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NS) + "},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = param_constraint_model_namespace::param_constraint_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return param_constraint_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp reduce_sum_m1.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace reduce_sum_m1_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 26> locations_array__ = 
{" (found before start of program)",
 " (in 'reduce_sum_m1.stan', line 26, column 2 to column 13)",
 " (in 'reduce_sum_m1.stan', line 27, column 2 to column 13)",
 " (in 'reduce_sum_m1.stan', line 28, column 2 to column 13)",
 " (in 'reduce_sum_m1.stan', line 32, column 2 to column 33)",
 " (in 'reduce_sum_m1.stan', line 33, column 2 to column 37)",
 " (in 'reduce_sum_m1.stan', line 34, column 2 to column 40)",
 " (in 'reduce_sum_m1.stan', line 35, column 2 to column 41)",
 " (in 'reduce_sum_m1.stan', line 22, column 2 to column 14)",
 " (in 'reduce_sum_m1.stan', line 26, column 10 to column 11)",
 " (in 'reduce_sum_m1.stan', line 27, column 10 to column 11)",
 " (in 'reduce_sum_m1.stan', line 28, column 10 to column 11)",
 " (in 'reduce_sum_m1.stan', line 6, column 6 to column 41)",
 " (in 'reduce_sum_m1.stan', line 5, column 11 to line 7, column 5)",
 " (in 'reduce_sum_m1.stan', line 4, column 6 to column 39)",
 " (in 'reduce_sum_m1.stan', line 3, column 26 to line 5, column 5)",
 " (in 'reduce_sum_m1.stan', line 3, column 4 to line 7, column 5)",
 " (in 'reduce_sum_m1.stan', line 2, column 45 to line 8, column 3)",
 " (in 'reduce_sum_m1.stan', line 13, column 6 to column 35)",
 " (in 'reduce_sum_m1.stan', line 12, column 11 to line 14, column 5)",
 " (in 'reduce_sum_m1.stan', line 11, column 6 to column 53)",
 " (in 'reduce_sum_m1.stan', line 10, column 20 to line 12, column 5)",
 " (in 'reduce_sum_m1.stan', line 10, column 4 to line 14, column 5)",
 " (in 'reduce_sum_m1.stan', line 9, column 55 to line 15, column 3)",
 " (in 'reduce_sum_m1.stan', line 17, column 4 to column 38)",
 " (in 'reduce_sum_m1.stan', line 16, column 52 to line 18, column 3)"};

struct g_rsfunctor__;
struct h_rsfunctor__;
template <bool propto__>
struct foo_lpdf_rsfunctor__;
template <typename T0__>
stan::promote_args_t<T0__>
g(const std::vector<T0__>& y_slice, const int& start, const int& end,
  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 16;
    if (logical_gt(size(y_slice), 1)) {
      current_statement__ = 14;
      return reduce_sum<g_rsfunctor__>(y_slice, 1, pstream__);
    } else {
      current_statement__ = 12;
      return normal_lpdf<false>(y_slice, 0, 1);
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return g(y_slice, start, end, pstream__);
}
};


struct g_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return g(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h(const std::vector<T0__>& y_slice, const int& start, const int& end,
  const std::vector<T3__>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 22;
    if (logical_gt(size(a), 1)) {
      current_statement__ = 20;
      return reduce_sum<h_rsfunctor__>(y_slice, 1, pstream__,
               rvalue(a, "a", index_min_max(start, end)));
    } else {
      current_statement__ = 18;
      return normal_lpdf<false>(a, 0, 1);
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct h_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const std::vector<T3__>& a,
           std::ostream* pstream__)  const 
{
return h(y_slice, start, end, a, pstream__);
}
};


struct h_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<T3__>& a)  const 
{
return h(y_slice, start + 1, end + 1, a, pstream__);
}
};

template <bool propto__, typename T0__>
stan::promote_args_t<T0__>
foo_lpdf(const std::vector<T0__>& y_slice, const int& start, const int& end,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 24;
    return normal_lpdf<false>(y_slice, 0, 1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_lpdf_functor__ {
template <bool propto__, typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return foo_lpdf<propto__>(y_slice, start, end, pstream__);
}
};


template <bool propto__>
struct foo_lpdf_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return foo_lpdf<propto__>(y_slice, start + 1, end + 1, pstream__);
}
};

class reduce_sum_m1_model final : public model_base_crtp<reduce_sum_m1_model> {

 private:
  int N; 
  
 
 public:
  ~reduce_sum_m1_model() { }
  
  inline std::string model_name() const final { return "reduce_sum_m1_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  reduce_sum_m1_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m1_model_namespace::reduce_sum_m1_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 8;
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 8;
      N = 100;
      current_statement__ = 9;
      validate_non_negative_index("y1", "N", N);
      current_statement__ = 10;
      validate_non_negative_index("y2", "N", N);
      current_statement__ = 11;
      validate_non_negative_index("y3", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = N + N + N;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m1_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> y1 = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
                                         
      
      current_statement__ = 1;
      y1 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<local_scalar_t__> y2 = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
                                         
      
      current_statement__ = 2;
      y2 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<local_scalar_t__> y3 = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
                                         
      
      current_statement__ = 3;
      y3 = in__.template read<std::vector<local_scalar_t__>>(N);
      {
        current_statement__ = 4;
        lp_accum__.add(reduce_sum<g_rsfunctor__>(y1, 1, pstream__));
        current_statement__ = 5;
        lp_accum__.add(reduce_sum<h_rsfunctor__>(y2, 1, pstream__, y2));
        current_statement__ = 6;
        lp_accum__.add(
          reduce_sum<foo_lpdf_rsfunctor__<false>>(y3, 1, pstream__));
        current_statement__ = 7;
        lp_accum__.add(
          reduce_sum<foo_lpdf_rsfunctor__<propto__>>(y3, 1, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m1_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> y1 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 1;
      y1 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<double> y2 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 2;
      y2 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<double> y3 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 3;
      y3 = in__.template read<std::vector<local_scalar_t__>>(N);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y1[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y2[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y3[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> y1 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 1;
      y1 = context__.vals_r("y1");
      std::vector<double> y2 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 2;
      y2 = context__.vals_r("y2");
      std::vector<double> y3 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 3;
      y3 = context__.vals_r("y3");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y1[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y2[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y3[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"y1", "y2", "y3"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y2" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y3" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y2" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y3" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = reduce_sum_m1_model_namespace::reduce_sum_m1_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return reduce_sum_m1_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp reduce_sum_m2.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace reduce_sum_m2_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 180> locations_array__ = 
{" (found before start of program)",
 " (in 'reduce_sum_m2.stan', line 130, column 2 to column 24)",
 " (in 'reduce_sum_m2.stan', line 131, column 2 to column 25)",
 " (in 'reduce_sum_m2.stan', line 132, column 2 to column 21)",
 " (in 'reduce_sum_m2.stan', line 133, column 2 to column 16)",
 " (in 'reduce_sum_m2.stan', line 134, column 2 to column 21)",
 " (in 'reduce_sum_m2.stan', line 135, column 2 to column 22)",
 " (in 'reduce_sum_m2.stan', line 136, column 2 to column 18)",
 " (in 'reduce_sum_m2.stan', line 137, column 2 to column 13)",
 " (in 'reduce_sum_m2.stan', line 139, column 2 to column 24)",
 " (in 'reduce_sum_m2.stan', line 140, column 2 to column 25)",
 " (in 'reduce_sum_m2.stan', line 141, column 2 to column 21)",
 " (in 'reduce_sum_m2.stan', line 142, column 2 to column 16)",
 " (in 'reduce_sum_m2.stan', line 143, column 2 to column 21)",
 " (in 'reduce_sum_m2.stan', line 144, column 2 to column 22)",
 " (in 'reduce_sum_m2.stan', line 145, column 2 to column 18)",
 " (in 'reduce_sum_m2.stan', line 146, column 2 to column 13)",
 " (in 'reduce_sum_m2.stan', line 150, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 151, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 152, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 153, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 154, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 155, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 156, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 157, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 159, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 160, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 161, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 162, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 163, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 164, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 165, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 166, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 125, column 2 to column 12)",
 " (in 'reduce_sum_m2.stan', line 126, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 126, column 2 to column 12)",
 " (in 'reduce_sum_m2.stan', line 130, column 18 to column 19)",
 " (in 'reduce_sum_m2.stan', line 130, column 21 to column 22)",
 " (in 'reduce_sum_m2.stan', line 130, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 130, column 12 to column 13)",
 " (in 'reduce_sum_m2.stan', line 131, column 19 to column 20)",
 " (in 'reduce_sum_m2.stan', line 131, column 22 to column 23)",
 " (in 'reduce_sum_m2.stan', line 131, column 13 to column 14)",
 " (in 'reduce_sum_m2.stan', line 132, column 15 to column 16)",
 " (in 'reduce_sum_m2.stan', line 132, column 18 to column 19)",
 " (in 'reduce_sum_m2.stan', line 132, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 133, column 10 to column 11)",
 " (in 'reduce_sum_m2.stan', line 133, column 13 to column 14)",
 " (in 'reduce_sum_m2.stan', line 134, column 18 to column 19)",
 " (in 'reduce_sum_m2.stan', line 134, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 134, column 12 to column 13)",
 " (in 'reduce_sum_m2.stan', line 135, column 19 to column 20)",
 " (in 'reduce_sum_m2.stan', line 135, column 13 to column 14)",
 " (in 'reduce_sum_m2.stan', line 136, column 15 to column 16)",
 " (in 'reduce_sum_m2.stan', line 136, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 137, column 10 to column 11)",
 " (in 'reduce_sum_m2.stan', line 139, column 18 to column 19)",
 " (in 'reduce_sum_m2.stan', line 139, column 21 to column 22)",
 " (in 'reduce_sum_m2.stan', line 139, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 139, column 12 to column 13)",
 " (in 'reduce_sum_m2.stan', line 140, column 19 to column 20)",
 " (in 'reduce_sum_m2.stan', line 140, column 22 to column 23)",
 " (in 'reduce_sum_m2.stan', line 140, column 13 to column 14)",
 " (in 'reduce_sum_m2.stan', line 141, column 15 to column 16)",
 " (in 'reduce_sum_m2.stan', line 141, column 18 to column 19)",
 " (in 'reduce_sum_m2.stan', line 141, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 142, column 10 to column 11)",
 " (in 'reduce_sum_m2.stan', line 142, column 13 to column 14)",
 " (in 'reduce_sum_m2.stan', line 143, column 18 to column 19)",
 " (in 'reduce_sum_m2.stan', line 143, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 143, column 12 to column 13)",
 " (in 'reduce_sum_m2.stan', line 144, column 19 to column 20)",
 " (in 'reduce_sum_m2.stan', line 144, column 13 to column 14)",
 " (in 'reduce_sum_m2.stan', line 145, column 15 to column 16)",
 " (in 'reduce_sum_m2.stan', line 145, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 146, column 10 to column 11)",
 " (in 'reduce_sum_m2.stan', line 3, column 4 to column 39)",
 " (in 'reduce_sum_m2.stan', line 2, column 46 to line 4, column 3)",
 " (in 'reduce_sum_m2.stan', line 6, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 8, column 6 to column 49)",
 " (in 'reduce_sum_m2.stan', line 7, column 30 to line 9, column 5)",
 " (in 'reduce_sum_m2.stan', line 7, column 4 to line 9, column 5)",
 " (in 'reduce_sum_m2.stan', line 10, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 5, column 48 to line 11, column 3)",
 " (in 'reduce_sum_m2.stan', line 13, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 15, column 6 to column 49)",
 " (in 'reduce_sum_m2.stan', line 14, column 30 to line 16, column 5)",
 " (in 'reduce_sum_m2.stan', line 14, column 4 to line 16, column 5)",
 " (in 'reduce_sum_m2.stan', line 17, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 12, column 52 to line 18, column 3)",
 " (in 'reduce_sum_m2.stan', line 20, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 22, column 6 to column 60)",
 " (in 'reduce_sum_m2.stan', line 21, column 30 to line 23, column 5)",
 " (in 'reduce_sum_m2.stan', line 21, column 4 to line 23, column 5)",
 " (in 'reduce_sum_m2.stan', line 24, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 19, column 48 to line 25, column 3)",
 " (in 'reduce_sum_m2.stan', line 27, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 30, column 8 to column 54)",
 " (in 'reduce_sum_m2.stan', line 29, column 35 to line 31, column 7)",
 " (in 'reduce_sum_m2.stan', line 29, column 6 to line 31, column 7)",
 " (in 'reduce_sum_m2.stan', line 28, column 30 to line 32, column 5)",
 " (in 'reduce_sum_m2.stan', line 28, column 4 to line 32, column 5)",
 " (in 'reduce_sum_m2.stan', line 33, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 26, column 47 to line 34, column 3)",
 " (in 'reduce_sum_m2.stan', line 36, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 39, column 8 to column 65)",
 " (in 'reduce_sum_m2.stan', line 38, column 35 to line 40, column 7)",
 " (in 'reduce_sum_m2.stan', line 38, column 6 to line 40, column 7)",
 " (in 'reduce_sum_m2.stan', line 37, column 30 to line 41, column 5)",
 " (in 'reduce_sum_m2.stan', line 37, column 4 to line 41, column 5)",
 " (in 'reduce_sum_m2.stan', line 42, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 35, column 49 to line 43, column 3)",
 " (in 'reduce_sum_m2.stan', line 45, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 48, column 8 to column 65)",
 " (in 'reduce_sum_m2.stan', line 47, column 35 to line 49, column 7)",
 " (in 'reduce_sum_m2.stan', line 47, column 6 to line 49, column 7)",
 " (in 'reduce_sum_m2.stan', line 46, column 30 to line 50, column 5)",
 " (in 'reduce_sum_m2.stan', line 46, column 4 to line 50, column 5)",
 " (in 'reduce_sum_m2.stan', line 51, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 44, column 53 to line 52, column 3)",
 " (in 'reduce_sum_m2.stan', line 54, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 57, column 8 to column 65)",
 " (in 'reduce_sum_m2.stan', line 56, column 35 to line 58, column 7)",
 " (in 'reduce_sum_m2.stan', line 56, column 6 to line 58, column 7)",
 " (in 'reduce_sum_m2.stan', line 55, column 30 to line 59, column 5)",
 " (in 'reduce_sum_m2.stan', line 55, column 4 to line 59, column 5)",
 " (in 'reduce_sum_m2.stan', line 60, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 53, column 49 to line 61, column 3)",
 " (in 'reduce_sum_m2.stan', line 63, column 4 to column 44)",
 " (in 'reduce_sum_m2.stan', line 62, column 50 to line 64, column 3)",
 " (in 'reduce_sum_m2.stan', line 66, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 68, column 6 to column 43)",
 " (in 'reduce_sum_m2.stan', line 67, column 24 to line 69, column 5)",
 " (in 'reduce_sum_m2.stan', line 67, column 4 to line 69, column 5)",
 " (in 'reduce_sum_m2.stan', line 70, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 65, column 52 to line 71, column 3)",
 " (in 'reduce_sum_m2.stan', line 73, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 75, column 6 to column 43)",
 " (in 'reduce_sum_m2.stan', line 74, column 24 to line 76, column 5)",
 " (in 'reduce_sum_m2.stan', line 74, column 4 to line 76, column 5)",
 " (in 'reduce_sum_m2.stan', line 77, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 72, column 56 to line 78, column 3)",
 " (in 'reduce_sum_m2.stan', line 80, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 82, column 6 to column 54)",
 " (in 'reduce_sum_m2.stan', line 81, column 24 to line 83, column 5)",
 " (in 'reduce_sum_m2.stan', line 81, column 4 to line 83, column 5)",
 " (in 'reduce_sum_m2.stan', line 84, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 79, column 52 to line 85, column 3)",
 " (in 'reduce_sum_m2.stan', line 87, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 90, column 8 to column 48)",
 " (in 'reduce_sum_m2.stan', line 89, column 29 to line 91, column 7)",
 " (in 'reduce_sum_m2.stan', line 89, column 6 to line 91, column 7)",
 " (in 'reduce_sum_m2.stan', line 88, column 24 to line 92, column 5)",
 " (in 'reduce_sum_m2.stan', line 88, column 4 to line 92, column 5)",
 " (in 'reduce_sum_m2.stan', line 93, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 86, column 51 to line 94, column 3)",
 " (in 'reduce_sum_m2.stan', line 96, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 99, column 8 to column 59)",
 " (in 'reduce_sum_m2.stan', line 98, column 29 to line 100, column 7)",
 " (in 'reduce_sum_m2.stan', line 98, column 6 to line 100, column 7)",
 " (in 'reduce_sum_m2.stan', line 97, column 24 to line 101, column 5)",
 " (in 'reduce_sum_m2.stan', line 97, column 4 to line 101, column 5)",
 " (in 'reduce_sum_m2.stan', line 102, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 95, column 53 to line 103, column 3)",
 " (in 'reduce_sum_m2.stan', line 105, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 108, column 8 to column 59)",
 " (in 'reduce_sum_m2.stan', line 107, column 29 to line 109, column 7)",
 " (in 'reduce_sum_m2.stan', line 107, column 6 to line 109, column 7)",
 " (in 'reduce_sum_m2.stan', line 106, column 24 to line 110, column 5)",
 " (in 'reduce_sum_m2.stan', line 106, column 4 to line 110, column 5)",
 " (in 'reduce_sum_m2.stan', line 111, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 104, column 57 to line 112, column 3)",
 " (in 'reduce_sum_m2.stan', line 114, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 117, column 8 to column 59)",
 " (in 'reduce_sum_m2.stan', line 116, column 29 to line 118, column 7)",
 " (in 'reduce_sum_m2.stan', line 116, column 6 to line 118, column 7)",
 " (in 'reduce_sum_m2.stan', line 115, column 24 to line 119, column 5)",
 " (in 'reduce_sum_m2.stan', line 115, column 4 to line 119, column 5)",
 " (in 'reduce_sum_m2.stan', line 120, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 113, column 53 to line 121, column 3)"};

struct g1_rsfunctor__;
struct g2_rsfunctor__;
struct g3_rsfunctor__;
struct g4_rsfunctor__;
struct g5_rsfunctor__;
struct g6_rsfunctor__;
struct g7_rsfunctor__;
struct g8_rsfunctor__;
struct h1_rsfunctor__;
struct h2_rsfunctor__;
struct h3_rsfunctor__;
struct h4_rsfunctor__;
struct h5_rsfunctor__;
struct h6_rsfunctor__;
struct h7_rsfunctor__;
struct h8_rsfunctor__;
template <typename T0__>
stan::promote_args_t<T0__>
g1(const std::vector<T0__>& y_slice, const int& start, const int& end,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 76;
    return normal_lpdf<false>(y_slice, 0, 1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g1_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return g1(y_slice, start, end, pstream__);
}
};


struct g1_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return g1(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g2(const std::vector<Eigen::Matrix<T0__, -1, 1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf = DUMMY_VAR__;
    
    current_statement__ = 78;
    sum_lpdf = 0.0;
    current_statement__ = 81;
    for (int n = 1; n <= size(y_slice); ++n) {
      current_statement__ = 79;
      sum_lpdf = (sum_lpdf +
                   normal_lpdf<false>(
                     rvalue(y_slice, "y_slice", index_uni(n)), 0, 1));
    }
    current_statement__ = 82;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g2_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g2(y_slice, start, end, pstream__);
}
};


struct g2_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g2(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g3(const std::vector<Eigen::Matrix<T0__, 1, -1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf = DUMMY_VAR__;
    
    current_statement__ = 84;
    sum_lpdf = 0.0;
    current_statement__ = 87;
    for (int n = 1; n <= size(y_slice); ++n) {
      current_statement__ = 85;
      sum_lpdf = (sum_lpdf +
                   normal_lpdf<false>(
                     rvalue(y_slice, "y_slice", index_uni(n)), 0, 1));
    }
    current_statement__ = 88;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g3_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, 1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g3(y_slice, start, end, pstream__);
}
};


struct g3_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, 1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g3(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g4(const std::vector<Eigen::Matrix<T0__, -1, -1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf = DUMMY_VAR__;
    
    current_statement__ = 90;
    sum_lpdf = 0.0;
    current_statement__ = 93;
    for (int n = 1; n <= size(y_slice); ++n) {
      current_statement__ = 91;
      sum_lpdf = (sum_lpdf +
                   normal_lpdf<false>(
                     to_vector(rvalue(y_slice, "y_slice", index_uni(n))), 0,
                     1));
    }
    current_statement__ = 94;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g4_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g4(y_slice, start, end, pstream__);
}
};


struct g4_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g4(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g5(const std::vector<std::vector<T0__>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf = DUMMY_VAR__;
    
    current_statement__ = 96;
    sum_lpdf = 0.0;
    current_statement__ = 101;
    for (int n = 1; n <= size(y_slice); ++n) {
      current_statement__ = 99;
      for (int m = 1; m <= size(rvalue(y_slice, "y_slice", index_uni(n)));
           ++m) {
        current_statement__ = 97;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       rvalue(y_slice, "y_slice", index_uni(n), index_uni(m)),
                       0, 1));
      }
    }
    current_statement__ = 102;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g5_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<T0__>>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return g5(y_slice, start, end, pstream__);
}
};


struct g5_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<T0__>>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return g5(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g6(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf = DUMMY_VAR__;
    
    current_statement__ = 104;
    sum_lpdf = 0.0;
    current_statement__ = 109;
    for (int n = 1; n <= size(y_slice); ++n) {
      current_statement__ = 107;
      for (int m = 1; m <= size(rvalue(y_slice, "y_slice", index_uni(n)));
           ++m) {
        current_statement__ = 105;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       to_vector(
                         rvalue(y_slice, "y_slice",
                           index_uni(n), index_uni(m))), 0, 1));
      }
    }
    current_statement__ = 110;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g6_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g6(y_slice, start, end, pstream__);
}
};


struct g6_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g6(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g7(const std::vector<std::vector<Eigen::Matrix<T0__, 1, -1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf = DUMMY_VAR__;
    
    current_statement__ = 112;
    sum_lpdf = 0.0;
    current_statement__ = 117;
    for (int n = 1; n <= size(y_slice); ++n) {
      current_statement__ = 115;
      for (int m = 1; m <= size(rvalue(y_slice, "y_slice", index_uni(n)));
           ++m) {
        current_statement__ = 113;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       to_vector(
                         rvalue(y_slice, "y_slice",
                           index_uni(n), index_uni(m))), 0, 1));
      }
    }
    current_statement__ = 118;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g7_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, 1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g7(y_slice, start, end, pstream__);
}
};


struct g7_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, 1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g7(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g8(const std::vector<std::vector<Eigen::Matrix<T0__, -1, -1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf = DUMMY_VAR__;
    
    current_statement__ = 120;
    sum_lpdf = 0.0;
    current_statement__ = 125;
    for (int n = 1; n <= size(y_slice); ++n) {
      current_statement__ = 123;
      for (int m = 1; m <= size(rvalue(y_slice, "y_slice", index_uni(n)));
           ++m) {
        current_statement__ = 121;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       to_vector(
                         rvalue(y_slice, "y_slice",
                           index_uni(n), index_uni(m))), 0, 1));
      }
    }
    current_statement__ = 126;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g8_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g8(y_slice, start, end, pstream__);
}
};


struct g8_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g8(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h1(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<T3__>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 128;
    return normal_lpdf<false>(rvalue(a, "a", index_min_max(start, end)), 0,
             1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct h1_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<T3__>& a, std::ostream* pstream__)  const 
{
return h1(y, start, end, a, pstream__);
}
};


struct h1_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__, const std::vector<T3__>& a)  const 
{
return h1(y, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h2(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, -1, 1>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf = DUMMY_VAR__;
    
    current_statement__ = 130;
    sum_lpdf = 0.0;
    current_statement__ = 133;
    for (int n = start; n <= end; ++n) {
      current_statement__ = 131;
      sum_lpdf = (sum_lpdf +
                   normal_lpdf<false>(rvalue(a, "a", index_uni(n)), 0, 1));
    }
    current_statement__ = 134;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct h2_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<Eigen::Matrix<T3__, -1, 1>>& a,
           std::ostream* pstream__)  const 
{
return h2(y, start, end, a, pstream__);
}
};


struct h2_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__,
           const std::vector<Eigen::Matrix<T3__, -1, 1>>& a)  const 
{
return h2(y, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h3(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, 1, -1>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf = DUMMY_VAR__;
    
    current_statement__ = 136;
    sum_lpdf = 0.0;
    current_statement__ = 139;
    for (int n = start; n <= end; ++n) {
      current_statement__ = 137;
      sum_lpdf = (sum_lpdf +
                   normal_lpdf<false>(rvalue(a, "a", index_uni(n)), 0, 1));
    }
    current_statement__ = 140;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct h3_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<Eigen::Matrix<T3__, 1, -1>>& a,
           std::ostream* pstream__)  const 
{
return h3(y, start, end, a, pstream__);
}
};


struct h3_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__,
           const std::vector<Eigen::Matrix<T3__, 1, -1>>& a)  const 
{
return h3(y, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h4(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, -1, -1>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf = DUMMY_VAR__;
    
    current_statement__ = 142;
    sum_lpdf = 0.0;
    current_statement__ = 145;
    for (int n = start; n <= end; ++n) {
      current_statement__ = 143;
      sum_lpdf = (sum_lpdf +
                   normal_lpdf<false>(
                     to_vector(rvalue(a, "a", index_uni(n))), 0, 1));
    }
    current_statement__ = 146;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct h4_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<Eigen::Matrix<T3__, -1, -1>>& a,
           std::ostream* pstream__)  const 
{
return h4(y, start, end, a, pstream__);
}
};


struct h4_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__,
           const std::vector<Eigen::Matrix<T3__, -1, -1>>& a)  const 
{
return h4(y, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h5(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<std::vector<T3__>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf = DUMMY_VAR__;
    
    current_statement__ = 148;
    sum_lpdf = 0.0;
    current_statement__ = 153;
    for (int n = start; n <= end; ++n) {
      current_statement__ = 151;
      for (int m = 1; m <= size(rvalue(a, "a", index_uni(n))); ++m) {
        current_statement__ = 149;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       rvalue(a, "a", index_uni(n), index_uni(m)), 0, 1));
      }
    }
    current_statement__ = 154;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct h5_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<std::vector<T3__>>& a, std::ostream* pstream__)  const 
{
return h5(y, start, end, a, pstream__);
}
};


struct h5_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__, const std::vector<std::vector<T3__>>& a)  const 
{
return h5(y, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h6(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<std::vector<Eigen::Matrix<T3__, -1, 1>>>& a,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf = DUMMY_VAR__;
    
    current_statement__ = 156;
    sum_lpdf = 0.0;
    current_statement__ = 161;
    for (int n = start; n <= end; ++n) {
      current_statement__ = 159;
      for (int m = 1; m <= size(rvalue(a, "a", index_uni(n))); ++m) {
        current_statement__ = 157;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       to_vector(rvalue(a, "a", index_uni(n), index_uni(m))),
                       0, 1));
      }
    }
    current_statement__ = 162;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct h6_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, 1>>>& a,
           std::ostream* pstream__)  const 
{
return h6(y, start, end, a, pstream__);
}
};


struct h6_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, 1>>>& a)  const 
{
return h6(y, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h7(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<std::vector<Eigen::Matrix<T3__, 1, -1>>>& a,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf = DUMMY_VAR__;
    
    current_statement__ = 164;
    sum_lpdf = 0.0;
    current_statement__ = 169;
    for (int n = start; n <= end; ++n) {
      current_statement__ = 167;
      for (int m = 1; m <= size(rvalue(a, "a", index_uni(n))); ++m) {
        current_statement__ = 165;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       to_vector(rvalue(a, "a", index_uni(n), index_uni(m))),
                       0, 1));
      }
    }
    current_statement__ = 170;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct h7_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<std::vector<Eigen::Matrix<T3__, 1, -1>>>& a,
           std::ostream* pstream__)  const 
{
return h7(y, start, end, a, pstream__);
}
};


struct h7_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__,
           const std::vector<std::vector<Eigen::Matrix<T3__, 1, -1>>>& a)  const 
{
return h7(y, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h8(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<std::vector<Eigen::Matrix<T3__, -1, -1>>>& a,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf = DUMMY_VAR__;
    
    current_statement__ = 172;
    sum_lpdf = 0.0;
    current_statement__ = 177;
    for (int n = start; n <= end; ++n) {
      current_statement__ = 175;
      for (int m = 1; m <= size(rvalue(a, "a", index_uni(n))); ++m) {
        current_statement__ = 173;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       to_vector(rvalue(a, "a", index_uni(n), index_uni(m))),
                       0, 1));
      }
    }
    current_statement__ = 178;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct h8_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, -1>>>& a,
           std::ostream* pstream__)  const 
{
return h8(y, start, end, a, pstream__);
}
};


struct h8_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, -1>>>& a)  const 
{
return h8(y, start + 1, end + 1, a, pstream__);
}
};

class reduce_sum_m2_model final : public model_base_crtp<reduce_sum_m2_model> {

 private:
  int N;
  std::vector<double> x; 
  
 
 public:
  ~reduce_sum_m2_model() { }
  
  inline std::string model_name() const final { return "reduce_sum_m2_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  reduce_sum_m2_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m2_model_namespace::reduce_sum_m2_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 33;
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 33;
      N = 2;
      current_statement__ = 34;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 35;
      x = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 36;
      validate_non_negative_index("a8", "N", N);
      current_statement__ = 37;
      validate_non_negative_index("a8", "N", N);
      current_statement__ = 38;
      validate_non_negative_index("a8", "N", N);
      current_statement__ = 39;
      validate_non_negative_index("a8", "N", N);
      current_statement__ = 40;
      validate_non_negative_index("a7", "N", N);
      current_statement__ = 41;
      validate_non_negative_index("a7", "N", N);
      current_statement__ = 42;
      validate_non_negative_index("a7", "N", N);
      current_statement__ = 43;
      validate_non_negative_index("a6", "N", N);
      current_statement__ = 44;
      validate_non_negative_index("a6", "N", N);
      current_statement__ = 45;
      validate_non_negative_index("a6", "N", N);
      current_statement__ = 46;
      validate_non_negative_index("a5", "N", N);
      current_statement__ = 47;
      validate_non_negative_index("a5", "N", N);
      current_statement__ = 48;
      validate_non_negative_index("a4", "N", N);
      current_statement__ = 49;
      validate_non_negative_index("a4", "N", N);
      current_statement__ = 50;
      validate_non_negative_index("a4", "N", N);
      current_statement__ = 51;
      validate_non_negative_index("a3", "N", N);
      current_statement__ = 52;
      validate_non_negative_index("a3", "N", N);
      current_statement__ = 53;
      validate_non_negative_index("a2", "N", N);
      current_statement__ = 54;
      validate_non_negative_index("a2", "N", N);
      current_statement__ = 55;
      validate_non_negative_index("a1", "N", N);
      current_statement__ = 56;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 57;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 58;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 59;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 60;
      validate_non_negative_index("y7", "N", N);
      current_statement__ = 61;
      validate_non_negative_index("y7", "N", N);
      current_statement__ = 62;
      validate_non_negative_index("y7", "N", N);
      current_statement__ = 63;
      validate_non_negative_index("y6", "N", N);
      current_statement__ = 64;
      validate_non_negative_index("y6", "N", N);
      current_statement__ = 65;
      validate_non_negative_index("y6", "N", N);
      current_statement__ = 66;
      validate_non_negative_index("y5", "N", N);
      current_statement__ = 67;
      validate_non_negative_index("y5", "N", N);
      current_statement__ = 68;
      validate_non_negative_index("y4", "N", N);
      current_statement__ = 69;
      validate_non_negative_index("y4", "N", N);
      current_statement__ = 70;
      validate_non_negative_index("y4", "N", N);
      current_statement__ = 71;
      validate_non_negative_index("y3", "N", N);
      current_statement__ = 72;
      validate_non_negative_index("y3", "N", N);
      current_statement__ = 73;
      validate_non_negative_index("y2", "N", N);
      current_statement__ = 74;
      validate_non_negative_index("y2", "N", N);
      current_statement__ = 75;
      validate_non_negative_index("y1", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = (N * N * N * N) + (N * N * N) + (N * N * N) + (N * N)
       + (N * N * N) + (N * N) + (N * N) + N + (N * N * N * N) + (N * N * N)
       + (N * N * N) + (N * N) + (N * N * N) + (N * N) + (N * N) + N;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m2_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> a8 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N, DUMMY_VAR__)));
      
      
      current_statement__ = 1;
      a8 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>(
             N, N, N, N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> a7 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__)));
      
      
      current_statement__ = 2;
      a7 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> a6 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__)));
      
      
      current_statement__ = 3;
      a6 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
             N, N, N);
      std::vector<std::vector<local_scalar_t__>> a5 = std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__));
                                                      
      
      current_statement__ = 4;
      a5 = in__.template read<std::vector<std::vector<local_scalar_t__>>>(N,
             N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> a4 = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N, DUMMY_VAR__));
                                                                
      
      current_statement__ = 5;
      a4 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(
             N, N, N);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> a3 = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__));
                                                               
      
      current_statement__ = 6;
      a3 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
             N, N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> a2 = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
                                                               
      
      current_statement__ = 7;
      a2 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
             N, N);
      std::vector<local_scalar_t__> a1 = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
                                         
      
      current_statement__ = 8;
      a1 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> y8 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N, DUMMY_VAR__)));
      
      
      current_statement__ = 9;
      y8 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>(
             N, N, N, N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> y7 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__)));
      
      
      current_statement__ = 10;
      y7 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> y6 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__)));
      
      
      current_statement__ = 11;
      y6 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
             N, N, N);
      std::vector<std::vector<local_scalar_t__>> y5 = std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__));
                                                      
      
      current_statement__ = 12;
      y5 = in__.template read<std::vector<std::vector<local_scalar_t__>>>(N,
             N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> y4 = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N, DUMMY_VAR__));
                                                                
      
      current_statement__ = 13;
      y4 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(
             N, N, N);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> y3 = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__));
                                                               
      
      current_statement__ = 14;
      y3 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
             N, N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y2 = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
                                                               
      
      current_statement__ = 15;
      y2 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
             N, N);
      std::vector<local_scalar_t__> y1 = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
                                         
      
      current_statement__ = 16;
      y1 = in__.template read<std::vector<local_scalar_t__>>(N);
      {
        current_statement__ = 17;
        lp_accum__.add(reduce_sum<h8_rsfunctor__>(x, 1, pstream__, a8));
        current_statement__ = 18;
        lp_accum__.add(reduce_sum<h7_rsfunctor__>(x, 1, pstream__, a7));
        current_statement__ = 19;
        lp_accum__.add(reduce_sum<h6_rsfunctor__>(x, 1, pstream__, a6));
        current_statement__ = 20;
        lp_accum__.add(reduce_sum<h5_rsfunctor__>(x, 1, pstream__, a5));
        current_statement__ = 21;
        lp_accum__.add(reduce_sum<h4_rsfunctor__>(x, 1, pstream__, a4));
        current_statement__ = 22;
        lp_accum__.add(reduce_sum<h3_rsfunctor__>(x, 1, pstream__, a3));
        current_statement__ = 23;
        lp_accum__.add(reduce_sum<h2_rsfunctor__>(x, 1, pstream__, a2));
        current_statement__ = 24;
        lp_accum__.add(reduce_sum<h1_rsfunctor__>(x, 1, pstream__, a1));
        current_statement__ = 25;
        lp_accum__.add(reduce_sum<g8_rsfunctor__>(y8, 1, pstream__));
        current_statement__ = 26;
        lp_accum__.add(reduce_sum<g7_rsfunctor__>(y7, 1, pstream__));
        current_statement__ = 27;
        lp_accum__.add(reduce_sum<g6_rsfunctor__>(y6, 1, pstream__));
        current_statement__ = 28;
        lp_accum__.add(reduce_sum<g5_rsfunctor__>(y5, 1, pstream__));
        current_statement__ = 29;
        lp_accum__.add(reduce_sum<g4_rsfunctor__>(y4, 1, pstream__));
        current_statement__ = 30;
        lp_accum__.add(reduce_sum<g3_rsfunctor__>(y3, 1, pstream__));
        current_statement__ = 31;
        lp_accum__.add(reduce_sum<g2_rsfunctor__>(y2, 1, pstream__));
        current_statement__ = 32;
        lp_accum__.add(reduce_sum<g1_rsfunctor__>(y1, 1, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m2_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> a8 = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(N, std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN())));
                                                                   
      
      current_statement__ = 1;
      a8 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>(
             N, N, N, N);
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> a7 = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(N, std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
                                                                  
      
      current_statement__ = 2;
      a7 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> a6 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N, std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
                                                                  
      
      current_statement__ = 3;
      a6 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
             N, N, N);
      std::vector<std::vector<double>> a5 = std::vector<std::vector<double>>(N, std::vector<double>(N, std::numeric_limits<double>::quiet_NaN()));
                                            
      
      current_statement__ = 4;
      a5 = in__.template read<std::vector<std::vector<local_scalar_t__>>>(N,
             N);
      std::vector<Eigen::Matrix<double, -1, -1>> a4 = std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN()));
                                                      
      
      current_statement__ = 5;
      a4 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(
             N, N, N);
      std::vector<Eigen::Matrix<double, 1, -1>> a3 = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                     
      
      current_statement__ = 6;
      a3 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
             N, N);
      std::vector<Eigen::Matrix<double, -1, 1>> a2 = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                     
      
      current_statement__ = 7;
      a2 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
             N, N);
      std::vector<double> a1 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 8;
      a1 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> y8 = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(N, std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN())));
                                                                   
      
      current_statement__ = 9;
      y8 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>(
             N, N, N, N);
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> y7 = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(N, std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
                                                                  
      
      current_statement__ = 10;
      y7 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> y6 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N, std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
                                                                  
      
      current_statement__ = 11;
      y6 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
             N, N, N);
      std::vector<std::vector<double>> y5 = std::vector<std::vector<double>>(N, std::vector<double>(N, std::numeric_limits<double>::quiet_NaN()));
                                            
      
      current_statement__ = 12;
      y5 = in__.template read<std::vector<std::vector<local_scalar_t__>>>(N,
             N);
      std::vector<Eigen::Matrix<double, -1, -1>> y4 = std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN()));
                                                      
      
      current_statement__ = 13;
      y4 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(
             N, N, N);
      std::vector<Eigen::Matrix<double, 1, -1>> y3 = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                     
      
      current_statement__ = 14;
      y3 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
             N, N);
      std::vector<Eigen::Matrix<double, -1, 1>> y2 = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                     
      
      current_statement__ = 15;
      y2 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
             N, N);
      std::vector<double> y1 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 16;
      y1 = in__.template read<std::vector<local_scalar_t__>>(N);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              vars__.emplace_back(
                rvalue(a8, "a8",
                  index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                    index_uni(sym1__)));
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              a7[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              a6[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(a5[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              rvalue(a4, "a4",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(a3[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(a2[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(a1[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              vars__.emplace_back(
                rvalue(y8, "y8",
                  index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                    index_uni(sym1__)));
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              y7[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              y6[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(y5[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              rvalue(y4, "y4",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(y3[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(y2[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y1[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> a8 = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(N, std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN())));
                                                                   
      
      {
        std::vector<local_scalar_t__> a8_flat__;
        current_statement__ = 1;
        a8_flat__ = context__.vals_r("a8");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 1;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 1;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 1;
                assign(a8, a8_flat__[(pos__ - 1)],
                  "assigning variable a8", index_uni(sym4__),
                                             index_uni(sym3__),
                                             index_uni(sym2__),
                                             index_uni(sym1__));
                current_statement__ = 1;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> a7 = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(N, std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
                                                                  
      
      {
        std::vector<local_scalar_t__> a7_flat__;
        current_statement__ = 2;
        a7_flat__ = context__.vals_r("a7");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 2;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 2;
              assign(a7, a7_flat__[(pos__ - 1)],
                "assigning variable a7", index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
              current_statement__ = 2;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> a6 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N, std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
                                                                  
      
      {
        std::vector<local_scalar_t__> a6_flat__;
        current_statement__ = 3;
        a6_flat__ = context__.vals_r("a6");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 3;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 3;
              assign(a6, a6_flat__[(pos__ - 1)],
                "assigning variable a6", index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
              current_statement__ = 3;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<std::vector<double>> a5 = std::vector<std::vector<double>>(N, std::vector<double>(N, std::numeric_limits<double>::quiet_NaN()));
                                            
      
      {
        std::vector<local_scalar_t__> a5_flat__;
        current_statement__ = 4;
        a5_flat__ = context__.vals_r("a5");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 4;
            assign(a5, a5_flat__[(pos__ - 1)],
              "assigning variable a5", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 4;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<Eigen::Matrix<double, -1, -1>> a4 = std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN()));
                                                      
      
      {
        std::vector<local_scalar_t__> a4_flat__;
        current_statement__ = 5;
        a4_flat__ = context__.vals_r("a4");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 5;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 5;
              assign(a4, a4_flat__[(pos__ - 1)],
                "assigning variable a4", index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
              current_statement__ = 5;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<Eigen::Matrix<double, 1, -1>> a3 = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                     
      
      {
        std::vector<local_scalar_t__> a3_flat__;
        current_statement__ = 6;
        a3_flat__ = context__.vals_r("a3");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 6;
            assign(a3, a3_flat__[(pos__ - 1)],
              "assigning variable a3", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<Eigen::Matrix<double, -1, 1>> a2 = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                     
      
      {
        std::vector<local_scalar_t__> a2_flat__;
        current_statement__ = 7;
        a2_flat__ = context__.vals_r("a2");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 7;
            assign(a2, a2_flat__[(pos__ - 1)],
              "assigning variable a2", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<double> a1 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 8;
      a1 = context__.vals_r("a1");
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> y8 = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(N, std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN())));
                                                                   
      
      {
        std::vector<local_scalar_t__> y8_flat__;
        current_statement__ = 9;
        y8_flat__ = context__.vals_r("y8");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 9;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 9;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 9;
                assign(y8, y8_flat__[(pos__ - 1)],
                  "assigning variable y8", index_uni(sym4__),
                                             index_uni(sym3__),
                                             index_uni(sym2__),
                                             index_uni(sym1__));
                current_statement__ = 9;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> y7 = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(N, std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
                                                                  
      
      {
        std::vector<local_scalar_t__> y7_flat__;
        current_statement__ = 10;
        y7_flat__ = context__.vals_r("y7");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 10;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 10;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 10;
              assign(y7, y7_flat__[(pos__ - 1)],
                "assigning variable y7", index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
              current_statement__ = 10;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> y6 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N, std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
                                                                  
      
      {
        std::vector<local_scalar_t__> y6_flat__;
        current_statement__ = 11;
        y6_flat__ = context__.vals_r("y6");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 11;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 11;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 11;
              assign(y6, y6_flat__[(pos__ - 1)],
                "assigning variable y6", index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
              current_statement__ = 11;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<std::vector<double>> y5 = std::vector<std::vector<double>>(N, std::vector<double>(N, std::numeric_limits<double>::quiet_NaN()));
                                            
      
      {
        std::vector<local_scalar_t__> y5_flat__;
        current_statement__ = 12;
        y5_flat__ = context__.vals_r("y5");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 12;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 12;
            assign(y5, y5_flat__[(pos__ - 1)],
              "assigning variable y5", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 12;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<Eigen::Matrix<double, -1, -1>> y4 = std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN()));
                                                      
      
      {
        std::vector<local_scalar_t__> y4_flat__;
        current_statement__ = 13;
        y4_flat__ = context__.vals_r("y4");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 13;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 13;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 13;
              assign(y4, y4_flat__[(pos__ - 1)],
                "assigning variable y4", index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
              current_statement__ = 13;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<Eigen::Matrix<double, 1, -1>> y3 = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                     
      
      {
        std::vector<local_scalar_t__> y3_flat__;
        current_statement__ = 14;
        y3_flat__ = context__.vals_r("y3");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 14;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 14;
            assign(y3, y3_flat__[(pos__ - 1)],
              "assigning variable y3", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 14;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<Eigen::Matrix<double, -1, 1>> y2 = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                     
      
      {
        std::vector<local_scalar_t__> y2_flat__;
        current_statement__ = 15;
        y2_flat__ = context__.vals_r("y2");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 15;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 15;
            assign(y2, y2_flat__[(pos__ - 1)],
              "assigning variable y2", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 15;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<double> y1 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 16;
      y1 = context__.vals_r("y1");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              vars__.emplace_back(
                rvalue(a8, "a8",
                  index_uni(sym1__), index_uni(sym2__), index_uni(sym4__),
                    index_uni(sym3__)));
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              a7[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              a6[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(a5[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              rvalue(a4, "a4",
                index_uni(sym1__), index_uni(sym3__), index_uni(sym2__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(a3[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(a2[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(a1[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              vars__.emplace_back(
                rvalue(y8, "y8",
                  index_uni(sym1__), index_uni(sym2__), index_uni(sym4__),
                    index_uni(sym3__)));
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              y7[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              y6[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(y5[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              rvalue(y4, "y4",
                index_uni(sym1__), index_uni(sym3__), index_uni(sym2__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(y3[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(y2[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y1[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"a8", "a7", "a6", "a5", "a4", "a3",
      "a2", "a1", "y8", "y7", "y6", "y5", "y4", "y3", "y2", "y1"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N)
                                                                   ,
                                                                   static_cast<size_t>(N)
                                                                   ,
                                                                   static_cast<size_t>(N)
                                                                   ,
                                                                   static_cast<size_t>(N)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "a8" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "a7" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "a6" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "a5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "a4" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "a3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "a2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "y8" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y7" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y6" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y4" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y1" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "a8" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "a7" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "a6" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "a5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "a4" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "a3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "a2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "y8" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y7" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y6" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y4" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y1" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"a7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"a6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"a5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"a4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"a3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"y4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"a7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"a6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"a5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"a4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"a3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"y4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = reduce_sum_m2_model_namespace::reduce_sum_m2_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return reduce_sum_m2_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp reduce_sum_m3.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace reduce_sum_m3_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 342> locations_array__ = 
{" (found before start of program)",
 " (in 'reduce_sum_m3.stan', line 210, column 2 to column 13)",
 " (in 'reduce_sum_m3.stan', line 211, column 2 to column 18)",
 " (in 'reduce_sum_m3.stan', line 212, column 2 to column 22)",
 " (in 'reduce_sum_m3.stan', line 213, column 2 to column 21)",
 " (in 'reduce_sum_m3.stan', line 214, column 2 to column 16)",
 " (in 'reduce_sum_m3.stan', line 215, column 2 to column 21)",
 " (in 'reduce_sum_m3.stan', line 216, column 2 to column 25)",
 " (in 'reduce_sum_m3.stan', line 217, column 2 to column 24)",
 " (in 'reduce_sum_m3.stan', line 218, column 2 to column 10)",
 " (in 'reduce_sum_m3.stan', line 219, column 2 to column 16)",
 " (in 'reduce_sum_m3.stan', line 220, column 2 to column 20)",
 " (in 'reduce_sum_m3.stan', line 221, column 2 to column 19)",
 " (in 'reduce_sum_m3.stan', line 222, column 2 to column 20)",
 " (in 'reduce_sum_m3.stan', line 260, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 261, column 2 to column 60)",
 " (in 'reduce_sum_m3.stan', line 262, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 263, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 264, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 265, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 266, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 267, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 268, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 269, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 270, column 2 to column 38)",
 " (in 'reduce_sum_m3.stan', line 271, column 2 to column 38)",
 " (in 'reduce_sum_m3.stan', line 272, column 2 to column 37)",
 " (in 'reduce_sum_m3.stan', line 273, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 274, column 2 to column 40)",
 " (in 'reduce_sum_m3.stan', line 275, column 2 to column 40)",
 " (in 'reduce_sum_m3.stan', line 276, column 2 to column 40)",
 " (in 'reduce_sum_m3.stan', line 277, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 278, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 279, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 280, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 281, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 282, column 2 to column 41)",
 " (in 'reduce_sum_m3.stan', line 283, column 2 to column 41)",
 " (in 'reduce_sum_m3.stan', line 284, column 2 to column 41)",
 " (in 'reduce_sum_m3.stan', line 285, column 2 to line 288, column 35)",
 " (in 'reduce_sum_m3.stan', line 226, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 227, column 2 to column 60)",
 " (in 'reduce_sum_m3.stan', line 228, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 229, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 230, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 231, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 232, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 233, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 234, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 235, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 236, column 2 to column 38)",
 " (in 'reduce_sum_m3.stan', line 237, column 2 to column 38)",
 " (in 'reduce_sum_m3.stan', line 238, column 2 to column 37)",
 " (in 'reduce_sum_m3.stan', line 239, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 240, column 2 to column 40)",
 " (in 'reduce_sum_m3.stan', line 241, column 2 to column 40)",
 " (in 'reduce_sum_m3.stan', line 242, column 2 to column 40)",
 " (in 'reduce_sum_m3.stan', line 243, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 244, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 245, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 246, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 247, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 248, column 2 to column 41)",
 " (in 'reduce_sum_m3.stan', line 249, column 2 to column 41)",
 " (in 'reduce_sum_m3.stan', line 250, column 2 to column 41)",
 " (in 'reduce_sum_m3.stan', line 251, column 2 to line 254, column 34)",
 " (in 'reduce_sum_m3.stan', line 256, column 2 to column 16)",
 " (in 'reduce_sum_m3.stan', line 157, column 2 to column 8)",
 " (in 'reduce_sum_m3.stan', line 158, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 158, column 2 to column 14)",
 " (in 'reduce_sum_m3.stan', line 159, column 16 to column 17)",
 " (in 'reduce_sum_m3.stan', line 159, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 159, column 2 to column 19)",
 " (in 'reduce_sum_m3.stan', line 160, column 20 to column 21)",
 " (in 'reduce_sum_m3.stan', line 160, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 160, column 2 to column 23)",
 " (in 'reduce_sum_m3.stan', line 161, column 19 to column 20)",
 " (in 'reduce_sum_m3.stan', line 161, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 161, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 161, column 2 to column 22)",
 " (in 'reduce_sum_m3.stan', line 162, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 162, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 162, column 2 to column 17)",
 " (in 'reduce_sum_m3.stan', line 163, column 16 to column 17)",
 " (in 'reduce_sum_m3.stan', line 163, column 19 to column 20)",
 " (in 'reduce_sum_m3.stan', line 163, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 163, column 2 to column 22)",
 " (in 'reduce_sum_m3.stan', line 164, column 20 to column 21)",
 " (in 'reduce_sum_m3.stan', line 164, column 23 to column 24)",
 " (in 'reduce_sum_m3.stan', line 164, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 164, column 2 to column 26)",
 " (in 'reduce_sum_m3.stan', line 165, column 19 to column 20)",
 " (in 'reduce_sum_m3.stan', line 165, column 22 to column 23)",
 " (in 'reduce_sum_m3.stan', line 165, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 165, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 165, column 2 to column 25)",
 " (in 'reduce_sum_m3.stan', line 166, column 2 to column 11)",
 " (in 'reduce_sum_m3.stan', line 167, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 167, column 2 to column 17)",
 " (in 'reduce_sum_m3.stan', line 168, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 168, column 2 to column 21)",
 " (in 'reduce_sum_m3.stan', line 169, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 169, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 169, column 2 to column 20)",
 " (in 'reduce_sum_m3.stan', line 170, column 2 to column 11)",
 " (in 'reduce_sum_m3.stan', line 171, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 171, column 2 to column 14)",
 " (in 'reduce_sum_m3.stan', line 172, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 172, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 172, column 2 to column 17)",
 " (in 'reduce_sum_m3.stan', line 173, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 173, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 173, column 17 to column 18)",
 " (in 'reduce_sum_m3.stan', line 173, column 2 to column 20)",
 " (in 'reduce_sum_m3.stan', line 174, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 174, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 174, column 18 to column 19)",
 " (in 'reduce_sum_m3.stan', line 174, column 2 to column 21)",
 " (in 'reduce_sum_m3.stan', line 178, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 179, column 2 to column 63)",
 " (in 'reduce_sum_m3.stan', line 180, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 181, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 182, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 183, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 184, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 185, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 186, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 187, column 2 to column 37)",
 " (in 'reduce_sum_m3.stan', line 188, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 189, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 190, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 191, column 2 to column 42)",
 " (in 'reduce_sum_m3.stan', line 192, column 2 to column 43)",
 " (in 'reduce_sum_m3.stan', line 193, column 2 to column 43)",
 " (in 'reduce_sum_m3.stan', line 194, column 2 to column 43)",
 " (in 'reduce_sum_m3.stan', line 195, column 2 to column 42)",
 " (in 'reduce_sum_m3.stan', line 196, column 2 to column 42)",
 " (in 'reduce_sum_m3.stan', line 197, column 2 to column 42)",
 " (in 'reduce_sum_m3.stan', line 198, column 2 to column 42)",
 " (in 'reduce_sum_m3.stan', line 199, column 2 to column 42)",
 " (in 'reduce_sum_m3.stan', line 200, column 2 to column 44)",
 " (in 'reduce_sum_m3.stan', line 201, column 2 to column 44)",
 " (in 'reduce_sum_m3.stan', line 202, column 2 to column 44)",
 " (in 'reduce_sum_m3.stan', line 203, column 2 to line 206, column 36)",
 " (in 'reduce_sum_m3.stan', line 210, column 10 to column 11)",
 " (in 'reduce_sum_m3.stan', line 211, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 211, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 212, column 19 to column 20)",
 " (in 'reduce_sum_m3.stan', line 212, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 213, column 18 to column 19)",
 " (in 'reduce_sum_m3.stan', line 213, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 213, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 214, column 10 to column 11)",
 " (in 'reduce_sum_m3.stan', line 214, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 215, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 215, column 18 to column 19)",
 " (in 'reduce_sum_m3.stan', line 215, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 216, column 19 to column 20)",
 " (in 'reduce_sum_m3.stan', line 216, column 22 to column 23)",
 " (in 'reduce_sum_m3.stan', line 216, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 217, column 18 to column 19)",
 " (in 'reduce_sum_m3.stan', line 217, column 21 to column 22)",
 " (in 'reduce_sum_m3.stan', line 217, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 217, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 219, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 220, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 221, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 221, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 222, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 222, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 222, column 17 to column 18)",
 " (in 'reduce_sum_m3.stan', line 3, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 2, column 46 to line 4, column 3)",
 " (in 'reduce_sum_m3.stan', line 6, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 5, column 47 to line 7, column 3)",
 " (in 'reduce_sum_m3.stan', line 9, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 8, column 48 to line 10, column 3)",
 " (in 'reduce_sum_m3.stan', line 12, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 11, column 52 to line 13, column 3)",
 " (in 'reduce_sum_m3.stan', line 15, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 14, column 48 to line 16, column 3)",
 " (in 'reduce_sum_m3.stan', line 18, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 17, column 47 to line 19, column 3)",
 " (in 'reduce_sum_m3.stan', line 21, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 20, column 49 to line 22, column 3)",
 " (in 'reduce_sum_m3.stan', line 24, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 23, column 53 to line 25, column 3)",
 " (in 'reduce_sum_m3.stan', line 27, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 26, column 49 to line 28, column 3)",
 " (in 'reduce_sum_m3.stan', line 30, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 29, column 45 to line 31, column 3)",
 " (in 'reduce_sum_m3.stan', line 33, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 32, column 47 to line 34, column 3)",
 " (in 'reduce_sum_m3.stan', line 36, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 35, column 48 to line 37, column 3)",
 " (in 'reduce_sum_m3.stan', line 39, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 38, column 49 to line 40, column 3)",
 " (in 'reduce_sum_m3.stan', line 42, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 41, column 54 to line 43, column 3)",
 " (in 'reduce_sum_m3.stan', line 45, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 44, column 56 to line 46, column 3)",
 " (in 'reduce_sum_m3.stan', line 48, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 47, column 60 to line 49, column 3)",
 " (in 'reduce_sum_m3.stan', line 51, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 50, column 56 to line 52, column 3)",
 " (in 'reduce_sum_m3.stan', line 54, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 53, column 56 to line 55, column 3)",
 " (in 'reduce_sum_m3.stan', line 57, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 56, column 58 to line 58, column 3)",
 " (in 'reduce_sum_m3.stan', line 60, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 59, column 62 to line 61, column 3)",
 " (in 'reduce_sum_m3.stan', line 63, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 62, column 58 to line 64, column 3)",
 " (in 'reduce_sum_m3.stan', line 66, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 65, column 57 to line 67, column 3)",
 " (in 'reduce_sum_m3.stan', line 69, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 68, column 60 to line 70, column 3)",
 " (in 'reduce_sum_m3.stan', line 72, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 71, column 64 to line 73, column 3)",
 " (in 'reduce_sum_m3.stan', line 75, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 74, column 60 to line 76, column 3)",
 " (in 'reduce_sum_m3.stan', line 82, column 4 to line 86, column 28)",
 " (in 'reduce_sum_m3.stan', line 81, column 32 to line 87, column 3)",
 " (in 'reduce_sum_m3.stan', line 89, column 4 to column 10)",
 " (in 'reduce_sum_m3.stan', line 90, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 90, column 4 to column 16)",
 " (in 'reduce_sum_m3.stan', line 91, column 18 to column 19)",
 " (in 'reduce_sum_m3.stan', line 91, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 91, column 4 to column 21)",
 " (in 'reduce_sum_m3.stan', line 92, column 22 to column 23)",
 " (in 'reduce_sum_m3.stan', line 92, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 92, column 4 to column 25)",
 " (in 'reduce_sum_m3.stan', line 93, column 21 to column 22)",
 " (in 'reduce_sum_m3.stan', line 93, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 93, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 93, column 4 to column 24)",
 " (in 'reduce_sum_m3.stan', line 94, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 94, column 16 to column 17)",
 " (in 'reduce_sum_m3.stan', line 94, column 4 to column 19)",
 " (in 'reduce_sum_m3.stan', line 95, column 18 to column 19)",
 " (in 'reduce_sum_m3.stan', line 95, column 21 to column 22)",
 " (in 'reduce_sum_m3.stan', line 95, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 95, column 4 to column 24)",
 " (in 'reduce_sum_m3.stan', line 96, column 22 to column 23)",
 " (in 'reduce_sum_m3.stan', line 96, column 25 to column 26)",
 " (in 'reduce_sum_m3.stan', line 96, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 96, column 4 to column 28)",
 " (in 'reduce_sum_m3.stan', line 97, column 21 to column 22)",
 " (in 'reduce_sum_m3.stan', line 97, column 24 to column 25)",
 " (in 'reduce_sum_m3.stan', line 97, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 97, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 97, column 4 to column 27)",
 " (in 'reduce_sum_m3.stan', line 98, column 4 to column 13)",
 " (in 'reduce_sum_m3.stan', line 99, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 99, column 4 to column 19)",
 " (in 'reduce_sum_m3.stan', line 100, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 100, column 4 to column 23)",
 " (in 'reduce_sum_m3.stan', line 101, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 101, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 101, column 4 to column 22)",
 " (in 'reduce_sum_m3.stan', line 102, column 4 to column 13)",
 " (in 'reduce_sum_m3.stan', line 103, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 103, column 4 to column 16)",
 " (in 'reduce_sum_m3.stan', line 104, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 104, column 16 to column 17)",
 " (in 'reduce_sum_m3.stan', line 104, column 4 to column 19)",
 " (in 'reduce_sum_m3.stan', line 105, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 105, column 16 to column 17)",
 " (in 'reduce_sum_m3.stan', line 105, column 19 to column 20)",
 " (in 'reduce_sum_m3.stan', line 105, column 4 to column 22)",
 " (in 'reduce_sum_m3.stan', line 106, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 106, column 17 to column 18)",
 " (in 'reduce_sum_m3.stan', line 106, column 20 to column 21)",
 " (in 'reduce_sum_m3.stan', line 106, column 4 to column 23)",
 " (in 'reduce_sum_m3.stan', line 108, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 108, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 109, column 17 to column 18)",
 " (in 'reduce_sum_m3.stan', line 109, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 109, column 4 to column 20)",
 " (in 'reduce_sum_m3.stan', line 110, column 21 to column 22)",
 " (in 'reduce_sum_m3.stan', line 110, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 110, column 4 to column 24)",
 " (in 'reduce_sum_m3.stan', line 111, column 20 to column 21)",
 " (in 'reduce_sum_m3.stan', line 111, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 111, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 111, column 4 to column 23)",
 " (in 'reduce_sum_m3.stan', line 112, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 112, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 112, column 4 to column 18)",
 " (in 'reduce_sum_m3.stan', line 113, column 17 to column 18)",
 " (in 'reduce_sum_m3.stan', line 113, column 20 to column 21)",
 " (in 'reduce_sum_m3.stan', line 113, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 113, column 4 to column 23)",
 " (in 'reduce_sum_m3.stan', line 114, column 21 to column 22)",
 " (in 'reduce_sum_m3.stan', line 114, column 24 to column 25)",
 " (in 'reduce_sum_m3.stan', line 114, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 114, column 4 to column 27)",
 " (in 'reduce_sum_m3.stan', line 115, column 20 to column 21)",
 " (in 'reduce_sum_m3.stan', line 115, column 23 to column 24)",
 " (in 'reduce_sum_m3.stan', line 115, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 115, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 115, column 4 to column 26)",
 " (in 'reduce_sum_m3.stan', line 116, column 4 to column 12)",
 " (in 'reduce_sum_m3.stan', line 117, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 117, column 4 to column 18)",
 " (in 'reduce_sum_m3.stan', line 118, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 118, column 4 to column 22)",
 " (in 'reduce_sum_m3.stan', line 119, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 119, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 119, column 4 to column 21)",
 " (in 'reduce_sum_m3.stan', line 120, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 120, column 16 to column 17)",
 " (in 'reduce_sum_m3.stan', line 120, column 19 to column 20)",
 " (in 'reduce_sum_m3.stan', line 120, column 4 to column 22)",
 " (in 'reduce_sum_m3.stan', line 122, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 123, column 4 to column 62)",
 " (in 'reduce_sum_m3.stan', line 124, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 125, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 126, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 127, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 128, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 129, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 130, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 131, column 4 to column 38)",
 " (in 'reduce_sum_m3.stan', line 132, column 4 to column 40)",
 " (in 'reduce_sum_m3.stan', line 133, column 4 to column 40)",
 " (in 'reduce_sum_m3.stan', line 134, column 4 to column 39)",
 " (in 'reduce_sum_m3.stan', line 135, column 4 to column 41)",
 " (in 'reduce_sum_m3.stan', line 136, column 4 to column 42)",
 " (in 'reduce_sum_m3.stan', line 137, column 4 to column 42)",
 " (in 'reduce_sum_m3.stan', line 138, column 4 to column 42)",
 " (in 'reduce_sum_m3.stan', line 139, column 4 to column 41)",
 " (in 'reduce_sum_m3.stan', line 140, column 4 to column 41)",
 " (in 'reduce_sum_m3.stan', line 141, column 4 to column 41)",
 " (in 'reduce_sum_m3.stan', line 142, column 4 to column 41)",
 " (in 'reduce_sum_m3.stan', line 143, column 4 to column 41)",
 " (in 'reduce_sum_m3.stan', line 144, column 4 to column 43)",
 " (in 'reduce_sum_m3.stan', line 145, column 4 to column 43)",
 " (in 'reduce_sum_m3.stan', line 146, column 4 to column 43)",
 " (in 'reduce_sum_m3.stan', line 147, column 4 to line 150, column 36)",
 " (in 'reduce_sum_m3.stan', line 152, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 88, column 11 to line 153, column 3)"};

struct f10_rsfunctor__;
struct f11_rsfunctor__;
struct f12_rsfunctor__;
struct f1_rsfunctor__;
struct f1a_rsfunctor__;
struct f2_rsfunctor__;
struct f3_rsfunctor__;
struct f4_rsfunctor__;
struct f5_rsfunctor__;
struct f6_rsfunctor__;
struct f7_rsfunctor__;
struct f8_rsfunctor__;
struct f9_rsfunctor__;
struct g10_rsfunctor__;
struct g11_rsfunctor__;
struct g12_rsfunctor__;
struct g1_rsfunctor__;
struct g2_rsfunctor__;
struct g3_rsfunctor__;
struct g4_rsfunctor__;
struct g5_rsfunctor__;
struct g6_rsfunctor__;
struct g7_rsfunctor__;
struct g8_rsfunctor__;
struct g9_rsfunctor__;
struct s_rsfunctor__;
template <typename T0__>
stan::promote_args_t<T0__>
f1(const std::vector<T0__>& y_slice, const int& start, const int& end,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 171;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f1_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return f1(y_slice, start, end, pstream__);
}
};


struct f1_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return f1(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f1a(const std::vector<T0__>& y_slice, const int& start, const int& end,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 173;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f1a_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return f1a(y_slice, start, end, pstream__);
}
};


struct f1a_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return f1a(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f2(const std::vector<Eigen::Matrix<T0__, -1, 1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 175;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f2_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f2(y_slice, start, end, pstream__);
}
};


struct f2_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f2(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f3(const std::vector<Eigen::Matrix<T0__, 1, -1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 177;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f3_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, 1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f3(y_slice, start, end, pstream__);
}
};


struct f3_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, 1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f3(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f4(const std::vector<Eigen::Matrix<T0__, -1, -1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 179;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f4_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f4(y_slice, start, end, pstream__);
}
};


struct f4_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f4(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f5(const std::vector<std::vector<T0__>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 181;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f5_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<T0__>>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return f5(y_slice, start, end, pstream__);
}
};


struct f5_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<T0__>>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return f5(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f6(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 183;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f6_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f6(y_slice, start, end, pstream__);
}
};


struct f6_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f6(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f7(const std::vector<std::vector<Eigen::Matrix<T0__, 1, -1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 185;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f7_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, 1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f7(y_slice, start, end, pstream__);
}
};


struct f7_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, 1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f7(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f8(const std::vector<std::vector<Eigen::Matrix<T0__, -1, -1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 187;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f8_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f8(y_slice, start, end, pstream__);
}
};


struct f8_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f8(y_slice, start + 1, end + 1, pstream__);
}
};

double
f9(const std::vector<int>& y_slice, const int& start, const int& end,
   std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 189;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f9_functor__ {
double
operator()(const std::vector<int>& y_slice, const int& start, const int& end,
           std::ostream* pstream__)  const 
{
return f9(y_slice, start, end, pstream__);
}
};


struct f9_rsfunctor__ {
double
operator()(const std::vector<int>& y_slice, const int& start, const int& end,
           std::ostream* pstream__)  const 
{
return f9(y_slice, start + 1, end + 1, pstream__);
}
};

double
f10(const std::vector<std::vector<int>>& y_slice, const int& start,
    const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 191;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f10_functor__ {
double
operator()(const std::vector<std::vector<int>>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return f10(y_slice, start, end, pstream__);
}
};


struct f10_rsfunctor__ {
double
operator()(const std::vector<std::vector<int>>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return f10(y_slice, start + 1, end + 1, pstream__);
}
};

double
f11(const std::vector<std::vector<std::vector<int>>>& y_slice,
    const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 193;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f11_functor__ {
double
operator()(const std::vector<std::vector<std::vector<int>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f11(y_slice, start, end, pstream__);
}
};


struct f11_rsfunctor__ {
double
operator()(const std::vector<std::vector<std::vector<int>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f11(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f12(const std::vector<std::vector<std::vector<T0__>>>& y_slice,
    const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 195;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f12_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<std::vector<T0__>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f12(y_slice, start, end, pstream__);
}
};


struct f12_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<std::vector<T0__>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f12(y_slice, start + 1, end + 1, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g1(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const T3__& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 197;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g1_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const T3__& a, std::ostream* pstream__)  const 
{
return g1(y_slice, start, end, a, pstream__);
}
};


struct g1_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__, const T3__& a)  const 
{
return g1(y_slice, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
g2(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const T3__& a_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& a = to_ref(a_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 199;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g2_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const T3__& a, std::ostream* pstream__)  const 
{
return g2(y_slice, start, end, a, pstream__);
}
};


struct g2_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__, const T3__& a)  const 
{
return g2(y_slice, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
g3(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const T3__& a_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& a = to_ref(a_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 201;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g3_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const T3__& a, std::ostream* pstream__)  const 
{
return g3(y_slice, start, end, a, pstream__);
}
};


struct g3_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__, const T3__& a)  const 
{
return g3(y_slice, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
g4(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const T3__& a_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& a = to_ref(a_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 203;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g4_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const T3__& a, std::ostream* pstream__)  const 
{
return g4(y_slice, start, end, a, pstream__);
}
};


struct g4_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__, const T3__& a)  const 
{
return g4(y_slice, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g5(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<T3__>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 205;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g5_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const std::vector<T3__>& a,
           std::ostream* pstream__)  const 
{
return g5(y_slice, start, end, a, pstream__);
}
};


struct g5_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<T3__>& a)  const 
{
return g5(y_slice, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g6(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, -1, 1>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 207;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g6_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const std::vector<Eigen::Matrix<T3__, -1, 1>>& a,
           std::ostream* pstream__)  const 
{
return g6(y_slice, start, end, a, pstream__);
}
};


struct g6_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<Eigen::Matrix<T3__, -1, 1>>& a)  const 
{
return g6(y_slice, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g7(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, 1, -1>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 209;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g7_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const std::vector<Eigen::Matrix<T3__, 1, -1>>& a,
           std::ostream* pstream__)  const 
{
return g7(y_slice, start, end, a, pstream__);
}
};


struct g7_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<Eigen::Matrix<T3__, 1, -1>>& a)  const 
{
return g7(y_slice, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g8(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, -1, -1>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 211;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g8_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const std::vector<Eigen::Matrix<T3__, -1, -1>>& a,
           std::ostream* pstream__)  const 
{
return g8(y_slice, start, end, a, pstream__);
}
};


struct g8_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<Eigen::Matrix<T3__, -1, -1>>& a)  const 
{
return g8(y_slice, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g9(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<std::vector<T3__>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 213;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g9_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const std::vector<std::vector<T3__>>& a,
           std::ostream* pstream__)  const 
{
return g9(y_slice, start, end, a, pstream__);
}
};


struct g9_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<std::vector<T3__>>& a)  const 
{
return g9(y_slice, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g10(const std::vector<T0__>& y_slice, const int& start, const int& end,
    const std::vector<std::vector<Eigen::Matrix<T3__, -1, 1>>>& a,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 215;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g10_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, 1>>>& a,
           std::ostream* pstream__)  const 
{
return g10(y_slice, start, end, a, pstream__);
}
};


struct g10_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, 1>>>& a)  const 
{
return g10(y_slice, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g11(const std::vector<T0__>& y_slice, const int& start, const int& end,
    const std::vector<std::vector<Eigen::Matrix<T3__, 1, -1>>>& a,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 217;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g11_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end,
           const std::vector<std::vector<Eigen::Matrix<T3__, 1, -1>>>& a,
           std::ostream* pstream__)  const 
{
return g11(y_slice, start, end, a, pstream__);
}
};


struct g11_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<std::vector<Eigen::Matrix<T3__, 1, -1>>>& a)  const 
{
return g11(y_slice, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g12(const std::vector<T0__>& y_slice, const int& start, const int& end,
    const std::vector<std::vector<Eigen::Matrix<T3__, -1, -1>>>& a,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 219;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct g12_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, -1>>>& a,
           std::ostream* pstream__)  const 
{
return g12(y_slice, start, end, a, pstream__);
}
};


struct g12_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, -1>>>& a)  const 
{
return g12(y_slice, start + 1, end + 1, a, pstream__);
}
};

template <typename T0__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T9__, typename T10__, typename T11__, typename T12__,
typename T14__, typename T15__, typename T16__, typename T17__,
typename T19__>
stan::promote_args_t<T0__, T4__, stan::value_type_t<T5__>,
stan::value_type_t<T6__>,
stan::value_type_t<T7__>, stan::promote_args_t<T9__, T10__, T11__, T12__,
T14__, stan::promote_args_t<T15__, T16__, T17__,
T19__>>>
s(const std::vector<T0__>& y_slice, const int& start, const int& end,
  const int& a, const T4__& b, const T5__& c_arg__, const T6__& d_arg__,
  const T7__& e_arg__, const std::vector<int>& f, const std::vector<T9__>& g,
  const std::vector<Eigen::Matrix<T10__, -1, 1>>& h,
  const std::vector<Eigen::Matrix<T11__, 1, -1>>& i,
  const std::vector<Eigen::Matrix<T12__, -1, -1>>& j,
  const std::vector<std::vector<int>>& k,
  const std::vector<std::vector<T14__>>& l,
  const std::vector<std::vector<Eigen::Matrix<T15__, -1, 1>>>& m,
  const std::vector<std::vector<Eigen::Matrix<T16__, 1, -1>>>& n,
  const std::vector<std::vector<Eigen::Matrix<T17__, -1, -1>>>& o,
  const std::vector<std::vector<std::vector<int>>>& p,
  const std::vector<std::vector<std::vector<T19__>>>& q,
  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T4__,
          stan::value_type_t<T5__>,
          stan::value_type_t<T6__>,
          stan::value_type_t<T7__>, stan::promote_args_t<T9__,
          T10__,
          T11__,
          T12__,
          T14__, stan::promote_args_t<T15__,
          T16__,
          T17__,
          T19__>>>;
  int current_statement__ = 0; 
  const auto& c = to_ref(c_arg__);
  const auto& d = to_ref(d_arg__);
  const auto& e = to_ref(e_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 221;
    return reduce_sum<s_rsfunctor__>(y_slice, 1, pstream__, a, b, c, d, e, f,
             g, h, i, j, k, l, m, n, o, p, q);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct s_functor__ {
template <typename T0__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T9__, typename T10__, typename T11__, typename T12__,
typename T14__, typename T15__, typename T16__, typename T17__,
typename T19__>
stan::promote_args_t<T0__, T4__, stan::value_type_t<T5__>,
stan::value_type_t<T6__>,
stan::value_type_t<T7__>, stan::promote_args_t<T9__, T10__, T11__, T12__,
T14__, stan::promote_args_t<T15__, T16__, T17__,
T19__>>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const int& a, const T4__& b, const T5__& c,
           const T6__& d, const T7__& e, const std::vector<int>& f,
           const std::vector<T9__>& g,
           const std::vector<Eigen::Matrix<T10__, -1, 1>>& h,
           const std::vector<Eigen::Matrix<T11__, 1, -1>>& i,
           const std::vector<Eigen::Matrix<T12__, -1, -1>>& j,
           const std::vector<std::vector<int>>& k,
           const std::vector<std::vector<T14__>>& l,
           const std::vector<std::vector<Eigen::Matrix<T15__, -1, 1>>>& m,
           const std::vector<std::vector<Eigen::Matrix<T16__, 1, -1>>>& n,
           const std::vector<std::vector<Eigen::Matrix<T17__, -1, -1>>>& o,
           const std::vector<std::vector<std::vector<int>>>& p,
           const std::vector<std::vector<std::vector<T19__>>>& q,
           std::ostream* pstream__)  const 
{
return s(y_slice, start, end, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p,
         q, pstream__);
}
};


struct s_rsfunctor__ {
template <typename T0__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T9__, typename T10__, typename T11__, typename T12__,
typename T14__, typename T15__, typename T16__, typename T17__,
typename T19__>
stan::promote_args_t<T0__, T4__, stan::value_type_t<T5__>,
stan::value_type_t<T6__>,
stan::value_type_t<T7__>, stan::promote_args_t<T9__, T10__, T11__, T12__,
T14__, stan::promote_args_t<T15__, T16__, T17__,
T19__>>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__, const int& a,
           const T4__& b, const T5__& c, const T6__& d, const T7__& e,
           const std::vector<int>& f, const std::vector<T9__>& g,
           const std::vector<Eigen::Matrix<T10__, -1, 1>>& h,
           const std::vector<Eigen::Matrix<T11__, 1, -1>>& i,
           const std::vector<Eigen::Matrix<T12__, -1, -1>>& j,
           const std::vector<std::vector<int>>& k,
           const std::vector<std::vector<T14__>>& l,
           const std::vector<std::vector<Eigen::Matrix<T15__, -1, 1>>>& m,
           const std::vector<std::vector<Eigen::Matrix<T16__, 1, -1>>>& n,
           const std::vector<std::vector<Eigen::Matrix<T17__, -1, -1>>>& o,
           const std::vector<std::vector<std::vector<int>>>& p,
           const std::vector<std::vector<std::vector<T19__>>>& q)  const 
{
return s(y_slice, start + 1, end + 1, a, b, c, d, e, f, g, h, i, j, k, l, m,
         n, o, p, q, pstream__);
}
};

double
r(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int N = std::numeric_limits<int>::min();
    
    current_statement__ = 224;
    validate_non_negative_index("y1d", "N", N);
    std::vector<local_scalar_t__> y1d = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
                                        
    
    current_statement__ = 226;
    validate_non_negative_index("y2d", "N", N);
    current_statement__ = 227;
    validate_non_negative_index("y2d", "N", N);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y2d = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
                                                              
    
    current_statement__ = 229;
    validate_non_negative_index("y3d", "N", N);
    current_statement__ = 230;
    validate_non_negative_index("y3d", "N", N);
    std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> y3d = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__));
                                                              
    
    current_statement__ = 232;
    validate_non_negative_index("y4d", "N", N);
    current_statement__ = 233;
    validate_non_negative_index("y4d", "N", N);
    current_statement__ = 234;
    validate_non_negative_index("y4d", "N", N);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> y4d = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N, DUMMY_VAR__));
                                                               
    
    current_statement__ = 236;
    validate_non_negative_index("y5d", "N", N);
    current_statement__ = 237;
    validate_non_negative_index("y5d", "N", N);
    std::vector<std::vector<local_scalar_t__>> y5d = std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__));
                                                     
    
    current_statement__ = 239;
    validate_non_negative_index("y6d", "N", N);
    current_statement__ = 240;
    validate_non_negative_index("y6d", "N", N);
    current_statement__ = 241;
    validate_non_negative_index("y6d", "N", N);
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> y6d = 
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__)));
    
    
    current_statement__ = 243;
    validate_non_negative_index("y7d", "N", N);
    current_statement__ = 244;
    validate_non_negative_index("y7d", "N", N);
    current_statement__ = 245;
    validate_non_negative_index("y7d", "N", N);
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> y7d = 
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__)));
    
    
    current_statement__ = 247;
    validate_non_negative_index("y8d", "N", N);
    current_statement__ = 248;
    validate_non_negative_index("y8d", "N", N);
    current_statement__ = 249;
    validate_non_negative_index("y8d", "N", N);
    current_statement__ = 250;
    validate_non_negative_index("y8d", "N", N);
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> y8d = 
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N, DUMMY_VAR__)));
    
    
    local_scalar_t__ y9d = DUMMY_VAR__;
    
    current_statement__ = 253;
    validate_non_negative_index("y10d", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> y10d = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
                                                  
    
    current_statement__ = 255;
    validate_non_negative_index("y11d", "N", N);
    Eigen::Matrix<local_scalar_t__, 1, -1> y11d = Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__);
                                                  
    
    current_statement__ = 257;
    validate_non_negative_index("y12d", "N", N);
    current_statement__ = 258;
    validate_non_negative_index("y12d", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> y12d = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N, DUMMY_VAR__);
                                                   
    
    int y13d = std::numeric_limits<int>::min();
    
    current_statement__ = 261;
    validate_non_negative_index("y14d", "N", N);
    std::vector<int> y14d = std::vector<int>(N, std::numeric_limits<int>::min());
                            
    
    current_statement__ = 263;
    validate_non_negative_index("y15d", "N", N);
    current_statement__ = 264;
    validate_non_negative_index("y15d", "N", N);
    std::vector<std::vector<int>> y15d = std::vector<std::vector<int>>(N, std::vector<int>(N, std::numeric_limits<int>::min()));
                                         
    
    current_statement__ = 266;
    validate_non_negative_index("y16d", "N", N);
    current_statement__ = 267;
    validate_non_negative_index("y16d", "N", N);
    current_statement__ = 268;
    validate_non_negative_index("y16d", "N", N);
    std::vector<std::vector<std::vector<int>>> y16d = std::vector<std::vector<std::vector<int>>>(N, std::vector<std::vector<int>>(N, std::vector<int>(N, std::numeric_limits<int>::min())));
                                                      
    
    current_statement__ = 270;
    validate_non_negative_index("y17d", "N", N);
    current_statement__ = 271;
    validate_non_negative_index("y17d", "N", N);
    current_statement__ = 272;
    validate_non_negative_index("y17d", "N", N);
    std::vector<std::vector<std::vector<local_scalar_t__>>> y17d = std::vector<std::vector<std::vector<local_scalar_t__>>>(N, std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__)));
                                                                   
    
    current_statement__ = 274;
    validate_non_negative_index("y1", "N", N);
    std::vector<local_scalar_t__> y1 = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
                                       
    
    current_statement__ = 276;
    validate_non_negative_index("y2", "N", N);
    current_statement__ = 277;
    validate_non_negative_index("y2", "N", N);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y2 = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
                                                             
    
    current_statement__ = 279;
    validate_non_negative_index("y3", "N", N);
    current_statement__ = 280;
    validate_non_negative_index("y3", "N", N);
    std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> y3 = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__));
                                                             
    
    current_statement__ = 282;
    validate_non_negative_index("y4", "N", N);
    current_statement__ = 283;
    validate_non_negative_index("y4", "N", N);
    current_statement__ = 284;
    validate_non_negative_index("y4", "N", N);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> y4 = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N, DUMMY_VAR__));
                                                              
    
    current_statement__ = 286;
    validate_non_negative_index("y5", "N", N);
    current_statement__ = 287;
    validate_non_negative_index("y5", "N", N);
    std::vector<std::vector<local_scalar_t__>> y5 = std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__));
                                                    
    
    current_statement__ = 289;
    validate_non_negative_index("y6", "N", N);
    current_statement__ = 290;
    validate_non_negative_index("y6", "N", N);
    current_statement__ = 291;
    validate_non_negative_index("y6", "N", N);
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> y6 = 
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__)));
    
    
    current_statement__ = 293;
    validate_non_negative_index("y7", "N", N);
    current_statement__ = 294;
    validate_non_negative_index("y7", "N", N);
    current_statement__ = 295;
    validate_non_negative_index("y7", "N", N);
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> y7 = 
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__)));
    
    
    current_statement__ = 297;
    validate_non_negative_index("y8", "N", N);
    current_statement__ = 298;
    validate_non_negative_index("y8", "N", N);
    current_statement__ = 299;
    validate_non_negative_index("y8", "N", N);
    current_statement__ = 300;
    validate_non_negative_index("y8", "N", N);
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> y8 = 
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N, DUMMY_VAR__)));
    
    
    local_scalar_t__ y9 = DUMMY_VAR__;
    
    current_statement__ = 303;
    validate_non_negative_index("y10", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> y10 = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
                                                 
    
    current_statement__ = 305;
    validate_non_negative_index("y11", "N", N);
    Eigen::Matrix<local_scalar_t__, 1, -1> y11 = Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__);
                                                 
    
    current_statement__ = 307;
    validate_non_negative_index("y12", "N", N);
    current_statement__ = 308;
    validate_non_negative_index("y12", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> y12 = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N, DUMMY_VAR__);
                                                  
    
    current_statement__ = 310;
    validate_non_negative_index("y17", "N", N);
    current_statement__ = 311;
    validate_non_negative_index("y17", "N", N);
    current_statement__ = 312;
    validate_non_negative_index("y17", "N", N);
    std::vector<std::vector<std::vector<local_scalar_t__>>> y17 = std::vector<std::vector<std::vector<local_scalar_t__>>>(N, std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__)));
                                                                  
    
    local_scalar_t__ t1 = DUMMY_VAR__;
    
    current_statement__ = 314;
    t1 = reduce_sum<f1_rsfunctor__>(y1, 1, pstream__);
    local_scalar_t__ t1a = DUMMY_VAR__;
    
    current_statement__ = 315;
    t1a = (reduce_sum<f1_rsfunctor__>(y1, 1, pstream__) +
            reduce_sum<f1a_rsfunctor__>(y1, 1, pstream__));
    local_scalar_t__ t2 = DUMMY_VAR__;
    
    current_statement__ = 316;
    t2 = reduce_sum<f2_rsfunctor__>(y2, 1, pstream__);
    local_scalar_t__ t3 = DUMMY_VAR__;
    
    current_statement__ = 317;
    t3 = reduce_sum<f3_rsfunctor__>(y3, 1, pstream__);
    local_scalar_t__ t4 = DUMMY_VAR__;
    
    current_statement__ = 318;
    t4 = reduce_sum<f4_rsfunctor__>(y4, 1, pstream__);
    local_scalar_t__ t5 = DUMMY_VAR__;
    
    current_statement__ = 319;
    t5 = reduce_sum<f5_rsfunctor__>(y5, 1, pstream__);
    local_scalar_t__ t6 = DUMMY_VAR__;
    
    current_statement__ = 320;
    t6 = reduce_sum<f6_rsfunctor__>(y6, 1, pstream__);
    local_scalar_t__ t7 = DUMMY_VAR__;
    
    current_statement__ = 321;
    t7 = reduce_sum<f7_rsfunctor__>(y7, 1, pstream__);
    local_scalar_t__ t8 = DUMMY_VAR__;
    
    current_statement__ = 322;
    t8 = reduce_sum<f8_rsfunctor__>(y8, 1, pstream__);
    local_scalar_t__ t9 = DUMMY_VAR__;
    
    current_statement__ = 323;
    t9 = reduce_sum<f9_rsfunctor__>(y14d, 1, pstream__);
    local_scalar_t__ t10 = DUMMY_VAR__;
    
    current_statement__ = 324;
    t10 = reduce_sum<f10_rsfunctor__>(y15d, 1, pstream__);
    local_scalar_t__ t11 = DUMMY_VAR__;
    
    current_statement__ = 325;
    t11 = reduce_sum<f11_rsfunctor__>(y16d, 1, pstream__);
    local_scalar_t__ t12 = DUMMY_VAR__;
    
    current_statement__ = 326;
    t12 = reduce_sum<f12_rsfunctor__>(y17, 1, pstream__);
    local_scalar_t__ tg1 = DUMMY_VAR__;
    
    current_statement__ = 327;
    tg1 = reduce_sum<g1_rsfunctor__>(y1, 1, pstream__, y9);
    local_scalar_t__ tg2 = DUMMY_VAR__;
    
    current_statement__ = 328;
    tg2 = reduce_sum<g2_rsfunctor__>(y1, 1, pstream__, y10);
    local_scalar_t__ tg3 = DUMMY_VAR__;
    
    current_statement__ = 329;
    tg3 = reduce_sum<g3_rsfunctor__>(y1, 1, pstream__, y11);
    local_scalar_t__ tg4 = DUMMY_VAR__;
    
    current_statement__ = 330;
    tg4 = reduce_sum<g4_rsfunctor__>(y1, 1, pstream__, y12);
    local_scalar_t__ tg5 = DUMMY_VAR__;
    
    current_statement__ = 331;
    tg5 = reduce_sum<g5_rsfunctor__>(y1, 1, pstream__, y1);
    local_scalar_t__ tg6 = DUMMY_VAR__;
    
    current_statement__ = 332;
    tg6 = reduce_sum<g6_rsfunctor__>(y1, 1, pstream__, y2);
    local_scalar_t__ tg7 = DUMMY_VAR__;
    
    current_statement__ = 333;
    tg7 = reduce_sum<g7_rsfunctor__>(y1, 1, pstream__, y3);
    local_scalar_t__ tg8 = DUMMY_VAR__;
    
    current_statement__ = 334;
    tg8 = reduce_sum<g8_rsfunctor__>(y1, 1, pstream__, y4);
    local_scalar_t__ tg9 = DUMMY_VAR__;
    
    current_statement__ = 335;
    tg9 = reduce_sum<g9_rsfunctor__>(y1, 1, pstream__, y5);
    local_scalar_t__ tg10 = DUMMY_VAR__;
    
    current_statement__ = 336;
    tg10 = reduce_sum<g10_rsfunctor__>(y1, 1, pstream__, y6);
    local_scalar_t__ tg11 = DUMMY_VAR__;
    
    current_statement__ = 337;
    tg11 = reduce_sum<g11_rsfunctor__>(y1, 1, pstream__, y7);
    local_scalar_t__ tg12 = DUMMY_VAR__;
    
    current_statement__ = 338;
    tg12 = reduce_sum<g12_rsfunctor__>(y1, 1, pstream__, y8);
    local_scalar_t__ ts = DUMMY_VAR__;
    
    current_statement__ = 339;
    ts = reduce_sum<s_rsfunctor__>(y1d, 1, pstream__, y13d, y9, y10, y11,
           y12, y14d, y1, y2, y3, y4, y15d, y5, y6, y7, y8, y16d, y17);
    current_statement__ = 340;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct r_functor__ {
double
operator()(std::ostream* pstream__)  const 
{
return r(pstream__);
}
};

class reduce_sum_m3_model final : public model_base_crtp<reduce_sum_m3_model> {

 private:
  int N;
  std::vector<double> y1d;
  std::vector<Eigen::Matrix<double, -1, 1>> y2d;
  std::vector<Eigen::Matrix<double, 1, -1>> y3d;
  std::vector<Eigen::Matrix<double, -1, -1>> y4d;
  std::vector<std::vector<double>> y5d;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> y6d;
  std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> y7d;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> y8d;
  double y9d;
  Eigen::Matrix<double, -1, 1> y10d__;
  Eigen::Matrix<double, 1, -1> y11d__;
  Eigen::Matrix<double, -1, -1> y12d__;
  int y13d;
  std::vector<int> y14d;
  std::vector<std::vector<int>> y15d;
  std::vector<std::vector<std::vector<int>>> y16d;
  std::vector<std::vector<std::vector<double>>> y17d;
  double td1;
  double td1a;
  double td2;
  double td3;
  double td4;
  double td5;
  double td6;
  double td7;
  double td8;
  double td9;
  double td10;
  double td11;
  double td12;
  double tgd1;
  double tgd2;
  double tgd3;
  double tgd4;
  double tgd5;
  double tgd6;
  double tgd7;
  double tgd8;
  double tgd9;
  double tgd10;
  double tgd11;
  double tgd12;
  double tsd; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y10d{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> y11d{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> y12d{nullptr, 0, 0};
 
 public:
  ~reduce_sum_m3_model() { }
  
  inline std::string model_name() const final { return "reduce_sum_m3_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  reduce_sum_m3_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m3_model_namespace::reduce_sum_m3_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 67;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 67;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 68;
      validate_non_negative_index("y1d", "N", N);
      current_statement__ = 69;
      context__.validate_dims("data initialization","y1d","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y1d = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 69;
      y1d = context__.vals_r("y1d");
      current_statement__ = 70;
      validate_non_negative_index("y2d", "N", N);
      current_statement__ = 71;
      validate_non_negative_index("y2d", "N", N);
      current_statement__ = 72;
      context__.validate_dims("data initialization","y2d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N)});
      y2d = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> y2d_flat__;
        current_statement__ = 72;
        y2d_flat__ = context__.vals_r("y2d");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 72;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 72;
            assign(y2d, y2d_flat__[(pos__ - 1)],
              "assigning variable y2d", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 72;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 73;
      validate_non_negative_index("y3d", "N", N);
      current_statement__ = 74;
      validate_non_negative_index("y3d", "N", N);
      current_statement__ = 75;
      context__.validate_dims("data initialization","y3d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N)});
      y3d = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> y3d_flat__;
        current_statement__ = 75;
        y3d_flat__ = context__.vals_r("y3d");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 75;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 75;
            assign(y3d, y3d_flat__[(pos__ - 1)],
              "assigning variable y3d", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 75;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 76;
      validate_non_negative_index("y4d", "N", N);
      current_statement__ = 77;
      validate_non_negative_index("y4d", "N", N);
      current_statement__ = 78;
      validate_non_negative_index("y4d", "N", N);
      current_statement__ = 79;
      context__.validate_dims("data initialization","y4d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N), static_cast<size_t>(N)});
      y4d = std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> y4d_flat__;
        current_statement__ = 79;
        y4d_flat__ = context__.vals_r("y4d");
        current_statement__ = 79;
        pos__ = 1;
        current_statement__ = 79;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 79;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 79;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 79;
              assign(y4d, y4d_flat__[(pos__ - 1)],
                "assigning variable y4d", index_uni(sym3__),
                                            index_uni(sym2__),
                                            index_uni(sym1__));
              current_statement__ = 79;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 80;
      validate_non_negative_index("y5d", "N", N);
      current_statement__ = 81;
      validate_non_negative_index("y5d", "N", N);
      current_statement__ = 82;
      context__.validate_dims("data initialization","y5d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N)});
      y5d = std::vector<std::vector<double>>(N, std::vector<double>(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> y5d_flat__;
        current_statement__ = 82;
        y5d_flat__ = context__.vals_r("y5d");
        current_statement__ = 82;
        pos__ = 1;
        current_statement__ = 82;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 82;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 82;
            assign(y5d, y5d_flat__[(pos__ - 1)],
              "assigning variable y5d", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 82;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 83;
      validate_non_negative_index("y6d", "N", N);
      current_statement__ = 84;
      validate_non_negative_index("y6d", "N", N);
      current_statement__ = 85;
      validate_non_negative_index("y6d", "N", N);
      current_statement__ = 86;
      context__.validate_dims("data initialization","y6d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N), static_cast<size_t>(N)});
      y6d = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N, std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> y6d_flat__;
        current_statement__ = 86;
        y6d_flat__ = context__.vals_r("y6d");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 86;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 86;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 86;
              assign(y6d, y6d_flat__[(pos__ - 1)],
                "assigning variable y6d", index_uni(sym3__),
                                            index_uni(sym2__),
                                            index_uni(sym1__));
              current_statement__ = 86;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 87;
      validate_non_negative_index("y7d", "N", N);
      current_statement__ = 88;
      validate_non_negative_index("y7d", "N", N);
      current_statement__ = 89;
      validate_non_negative_index("y7d", "N", N);
      current_statement__ = 90;
      context__.validate_dims("data initialization","y7d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N), static_cast<size_t>(N)});
      y7d = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(N, std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> y7d_flat__;
        current_statement__ = 90;
        y7d_flat__ = context__.vals_r("y7d");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 90;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 90;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 90;
              assign(y7d, y7d_flat__[(pos__ - 1)],
                "assigning variable y7d", index_uni(sym3__),
                                            index_uni(sym2__),
                                            index_uni(sym1__));
              current_statement__ = 90;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 91;
      validate_non_negative_index("y8d", "N", N);
      current_statement__ = 92;
      validate_non_negative_index("y8d", "N", N);
      current_statement__ = 93;
      validate_non_negative_index("y8d", "N", N);
      current_statement__ = 94;
      validate_non_negative_index("y8d", "N", N);
      current_statement__ = 95;
      context__.validate_dims("data initialization","y8d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N), static_cast<size_t>(N),
            static_cast<size_t>(N)});
      y8d = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(N, std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> y8d_flat__;
        current_statement__ = 95;
        y8d_flat__ = context__.vals_r("y8d");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 95;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 95;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 95;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 95;
                assign(y8d, y8d_flat__[(pos__ - 1)],
                  "assigning variable y8d", index_uni(sym4__),
                                              index_uni(sym3__),
                                              index_uni(sym2__),
                                              index_uni(sym1__));
                current_statement__ = 95;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 96;
      context__.validate_dims("data initialization","y9d","double",
           std::vector<size_t>{});
      y9d = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 96;
      y9d = context__.vals_r("y9d")[(1 - 1)];
      current_statement__ = 97;
      validate_non_negative_index("y10d", "N", N);
      current_statement__ = 98;
      context__.validate_dims("data initialization","y10d","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y10d__ = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
      new (&y10d) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y10d__.data(), N);
      
      {
        std::vector<local_scalar_t__> y10d_flat__;
        current_statement__ = 98;
        y10d_flat__ = context__.vals_r("y10d");
        current_statement__ = 98;
        pos__ = 1;
        current_statement__ = 98;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 98;
          assign(y10d, y10d_flat__[(pos__ - 1)],
            "assigning variable y10d", index_uni(sym1__));
          current_statement__ = 98;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 99;
      validate_non_negative_index("y11d", "N", N);
      current_statement__ = 100;
      context__.validate_dims("data initialization","y11d","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y11d__ = Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
      new (&y11d) Eigen::Map<Eigen::Matrix<double, 1, -1>>(y11d__.data(), N);
      
      {
        std::vector<local_scalar_t__> y11d_flat__;
        current_statement__ = 100;
        y11d_flat__ = context__.vals_r("y11d");
        current_statement__ = 100;
        pos__ = 1;
        current_statement__ = 100;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 100;
          assign(y11d, y11d_flat__[(pos__ - 1)],
            "assigning variable y11d", index_uni(sym1__));
          current_statement__ = 100;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 101;
      validate_non_negative_index("y12d", "N", N);
      current_statement__ = 102;
      validate_non_negative_index("y12d", "N", N);
      current_statement__ = 103;
      context__.validate_dims("data initialization","y12d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N)});
      y12d__ = Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN());
      new (&y12d) Eigen::Map<Eigen::Matrix<double, -1, -1>>(y12d__.data(), N, N);
      
      
      {
        std::vector<local_scalar_t__> y12d_flat__;
        current_statement__ = 103;
        y12d_flat__ = context__.vals_r("y12d");
        current_statement__ = 103;
        pos__ = 1;
        current_statement__ = 103;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 103;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 103;
            assign(y12d, y12d_flat__[(pos__ - 1)],
              "assigning variable y12d", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 103;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 104;
      context__.validate_dims("data initialization","y13d","int",
           std::vector<size_t>{});
      y13d = std::numeric_limits<int>::min();
      
      current_statement__ = 104;
      y13d = context__.vals_i("y13d")[(1 - 1)];
      current_statement__ = 105;
      validate_non_negative_index("y14d", "N", N);
      current_statement__ = 106;
      context__.validate_dims("data initialization","y14d","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      y14d = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 106;
      y14d = context__.vals_i("y14d");
      current_statement__ = 107;
      validate_non_negative_index("y15d", "N", N);
      current_statement__ = 108;
      validate_non_negative_index("y15d", "N", N);
      current_statement__ = 109;
      context__.validate_dims("data initialization","y15d","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N)});
      y15d = std::vector<std::vector<int>>(N, std::vector<int>(N, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> y15d_flat__;
        current_statement__ = 109;
        y15d_flat__ = context__.vals_i("y15d");
        current_statement__ = 109;
        pos__ = 1;
        current_statement__ = 109;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 109;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 109;
            assign(y15d, y15d_flat__[(pos__ - 1)],
              "assigning variable y15d", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 109;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 110;
      validate_non_negative_index("y16d", "N", N);
      current_statement__ = 111;
      validate_non_negative_index("y16d", "N", N);
      current_statement__ = 112;
      validate_non_negative_index("y16d", "N", N);
      current_statement__ = 113;
      context__.validate_dims("data initialization","y16d","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N), static_cast<size_t>(N)});
      y16d = std::vector<std::vector<std::vector<int>>>(N, std::vector<std::vector<int>>(N, std::vector<int>(N, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> y16d_flat__;
        current_statement__ = 113;
        y16d_flat__ = context__.vals_i("y16d");
        current_statement__ = 113;
        pos__ = 1;
        current_statement__ = 113;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 113;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 113;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 113;
              assign(y16d, y16d_flat__[(pos__ - 1)],
                "assigning variable y16d", index_uni(sym3__),
                                             index_uni(sym2__),
                                             index_uni(sym1__));
              current_statement__ = 113;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 114;
      validate_non_negative_index("y17d", "N", N);
      current_statement__ = 115;
      validate_non_negative_index("y17d", "N", N);
      current_statement__ = 116;
      validate_non_negative_index("y17d", "N", N);
      current_statement__ = 117;
      context__.validate_dims("data initialization","y17d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N), static_cast<size_t>(N)});
      y17d = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(N, std::vector<double>(N, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> y17d_flat__;
        current_statement__ = 117;
        y17d_flat__ = context__.vals_r("y17d");
        current_statement__ = 117;
        pos__ = 1;
        current_statement__ = 117;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 117;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 117;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 117;
              assign(y17d, y17d_flat__[(pos__ - 1)],
                "assigning variable y17d", index_uni(sym3__),
                                             index_uni(sym2__),
                                             index_uni(sym1__));
              current_statement__ = 117;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 118;
      td1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 118;
      td1 = reduce_sum<f1_rsfunctor__>(y1d, 1, pstream__);
      current_statement__ = 119;
      td1a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 119;
      td1a = (reduce_sum<f1_rsfunctor__>(y1d, 1, pstream__) +
               reduce_sum<f1a_rsfunctor__>(y1d, 1, pstream__));
      current_statement__ = 120;
      td2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 120;
      td2 = reduce_sum<f2_rsfunctor__>(y2d, 1, pstream__);
      current_statement__ = 121;
      td3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 121;
      td3 = reduce_sum<f3_rsfunctor__>(y3d, 1, pstream__);
      current_statement__ = 122;
      td4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 122;
      td4 = reduce_sum<f4_rsfunctor__>(y4d, 1, pstream__);
      current_statement__ = 123;
      td5 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 123;
      td5 = reduce_sum<f5_rsfunctor__>(y5d, 1, pstream__);
      current_statement__ = 124;
      td6 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 124;
      td6 = reduce_sum<f6_rsfunctor__>(y6d, 1, pstream__);
      current_statement__ = 125;
      td7 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 125;
      td7 = reduce_sum<f7_rsfunctor__>(y7d, 1, pstream__);
      current_statement__ = 126;
      td8 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 126;
      td8 = reduce_sum<f8_rsfunctor__>(y8d, 1, pstream__);
      current_statement__ = 127;
      td9 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 127;
      td9 = reduce_sum<f9_rsfunctor__>(y14d, 1, pstream__);
      current_statement__ = 128;
      td10 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 128;
      td10 = reduce_sum<f10_rsfunctor__>(y15d, 1, pstream__);
      current_statement__ = 129;
      td11 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 129;
      td11 = reduce_sum<f11_rsfunctor__>(y16d, 1, pstream__);
      current_statement__ = 130;
      td12 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 130;
      td12 = reduce_sum<f12_rsfunctor__>(y17d, 1, pstream__);
      current_statement__ = 131;
      tgd1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 131;
      tgd1 = reduce_sum<g1_rsfunctor__>(y1d, 1, pstream__, y9d);
      current_statement__ = 132;
      tgd2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 132;
      tgd2 = reduce_sum<g2_rsfunctor__>(y1d, 1, pstream__, y10d);
      current_statement__ = 133;
      tgd3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 133;
      tgd3 = reduce_sum<g3_rsfunctor__>(y1d, 1, pstream__, y11d);
      current_statement__ = 134;
      tgd4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 134;
      tgd4 = reduce_sum<g4_rsfunctor__>(y1d, 1, pstream__, y12d);
      current_statement__ = 135;
      tgd5 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 135;
      tgd5 = reduce_sum<g5_rsfunctor__>(y1d, 1, pstream__, y1d);
      current_statement__ = 136;
      tgd6 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 136;
      tgd6 = reduce_sum<g6_rsfunctor__>(y1d, 1, pstream__, y2d);
      current_statement__ = 137;
      tgd7 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 137;
      tgd7 = reduce_sum<g7_rsfunctor__>(y1d, 1, pstream__, y3d);
      current_statement__ = 138;
      tgd8 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 138;
      tgd8 = reduce_sum<g8_rsfunctor__>(y1d, 1, pstream__, y4d);
      current_statement__ = 139;
      tgd9 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 139;
      tgd9 = reduce_sum<g9_rsfunctor__>(y1d, 1, pstream__, y5d);
      current_statement__ = 140;
      tgd10 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 140;
      tgd10 = reduce_sum<g10_rsfunctor__>(y1d, 1, pstream__, y6d);
      current_statement__ = 141;
      tgd11 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 141;
      tgd11 = reduce_sum<g11_rsfunctor__>(y1d, 1, pstream__, y7d);
      current_statement__ = 142;
      tgd12 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 142;
      tgd12 = reduce_sum<g12_rsfunctor__>(y1d, 1, pstream__, y8d);
      current_statement__ = 143;
      tsd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 143;
      tsd = reduce_sum<s_rsfunctor__>(y1d, 1, pstream__, y13d, y9d, y10d,
              y11d, y12d, y14d, y1d, y2d, y3d, y4d, y15d, y5d, y6d, y7d, y8d,
              y16d, y17d);
      current_statement__ = 144;
      validate_non_negative_index("y1", "N", N);
      current_statement__ = 145;
      validate_non_negative_index("y2", "N", N);
      current_statement__ = 146;
      validate_non_negative_index("y2", "N", N);
      current_statement__ = 147;
      validate_non_negative_index("y3", "N", N);
      current_statement__ = 148;
      validate_non_negative_index("y3", "N", N);
      current_statement__ = 149;
      validate_non_negative_index("y4", "N", N);
      current_statement__ = 150;
      validate_non_negative_index("y4", "N", N);
      current_statement__ = 151;
      validate_non_negative_index("y4", "N", N);
      current_statement__ = 152;
      validate_non_negative_index("y5", "N", N);
      current_statement__ = 153;
      validate_non_negative_index("y5", "N", N);
      current_statement__ = 154;
      validate_non_negative_index("y6", "N", N);
      current_statement__ = 155;
      validate_non_negative_index("y6", "N", N);
      current_statement__ = 156;
      validate_non_negative_index("y6", "N", N);
      current_statement__ = 157;
      validate_non_negative_index("y7", "N", N);
      current_statement__ = 158;
      validate_non_negative_index("y7", "N", N);
      current_statement__ = 159;
      validate_non_negative_index("y7", "N", N);
      current_statement__ = 160;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 161;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 162;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 163;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 164;
      validate_non_negative_index("y10", "N", N);
      current_statement__ = 165;
      validate_non_negative_index("y11", "N", N);
      current_statement__ = 166;
      validate_non_negative_index("y12", "N", N);
      current_statement__ = 167;
      validate_non_negative_index("y12", "N", N);
      current_statement__ = 168;
      validate_non_negative_index("y17", "N", N);
      current_statement__ = 169;
      validate_non_negative_index("y17", "N", N);
      current_statement__ = 170;
      validate_non_negative_index("y17", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = N + (N * N) + (N * N) + (N * N * N) + (N * N)
       + (N * N * N) + (N * N * N) + (N * N * N * N) + 1 + N + N + (N * N)
       + (N * N * N);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m3_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> y1 = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
                                         
      
      current_statement__ = 1;
      y1 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y2 = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__));
                                                               
      
      current_statement__ = 2;
      y2 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
             N, N);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> y3 = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__));
                                                               
      
      current_statement__ = 3;
      y3 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
             N, N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> y4 = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N, DUMMY_VAR__));
                                                                
      
      current_statement__ = 4;
      y4 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(
             N, N, N);
      std::vector<std::vector<local_scalar_t__>> y5 = std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__));
                                                      
      
      current_statement__ = 5;
      y5 = in__.template read<std::vector<std::vector<local_scalar_t__>>>(N,
             N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> y6 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__)));
      
      
      current_statement__ = 6;
      y6 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> y7 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__)));
      
      
      current_statement__ = 7;
      y7 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> y8 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N, DUMMY_VAR__)));
      
      
      current_statement__ = 8;
      y8 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>(
             N, N, N, N);
      local_scalar_t__ y9 = DUMMY_VAR__;
      
      current_statement__ = 9;
      y9 = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> y10 = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
                                                   
      
      current_statement__ = 10;
      y10 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      Eigen::Matrix<local_scalar_t__, 1, -1> y11 = Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(N, DUMMY_VAR__);
                                                   
      
      current_statement__ = 11;
      y11 = in__.template read<Eigen::Matrix<local_scalar_t__, 1, -1>>(N);
      Eigen::Matrix<local_scalar_t__, -1, -1> y12 = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, N, DUMMY_VAR__);
                                                    
      
      current_statement__ = 12;
      y12 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, N);
      std::vector<std::vector<std::vector<local_scalar_t__>>> y17 = std::vector<std::vector<std::vector<local_scalar_t__>>>(N, std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__)));
                                                                    
      
      current_statement__ = 13;
      y17 = in__.template read<std::vector<std::vector<std::vector<local_scalar_t__>>>>(
              N, N, N);
      {
        local_scalar_t__ t1 = DUMMY_VAR__;
        
        current_statement__ = 40;
        t1 = reduce_sum<f1_rsfunctor__>(y1, 1, pstream__);
        local_scalar_t__ t1a = DUMMY_VAR__;
        
        current_statement__ = 41;
        t1a = (reduce_sum<f1_rsfunctor__>(y1, 1, pstream__) +
                reduce_sum<f1a_rsfunctor__>(y1, 1, pstream__));
        local_scalar_t__ t2 = DUMMY_VAR__;
        
        current_statement__ = 42;
        t2 = reduce_sum<f2_rsfunctor__>(y2, 1, pstream__);
        local_scalar_t__ t3 = DUMMY_VAR__;
        
        current_statement__ = 43;
        t3 = reduce_sum<f3_rsfunctor__>(y3, 1, pstream__);
        local_scalar_t__ t4 = DUMMY_VAR__;
        
        current_statement__ = 44;
        t4 = reduce_sum<f4_rsfunctor__>(y4, 1, pstream__);
        local_scalar_t__ t5 = DUMMY_VAR__;
        
        current_statement__ = 45;
        t5 = reduce_sum<f5_rsfunctor__>(y5, 1, pstream__);
        local_scalar_t__ t6 = DUMMY_VAR__;
        
        current_statement__ = 46;
        t6 = reduce_sum<f6_rsfunctor__>(y6, 1, pstream__);
        local_scalar_t__ t7 = DUMMY_VAR__;
        
        current_statement__ = 47;
        t7 = reduce_sum<f7_rsfunctor__>(y7, 1, pstream__);
        local_scalar_t__ t8 = DUMMY_VAR__;
        
        current_statement__ = 48;
        t8 = reduce_sum<f8_rsfunctor__>(y8, 1, pstream__);
        local_scalar_t__ t9 = DUMMY_VAR__;
        
        current_statement__ = 49;
        t9 = reduce_sum<f9_rsfunctor__>(y14d, 1, pstream__);
        local_scalar_t__ t10 = DUMMY_VAR__;
        
        current_statement__ = 50;
        t10 = reduce_sum<f10_rsfunctor__>(y15d, 1, pstream__);
        local_scalar_t__ t11 = DUMMY_VAR__;
        
        current_statement__ = 51;
        t11 = reduce_sum<f11_rsfunctor__>(y16d, 1, pstream__);
        local_scalar_t__ t12 = DUMMY_VAR__;
        
        current_statement__ = 52;
        t12 = reduce_sum<f12_rsfunctor__>(y17, 1, pstream__);
        local_scalar_t__ tg1 = DUMMY_VAR__;
        
        current_statement__ = 53;
        tg1 = reduce_sum<g1_rsfunctor__>(y1, 1, pstream__, y9);
        local_scalar_t__ tg2 = DUMMY_VAR__;
        
        current_statement__ = 54;
        tg2 = reduce_sum<g2_rsfunctor__>(y1, 1, pstream__, y10);
        local_scalar_t__ tg3 = DUMMY_VAR__;
        
        current_statement__ = 55;
        tg3 = reduce_sum<g3_rsfunctor__>(y1, 1, pstream__, y11);
        local_scalar_t__ tg4 = DUMMY_VAR__;
        
        current_statement__ = 56;
        tg4 = reduce_sum<g4_rsfunctor__>(y1, 1, pstream__, y12);
        local_scalar_t__ tg5 = DUMMY_VAR__;
        
        current_statement__ = 57;
        tg5 = reduce_sum<g5_rsfunctor__>(y1, 1, pstream__, y1);
        local_scalar_t__ tg6 = DUMMY_VAR__;
        
        current_statement__ = 58;
        tg6 = reduce_sum<g6_rsfunctor__>(y1, 1, pstream__, y2);
        local_scalar_t__ tg7 = DUMMY_VAR__;
        
        current_statement__ = 59;
        tg7 = reduce_sum<g7_rsfunctor__>(y1, 1, pstream__, y3);
        local_scalar_t__ tg8 = DUMMY_VAR__;
        
        current_statement__ = 60;
        tg8 = reduce_sum<g8_rsfunctor__>(y1, 1, pstream__, y4);
        local_scalar_t__ tg9 = DUMMY_VAR__;
        
        current_statement__ = 61;
        tg9 = reduce_sum<g9_rsfunctor__>(y1, 1, pstream__, y5);
        local_scalar_t__ tg10 = DUMMY_VAR__;
        
        current_statement__ = 62;
        tg10 = reduce_sum<g10_rsfunctor__>(y1, 1, pstream__, y6);
        local_scalar_t__ tg11 = DUMMY_VAR__;
        
        current_statement__ = 63;
        tg11 = reduce_sum<g11_rsfunctor__>(y1, 1, pstream__, y7);
        local_scalar_t__ tg12 = DUMMY_VAR__;
        
        current_statement__ = 64;
        tg12 = reduce_sum<g12_rsfunctor__>(y1, 1, pstream__, y8);
        local_scalar_t__ ts = DUMMY_VAR__;
        
        current_statement__ = 65;
        ts = reduce_sum<s_rsfunctor__>(y1d, 1, pstream__, y13d, y9, y10, y11,
               y12, y14d, y1, y2, y3, y4, y15d, y5, y6, y7, y8, y16d, y17);
        local_scalar_t__ tt = DUMMY_VAR__;
        
        current_statement__ = 66;
        tt = r(pstream__);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m3_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> y1 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 1;
      y1 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<Eigen::Matrix<double, -1, 1>> y2 = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                     
      
      current_statement__ = 2;
      y2 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
             N, N);
      std::vector<Eigen::Matrix<double, 1, -1>> y3 = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                     
      
      current_statement__ = 3;
      y3 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
             N, N);
      std::vector<Eigen::Matrix<double, -1, -1>> y4 = std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN()));
                                                      
      
      current_statement__ = 4;
      y4 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(
             N, N, N);
      std::vector<std::vector<double>> y5 = std::vector<std::vector<double>>(N, std::vector<double>(N, std::numeric_limits<double>::quiet_NaN()));
                                            
      
      current_statement__ = 5;
      y5 = in__.template read<std::vector<std::vector<local_scalar_t__>>>(N,
             N);
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> y6 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N, std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
                                                                  
      
      current_statement__ = 6;
      y6 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> y7 = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(N, std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
                                                                  
      
      current_statement__ = 7;
      y7 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> y8 = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(N, std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN())));
                                                                   
      
      current_statement__ = 8;
      y8 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>(
             N, N, N, N);
      double y9 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      y9 = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> y10 = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                         
      
      current_statement__ = 10;
      y10 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      Eigen::Matrix<double, 1, -1> y11 = Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                         
      
      current_statement__ = 11;
      y11 = in__.template read<Eigen::Matrix<local_scalar_t__, 1, -1>>(N);
      Eigen::Matrix<double, -1, -1> y12 = Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN());
                                          
      
      current_statement__ = 12;
      y12 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, N);
      std::vector<std::vector<std::vector<double>>> y17 = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(N, std::vector<double>(N, std::numeric_limits<double>::quiet_NaN())));
                                                          
      
      current_statement__ = 13;
      y17 = in__.template read<std::vector<std::vector<std::vector<local_scalar_t__>>>>(
              N, N, N);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y1[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(y2[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(y3[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              rvalue(y4, "y4",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(y5[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              y6[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              y7[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              vars__.emplace_back(
                rvalue(y8, "y8",
                  index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                    index_uni(sym1__)));
            }
          }
        }
      }
      vars__.emplace_back(y9);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y10[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y11[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(y12, "y12", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              y17[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double t1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      t1 = reduce_sum<f1_rsfunctor__>(y1, 1, pstream__);
      double t1a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      t1a = (reduce_sum<f1_rsfunctor__>(y1, 1, pstream__) +
              reduce_sum<f1a_rsfunctor__>(y1, 1, pstream__));
      double t2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      t2 = reduce_sum<f2_rsfunctor__>(y2, 1, pstream__);
      double t3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      t3 = reduce_sum<f3_rsfunctor__>(y3, 1, pstream__);
      double t4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      t4 = reduce_sum<f4_rsfunctor__>(y4, 1, pstream__);
      double t5 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      t5 = reduce_sum<f5_rsfunctor__>(y5, 1, pstream__);
      double t6 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      t6 = reduce_sum<f6_rsfunctor__>(y6, 1, pstream__);
      double t7 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      t7 = reduce_sum<f7_rsfunctor__>(y7, 1, pstream__);
      double t8 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 22;
      t8 = reduce_sum<f8_rsfunctor__>(y8, 1, pstream__);
      double t9 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 23;
      t9 = reduce_sum<f9_rsfunctor__>(y14d, 1, pstream__);
      double t10 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 24;
      t10 = reduce_sum<f10_rsfunctor__>(y15d, 1, pstream__);
      double t11 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 25;
      t11 = reduce_sum<f11_rsfunctor__>(y16d, 1, pstream__);
      double t12 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 26;
      t12 = reduce_sum<f12_rsfunctor__>(y17, 1, pstream__);
      double tg1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 27;
      tg1 = reduce_sum<g1_rsfunctor__>(y1, 1, pstream__, y9);
      double tg2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 28;
      tg2 = reduce_sum<g2_rsfunctor__>(y1, 1, pstream__, y10);
      double tg3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 29;
      tg3 = reduce_sum<g3_rsfunctor__>(y1, 1, pstream__, y11);
      double tg4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 30;
      tg4 = reduce_sum<g4_rsfunctor__>(y1, 1, pstream__, y12);
      double tg5 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 31;
      tg5 = reduce_sum<g5_rsfunctor__>(y1, 1, pstream__, y1);
      double tg6 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 32;
      tg6 = reduce_sum<g6_rsfunctor__>(y1, 1, pstream__, y2);
      double tg7 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 33;
      tg7 = reduce_sum<g7_rsfunctor__>(y1, 1, pstream__, y3);
      double tg8 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 34;
      tg8 = reduce_sum<g8_rsfunctor__>(y1, 1, pstream__, y4);
      double tg9 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 35;
      tg9 = reduce_sum<g9_rsfunctor__>(y1, 1, pstream__, y5);
      double tg10 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 36;
      tg10 = reduce_sum<g10_rsfunctor__>(y1, 1, pstream__, y6);
      double tg11 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 37;
      tg11 = reduce_sum<g11_rsfunctor__>(y1, 1, pstream__, y7);
      double tg12 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 38;
      tg12 = reduce_sum<g12_rsfunctor__>(y1, 1, pstream__, y8);
      double tgs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 39;
      tgs = reduce_sum<s_rsfunctor__>(y1d, 1, pstream__, y13d, y9d, y10d,
              y11d, y12d, y14d, y1d, y2d, y3d, y4d, y15d, y5d, y6d, y7d, y8d,
              y16d, y17);
      vars__.emplace_back(t1);
      vars__.emplace_back(t1a);
      vars__.emplace_back(t2);
      vars__.emplace_back(t3);
      vars__.emplace_back(t4);
      vars__.emplace_back(t5);
      vars__.emplace_back(t6);
      vars__.emplace_back(t7);
      vars__.emplace_back(t8);
      vars__.emplace_back(t9);
      vars__.emplace_back(t10);
      vars__.emplace_back(t11);
      vars__.emplace_back(t12);
      vars__.emplace_back(tg1);
      vars__.emplace_back(tg2);
      vars__.emplace_back(tg3);
      vars__.emplace_back(tg4);
      vars__.emplace_back(tg5);
      vars__.emplace_back(tg6);
      vars__.emplace_back(tg7);
      vars__.emplace_back(tg8);
      vars__.emplace_back(tg9);
      vars__.emplace_back(tg10);
      vars__.emplace_back(tg11);
      vars__.emplace_back(tg12);
      vars__.emplace_back(tgs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> y1 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
                               
      
      current_statement__ = 1;
      y1 = context__.vals_r("y1");
      std::vector<Eigen::Matrix<double, -1, 1>> y2 = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                     
      
      {
        std::vector<local_scalar_t__> y2_flat__;
        current_statement__ = 2;
        y2_flat__ = context__.vals_r("y2");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 2;
            assign(y2, y2_flat__[(pos__ - 1)],
              "assigning variable y2", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<Eigen::Matrix<double, 1, -1>> y3 = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                     
      
      {
        std::vector<local_scalar_t__> y3_flat__;
        current_statement__ = 3;
        y3_flat__ = context__.vals_r("y3");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 3;
            assign(y3, y3_flat__[(pos__ - 1)],
              "assigning variable y3", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 3;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<Eigen::Matrix<double, -1, -1>> y4 = std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN()));
                                                      
      
      {
        std::vector<local_scalar_t__> y4_flat__;
        current_statement__ = 4;
        y4_flat__ = context__.vals_r("y4");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 4;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 4;
              assign(y4, y4_flat__[(pos__ - 1)],
                "assigning variable y4", index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
              current_statement__ = 4;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<std::vector<double>> y5 = std::vector<std::vector<double>>(N, std::vector<double>(N, std::numeric_limits<double>::quiet_NaN()));
                                            
      
      {
        std::vector<local_scalar_t__> y5_flat__;
        current_statement__ = 5;
        y5_flat__ = context__.vals_r("y5");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 5;
            assign(y5, y5_flat__[(pos__ - 1)],
              "assigning variable y5", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 5;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> y6 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N, std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
                                                                  
      
      {
        std::vector<local_scalar_t__> y6_flat__;
        current_statement__ = 6;
        y6_flat__ = context__.vals_r("y6");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 6;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 6;
              assign(y6, y6_flat__[(pos__ - 1)],
                "assigning variable y6", index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
              current_statement__ = 6;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> y7 = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(N, std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
                                                                  
      
      {
        std::vector<local_scalar_t__> y7_flat__;
        current_statement__ = 7;
        y7_flat__ = context__.vals_r("y7");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 7;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 7;
              assign(y7, y7_flat__[(pos__ - 1)],
                "assigning variable y7", index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
              current_statement__ = 7;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> y8 = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(N, std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN())));
                                                                   
      
      {
        std::vector<local_scalar_t__> y8_flat__;
        current_statement__ = 8;
        y8_flat__ = context__.vals_r("y8");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 8;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 8;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 8;
                assign(y8, y8_flat__[(pos__ - 1)],
                  "assigning variable y8", index_uni(sym4__),
                                             index_uni(sym3__),
                                             index_uni(sym2__),
                                             index_uni(sym1__));
                current_statement__ = 8;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      double y9 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      y9 = context__.vals_r("y9")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> y10 = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                         
      
      {
        std::vector<local_scalar_t__> y10_flat__;
        current_statement__ = 10;
        y10_flat__ = context__.vals_r("y10");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 10;
          assign(y10, y10_flat__[(pos__ - 1)],
            "assigning variable y10", index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, 1, -1> y11 = Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                         
      
      {
        std::vector<local_scalar_t__> y11_flat__;
        current_statement__ = 11;
        y11_flat__ = context__.vals_r("y11");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 11;
          assign(y11, y11_flat__[(pos__ - 1)],
            "assigning variable y11", index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, -1> y12 = Eigen::Matrix<double, -1, -1>::Constant(N, N, std::numeric_limits<double>::quiet_NaN());
                                          
      
      {
        std::vector<local_scalar_t__> y12_flat__;
        current_statement__ = 12;
        y12_flat__ = context__.vals_r("y12");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 12;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 12;
            assign(y12, y12_flat__[(pos__ - 1)],
              "assigning variable y12", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 12;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<std::vector<std::vector<double>>> y17 = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(N, std::vector<double>(N, std::numeric_limits<double>::quiet_NaN())));
                                                          
      
      {
        std::vector<local_scalar_t__> y17_flat__;
        current_statement__ = 13;
        y17_flat__ = context__.vals_r("y17");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 13;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 13;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 13;
              assign(y17, y17_flat__[(pos__ - 1)],
                "assigning variable y17", index_uni(sym3__),
                                            index_uni(sym2__),
                                            index_uni(sym1__));
              current_statement__ = 13;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y1[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(y2[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(y3[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              rvalue(y4, "y4",
                index_uni(sym1__), index_uni(sym3__), index_uni(sym2__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(y5[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              y6[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              y7[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              vars__.emplace_back(
                rvalue(y8, "y8",
                  index_uni(sym1__), index_uni(sym2__), index_uni(sym4__),
                    index_uni(sym3__)));
            }
          }
        }
      }
      vars__.emplace_back(y9);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y10[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y11[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(y12, "y12", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            vars__.emplace_back(
              y17[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"y1", "y2", "y3", "y4", "y5", "y6",
      "y7", "y8", "y9", "y10", "y11", "y12", "y17", "t1", "t1a", "t2", "t3",
      "t4", "t5", "t6", "t7", "t8", "t9", "t10", "t11", "t12", "tg1", "tg2",
      "tg3", "tg4", "tg5", "tg6", "tg7", "tg8", "tg9", "tg10", "tg11",
      "tg12", "tgs"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y4" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y6" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y7" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "y8" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "y9");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y10" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y11" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y12" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y17" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "t1");
      param_names__.emplace_back(std::string() + "t1a");
      param_names__.emplace_back(std::string() + "t2");
      param_names__.emplace_back(std::string() + "t3");
      param_names__.emplace_back(std::string() + "t4");
      param_names__.emplace_back(std::string() + "t5");
      param_names__.emplace_back(std::string() + "t6");
      param_names__.emplace_back(std::string() + "t7");
      param_names__.emplace_back(std::string() + "t8");
      param_names__.emplace_back(std::string() + "t9");
      param_names__.emplace_back(std::string() + "t10");
      param_names__.emplace_back(std::string() + "t11");
      param_names__.emplace_back(std::string() + "t12");
      param_names__.emplace_back(std::string() + "tg1");
      param_names__.emplace_back(std::string() + "tg2");
      param_names__.emplace_back(std::string() + "tg3");
      param_names__.emplace_back(std::string() + "tg4");
      param_names__.emplace_back(std::string() + "tg5");
      param_names__.emplace_back(std::string() + "tg6");
      param_names__.emplace_back(std::string() + "tg7");
      param_names__.emplace_back(std::string() + "tg8");
      param_names__.emplace_back(std::string() + "tg9");
      param_names__.emplace_back(std::string() + "tg10");
      param_names__.emplace_back(std::string() + "tg11");
      param_names__.emplace_back(std::string() + "tg12");
      param_names__.emplace_back(std::string() + "tgs");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y4" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y6" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y7" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "y8" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "y9");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y10" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y11" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y12" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y17" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "t1");
      param_names__.emplace_back(std::string() + "t1a");
      param_names__.emplace_back(std::string() + "t2");
      param_names__.emplace_back(std::string() + "t3");
      param_names__.emplace_back(std::string() + "t4");
      param_names__.emplace_back(std::string() + "t5");
      param_names__.emplace_back(std::string() + "t6");
      param_names__.emplace_back(std::string() + "t7");
      param_names__.emplace_back(std::string() + "t8");
      param_names__.emplace_back(std::string() + "t9");
      param_names__.emplace_back(std::string() + "t10");
      param_names__.emplace_back(std::string() + "t11");
      param_names__.emplace_back(std::string() + "t12");
      param_names__.emplace_back(std::string() + "tg1");
      param_names__.emplace_back(std::string() + "tg2");
      param_names__.emplace_back(std::string() + "tg3");
      param_names__.emplace_back(std::string() + "tg4");
      param_names__.emplace_back(std::string() + "tg5");
      param_names__.emplace_back(std::string() + "tg6");
      param_names__.emplace_back(std::string() + "tg7");
      param_names__.emplace_back(std::string() + "tg8");
      param_names__.emplace_back(std::string() + "tg9");
      param_names__.emplace_back(std::string() + "tg10");
      param_names__.emplace_back(std::string() + "tg11");
      param_names__.emplace_back(std::string() + "tg12");
      param_names__.emplace_back(std::string() + "tgs");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"y6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y9\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y10\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"y11\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"y12\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"y17\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"t1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t1a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t3\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t4\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t5\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t6\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t7\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t8\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t9\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t10\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t11\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t12\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg3\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg4\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg5\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg6\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg7\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg8\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg9\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg10\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg11\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg12\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tgs\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"y6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y9\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y10\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"y11\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"y12\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"y17\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"t1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t1a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t3\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t4\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t5\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t6\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t7\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t8\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t9\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t10\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t11\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t12\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg3\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg4\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg5\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg6\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg7\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg8\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg9\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg10\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg11\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg12\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tgs\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = reduce_sum_m3_model_namespace::reduce_sum_m3_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return reduce_sum_m3_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp single-argument-lpmf.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace single_argument_lpmf_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 13> locations_array__ = 
{" (found before start of program)",
 " (in 'single-argument-lpmf.stan', line 3, column 4 to column 14)",
 " (in 'single-argument-lpmf.stan', line 2, column 23 to line 4, column 3)",
 " (in 'single-argument-lpmf.stan', line 6, column 4 to column 14)",
 " (in 'single-argument-lpmf.stan', line 5, column 24 to line 7, column 3)",
 " (in 'single-argument-lpmf.stan', line 9, column 4 to column 14)",
 " (in 'single-argument-lpmf.stan', line 8, column 22 to line 10, column 3)",
 " (in 'single-argument-lpmf.stan', line 12, column 4 to column 14)",
 " (in 'single-argument-lpmf.stan', line 11, column 24 to line 13, column 3)",
 " (in 'single-argument-lpmf.stan', line 15, column 4 to column 14)",
 " (in 'single-argument-lpmf.stan', line 14, column 25 to line 16, column 3)",
 " (in 'single-argument-lpmf.stan', line 18, column 4 to column 14)",
 " (in 'single-argument-lpmf.stan', line 17, column 23 to line 19, column 3)"};


template <bool propto__>
double
foo0_log(const int& y, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 1;
    return -5;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo0_log_functor__ {
template <bool propto__>
double
operator()(const int& y, std::ostream* pstream__)  const 
{
return foo0_log<propto__>(y, pstream__);
}
};

template <bool propto__>
double
foo1_lpmf(const int& y, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 3;
    return -5;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo1_lpmf_functor__ {
template <bool propto__>
double
operator()(const int& y, std::ostream* pstream__)  const 
{
return foo1_lpmf<propto__>(y, pstream__);
}
};

template <bool propto__, typename T_lp__, typename T_lp_accum__>
double
foo4_lp(const int& y, T_lp__& lp__, T_lp_accum__& lp_accum__,
        std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 5;
    return -5;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo4_lp_functor__ {
template <bool propto__, typename T_lp__, typename T_lp_accum__>
double
operator()(const int& y, T_lp__& lp__, T_lp_accum__& lp_accum__,
           std::ostream* pstream__)  const 
{
return foo4_lp<propto__>(y, lp__, lp_accum__, pstream__);
}
};

template <bool propto__, typename T0__>
stan::promote_args_t<T0__>
foo2_log(const T0__& y, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 7;
    return -5;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo2_log_functor__ {
template <bool propto__, typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& y, std::ostream* pstream__)  const 
{
return foo2_log<propto__>(y, pstream__);
}
};

template <bool propto__, typename T0__>
stan::promote_args_t<T0__>
foo3_lpdf(const T0__& y, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 9;
    return -5;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo3_lpdf_functor__ {
template <bool propto__, typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& y, std::ostream* pstream__)  const 
{
return foo3_lpdf<propto__>(y, pstream__);
}
};

template <bool propto__, typename T0__, typename T_lp__,
typename T_lp_accum__>
stan::promote_args_t<T0__>
foo5_lp(const T0__& y, T_lp__& lp__, T_lp_accum__& lp_accum__,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 11;
    return -5;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo5_lp_functor__ {
template <bool propto__, typename T0__, typename T_lp__,
typename T_lp_accum__>
stan::promote_args_t<T0__>
operator()(const T0__& y, T_lp__& lp__, T_lp_accum__& lp_accum__,
           std::ostream* pstream__)  const 
{
return foo5_lp<propto__>(y, lp__, lp_accum__, pstream__);
}
};

class single_argument_lpmf_model final : public model_base_crtp<single_argument_lpmf_model> {

 private:
   
  
 
 public:
  ~single_argument_lpmf_model() { }
  
  inline std::string model_name() const final { return "single_argument_lpmf_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  single_argument_lpmf_model(stan::io::var_context& context__,
                             unsigned int random_seed__ = 0,
                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "single_argument_lpmf_model_namespace::single_argument_lpmf_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "single_argument_lpmf_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "single_argument_lpmf_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = single_argument_lpmf_model_namespace::single_argument_lpmf_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return single_argument_lpmf_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp tilde-block.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace tilde_block_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 8> locations_array__ = 
{" (found before start of program)",
 " (in 'tilde-block.stan', line 5, column 4 to column 20)",
 " (in 'tilde-block.stan', line 11, column 27 to column 28)",
 " (in 'tilde-block.stan', line 11, column 8 to column 31)",
 " (in 'tilde-block.stan', line 8, column 4 to line 11, column 31)",
 " (in 'tilde-block.stan', line 9, column 34 to column 35)",
 " (in 'tilde-block.stan', line 9, column 8 to column 38)",
 " (in 'tilde-block.stan', line 2, column 4 to column 10)"};



class tilde_block_model final : public model_base_crtp<tilde_block_model> {

 private:
  int t; 
  
 
 public:
  ~tilde_block_model() { }
  
  inline std::string model_name() const final { return "tilde_block_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  tilde_block_model(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "tilde_block_model_namespace::tilde_block_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 7;
      context__.validate_dims("data initialization","t","int",
           std::vector<size_t>{});
      t = std::numeric_limits<int>::min();
      
      current_statement__ = 7;
      t = context__.vals_i("t")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "tilde_block_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ x = DUMMY_VAR__;
      
      current_statement__ = 1;
      x = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      {
        current_statement__ = 4;
        if (t) {
          current_statement__ = 5;
          if (logical_lt(x, 0)) {
            current_statement__ = 5;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 5;
            lp_accum__.add(-student_t_ccdf_log(0, 10, 0, 1));
          }
          current_statement__ = 6;
          lp_accum__.add(student_t_lpdf<propto__>(x, 10, 0, 1));
        } else {
          current_statement__ = 2;
          if (logical_lt(x, 0)) {
            current_statement__ = 2;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 2;
            lp_accum__.add(-normal_ccdf_log(0, 0, 1));
          }
          current_statement__ = 3;
          lp_accum__.add(normal_lpdf<propto__>(x, 0, 1));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "tilde_block_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double x = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      x = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      vars__.emplace_back(x);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double x = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      x = context__.vals_r("x")[(1 - 1)];
      double x_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      x_free__ = stan::math::lb_free(x, 0);
      vars__.emplace_back(x_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"x"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "x");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "x");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = tilde_block_model_namespace::tilde_block_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return tilde_block_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp transform.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace transform_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 116> locations_array__ = 
{" (found before start of program)",
 " (in 'transform.stan', line 11, column 2 to column 29)",
 " (in 'transform.stan', line 12, column 2 to column 29)",
 " (in 'transform.stan', line 13, column 2 to column 43)",
 " (in 'transform.stan', line 14, column 2 to column 37)",
 " (in 'transform.stan', line 15, column 2 to column 37)",
 " (in 'transform.stan', line 16, column 2 to column 30)",
 " (in 'transform.stan', line 17, column 2 to column 34)",
 " (in 'transform.stan', line 18, column 2 to column 49)",
 " (in 'transform.stan', line 19, column 2 to column 37)",
 " (in 'transform.stan', line 20, column 2 to column 37)",
 " (in 'transform.stan', line 21, column 2 to column 46)",
 " (in 'transform.stan', line 22, column 2 to column 33)",
 " (in 'transform.stan', line 23, column 2 to column 32)",
 " (in 'transform.stan', line 24, column 2 to column 50)",
 " (in 'transform.stan', line 25, column 2 to column 37)",
 " (in 'transform.stan', line 26, column 2 to column 36)",
 " (in 'transform.stan', line 27, column 2 to column 32)",
 " (in 'transform.stan', line 28, column 2 to column 32)",
 " (in 'transform.stan', line 31, column 2 to column 36)",
 " (in 'transform.stan', line 32, column 2 to column 36)",
 " (in 'transform.stan', line 33, column 2 to column 50)",
 " (in 'transform.stan', line 34, column 2 to column 44)",
 " (in 'transform.stan', line 35, column 2 to column 44)",
 " (in 'transform.stan', line 36, column 2 to column 37)",
 " (in 'transform.stan', line 37, column 2 to column 41)",
 " (in 'transform.stan', line 38, column 2 to column 56)",
 " (in 'transform.stan', line 39, column 2 to column 44)",
 " (in 'transform.stan', line 40, column 2 to column 45)",
 " (in 'transform.stan', line 41, column 2 to column 54)",
 " (in 'transform.stan', line 42, column 2 to column 41)",
 " (in 'transform.stan', line 43, column 2 to column 40)",
 " (in 'transform.stan', line 44, column 2 to column 58)",
 " (in 'transform.stan', line 45, column 2 to column 45)",
 " (in 'transform.stan', line 46, column 2 to column 44)",
 " (in 'transform.stan', line 47, column 2 to column 40)",
 " (in 'transform.stan', line 48, column 2 to column 40)",
 " (in 'transform.stan', line 2, column 2 to column 17)",
 " (in 'transform.stan', line 3, column 2 to column 17)",
 " (in 'transform.stan', line 4, column 2 to column 17)",
 " (in 'transform.stan', line 5, column 10 to column 11)",
 " (in 'transform.stan', line 5, column 12 to column 13)",
 " (in 'transform.stan', line 5, column 14 to column 15)",
 " (in 'transform.stan', line 5, column 2 to column 17)",
 " (in 'transform.stan', line 6, column 15 to column 16)",
 " (in 'transform.stan', line 6, column 17 to column 18)",
 " (in 'transform.stan', line 6, column 9 to column 10)",
 " (in 'transform.stan', line 6, column 2 to column 20)",
 " (in 'transform.stan', line 7, column 19 to column 20)",
 " (in 'transform.stan', line 7, column 21 to column 22)",
 " (in 'transform.stan', line 7, column 13 to column 14)",
 " (in 'transform.stan', line 7, column 2 to column 24)",
 " (in 'transform.stan', line 8, column 17 to column 18)",
 " (in 'transform.stan', line 8, column 9 to column 10)",
 " (in 'transform.stan', line 8, column 11 to column 12)",
 " (in 'transform.stan', line 8, column 2 to column 20)",
 " (in 'transform.stan', line 11, column 26 to column 27)",
 " (in 'transform.stan', line 12, column 26 to column 27)",
 " (in 'transform.stan', line 13, column 40 to column 41)",
 " (in 'transform.stan', line 14, column 34 to column 35)",
 " (in 'transform.stan', line 15, column 34 to column 35)",
 " (in 'transform.stan', line 16, column 27 to column 28)",
 " (in 'transform.stan', line 17, column 31 to column 32)",
 " (in 'transform.stan', line 18, column 46 to column 47)",
 " (in 'transform.stan', line 19, column 32 to column 33)",
 " (in 'transform.stan', line 19, column 34 to column 35)",
 " (in 'transform.stan', line 20, column 30 to column 31)",
 " (in 'transform.stan', line 20, column 32 to column 33)",
 " (in 'transform.stan', line 20, column 34 to column 35)",
 " (in 'transform.stan', line 21, column 38 to column 39)",
 " (in 'transform.stan', line 22, column 30 to column 31)",
 " (in 'transform.stan', line 22, column 22 to column 23)",
 " (in 'transform.stan', line 23, column 27 to column 28)",
 " (in 'transform.stan', line 23, column 29 to column 30)",
 " (in 'transform.stan', line 23, column 19 to column 20)",
 " (in 'transform.stan', line 24, column 42 to column 43)",
 " (in 'transform.stan', line 25, column 34 to column 35)",
 " (in 'transform.stan', line 25, column 26 to column 27)",
 " (in 'transform.stan', line 26, column 31 to column 32)",
 " (in 'transform.stan', line 26, column 33 to column 34)",
 " (in 'transform.stan', line 26, column 23 to column 24)",
 " (in 'transform.stan', line 27, column 22 to column 23)",
 " (in 'transform.stan', line 27, column 24 to column 25)",
 " (in 'transform.stan', line 28, column 29 to column 30)",
 " (in 'transform.stan', line 28, column 19 to column 20)",
 " (in 'transform.stan', line 28, column 21 to column 22)",
 " (in 'transform.stan', line 31, column 27 to column 28)",
 " (in 'transform.stan', line 32, column 27 to column 28)",
 " (in 'transform.stan', line 33, column 41 to column 42)",
 " (in 'transform.stan', line 34, column 35 to column 36)",
 " (in 'transform.stan', line 35, column 35 to column 36)",
 " (in 'transform.stan', line 36, column 28 to column 29)",
 " (in 'transform.stan', line 37, column 32 to column 33)",
 " (in 'transform.stan', line 38, column 47 to column 48)",
 " (in 'transform.stan', line 39, column 33 to column 34)",
 " (in 'transform.stan', line 39, column 35 to column 36)",
 " (in 'transform.stan', line 40, column 31 to column 32)",
 " (in 'transform.stan', line 40, column 33 to column 34)",
 " (in 'transform.stan', line 40, column 35 to column 36)",
 " (in 'transform.stan', line 41, column 38 to column 39)",
 " (in 'transform.stan', line 42, column 31 to column 32)",
 " (in 'transform.stan', line 42, column 22 to column 23)",
 " (in 'transform.stan', line 43, column 28 to column 29)",
 " (in 'transform.stan', line 43, column 30 to column 31)",
 " (in 'transform.stan', line 43, column 19 to column 20)",
 " (in 'transform.stan', line 44, column 42 to column 43)",
 " (in 'transform.stan', line 45, column 35 to column 36)",
 " (in 'transform.stan', line 45, column 26 to column 27)",
 " (in 'transform.stan', line 46, column 32 to column 33)",
 " (in 'transform.stan', line 46, column 34 to column 35)",
 " (in 'transform.stan', line 46, column 23 to column 24)",
 " (in 'transform.stan', line 47, column 22 to column 23)",
 " (in 'transform.stan', line 47, column 24 to column 25)",
 " (in 'transform.stan', line 48, column 30 to column 31)",
 " (in 'transform.stan', line 48, column 19 to column 20)",
 " (in 'transform.stan', line 48, column 21 to column 22)"};



class transform_model final : public model_base_crtp<transform_model> {

 private:
  int n;
  int m;
  int k;
  std::vector<std::vector<std::vector<double>>> ds;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> dv;
  std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> dr;
  std::vector<Eigen::Matrix<double, -1, -1>> dm; 
  
 
 public:
  ~transform_model() { }
  
  inline std::string model_name() const final { return "transform_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  transform_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "transform_model_namespace::transform_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 37;
      context__.validate_dims("data initialization","n","int",
           std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 37;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 37;
      check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 38;
      context__.validate_dims("data initialization","m","int",
           std::vector<size_t>{});
      m = std::numeric_limits<int>::min();
      
      current_statement__ = 38;
      m = context__.vals_i("m")[(1 - 1)];
      current_statement__ = 38;
      check_greater_or_equal(function__, "m", m, 1);
      current_statement__ = 39;
      context__.validate_dims("data initialization","k","int",
           std::vector<size_t>{});
      k = std::numeric_limits<int>::min();
      
      current_statement__ = 39;
      k = context__.vals_i("k")[(1 - 1)];
      current_statement__ = 39;
      check_greater_or_equal(function__, "k", k, 1);
      current_statement__ = 40;
      validate_non_negative_index("ds", "n", n);
      current_statement__ = 41;
      validate_non_negative_index("ds", "m", m);
      current_statement__ = 42;
      validate_non_negative_index("ds", "k", k);
      current_statement__ = 43;
      context__.validate_dims("data initialization","ds","double",
           std::vector<size_t>{static_cast<size_t>(n),
            static_cast<size_t>(m), static_cast<size_t>(k)});
      ds = std::vector<std::vector<std::vector<double>>>(n, std::vector<std::vector<double>>(m, std::vector<double>(k, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> ds_flat__;
        current_statement__ = 43;
        ds_flat__ = context__.vals_r("ds");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 43;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 43;
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              current_statement__ = 43;
              assign(ds, ds_flat__[(pos__ - 1)],
                "assigning variable ds", index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
              current_statement__ = 43;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 44;
      validate_non_negative_index("dv", "n", n);
      current_statement__ = 45;
      validate_non_negative_index("dv", "m", m);
      current_statement__ = 46;
      validate_non_negative_index("dv", "k", k);
      current_statement__ = 47;
      context__.validate_dims("data initialization","dv","double",
           std::vector<size_t>{static_cast<size_t>(n),
            static_cast<size_t>(m), static_cast<size_t>(k)});
      dv = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(n, std::vector<Eigen::Matrix<double, -1, 1>>(m, Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> dv_flat__;
        current_statement__ = 47;
        dv_flat__ = context__.vals_r("dv");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 47;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 47;
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              current_statement__ = 47;
              assign(dv, dv_flat__[(pos__ - 1)],
                "assigning variable dv", index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
              current_statement__ = 47;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 48;
      validate_non_negative_index("dr", "n", n);
      current_statement__ = 49;
      validate_non_negative_index("dr", "m", m);
      current_statement__ = 50;
      validate_non_negative_index("dr", "k", k);
      current_statement__ = 51;
      context__.validate_dims("data initialization","dr","double",
           std::vector<size_t>{static_cast<size_t>(n),
            static_cast<size_t>(m), static_cast<size_t>(k)});
      dr = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(n, std::vector<Eigen::Matrix<double, 1, -1>>(m, Eigen::Matrix<double, 1, -1>::Constant(k, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> dr_flat__;
        current_statement__ = 51;
        dr_flat__ = context__.vals_r("dr");
        current_statement__ = 51;
        pos__ = 1;
        current_statement__ = 51;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 51;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 51;
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              current_statement__ = 51;
              assign(dr, dr_flat__[(pos__ - 1)],
                "assigning variable dr", index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
              current_statement__ = 51;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 52;
      validate_non_negative_index("dm", "n", n);
      current_statement__ = 53;
      validate_non_negative_index("dm", "m", m);
      current_statement__ = 54;
      validate_non_negative_index("dm", "k", k);
      current_statement__ = 55;
      context__.validate_dims("data initialization","dm","double",
           std::vector<size_t>{static_cast<size_t>(n),
            static_cast<size_t>(m), static_cast<size_t>(k)});
      dm = std::vector<Eigen::Matrix<double, -1, -1>>(n, Eigen::Matrix<double, -1, -1>::Constant(m, k, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> dm_flat__;
        current_statement__ = 55;
        dm_flat__ = context__.vals_r("dm");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 55;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 55;
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              current_statement__ = 55;
              assign(dm, dm_flat__[(pos__ - 1)],
                "assigning variable dm", index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
              current_statement__ = 55;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 56;
      validate_non_negative_index("p_1", "k", k);
      current_statement__ = 57;
      validate_non_negative_index("p_2", "k", k);
      current_statement__ = 58;
      validate_non_negative_index("p_3", "k", k);
      current_statement__ = 59;
      validate_non_negative_index("p_4", "k", k);
      current_statement__ = 60;
      validate_non_negative_index("p_5", "k", k);
      current_statement__ = 61;
      validate_non_negative_index("p_6", "k", k);
      current_statement__ = 62;
      validate_non_negative_index("p_7", "k", k);
      current_statement__ = 63;
      validate_non_negative_index("p_8", "k", k);
      current_statement__ = 64;
      validate_non_negative_index("p_9", "m", m);
      current_statement__ = 65;
      validate_non_negative_index("p_9", "k", k);
      current_statement__ = 66;
      validate_non_negative_index("p_10", "n", n);
      current_statement__ = 67;
      validate_non_negative_index("p_10", "m", m);
      current_statement__ = 68;
      validate_non_negative_index("p_10", "k", k);
      current_statement__ = 69;
      validate_non_negative_index("pv_1", "k", k);
      current_statement__ = 70;
      validate_non_negative_index("pv_2", "m", m);
      current_statement__ = 71;
      validate_non_negative_index("pv_2", "k", k);
      current_statement__ = 72;
      validate_non_negative_index("pv_3", "n", n);
      current_statement__ = 73;
      validate_non_negative_index("pv_3", "m", m);
      current_statement__ = 74;
      validate_non_negative_index("pv_3", "k", k);
      current_statement__ = 75;
      validate_non_negative_index("pr_1", "k", k);
      current_statement__ = 76;
      validate_non_negative_index("pr_2", "m", m);
      current_statement__ = 77;
      validate_non_negative_index("pr_2", "k", k);
      current_statement__ = 78;
      validate_non_negative_index("pr_3", "n", n);
      current_statement__ = 79;
      validate_non_negative_index("pr_3", "m", m);
      current_statement__ = 80;
      validate_non_negative_index("pr_3", "k", k);
      current_statement__ = 81;
      validate_non_negative_index("pm_1", "m", m);
      current_statement__ = 82;
      validate_non_negative_index("pm_1", "k", k);
      current_statement__ = 83;
      validate_non_negative_index("pm_2", "n", n);
      current_statement__ = 84;
      validate_non_negative_index("pm_2", "m", m);
      current_statement__ = 85;
      validate_non_negative_index("pm_2", "k", k);
      current_statement__ = 86;
      validate_non_negative_index("tp_1", "k", k);
      current_statement__ = 87;
      validate_non_negative_index("tp_2", "k", k);
      current_statement__ = 88;
      validate_non_negative_index("tp_3", "k", k);
      current_statement__ = 89;
      validate_non_negative_index("tp_4", "k", k);
      current_statement__ = 90;
      validate_non_negative_index("tp_5", "k", k);
      current_statement__ = 91;
      validate_non_negative_index("tp_6", "k", k);
      current_statement__ = 92;
      validate_non_negative_index("tp_7", "k", k);
      current_statement__ = 93;
      validate_non_negative_index("tp_8", "k", k);
      current_statement__ = 94;
      validate_non_negative_index("tp_9", "m", m);
      current_statement__ = 95;
      validate_non_negative_index("tp_9", "k", k);
      current_statement__ = 96;
      validate_non_negative_index("tp_10", "n", n);
      current_statement__ = 97;
      validate_non_negative_index("tp_10", "m", m);
      current_statement__ = 98;
      validate_non_negative_index("tp_10", "k", k);
      current_statement__ = 99;
      validate_non_negative_index("tpv_1", "k", k);
      current_statement__ = 100;
      validate_non_negative_index("tpv_2", "m", m);
      current_statement__ = 101;
      validate_non_negative_index("tpv_2", "k", k);
      current_statement__ = 102;
      validate_non_negative_index("tpv_3", "n", n);
      current_statement__ = 103;
      validate_non_negative_index("tpv_3", "m", m);
      current_statement__ = 104;
      validate_non_negative_index("tpv_3", "k", k);
      current_statement__ = 105;
      validate_non_negative_index("tpr_1", "k", k);
      current_statement__ = 106;
      validate_non_negative_index("tpr_2", "m", m);
      current_statement__ = 107;
      validate_non_negative_index("tpr_2", "k", k);
      current_statement__ = 108;
      validate_non_negative_index("tpr_3", "n", n);
      current_statement__ = 109;
      validate_non_negative_index("tpr_3", "m", m);
      current_statement__ = 110;
      validate_non_negative_index("tpr_3", "k", k);
      current_statement__ = 111;
      validate_non_negative_index("tpm_1", "m", m);
      current_statement__ = 112;
      validate_non_negative_index("tpm_1", "k", k);
      current_statement__ = 113;
      validate_non_negative_index("tpm_2", "n", n);
      current_statement__ = 114;
      validate_non_negative_index("tpm_2", "m", m);
      current_statement__ = 115;
      validate_non_negative_index("tpm_2", "k", k);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = k + k + k + k + k + k + k + k + (m * k) + (n * m * k)
       + k + (m * k) + (n * m * k) + k + (m * k) + (n * m * k) + (m * k)
       + (n * m * k);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "transform_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> p_1 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                          
      
      current_statement__ = 1;
      p_1 = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
              rvalue(ds, "ds", index_uni(1), index_uni(1)), lp__, k);
      current_statement__ = 1;
      check_matching_dims("constraint", "p_1", p_1, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<local_scalar_t__> p_2 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                          
      
      current_statement__ = 2;
      p_2 = in__.template read_constrain_ub<std::vector<local_scalar_t__>, jacobian__>(
              rvalue(ds, "ds", index_uni(1), index_uni(1)), lp__, k);
      current_statement__ = 2;
      check_matching_dims("constraint", "p_2", p_2, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<local_scalar_t__> p_3 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                          
      
      current_statement__ = 3;
      p_3 = in__.template read_constrain_lub<std::vector<local_scalar_t__>, jacobian__>(
              rvalue(ds, "ds", index_uni(1), index_uni(1)),
              rvalue(ds, "ds", index_uni(1), index_uni(2)), lp__, k);
      current_statement__ = 3;
      check_matching_dims("constraint", "p_3", p_3, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 3;
      check_matching_dims("constraint", "p_3", p_3, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      std::vector<local_scalar_t__> p_4 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                          
      
      current_statement__ = 4;
      p_4 = in__.template read_constrain_lub<std::vector<local_scalar_t__>, jacobian__>(
              0, rvalue(ds, "ds", index_uni(1), index_uni(2)), lp__, k);
      current_statement__ = 4;
      check_matching_dims("constraint", "p_4", p_4, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      std::vector<local_scalar_t__> p_5 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                          
      
      current_statement__ = 5;
      p_5 = in__.template read_constrain_lub<std::vector<local_scalar_t__>, jacobian__>(
              rvalue(ds, "ds", index_uni(1), index_uni(1)), 1, lp__, k);
      current_statement__ = 5;
      check_matching_dims("constraint", "p_5", p_5, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<local_scalar_t__> p_6 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                          
      
      current_statement__ = 6;
      p_6 = in__.template read_constrain_offset_multiplier<std::vector<local_scalar_t__>, jacobian__>(
              rvalue(ds, "ds", index_uni(1), index_uni(1)), 1, lp__, k);
      current_statement__ = 6;
      check_matching_dims("constraint", "p_6", p_6, "offset",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<local_scalar_t__> p_7 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                          
      
      current_statement__ = 7;
      p_7 = in__.template read_constrain_offset_multiplier<std::vector<local_scalar_t__>, jacobian__>(
              0, rvalue(ds, "ds", index_uni(1), index_uni(1)), lp__, k);
      current_statement__ = 7;
      check_matching_dims("constraint", "p_7", p_7, "multiplier",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<local_scalar_t__> p_8 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                          
      
      current_statement__ = 8;
      p_8 = in__.template read_constrain_offset_multiplier<std::vector<local_scalar_t__>, jacobian__>(
              rvalue(ds, "ds", index_uni(1), index_uni(1)),
              rvalue(ds, "ds", index_uni(1), index_uni(2)), lp__, k);
      current_statement__ = 8;
      check_matching_dims("constraint", "p_8", p_8, "offset",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 8;
      check_matching_dims("constraint", "p_8", p_8, "multiplier",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      std::vector<std::vector<local_scalar_t__>> p_9 = std::vector<std::vector<local_scalar_t__>>(m, std::vector<local_scalar_t__>(k, DUMMY_VAR__));
                                                       
      
      current_statement__ = 9;
      p_9 = in__.template read_constrain_lub<std::vector<std::vector<local_scalar_t__>>, jacobian__>(
              rvalue(ds, "ds", index_uni(1)), 1, lp__, m, k);
      current_statement__ = 9;
      check_matching_dims("constraint", "p_9", p_9, "lower",
                          rvalue(ds, "ds", index_uni(1)));
      std::vector<std::vector<std::vector<local_scalar_t__>>> p_10 = 
      std::vector<std::vector<std::vector<local_scalar_t__>>>(n, std::vector<std::vector<local_scalar_t__>>(m, std::vector<local_scalar_t__>(k, DUMMY_VAR__)));
      
      
      current_statement__ = 10;
      p_10 = in__.template read_constrain_lub<std::vector<std::vector<std::vector<local_scalar_t__>>>, jacobian__>(
               0, ds, lp__, n, m, k);
      current_statement__ = 10;
      check_matching_dims("constraint", "p_10", p_10, "upper", ds);
      Eigen::Matrix<local_scalar_t__, -1, 1> pv_1 = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(k, DUMMY_VAR__);
                                                    
      
      current_statement__ = 11;
      pv_1 = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
               rvalue(dv, "dv", index_uni(1), index_uni(1)),
               rvalue(dv, "dv", index_uni(1), index_uni(2)), lp__, k);
      current_statement__ = 11;
      check_matching_dims("constraint", "pv_1", pv_1, "lower",
                          rvalue(dv, "dv", index_uni(1), index_uni(1)));
      current_statement__ = 11;
      check_matching_dims("constraint", "pv_1", pv_1, "upper",
                          rvalue(dv, "dv", index_uni(1), index_uni(2)));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> pv_2 = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(m, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(k, DUMMY_VAR__));
                                                                 
      
      current_statement__ = 12;
      pv_2 = in__.template read_constrain_lb<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>, jacobian__>(
               rvalue(dv, "dv", index_uni(1)), lp__, m, k);
      current_statement__ = 12;
      check_matching_dims("constraint", "pv_2", pv_2, "lower",
                          rvalue(dv, "dv", index_uni(1)));
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> pv_3 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(n, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(m, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(k, DUMMY_VAR__)));
      
      
      current_statement__ = 13;
      pv_3 = in__.template read_constrain_ub<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>, jacobian__>(
               dv, lp__, n, m, k);
      current_statement__ = 13;
      check_matching_dims("constraint", "pv_3", pv_3, "upper", dv);
      Eigen::Matrix<local_scalar_t__, 1, -1> pr_1 = Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(k, DUMMY_VAR__);
                                                    
      
      current_statement__ = 14;
      pr_1 = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, 1, -1>, jacobian__>(
               rvalue(dr, "dr", index_uni(1), index_uni(1)),
               rvalue(dr, "dr", index_uni(1), index_uni(2)), lp__, k);
      current_statement__ = 14;
      check_matching_dims("constraint", "pr_1", pr_1, "lower",
                          rvalue(dr, "dr", index_uni(1), index_uni(1)));
      current_statement__ = 14;
      check_matching_dims("constraint", "pr_1", pr_1, "upper",
                          rvalue(dr, "dr", index_uni(1), index_uni(2)));
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> pr_2 = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(m, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(k, DUMMY_VAR__));
                                                                 
      
      current_statement__ = 15;
      pr_2 = in__.template read_constrain_lb<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>, jacobian__>(
               rvalue(dr, "dr", index_uni(1)), lp__, m, k);
      current_statement__ = 15;
      check_matching_dims("constraint", "pr_2", pr_2, "lower",
                          rvalue(dr, "dr", index_uni(1)));
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> pr_3 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(n, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(m, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(k, DUMMY_VAR__)));
      
      
      current_statement__ = 16;
      pr_3 = in__.template read_constrain_ub<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>, jacobian__>(
               dr, lp__, n, m, k);
      current_statement__ = 16;
      check_matching_dims("constraint", "pr_3", pr_3, "upper", dr);
      Eigen::Matrix<local_scalar_t__, -1, -1> pm_1 = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(m, k, DUMMY_VAR__);
                                                     
      
      current_statement__ = 17;
      pm_1 = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(
               rvalue(dm, "dm", index_uni(1)), lp__, m, k);
      current_statement__ = 17;
      check_matching_dims("constraint", "pm_1", pm_1, "lower",
                          rvalue(dm, "dm", index_uni(1)));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> pm_2 = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(n, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(m, k, DUMMY_VAR__));
                                                                  
      
      current_statement__ = 18;
      pm_2 = in__.template read_constrain_ub<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>, jacobian__>(
               dm, lp__, n, m, k);
      current_statement__ = 18;
      check_matching_dims("constraint", "pm_2", pm_2, "upper", dm);
      std::vector<local_scalar_t__> tp_1 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                           
      
      current_statement__ = 19;
      assign(tp_1, p_1, "assigning variable tp_1");
      current_statement__ = 19;
      check_matching_dims("constraint", "tp_1", tp_1, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<local_scalar_t__> tp_2 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                           
      
      current_statement__ = 20;
      assign(tp_2, p_2, "assigning variable tp_2");
      current_statement__ = 20;
      check_matching_dims("constraint", "tp_2", tp_2, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<local_scalar_t__> tp_3 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                           
      
      current_statement__ = 21;
      assign(tp_3, p_3, "assigning variable tp_3");
      current_statement__ = 21;
      check_matching_dims("constraint", "tp_3", tp_3, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 21;
      check_matching_dims("constraint", "tp_3", tp_3, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      std::vector<local_scalar_t__> tp_4 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                           
      
      current_statement__ = 22;
      assign(tp_4, p_4, "assigning variable tp_4");
      current_statement__ = 22;
      check_matching_dims("constraint", "tp_4", tp_4, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      std::vector<local_scalar_t__> tp_5 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                           
      
      current_statement__ = 23;
      assign(tp_5, p_5, "assigning variable tp_5");
      current_statement__ = 23;
      check_matching_dims("constraint", "tp_5", tp_5, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<local_scalar_t__> tp_6 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                           
      
      current_statement__ = 24;
      assign(tp_6, p_6, "assigning variable tp_6");
      current_statement__ = 24;
      check_matching_dims("constraint", "tp_6", tp_6, "offset",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<local_scalar_t__> tp_7 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                           
      
      current_statement__ = 25;
      assign(tp_7, p_7, "assigning variable tp_7");
      current_statement__ = 25;
      check_matching_dims("constraint", "tp_7", tp_7, "multiplier",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<local_scalar_t__> tp_8 = std::vector<local_scalar_t__>(k, DUMMY_VAR__);
                                           
      
      current_statement__ = 26;
      assign(tp_8, p_8, "assigning variable tp_8");
      current_statement__ = 26;
      check_matching_dims("constraint", "tp_8", tp_8, "offset",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 26;
      check_matching_dims("constraint", "tp_8", tp_8, "multiplier",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      std::vector<std::vector<local_scalar_t__>> tp_9 = std::vector<std::vector<local_scalar_t__>>(m, std::vector<local_scalar_t__>(k, DUMMY_VAR__));
                                                        
      
      current_statement__ = 27;
      assign(tp_9, p_9, "assigning variable tp_9");
      current_statement__ = 27;
      check_matching_dims("constraint", "tp_9", tp_9, "lower",
                          rvalue(ds, "ds", index_uni(1)));
      std::vector<std::vector<std::vector<local_scalar_t__>>> tp_10 = 
      std::vector<std::vector<std::vector<local_scalar_t__>>>(n, std::vector<std::vector<local_scalar_t__>>(m, std::vector<local_scalar_t__>(k, DUMMY_VAR__)));
      
      
      current_statement__ = 28;
      assign(tp_10, p_10, "assigning variable tp_10");
      current_statement__ = 28;
      check_matching_dims("constraint", "tp_10", tp_10, "upper", ds);
      Eigen::Matrix<local_scalar_t__, -1, 1> tpv_1 = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(k, DUMMY_VAR__);
                                                     
      
      current_statement__ = 29;
      assign(tpv_1, pv_1, "assigning variable tpv_1");
      current_statement__ = 29;
      check_matching_dims("constraint", "tpv_1", tpv_1, "lower",
                          rvalue(dv, "dv", index_uni(1), index_uni(1)));
      current_statement__ = 29;
      check_matching_dims("constraint", "tpv_1", tpv_1, "upper",
                          rvalue(dv, "dv", index_uni(1), index_uni(2)));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tpv_2 = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(m, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(k, DUMMY_VAR__));
                                                                  
      
      current_statement__ = 30;
      assign(tpv_2, pv_2, "assigning variable tpv_2");
      current_statement__ = 30;
      check_matching_dims("constraint", "tpv_2", tpv_2, "lower",
                          rvalue(dv, "dv", index_uni(1)));
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> tpv_3 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(n, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(m, Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(k, DUMMY_VAR__)));
      
      
      current_statement__ = 31;
      assign(tpv_3, pv_3, "assigning variable tpv_3");
      current_statement__ = 31;
      check_matching_dims("constraint", "tpv_3", tpv_3, "upper", dv);
      Eigen::Matrix<local_scalar_t__, 1, -1> tpr_1 = Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(k, DUMMY_VAR__);
                                                     
      
      current_statement__ = 32;
      assign(tpr_1, pr_1, "assigning variable tpr_1");
      current_statement__ = 32;
      check_matching_dims("constraint", "tpr_1", tpr_1, "lower",
                          rvalue(dr, "dr", index_uni(1), index_uni(1)));
      current_statement__ = 32;
      check_matching_dims("constraint", "tpr_1", tpr_1, "upper",
                          rvalue(dr, "dr", index_uni(1), index_uni(2)));
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> tpr_2 = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(m, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(k, DUMMY_VAR__));
                                                                  
      
      current_statement__ = 33;
      assign(tpr_2, pr_2, "assigning variable tpr_2");
      current_statement__ = 33;
      check_matching_dims("constraint", "tpr_2", tpr_2, "lower",
                          rvalue(dr, "dr", index_uni(1)));
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> tpr_3 = 
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(n, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(m, Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(k, DUMMY_VAR__)));
      
      
      current_statement__ = 34;
      assign(tpr_3, pr_3, "assigning variable tpr_3");
      current_statement__ = 34;
      check_matching_dims("constraint", "tpr_3", tpr_3, "upper", dr);
      Eigen::Matrix<local_scalar_t__, -1, -1> tpm_1 = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(m, k, DUMMY_VAR__);
                                                      
      
      current_statement__ = 35;
      assign(tpm_1, pm_1, "assigning variable tpm_1");
      current_statement__ = 35;
      check_matching_dims("constraint", "tpm_1", tpm_1, "lower",
                          rvalue(dm, "dm", index_uni(1)));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> tpm_2 = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(n, Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(m, k, DUMMY_VAR__));
                                                                   
      
      current_statement__ = 36;
      assign(tpm_2, pm_2, "assigning variable tpm_2");
      current_statement__ = 36;
      check_matching_dims("constraint", "tpm_2", tpm_2, "upper", dm);
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 19;
        check_greater_or_equal(function__, "tp_1[sym1__]",
                               tp_1[(sym1__ - 1)],
                               rvalue(ds, "ds", index_uni(1), index_uni(1))[
                               (sym1__ - 1)]);
      }
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 20;
        check_less_or_equal(function__, "tp_2[sym1__]", tp_2[(sym1__ - 1)],
                            rvalue(ds, "ds", index_uni(1), index_uni(1))[
                            (sym1__ - 1)]);
      }
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 21;
        check_greater_or_equal(function__, "tp_3[sym1__]",
                               tp_3[(sym1__ - 1)],
                               rvalue(ds, "ds", index_uni(1), index_uni(1))[
                               (sym1__ - 1)]);
      }
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 21;
        check_less_or_equal(function__, "tp_3[sym1__]", tp_3[(sym1__ - 1)],
                            rvalue(ds, "ds", index_uni(1), index_uni(2))[
                            (sym1__ - 1)]);
      }
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 22;
        check_greater_or_equal(function__, "tp_4[sym1__]",
                               tp_4[(sym1__ - 1)], 0);
      }
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 22;
        check_less_or_equal(function__, "tp_4[sym1__]", tp_4[(sym1__ - 1)],
                            rvalue(ds, "ds", index_uni(1), index_uni(2))[
                            (sym1__ - 1)]);
      }
      current_statement__ = 23;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 23;
        check_greater_or_equal(function__, "tp_5[sym1__]",
                               tp_5[(sym1__ - 1)],
                               rvalue(ds, "ds", index_uni(1), index_uni(1))[
                               (sym1__ - 1)]);
      }
      current_statement__ = 23;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 23;
        check_less_or_equal(function__, "tp_5[sym1__]", tp_5[(sym1__ - 1)], 1);
      }
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 27;
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          current_statement__ = 27;
          check_greater_or_equal(function__, "tp_9[sym1__, sym2__]",
                                 tp_9[(sym1__ - 1)][(sym2__ - 1)],
                                 rvalue(ds, "ds", index_uni(1))[(sym1__ - 1)][
                                 (sym2__ - 1)]);
        }
      }
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 27;
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          current_statement__ = 27;
          check_less_or_equal(function__, "tp_9[sym1__, sym2__]",
                              tp_9[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 28;
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          current_statement__ = 28;
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            current_statement__ = 28;
            check_greater_or_equal(function__, "tp_10[sym1__, sym2__, sym3__]",
                                   tp_10[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], 0);
          }
        }
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 28;
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          current_statement__ = 28;
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            current_statement__ = 28;
            check_less_or_equal(function__, "tp_10[sym1__, sym2__, sym3__]",
                                tp_10[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)],
                                ds[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 29;
        check_greater_or_equal(function__, "tpv_1[sym1__]",
                               tpv_1[(sym1__ - 1)],
                               rvalue(dv, "dv", index_uni(1), index_uni(1))[
                               (sym1__ - 1)]);
      }
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 29;
        check_less_or_equal(function__, "tpv_1[sym1__]", tpv_1[(sym1__ - 1)],
                            rvalue(dv, "dv", index_uni(1), index_uni(2))[
                            (sym1__ - 1)]);
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 30;
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          current_statement__ = 30;
          check_greater_or_equal(function__, "tpv_2[sym1__, sym2__]",
                                 tpv_2[(sym1__ - 1)][(sym2__ - 1)],
                                 rvalue(dv, "dv", index_uni(1))[(sym1__ - 1)][
                                 (sym2__ - 1)]);
        }
      }
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 31;
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          current_statement__ = 31;
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            current_statement__ = 31;
            check_less_or_equal(function__, "tpv_3[sym1__, sym2__, sym3__]",
                                tpv_3[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)],
                                dv[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 32;
        check_greater_or_equal(function__, "tpr_1[sym1__]",
                               tpr_1[(sym1__ - 1)],
                               rvalue(dr, "dr", index_uni(1), index_uni(1))[
                               (sym1__ - 1)]);
      }
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 32;
        check_less_or_equal(function__, "tpr_1[sym1__]", tpr_1[(sym1__ - 1)],
                            rvalue(dr, "dr", index_uni(1), index_uni(2))[
                            (sym1__ - 1)]);
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 33;
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          current_statement__ = 33;
          check_greater_or_equal(function__, "tpr_2[sym1__, sym2__]",
                                 tpr_2[(sym1__ - 1)][(sym2__ - 1)],
                                 rvalue(dr, "dr", index_uni(1))[(sym1__ - 1)][
                                 (sym2__ - 1)]);
        }
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 34;
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          current_statement__ = 34;
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            current_statement__ = 34;
            check_less_or_equal(function__, "tpr_3[sym1__, sym2__, sym3__]",
                                tpr_3[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)],
                                dr[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 35;
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          current_statement__ = 35;
          check_greater_or_equal(function__, "tpm_1[sym1__, sym2__]",
                                 rvalue(tpm_1, "tpm_1",
                                   index_uni(sym1__), index_uni(sym2__)),
                                 rvalue(rvalue(dm, "dm", index_uni(1)),
                                   "dm[1]",
                                   index_uni(sym1__), index_uni(sym2__)));
        }
      }
      current_statement__ = 36;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 36;
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          current_statement__ = 36;
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            current_statement__ = 36;
            check_less_or_equal(function__, "tpm_2[sym1__, sym2__, sym3__]",
                                rvalue(tpm_2, "tpm_2",
                                  index_uni(sym1__), index_uni(sym2__),
                                    index_uni(sym3__)),
                                rvalue(dm, "dm",
                                  index_uni(sym1__), index_uni(sym2__),
                                    index_uni(sym3__)));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "transform_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> p_1 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 1;
      p_1 = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
              rvalue(ds, "ds", index_uni(1), index_uni(1)), lp__, k);
      current_statement__ = 1;
      check_matching_dims("constraint", "p_1", p_1, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<double> p_2 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 2;
      p_2 = in__.template read_constrain_ub<std::vector<local_scalar_t__>, jacobian__>(
              rvalue(ds, "ds", index_uni(1), index_uni(1)), lp__, k);
      current_statement__ = 2;
      check_matching_dims("constraint", "p_2", p_2, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<double> p_3 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 3;
      p_3 = in__.template read_constrain_lub<std::vector<local_scalar_t__>, jacobian__>(
              rvalue(ds, "ds", index_uni(1), index_uni(1)),
              rvalue(ds, "ds", index_uni(1), index_uni(2)), lp__, k);
      current_statement__ = 3;
      check_matching_dims("constraint", "p_3", p_3, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 3;
      check_matching_dims("constraint", "p_3", p_3, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      std::vector<double> p_4 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 4;
      p_4 = in__.template read_constrain_lub<std::vector<local_scalar_t__>, jacobian__>(
              0, rvalue(ds, "ds", index_uni(1), index_uni(2)), lp__, k);
      current_statement__ = 4;
      check_matching_dims("constraint", "p_4", p_4, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      std::vector<double> p_5 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 5;
      p_5 = in__.template read_constrain_lub<std::vector<local_scalar_t__>, jacobian__>(
              rvalue(ds, "ds", index_uni(1), index_uni(1)), 1, lp__, k);
      current_statement__ = 5;
      check_matching_dims("constraint", "p_5", p_5, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<double> p_6 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 6;
      p_6 = in__.template read_constrain_offset_multiplier<std::vector<local_scalar_t__>, jacobian__>(
              rvalue(ds, "ds", index_uni(1), index_uni(1)), 1, lp__, k);
      current_statement__ = 6;
      check_matching_dims("constraint", "p_6", p_6, "offset",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<double> p_7 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 7;
      p_7 = in__.template read_constrain_offset_multiplier<std::vector<local_scalar_t__>, jacobian__>(
              0, rvalue(ds, "ds", index_uni(1), index_uni(1)), lp__, k);
      current_statement__ = 7;
      check_matching_dims("constraint", "p_7", p_7, "multiplier",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<double> p_8 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 8;
      p_8 = in__.template read_constrain_offset_multiplier<std::vector<local_scalar_t__>, jacobian__>(
              rvalue(ds, "ds", index_uni(1), index_uni(1)),
              rvalue(ds, "ds", index_uni(1), index_uni(2)), lp__, k);
      current_statement__ = 8;
      check_matching_dims("constraint", "p_8", p_8, "offset",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 8;
      check_matching_dims("constraint", "p_8", p_8, "multiplier",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      std::vector<std::vector<double>> p_9 = std::vector<std::vector<double>>(m, std::vector<double>(k, std::numeric_limits<double>::quiet_NaN()));
                                             
      
      current_statement__ = 9;
      p_9 = in__.template read_constrain_lub<std::vector<std::vector<local_scalar_t__>>, jacobian__>(
              rvalue(ds, "ds", index_uni(1)), 1, lp__, m, k);
      current_statement__ = 9;
      check_matching_dims("constraint", "p_9", p_9, "lower",
                          rvalue(ds, "ds", index_uni(1)));
      std::vector<std::vector<std::vector<double>>> p_10 = std::vector<std::vector<std::vector<double>>>(n, std::vector<std::vector<double>>(m, std::vector<double>(k, std::numeric_limits<double>::quiet_NaN())));
                                                           
      
      current_statement__ = 10;
      p_10 = in__.template read_constrain_lub<std::vector<std::vector<std::vector<local_scalar_t__>>>, jacobian__>(
               0, ds, lp__, n, m, k);
      current_statement__ = 10;
      check_matching_dims("constraint", "p_10", p_10, "upper", ds);
      Eigen::Matrix<double, -1, 1> pv_1 = Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN());
                                          
      
      current_statement__ = 11;
      pv_1 = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
               rvalue(dv, "dv", index_uni(1), index_uni(1)),
               rvalue(dv, "dv", index_uni(1), index_uni(2)), lp__, k);
      current_statement__ = 11;
      check_matching_dims("constraint", "pv_1", pv_1, "lower",
                          rvalue(dv, "dv", index_uni(1), index_uni(1)));
      current_statement__ = 11;
      check_matching_dims("constraint", "pv_1", pv_1, "upper",
                          rvalue(dv, "dv", index_uni(1), index_uni(2)));
      std::vector<Eigen::Matrix<double, -1, 1>> pv_2 = std::vector<Eigen::Matrix<double, -1, 1>>(m, Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN()));
                                                       
      
      current_statement__ = 12;
      pv_2 = in__.template read_constrain_lb<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>, jacobian__>(
               rvalue(dv, "dv", index_uni(1)), lp__, m, k);
      current_statement__ = 12;
      check_matching_dims("constraint", "pv_2", pv_2, "lower",
                          rvalue(dv, "dv", index_uni(1)));
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> pv_3 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(n, std::vector<Eigen::Matrix<double, -1, 1>>(m, Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN())));
                                                                    
      
      current_statement__ = 13;
      pv_3 = in__.template read_constrain_ub<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>, jacobian__>(
               dv, lp__, n, m, k);
      current_statement__ = 13;
      check_matching_dims("constraint", "pv_3", pv_3, "upper", dv);
      Eigen::Matrix<double, 1, -1> pr_1 = Eigen::Matrix<double, 1, -1>::Constant(k, std::numeric_limits<double>::quiet_NaN());
                                          
      
      current_statement__ = 14;
      pr_1 = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, 1, -1>, jacobian__>(
               rvalue(dr, "dr", index_uni(1), index_uni(1)),
               rvalue(dr, "dr", index_uni(1), index_uni(2)), lp__, k);
      current_statement__ = 14;
      check_matching_dims("constraint", "pr_1", pr_1, "lower",
                          rvalue(dr, "dr", index_uni(1), index_uni(1)));
      current_statement__ = 14;
      check_matching_dims("constraint", "pr_1", pr_1, "upper",
                          rvalue(dr, "dr", index_uni(1), index_uni(2)));
      std::vector<Eigen::Matrix<double, 1, -1>> pr_2 = std::vector<Eigen::Matrix<double, 1, -1>>(m, Eigen::Matrix<double, 1, -1>::Constant(k, std::numeric_limits<double>::quiet_NaN()));
                                                       
      
      current_statement__ = 15;
      pr_2 = in__.template read_constrain_lb<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>, jacobian__>(
               rvalue(dr, "dr", index_uni(1)), lp__, m, k);
      current_statement__ = 15;
      check_matching_dims("constraint", "pr_2", pr_2, "lower",
                          rvalue(dr, "dr", index_uni(1)));
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> pr_3 = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(n, std::vector<Eigen::Matrix<double, 1, -1>>(m, Eigen::Matrix<double, 1, -1>::Constant(k, std::numeric_limits<double>::quiet_NaN())));
                                                                    
      
      current_statement__ = 16;
      pr_3 = in__.template read_constrain_ub<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>, jacobian__>(
               dr, lp__, n, m, k);
      current_statement__ = 16;
      check_matching_dims("constraint", "pr_3", pr_3, "upper", dr);
      Eigen::Matrix<double, -1, -1> pm_1 = Eigen::Matrix<double, -1, -1>::Constant(m, k, std::numeric_limits<double>::quiet_NaN());
                                           
      
      current_statement__ = 17;
      pm_1 = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(
               rvalue(dm, "dm", index_uni(1)), lp__, m, k);
      current_statement__ = 17;
      check_matching_dims("constraint", "pm_1", pm_1, "lower",
                          rvalue(dm, "dm", index_uni(1)));
      std::vector<Eigen::Matrix<double, -1, -1>> pm_2 = std::vector<Eigen::Matrix<double, -1, -1>>(n, Eigen::Matrix<double, -1, -1>::Constant(m, k, std::numeric_limits<double>::quiet_NaN()));
                                                        
      
      current_statement__ = 18;
      pm_2 = in__.template read_constrain_ub<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>, jacobian__>(
               dm, lp__, n, m, k);
      current_statement__ = 18;
      check_matching_dims("constraint", "pm_2", pm_2, "upper", dm);
      std::vector<double> tp_1 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                 
      
      std::vector<double> tp_2 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                 
      
      std::vector<double> tp_3 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                 
      
      std::vector<double> tp_4 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                 
      
      std::vector<double> tp_5 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                 
      
      std::vector<double> tp_6 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                 
      
      std::vector<double> tp_7 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                 
      
      std::vector<double> tp_8 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                 
      
      std::vector<std::vector<double>> tp_9 = std::vector<std::vector<double>>(m, std::vector<double>(k, std::numeric_limits<double>::quiet_NaN()));
                                              
      
      std::vector<std::vector<std::vector<double>>> tp_10 = std::vector<std::vector<std::vector<double>>>(n, std::vector<std::vector<double>>(m, std::vector<double>(k, std::numeric_limits<double>::quiet_NaN())));
                                                            
      
      Eigen::Matrix<double, -1, 1> tpv_1 = Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN());
                                           
      
      std::vector<Eigen::Matrix<double, -1, 1>> tpv_2 = std::vector<Eigen::Matrix<double, -1, 1>>(m, Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN()));
                                                        
      
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> tpv_3 = 
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(n, std::vector<Eigen::Matrix<double, -1, 1>>(m, Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN())));
      
      
      Eigen::Matrix<double, 1, -1> tpr_1 = Eigen::Matrix<double, 1, -1>::Constant(k, std::numeric_limits<double>::quiet_NaN());
                                           
      
      std::vector<Eigen::Matrix<double, 1, -1>> tpr_2 = std::vector<Eigen::Matrix<double, 1, -1>>(m, Eigen::Matrix<double, 1, -1>::Constant(k, std::numeric_limits<double>::quiet_NaN()));
                                                        
      
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> tpr_3 = 
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(n, std::vector<Eigen::Matrix<double, 1, -1>>(m, Eigen::Matrix<double, 1, -1>::Constant(k, std::numeric_limits<double>::quiet_NaN())));
      
      
      Eigen::Matrix<double, -1, -1> tpm_1 = Eigen::Matrix<double, -1, -1>::Constant(m, k, std::numeric_limits<double>::quiet_NaN());
                                            
      
      std::vector<Eigen::Matrix<double, -1, -1>> tpm_2 = std::vector<Eigen::Matrix<double, -1, -1>>(n, Eigen::Matrix<double, -1, -1>::Constant(m, k, std::numeric_limits<double>::quiet_NaN()));
                                                         
      
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_1[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_2[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_3[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_4[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_5[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_6[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_7[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_8[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          vars__.emplace_back(p_9[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
            vars__.emplace_back(
              p_10[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(pv_1[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          vars__.emplace_back(pv_2[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
            vars__.emplace_back(
              pv_3[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(pr_1[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          vars__.emplace_back(pr_2[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
            vars__.emplace_back(
              pr_3[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          vars__.emplace_back(
            rvalue(pm_1, "pm_1", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
            vars__.emplace_back(
              rvalue(pm_2, "pm_2",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 19;
      assign(tp_1, p_1, "assigning variable tp_1");
      current_statement__ = 19;
      check_matching_dims("constraint", "tp_1", tp_1, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 20;
      assign(tp_2, p_2, "assigning variable tp_2");
      current_statement__ = 20;
      check_matching_dims("constraint", "tp_2", tp_2, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 21;
      assign(tp_3, p_3, "assigning variable tp_3");
      current_statement__ = 21;
      check_matching_dims("constraint", "tp_3", tp_3, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 21;
      check_matching_dims("constraint", "tp_3", tp_3, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      current_statement__ = 22;
      assign(tp_4, p_4, "assigning variable tp_4");
      current_statement__ = 22;
      check_matching_dims("constraint", "tp_4", tp_4, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      current_statement__ = 23;
      assign(tp_5, p_5, "assigning variable tp_5");
      current_statement__ = 23;
      check_matching_dims("constraint", "tp_5", tp_5, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 24;
      assign(tp_6, p_6, "assigning variable tp_6");
      current_statement__ = 24;
      check_matching_dims("constraint", "tp_6", tp_6, "offset",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 25;
      assign(tp_7, p_7, "assigning variable tp_7");
      current_statement__ = 25;
      check_matching_dims("constraint", "tp_7", tp_7, "multiplier",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 26;
      assign(tp_8, p_8, "assigning variable tp_8");
      current_statement__ = 26;
      check_matching_dims("constraint", "tp_8", tp_8, "offset",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 26;
      check_matching_dims("constraint", "tp_8", tp_8, "multiplier",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      current_statement__ = 27;
      assign(tp_9, p_9, "assigning variable tp_9");
      current_statement__ = 27;
      check_matching_dims("constraint", "tp_9", tp_9, "lower",
                          rvalue(ds, "ds", index_uni(1)));
      current_statement__ = 28;
      assign(tp_10, p_10, "assigning variable tp_10");
      current_statement__ = 28;
      check_matching_dims("constraint", "tp_10", tp_10, "upper", ds);
      current_statement__ = 29;
      assign(tpv_1, pv_1, "assigning variable tpv_1");
      current_statement__ = 29;
      check_matching_dims("constraint", "tpv_1", tpv_1, "lower",
                          rvalue(dv, "dv", index_uni(1), index_uni(1)));
      current_statement__ = 29;
      check_matching_dims("constraint", "tpv_1", tpv_1, "upper",
                          rvalue(dv, "dv", index_uni(1), index_uni(2)));
      current_statement__ = 30;
      assign(tpv_2, pv_2, "assigning variable tpv_2");
      current_statement__ = 30;
      check_matching_dims("constraint", "tpv_2", tpv_2, "lower",
                          rvalue(dv, "dv", index_uni(1)));
      current_statement__ = 31;
      assign(tpv_3, pv_3, "assigning variable tpv_3");
      current_statement__ = 31;
      check_matching_dims("constraint", "tpv_3", tpv_3, "upper", dv);
      current_statement__ = 32;
      assign(tpr_1, pr_1, "assigning variable tpr_1");
      current_statement__ = 32;
      check_matching_dims("constraint", "tpr_1", tpr_1, "lower",
                          rvalue(dr, "dr", index_uni(1), index_uni(1)));
      current_statement__ = 32;
      check_matching_dims("constraint", "tpr_1", tpr_1, "upper",
                          rvalue(dr, "dr", index_uni(1), index_uni(2)));
      current_statement__ = 33;
      assign(tpr_2, pr_2, "assigning variable tpr_2");
      current_statement__ = 33;
      check_matching_dims("constraint", "tpr_2", tpr_2, "lower",
                          rvalue(dr, "dr", index_uni(1)));
      current_statement__ = 34;
      assign(tpr_3, pr_3, "assigning variable tpr_3");
      current_statement__ = 34;
      check_matching_dims("constraint", "tpr_3", tpr_3, "upper", dr);
      current_statement__ = 35;
      assign(tpm_1, pm_1, "assigning variable tpm_1");
      current_statement__ = 35;
      check_matching_dims("constraint", "tpm_1", tpm_1, "lower",
                          rvalue(dm, "dm", index_uni(1)));
      current_statement__ = 36;
      assign(tpm_2, pm_2, "assigning variable tpm_2");
      current_statement__ = 36;
      check_matching_dims("constraint", "tpm_2", tpm_2, "upper", dm);
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 19;
        check_greater_or_equal(function__, "tp_1[sym1__]",
                               tp_1[(sym1__ - 1)],
                               rvalue(ds, "ds", index_uni(1), index_uni(1))[
                               (sym1__ - 1)]);
      }
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 20;
        check_less_or_equal(function__, "tp_2[sym1__]", tp_2[(sym1__ - 1)],
                            rvalue(ds, "ds", index_uni(1), index_uni(1))[
                            (sym1__ - 1)]);
      }
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 21;
        check_greater_or_equal(function__, "tp_3[sym1__]",
                               tp_3[(sym1__ - 1)],
                               rvalue(ds, "ds", index_uni(1), index_uni(1))[
                               (sym1__ - 1)]);
      }
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 21;
        check_less_or_equal(function__, "tp_3[sym1__]", tp_3[(sym1__ - 1)],
                            rvalue(ds, "ds", index_uni(1), index_uni(2))[
                            (sym1__ - 1)]);
      }
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 22;
        check_greater_or_equal(function__, "tp_4[sym1__]",
                               tp_4[(sym1__ - 1)], 0);
      }
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 22;
        check_less_or_equal(function__, "tp_4[sym1__]", tp_4[(sym1__ - 1)],
                            rvalue(ds, "ds", index_uni(1), index_uni(2))[
                            (sym1__ - 1)]);
      }
      current_statement__ = 23;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 23;
        check_greater_or_equal(function__, "tp_5[sym1__]",
                               tp_5[(sym1__ - 1)],
                               rvalue(ds, "ds", index_uni(1), index_uni(1))[
                               (sym1__ - 1)]);
      }
      current_statement__ = 23;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 23;
        check_less_or_equal(function__, "tp_5[sym1__]", tp_5[(sym1__ - 1)], 1);
      }
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 27;
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          current_statement__ = 27;
          check_greater_or_equal(function__, "tp_9[sym1__, sym2__]",
                                 tp_9[(sym1__ - 1)][(sym2__ - 1)],
                                 rvalue(ds, "ds", index_uni(1))[(sym1__ - 1)][
                                 (sym2__ - 1)]);
        }
      }
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 27;
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          current_statement__ = 27;
          check_less_or_equal(function__, "tp_9[sym1__, sym2__]",
                              tp_9[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 28;
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          current_statement__ = 28;
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            current_statement__ = 28;
            check_greater_or_equal(function__, "tp_10[sym1__, sym2__, sym3__]",
                                   tp_10[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], 0);
          }
        }
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 28;
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          current_statement__ = 28;
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            current_statement__ = 28;
            check_less_or_equal(function__, "tp_10[sym1__, sym2__, sym3__]",
                                tp_10[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)],
                                ds[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 29;
        check_greater_or_equal(function__, "tpv_1[sym1__]",
                               tpv_1[(sym1__ - 1)],
                               rvalue(dv, "dv", index_uni(1), index_uni(1))[
                               (sym1__ - 1)]);
      }
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 29;
        check_less_or_equal(function__, "tpv_1[sym1__]", tpv_1[(sym1__ - 1)],
                            rvalue(dv, "dv", index_uni(1), index_uni(2))[
                            (sym1__ - 1)]);
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 30;
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          current_statement__ = 30;
          check_greater_or_equal(function__, "tpv_2[sym1__, sym2__]",
                                 tpv_2[(sym1__ - 1)][(sym2__ - 1)],
                                 rvalue(dv, "dv", index_uni(1))[(sym1__ - 1)][
                                 (sym2__ - 1)]);
        }
      }
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 31;
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          current_statement__ = 31;
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            current_statement__ = 31;
            check_less_or_equal(function__, "tpv_3[sym1__, sym2__, sym3__]",
                                tpv_3[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)],
                                dv[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 32;
        check_greater_or_equal(function__, "tpr_1[sym1__]",
                               tpr_1[(sym1__ - 1)],
                               rvalue(dr, "dr", index_uni(1), index_uni(1))[
                               (sym1__ - 1)]);
      }
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 32;
        check_less_or_equal(function__, "tpr_1[sym1__]", tpr_1[(sym1__ - 1)],
                            rvalue(dr, "dr", index_uni(1), index_uni(2))[
                            (sym1__ - 1)]);
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 33;
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          current_statement__ = 33;
          check_greater_or_equal(function__, "tpr_2[sym1__, sym2__]",
                                 tpr_2[(sym1__ - 1)][(sym2__ - 1)],
                                 rvalue(dr, "dr", index_uni(1))[(sym1__ - 1)][
                                 (sym2__ - 1)]);
        }
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 34;
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          current_statement__ = 34;
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            current_statement__ = 34;
            check_less_or_equal(function__, "tpr_3[sym1__, sym2__, sym3__]",
                                tpr_3[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)],
                                dr[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 35;
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          current_statement__ = 35;
          check_greater_or_equal(function__, "tpm_1[sym1__, sym2__]",
                                 rvalue(tpm_1, "tpm_1",
                                   index_uni(sym1__), index_uni(sym2__)),
                                 rvalue(rvalue(dm, "dm", index_uni(1)),
                                   "dm[1]",
                                   index_uni(sym1__), index_uni(sym2__)));
        }
      }
      current_statement__ = 36;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 36;
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          current_statement__ = 36;
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            current_statement__ = 36;
            check_less_or_equal(function__, "tpm_2[sym1__, sym2__, sym3__]",
                                rvalue(tpm_2, "tpm_2",
                                  index_uni(sym1__), index_uni(sym2__),
                                    index_uni(sym3__)),
                                rvalue(dm, "dm",
                                  index_uni(sym1__), index_uni(sym2__),
                                    index_uni(sym3__)));
          }
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          vars__.emplace_back(tp_1[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          vars__.emplace_back(tp_2[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          vars__.emplace_back(tp_3[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          vars__.emplace_back(tp_4[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          vars__.emplace_back(tp_5[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          vars__.emplace_back(tp_6[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          vars__.emplace_back(tp_7[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          vars__.emplace_back(tp_8[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            vars__.emplace_back(tp_9[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              vars__.emplace_back(
                tp_10[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          vars__.emplace_back(tpv_1[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            vars__.emplace_back(tpv_2[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              vars__.emplace_back(
                tpv_3[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          vars__.emplace_back(tpr_1[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            vars__.emplace_back(tpr_2[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              vars__.emplace_back(
                tpr_3[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            vars__.emplace_back(
              rvalue(tpm_1, "tpm_1", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              vars__.emplace_back(
                rvalue(tpm_2, "tpm_2",
                  index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
            }
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> p_1 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 1;
      p_1 = context__.vals_r("p_1");
      current_statement__ = 1;
      check_matching_dims("constraint", "p_1", p_1, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<double> p_1_free__ = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                       
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 1;
        assign(p_1_free__,
          stan::math::lb_free(p_1[(sym1__ - 1)],
            rvalue(ds, "ds", index_uni(1), index_uni(1))[(sym1__ - 1)]),
          "assigning variable p_1_free__", index_uni(sym1__));
      }
      std::vector<double> p_2 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 2;
      p_2 = context__.vals_r("p_2");
      current_statement__ = 2;
      check_matching_dims("constraint", "p_2", p_2, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<double> p_2_free__ = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                       
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 2;
        assign(p_2_free__,
          stan::math::ub_free(p_2[(sym1__ - 1)],
            rvalue(ds, "ds", index_uni(1), index_uni(1))[(sym1__ - 1)]),
          "assigning variable p_2_free__", index_uni(sym1__));
      }
      std::vector<double> p_3 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 3;
      p_3 = context__.vals_r("p_3");
      current_statement__ = 3;
      check_matching_dims("constraint", "p_3", p_3, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 3;
      check_matching_dims("constraint", "p_3", p_3, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      std::vector<double> p_3_free__ = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                       
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 3;
        assign(p_3_free__,
          stan::math::lub_free(p_3[(sym1__ - 1)],
            rvalue(ds, "ds", index_uni(1), index_uni(1))[(sym1__ - 1)],
            rvalue(ds, "ds", index_uni(1), index_uni(2))[(sym1__ - 1)]),
          "assigning variable p_3_free__", index_uni(sym1__));
      }
      std::vector<double> p_4 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 4;
      p_4 = context__.vals_r("p_4");
      current_statement__ = 4;
      check_matching_dims("constraint", "p_4", p_4, "upper",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      std::vector<double> p_4_free__ = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                       
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 4;
        assign(p_4_free__,
          stan::math::lub_free(p_4[(sym1__ - 1)], 0,
            rvalue(ds, "ds", index_uni(1), index_uni(2))[(sym1__ - 1)]),
          "assigning variable p_4_free__", index_uni(sym1__));
      }
      std::vector<double> p_5 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 5;
      p_5 = context__.vals_r("p_5");
      current_statement__ = 5;
      check_matching_dims("constraint", "p_5", p_5, "lower",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<double> p_5_free__ = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                       
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 5;
        assign(p_5_free__,
          stan::math::lub_free(p_5[(sym1__ - 1)],
            rvalue(ds, "ds", index_uni(1), index_uni(1))[(sym1__ - 1)], 1),
          "assigning variable p_5_free__", index_uni(sym1__));
      }
      std::vector<double> p_6 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 6;
      p_6 = context__.vals_r("p_6");
      current_statement__ = 6;
      check_matching_dims("constraint", "p_6", p_6, "offset",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<double> p_6_free__ = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                       
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 6;
        assign(p_6_free__,
          stan::math::offset_multiplier_free(p_6[(sym1__ - 1)],
            rvalue(ds, "ds", index_uni(1), index_uni(1))[(sym1__ - 1)], 1),
          "assigning variable p_6_free__", index_uni(sym1__));
      }
      std::vector<double> p_7 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 7;
      p_7 = context__.vals_r("p_7");
      current_statement__ = 7;
      check_matching_dims("constraint", "p_7", p_7, "multiplier",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      std::vector<double> p_7_free__ = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                       
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 7;
        assign(p_7_free__,
          stan::math::offset_multiplier_free(p_7[(sym1__ - 1)], 0,
            rvalue(ds, "ds", index_uni(1), index_uni(1))[(sym1__ - 1)]),
          "assigning variable p_7_free__", index_uni(sym1__));
      }
      std::vector<double> p_8 = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                
      
      current_statement__ = 8;
      p_8 = context__.vals_r("p_8");
      current_statement__ = 8;
      check_matching_dims("constraint", "p_8", p_8, "offset",
                          rvalue(ds, "ds", index_uni(1), index_uni(1)));
      current_statement__ = 8;
      check_matching_dims("constraint", "p_8", p_8, "multiplier",
                          rvalue(ds, "ds", index_uni(1), index_uni(2)));
      std::vector<double> p_8_free__ = std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
                                       
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 8;
        assign(p_8_free__,
          stan::math::offset_multiplier_free(p_8[(sym1__ - 1)],
            rvalue(ds, "ds", index_uni(1), index_uni(1))[(sym1__ - 1)],
            rvalue(ds, "ds", index_uni(1), index_uni(2))[(sym1__ - 1)]),
          "assigning variable p_8_free__", index_uni(sym1__));
      }
      std::vector<std::vector<double>> p_9 = std::vector<std::vector<double>>(m, std::vector<double>(k, std::numeric_limits<double>::quiet_NaN()));
                                             
      
      {
        std::vector<local_scalar_t__> p_9_flat__;
        current_statement__ = 9;
        p_9_flat__ = context__.vals_r("p_9");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 9;
            assign(p_9, p_9_flat__[(pos__ - 1)],
              "assigning variable p_9", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 9;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 9;
      check_matching_dims("constraint", "p_9", p_9, "lower",
                          rvalue(ds, "ds", index_uni(1)));
      std::vector<std::vector<double>> p_9_free__ = std::vector<std::vector<double>>(m, std::vector<double>(k, std::numeric_limits<double>::quiet_NaN()));
                                                    
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 9;
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          current_statement__ = 9;
          assign(p_9_free__,
            stan::math::lub_free(p_9[(sym1__ - 1)][(sym2__ - 1)],
              rvalue(ds, "ds", index_uni(1))[(sym1__ - 1)][(sym2__ - 1)], 1),
            "assigning variable p_9_free__", index_uni(sym1__),
                                               index_uni(sym2__));
        }
      }
      std::vector<std::vector<std::vector<double>>> p_10 = std::vector<std::vector<std::vector<double>>>(n, std::vector<std::vector<double>>(m, std::vector<double>(k, std::numeric_limits<double>::quiet_NaN())));
                                                           
      
      {
        std::vector<local_scalar_t__> p_10_flat__;
        current_statement__ = 10;
        p_10_flat__ = context__.vals_r("p_10");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 10;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 10;
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              current_statement__ = 10;
              assign(p_10, p_10_flat__[(pos__ - 1)],
                "assigning variable p_10", index_uni(sym3__),
                                             index_uni(sym2__),
                                             index_uni(sym1__));
              current_statement__ = 10;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 10;
      check_matching_dims("constraint", "p_10", p_10, "upper", ds);
      std::vector<std::vector<std::vector<double>>> p_10_free__ = std::vector<std::vector<std::vector<double>>>(n, std::vector<std::vector<double>>(m, std::vector<double>(k, std::numeric_limits<double>::quiet_NaN())));
                                                                  
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 10;
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          current_statement__ = 10;
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            current_statement__ = 10;
            assign(p_10_free__,
              stan::math::lub_free(
                p_10[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)], 0,
                ds[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]),
              "assigning variable p_10_free__", index_uni(sym1__),
                                                  index_uni(sym2__),
                                                  index_uni(sym3__));
          }
        }
      }
      Eigen::Matrix<double, -1, 1> pv_1 = Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN());
                                          
      
      {
        std::vector<local_scalar_t__> pv_1_flat__;
        current_statement__ = 11;
        pv_1_flat__ = context__.vals_r("pv_1");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 11;
          assign(pv_1, pv_1_flat__[(pos__ - 1)],
            "assigning variable pv_1", index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 11;
      check_matching_dims("constraint", "pv_1", pv_1, "lower",
                          rvalue(dv, "dv", index_uni(1), index_uni(1)));
      current_statement__ = 11;
      check_matching_dims("constraint", "pv_1", pv_1, "upper",
                          rvalue(dv, "dv", index_uni(1), index_uni(2)));
      Eigen::Matrix<double, -1, 1> pv_1_free__ = Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 11;
        assign(pv_1_free__,
          stan::math::lub_free(pv_1[(sym1__ - 1)],
            rvalue(dv, "dv", index_uni(1), index_uni(1))[(sym1__ - 1)],
            rvalue(dv, "dv", index_uni(1), index_uni(2))[(sym1__ - 1)]),
          "assigning variable pv_1_free__", index_uni(sym1__));
      }
      std::vector<Eigen::Matrix<double, -1, 1>> pv_2 = std::vector<Eigen::Matrix<double, -1, 1>>(m, Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN()));
                                                       
      
      {
        std::vector<local_scalar_t__> pv_2_flat__;
        current_statement__ = 12;
        pv_2_flat__ = context__.vals_r("pv_2");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 12;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 12;
            assign(pv_2, pv_2_flat__[(pos__ - 1)],
              "assigning variable pv_2", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 12;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 12;
      check_matching_dims("constraint", "pv_2", pv_2, "lower",
                          rvalue(dv, "dv", index_uni(1)));
      std::vector<Eigen::Matrix<double, -1, 1>> pv_2_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(m, Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN()));
                                                              
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 12;
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          current_statement__ = 12;
          assign(pv_2_free__,
            stan::math::lb_free(pv_2[(sym1__ - 1)][(sym2__ - 1)],
              rvalue(dv, "dv", index_uni(1))[(sym1__ - 1)][(sym2__ - 1)]),
            "assigning variable pv_2_free__", index_uni(sym1__),
                                                index_uni(sym2__));
        }
      }
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> pv_3 = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(n, std::vector<Eigen::Matrix<double, -1, 1>>(m, Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN())));
                                                                    
      
      {
        std::vector<local_scalar_t__> pv_3_flat__;
        current_statement__ = 13;
        pv_3_flat__ = context__.vals_r("pv_3");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 13;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 13;
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              current_statement__ = 13;
              assign(pv_3, pv_3_flat__[(pos__ - 1)],
                "assigning variable pv_3", index_uni(sym3__),
                                             index_uni(sym2__),
                                             index_uni(sym1__));
              current_statement__ = 13;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 13;
      check_matching_dims("constraint", "pv_3", pv_3, "upper", dv);
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> pv_3_free__ = 
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(n, std::vector<Eigen::Matrix<double, -1, 1>>(m, Eigen::Matrix<double, -1, 1>::Constant(k, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 13;
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          current_statement__ = 13;
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            current_statement__ = 13;
            assign(pv_3_free__,
              stan::math::ub_free(
                pv_3[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)],
                dv[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]),
              "assigning variable pv_3_free__", index_uni(sym1__),
                                                  index_uni(sym2__),
                                                  index_uni(sym3__));
          }
        }
      }
      Eigen::Matrix<double, 1, -1> pr_1 = Eigen::Matrix<double, 1, -1>::Constant(k, std::numeric_limits<double>::quiet_NaN());
                                          
      
      {
        std::vector<local_scalar_t__> pr_1_flat__;
        current_statement__ = 14;
        pr_1_flat__ = context__.vals_r("pr_1");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 14;
          assign(pr_1, pr_1_flat__[(pos__ - 1)],
            "assigning variable pr_1", index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 14;
      check_matching_dims("constraint", "pr_1", pr_1, "lower",
                          rvalue(dr, "dr", index_uni(1), index_uni(1)));
      current_statement__ = 14;
      check_matching_dims("constraint", "pr_1", pr_1, "upper",
                          rvalue(dr, "dr", index_uni(1), index_uni(2)));
      Eigen::Matrix<double, 1, -1> pr_1_free__ = Eigen::Matrix<double, 1, -1>::Constant(k, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        current_statement__ = 14;
        assign(pr_1_free__,
          stan::math::lub_free(pr_1[(sym1__ - 1)],
            rvalue(dr, "dr", index_uni(1), index_uni(1))[(sym1__ - 1)],
            rvalue(dr, "dr", index_uni(1), index_uni(2))[(sym1__ - 1)]),
          "assigning variable pr_1_free__", index_uni(sym1__));
      }
      std::vector<Eigen::Matrix<double, 1, -1>> pr_2 = std::vector<Eigen::Matrix<double, 1, -1>>(m, Eigen::Matrix<double, 1, -1>::Constant(k, std::numeric_limits<double>::quiet_NaN()));
                                                       
      
      {
        std::vector<local_scalar_t__> pr_2_flat__;
        current_statement__ = 15;
        pr_2_flat__ = context__.vals_r("pr_2");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 15;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 15;
            assign(pr_2, pr_2_flat__[(pos__ - 1)],
              "assigning variable pr_2", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 15;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 15;
      check_matching_dims("constraint", "pr_2", pr_2, "lower",
                          rvalue(dr, "dr", index_uni(1)));
      std::vector<Eigen::Matrix<double, 1, -1>> pr_2_free__ = std::vector<Eigen::Matrix<double, 1, -1>>(m, Eigen::Matrix<double, 1, -1>::Constant(k, std::numeric_limits<double>::quiet_NaN()));
                                                              
      
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 15;
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          current_statement__ = 15;
          assign(pr_2_free__,
            stan::math::lb_free(pr_2[(sym1__ - 1)][(sym2__ - 1)],
              rvalue(dr, "dr", index_uni(1))[(sym1__ - 1)][(sym2__ - 1)]),
            "assigning variable pr_2_free__", index_uni(sym1__),
                                                index_uni(sym2__));
        }
      }
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> pr_3 = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(n, std::vector<Eigen::Matrix<double, 1, -1>>(m, Eigen::Matrix<double, 1, -1>::Constant(k, std::numeric_limits<double>::quiet_NaN())));
                                                                    
      
      {
        std::vector<local_scalar_t__> pr_3_flat__;
        current_statement__ = 16;
        pr_3_flat__ = context__.vals_r("pr_3");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 16;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 16;
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              current_statement__ = 16;
              assign(pr_3, pr_3_flat__[(pos__ - 1)],
                "assigning variable pr_3", index_uni(sym3__),
                                             index_uni(sym2__),
                                             index_uni(sym1__));
              current_statement__ = 16;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 16;
      check_matching_dims("constraint", "pr_3", pr_3, "upper", dr);
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> pr_3_free__ = 
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(n, std::vector<Eigen::Matrix<double, 1, -1>>(m, Eigen::Matrix<double, 1, -1>::Constant(k, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 16;
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          current_statement__ = 16;
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            current_statement__ = 16;
            assign(pr_3_free__,
              stan::math::ub_free(
                pr_3[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)],
                dr[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]),
              "assigning variable pr_3_free__", index_uni(sym1__),
                                                  index_uni(sym2__),
                                                  index_uni(sym3__));
          }
        }
      }
      Eigen::Matrix<double, -1, -1> pm_1 = Eigen::Matrix<double, -1, -1>::Constant(m, k, std::numeric_limits<double>::quiet_NaN());
                                           
      
      {
        std::vector<local_scalar_t__> pm_1_flat__;
        current_statement__ = 17;
        pm_1_flat__ = context__.vals_r("pm_1");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 17;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 17;
            assign(pm_1, pm_1_flat__[(pos__ - 1)],
              "assigning variable pm_1", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 17;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 17;
      check_matching_dims("constraint", "pm_1", pm_1, "lower",
                          rvalue(dm, "dm", index_uni(1)));
      Eigen::Matrix<double, -1, -1> pm_1_free__ = Eigen::Matrix<double, -1, -1>::Constant(m, k, std::numeric_limits<double>::quiet_NaN());
                                                  
      
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 17;
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          current_statement__ = 17;
          assign(pm_1_free__,
            stan::math::lb_free(
              rvalue(pm_1, "pm_1", index_uni(sym1__), index_uni(sym2__)),
              rvalue(rvalue(dm, "dm", index_uni(1)), "dm[1]",
                index_uni(sym1__), index_uni(sym2__))),
            "assigning variable pm_1_free__", index_uni(sym1__),
                                                index_uni(sym2__));
        }
      }
      std::vector<Eigen::Matrix<double, -1, -1>> pm_2 = std::vector<Eigen::Matrix<double, -1, -1>>(n, Eigen::Matrix<double, -1, -1>::Constant(m, k, std::numeric_limits<double>::quiet_NaN()));
                                                        
      
      {
        std::vector<local_scalar_t__> pm_2_flat__;
        current_statement__ = 18;
        pm_2_flat__ = context__.vals_r("pm_2");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 18;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 18;
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              current_statement__ = 18;
              assign(pm_2, pm_2_flat__[(pos__ - 1)],
                "assigning variable pm_2", index_uni(sym3__),
                                             index_uni(sym2__),
                                             index_uni(sym1__));
              current_statement__ = 18;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 18;
      check_matching_dims("constraint", "pm_2", pm_2, "upper", dm);
      std::vector<Eigen::Matrix<double, -1, -1>> pm_2_free__ = std::vector<Eigen::Matrix<double, -1, -1>>(n, Eigen::Matrix<double, -1, -1>::Constant(m, k, std::numeric_limits<double>::quiet_NaN()));
                                                               
      
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 18;
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          current_statement__ = 18;
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            current_statement__ = 18;
            assign(pm_2_free__,
              stan::math::ub_free(
                rvalue(pm_2, "pm_2",
                  index_uni(sym1__), index_uni(sym2__), index_uni(sym3__)),
                rvalue(dm, "dm",
                  index_uni(sym1__), index_uni(sym2__), index_uni(sym3__))),
              "assigning variable pm_2_free__", index_uni(sym1__),
                                                  index_uni(sym2__),
                                                  index_uni(sym3__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_1_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_2_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_3_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_4_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_5_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_6_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_7_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(p_8_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          vars__.emplace_back(p_9_free__[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            vars__.emplace_back(
              p_10_free__[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(pv_1_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          vars__.emplace_back(pv_2_free__[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            vars__.emplace_back(
              pv_3_free__[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(pr_1_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          vars__.emplace_back(pr_2_free__[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= k; ++sym3__) {
            vars__.emplace_back(
              pr_3_free__[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          vars__.emplace_back(
            rvalue(pm_1_free__, "pm_1_free__",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= m; ++sym3__) {
            vars__.emplace_back(
              rvalue(pm_2_free__, "pm_2_free__",
                index_uni(sym1__), index_uni(sym3__), index_uni(sym2__)));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"p_1", "p_2", "p_3", "p_4", "p_5",
      "p_6", "p_7", "p_8", "p_9", "p_10", "pv_1", "pv_2", "pv_3", "pr_1",
      "pr_2", "pr_3", "pm_1", "pm_2", "tp_1", "tp_2", "tp_3", "tp_4", "tp_5",
      "tp_6", "tp_7", "tp_8", "tp_9", "tp_10", "tpv_1", "tpv_2", "tpv_3",
      "tpr_1", "tpr_2", "tpr_3", "tpm_1", "tpm_2"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(k)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(m), static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(m),
                          static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(m), static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(m),
                          static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(m), static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(m),
                          static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(m), static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(m),
                          static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(m), static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(m),
                          static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(m), static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(m),
                          static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(m), static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(m),
                          static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(m), static_cast<size_t>(k)},
      std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(m),
                          static_cast<size_t>(k)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_2" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_3" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_4" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_5" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_6" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_7" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_8" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_9" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "p_10" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pv_1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pv_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "pv_3" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pr_1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pr_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "pr_3" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pm_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "pm_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_4" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_5" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_6" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_7" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_8" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_9" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_10" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpv_1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpv_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpv_3" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpr_1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpr_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpr_3" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpm_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpm_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_2" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_3" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_4" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_5" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_6" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_7" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_8" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_9" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "p_10" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pv_1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pv_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "pv_3" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pr_1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pr_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "pr_3" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "pm_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "pm_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_4" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_5" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_6" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_7" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_8" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_9" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tp_10" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpv_1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpv_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpv_3" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tpr_1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpr_2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpr_3" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tpm_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= n; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "tpm_2" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_9\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"p_10\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"pv_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"pv_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}},\"block\":\"parameters\"},{\"name\":\"pv_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}}},\"block\":\"parameters\"},{\"name\":\"pr_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"pr_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}},\"block\":\"parameters\"},{\"name\":\"pr_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}}},\"block\":\"parameters\"},{\"name\":\"pm_1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(m) + ",\"cols\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"pm_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(m) + ",\"cols\":" + std::to_string(k) + "}},\"block\":\"parameters\"},{\"name\":\"tp_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_9\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_10\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpv_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpv_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpv_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpr_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpr_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpr_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpm_1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(m) + ",\"cols\":" + std::to_string(k) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpm_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(m) + ",\"cols\":" + std::to_string(k) + "}},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"p_9\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"p_10\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"pv_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"pv_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}},\"block\":\"parameters\"},{\"name\":\"pv_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}}},\"block\":\"parameters\"},{\"name\":\"pr_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"pr_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}},\"block\":\"parameters\"},{\"name\":\"pr_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}}},\"block\":\"parameters\"},{\"name\":\"pm_1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(m) + ",\"cols\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"pm_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(m) + ",\"cols\":" + std::to_string(k) + "}},\"block\":\"parameters\"},{\"name\":\"tp_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_9\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_10\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpv_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpv_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpv_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpr_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpr_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tpr_3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(m) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tpm_1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(m) + ",\"cols\":" + std::to_string(k) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tpm_2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(m) + ",\"cols\":" + std::to_string(k) + "}},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = transform_model_namespace::transform_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return transform_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp truncate.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace truncate_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 21> locations_array__ = 
{" (found before start of program)",
 " (in 'truncate.stan', line 6, column 4 to column 11)",
 " (in 'truncate.stan', line 7, column 4 to column 20)",
 " (in 'truncate.stan', line 10, column 4 to column 25)",
 " (in 'truncate.stan', line 11, column 22 to column 25)",
 " (in 'truncate.stan', line 11, column 4 to column 28)",
 " (in 'truncate.stan', line 12, column 23 to column 27)",
 " (in 'truncate.stan', line 12, column 4 to column 29)",
 " (in 'truncate.stan', line 13, column 26 to column 30)",
 " (in 'truncate.stan', line 13, column 22 to column 25)",
 " (in 'truncate.stan', line 13, column 4 to column 32)",
 " (in 'truncate.stan', line 14, column 4 to column 24)",
 " (in 'truncate.stan', line 15, column 21 to column 23)",
 " (in 'truncate.stan', line 15, column 4 to column 26)",
 " (in 'truncate.stan', line 16, column 22 to column 24)",
 " (in 'truncate.stan', line 16, column 4 to column 26)",
 " (in 'truncate.stan', line 17, column 24 to column 26)",
 " (in 'truncate.stan', line 17, column 21 to column 23)",
 " (in 'truncate.stan', line 17, column 4 to column 28)",
 " (in 'truncate.stan', line 2, column 4 to column 10)",
 " (in 'truncate.stan', line 3, column 4 to column 11)"};



class truncate_model final : public model_base_crtp<truncate_model> {

 private:
  int n;
  double x; 
  
 
 public:
  ~truncate_model() { }
  
  inline std::string model_name() const final { return "truncate_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  truncate_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "truncate_model_namespace::truncate_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 19;
      context__.validate_dims("data initialization","n","int",
           std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 19;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 20;
      context__.validate_dims("data initialization","x","double",
           std::vector<size_t>{});
      x = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      x = context__.vals_r("x")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "truncate_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ m = DUMMY_VAR__;
      
      current_statement__ = 1;
      m = in__.template read<local_scalar_t__>();
      local_scalar_t__ y = DUMMY_VAR__;
      
      current_statement__ = 2;
      y = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      {
        current_statement__ = 3;
        lp_accum__.add(normal_lpdf<propto__>(x, m, 1));
        current_statement__ = 4;
        if (logical_lt(x, 0.0)) {
          current_statement__ = 4;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 4;
          lp_accum__.add(-normal_ccdf_log(0.0, m, 1));
        }
        current_statement__ = 5;
        lp_accum__.add(normal_lpdf<propto__>(x, m, 1));
        current_statement__ = 6;
        if (logical_gt(x, 10.0)) {
          current_statement__ = 6;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 6;
          lp_accum__.add(-normal_cdf_log(10.0, m, 1));
        }
        current_statement__ = 7;
        lp_accum__.add(normal_lpdf<propto__>(x, m, 1));
        current_statement__ = 9;
        if (logical_lt(x, 0.0)) {
          current_statement__ = 9;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 8;
          if (logical_gt(x, 10.0)) {
            current_statement__ = 8;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 8;
            lp_accum__.add(
              -log_diff_exp(normal_cdf_log(10.0, m, 1),
                 normal_cdf_log(0.0, m, 1)));
          }
        }
        current_statement__ = 10;
        lp_accum__.add(normal_lpdf<propto__>(x, m, 1));
        current_statement__ = 11;
        lp_accum__.add(poisson_lpmf<propto__>(n, y));
        current_statement__ = 12;
        if (logical_lt(n, 10)) {
          current_statement__ = 12;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 12;
          lp_accum__.add(-poisson_ccdf_log((10 - 1), y));
        }
        current_statement__ = 13;
        lp_accum__.add(poisson_lpmf<propto__>(n, y));
        current_statement__ = 14;
        if (logical_gt(n, 20)) {
          current_statement__ = 14;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 14;
          lp_accum__.add(-poisson_cdf_log(20, y));
        }
        current_statement__ = 15;
        lp_accum__.add(poisson_lpmf<propto__>(n, y));
        current_statement__ = 17;
        if (logical_lt(n, 10)) {
          current_statement__ = 17;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 16;
          if (logical_gt(n, 20)) {
            current_statement__ = 16;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 16;
            lp_accum__.add(
              -log_diff_exp(poisson_cdf_log(20, y),
                 poisson_cdf_log((10 - 1), y)));
          }
        }
        current_statement__ = 18;
        lp_accum__.add(poisson_lpmf<propto__>(n, y));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "truncate_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      m = in__.template read<local_scalar_t__>();
      double y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      y = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      vars__.emplace_back(m);
      vars__.emplace_back(y);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double m = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      m = context__.vals_r("m")[(1 - 1)];
      double y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      y = context__.vals_r("y")[(1 - 1)];
      double y_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      y_free__ = stan::math::lb_free(y, 0);
      vars__.emplace_back(m);
      vars__.emplace_back(y_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"m", "y"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "m");
    param_names__.emplace_back(std::string() + "y");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "m");
    param_names__.emplace_back(std::string() + "y");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = truncate_model_namespace::truncate_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return truncate_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp udf_tilde_stmt_conflict.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace udf_tilde_stmt_conflict_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 5> locations_array__ = 
{" (found before start of program)",
 " (in 'udf_tilde_stmt_conflict.stan', line 7, column 4 to column 11)",
 " (in 'udf_tilde_stmt_conflict.stan', line 10, column 4 to column 20)",
 " (in 'udf_tilde_stmt_conflict.stan', line 3, column 4 to column 21)",
 " (in 'udf_tilde_stmt_conflict.stan', line 2, column 22 to line 4, column 3)"};


template <typename T0__>
stan::promote_args_t<T0__>
normal(const T0__& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 3;
    return square(a);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct normal_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& a, std::ostream* pstream__)  const 
{
return normal(a, pstream__);
}
};

class udf_tilde_stmt_conflict_model final : public model_base_crtp<udf_tilde_stmt_conflict_model> {

 private:
   
  
 
 public:
  ~udf_tilde_stmt_conflict_model() { }
  
  inline std::string model_name() const final { return "udf_tilde_stmt_conflict_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  udf_tilde_stmt_conflict_model(stan::io::var_context& context__,
                                unsigned int random_seed__ = 0,
                                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "udf_tilde_stmt_conflict_model_namespace::udf_tilde_stmt_conflict_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "udf_tilde_stmt_conflict_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ x = DUMMY_VAR__;
      
      current_statement__ = 1;
      x = in__.template read<local_scalar_t__>();
      {
        current_statement__ = 2;
        lp_accum__.add(normal_lpdf<propto__>(x, 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "udf_tilde_stmt_conflict_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double x = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      x = in__.template read<local_scalar_t__>();
      vars__.emplace_back(x);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double x = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      x = context__.vals_r("x")[(1 - 1)];
      vars__.emplace_back(x);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"x"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "x");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "x");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = udf_tilde_stmt_conflict_model_namespace::udf_tilde_stmt_conflict_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return udf_tilde_stmt_conflict_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc --print-cpp user_constrain.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace user_constrain_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 5> locations_array__ = 
{" (found before start of program)",
 " (in 'user_constrain.stan', line 7, column 2 to column 18)",
 " (in 'user_constrain.stan', line 10, column 2 to column 19)",
 " (in 'user_constrain.stan', line 3, column 4 to column 13)",
 " (in 'user_constrain.stan', line 2, column 36 to line 4, column 3)"};


template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
lb_constrain(const T0__& x, const T1__& y, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 3;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct lb_constrain_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& x, const T1__& y, std::ostream* pstream__)  const 
{
return lb_constrain(x, y, pstream__);
}
};

class user_constrain_model final : public model_base_crtp<user_constrain_model> {

 private:
   
  
 
 public:
  ~user_constrain_model() { }
  
  inline std::string model_name() const final { return "user_constrain_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  user_constrain_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "user_constrain_model_namespace::user_constrain_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "user_constrain_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ x = DUMMY_VAR__;
      
      current_statement__ = 1;
      x = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      {
        current_statement__ = 2;
        lp_accum__.add(std_normal_lpdf<propto__>(x));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "user_constrain_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double x = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      x = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
            lp__);
      vars__.emplace_back(x);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double x = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      x = context__.vals_r("x")[(1 - 1)];
      double x_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      x_free__ = stan::math::lb_free(x, 0);
      vars__.emplace_back(x_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"x"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "x");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "x");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = user_constrain_model_namespace::user_constrain_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return user_constrain_model_namespace::profiles__;
}

#endif



