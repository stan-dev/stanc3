  $ ../../../../../install/default/bin/stanc --print-cpp --use-opencl optimize_glm.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace optimize_glm_model_namespace {

template <typename T, typename S>
std::vector<T> resize_to_match__(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match__(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match__(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match__(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}
std::vector<double> to_doubles__(std::initializer_list<double> x) {
  return x;
}

std::vector<stan::math::var> to_vars__(std::initializer_list<stan::math::var> x) {
  return x;
}

inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'optimize_glm.stan', line 26, column 2 to column 20)",
                                                      " (in 'optimize_glm.stan', line 27, column 2 to column 17)",
                                                      " (in 'optimize_glm.stan', line 28, column 2 to column 17)",
                                                      " (in 'optimize_glm.stan', line 29, column 2 to column 22)",
                                                      " (in 'optimize_glm.stan', line 30, column 2 to column 13)",
                                                      " (in 'optimize_glm.stan', line 31, column 2 to column 11)",
                                                      " (in 'optimize_glm.stan', line 32, column 2 to column 19)",
                                                      " (in 'optimize_glm.stan', line 33, column 2 to column 22)",
                                                      " (in 'optimize_glm.stan', line 34, column 2 to column 23)",
                                                      " (in 'optimize_glm.stan', line 38, column 2 to column 64)",
                                                      " (in 'optimize_glm.stan', line 39, column 2 to column 49)",
                                                      " (in 'optimize_glm.stan', line 41, column 2 to column 64)",
                                                      " (in 'optimize_glm.stan', line 42, column 2 to column 49)",
                                                      " (in 'optimize_glm.stan', line 44, column 2 to column 63)",
                                                      " (in 'optimize_glm.stan', line 45, column 2 to column 48)",
                                                      " (in 'optimize_glm.stan', line 47, column 2 to column 63)",
                                                      " (in 'optimize_glm.stan', line 48, column 2 to column 48)",
                                                      " (in 'optimize_glm.stan', line 50, column 2 to column 66)",
                                                      " (in 'optimize_glm.stan', line 51, column 2 to column 51)",
                                                      " (in 'optimize_glm.stan', line 53, column 2 to column 66)",
                                                      " (in 'optimize_glm.stan', line 54, column 2 to column 51)",
                                                      " (in 'optimize_glm.stan', line 56, column 2 to column 70)",
                                                      " (in 'optimize_glm.stan', line 57, column 2 to column 55)",
                                                      " (in 'optimize_glm.stan', line 59, column 2 to column 67)",
                                                      " (in 'optimize_glm.stan', line 60, column 2 to column 52)",
                                                      " (in 'optimize_glm.stan', line 62, column 2 to column 69)",
                                                      " (in 'optimize_glm.stan', line 63, column 2 to column 54)",
                                                      " (in 'optimize_glm.stan', line 65, column 2 to column 66)",
                                                      " (in 'optimize_glm.stan', line 66, column 2 to column 51)",
                                                      " (in 'optimize_glm.stan', line 68, column 2 to column 72)",
                                                      " (in 'optimize_glm.stan', line 69, column 2 to column 57)",
                                                      " (in 'optimize_glm.stan', line 71, column 2 to column 69)",
                                                      " (in 'optimize_glm.stan', line 72, column 2 to column 54)",
                                                      " (in 'optimize_glm.stan', line 74, column 2 to column 63)",
                                                      " (in 'optimize_glm.stan', line 75, column 2 to column 49)",
                                                      " (in 'optimize_glm.stan', line 77, column 2 to column 63)",
                                                      " (in 'optimize_glm.stan', line 78, column 2 to column 49)",
                                                      " (in 'optimize_glm.stan', line 80, column 2 to column 66)",
                                                      " (in 'optimize_glm.stan', line 81, column 2 to column 52)",
                                                      " (in 'optimize_glm.stan', line 83, column 2 to column 66)",
                                                      " (in 'optimize_glm.stan', line 84, column 2 to column 52)",
                                                      " (in 'optimize_glm.stan', line 86, column 2 to column 62)",
                                                      " (in 'optimize_glm.stan', line 87, column 2 to column 48)",
                                                      " (in 'optimize_glm.stan', line 89, column 2 to column 62)",
                                                      " (in 'optimize_glm.stan', line 90, column 2 to column 48)",
                                                      " (in 'optimize_glm.stan', line 92, column 2 to column 69)",
                                                      " (in 'optimize_glm.stan', line 93, column 2 to column 55)",
                                                      " (in 'optimize_glm.stan', line 95, column 2 to column 66)",
                                                      " (in 'optimize_glm.stan', line 96, column 2 to column 52)",
                                                      " (in 'optimize_glm.stan', line 98, column 2 to column 72)",
                                                      " (in 'optimize_glm.stan', line 99, column 2 to column 58)",
                                                      " (in 'optimize_glm.stan', line 101, column 2 to column 69)",
                                                      " (in 'optimize_glm.stan', line 102, column 2 to column 55)",
                                                      " (in 'optimize_glm.stan', line 104, column 2 to column 68)",
                                                      " (in 'optimize_glm.stan', line 105, column 2 to column 54)",
                                                      " (in 'optimize_glm.stan', line 107, column 2 to column 65)",
                                                      " (in 'optimize_glm.stan', line 108, column 2 to column 51)",
                                                      " (in 'optimize_glm.stan', line 110, column 2 to column 59)",
                                                      " (in 'optimize_glm.stan', line 111, column 2 to column 45)",
                                                      " (in 'optimize_glm.stan', line 113, column 2 to column 59)",
                                                      " (in 'optimize_glm.stan', line 114, column 2 to column 45)",
                                                      " (in 'optimize_glm.stan', line 116, column 2 to column 58)",
                                                      " (in 'optimize_glm.stan', line 117, column 2 to column 44)",
                                                      " (in 'optimize_glm.stan', line 119, column 2 to column 58)",
                                                      " (in 'optimize_glm.stan', line 120, column 2 to column 44)",
                                                      " (in 'optimize_glm.stan', line 122, column 2 to column 62)",
                                                      " (in 'optimize_glm.stan', line 123, column 2 to column 48)",
                                                      " (in 'optimize_glm.stan', line 125, column 2 to column 62)",
                                                      " (in 'optimize_glm.stan', line 126, column 2 to column 48)",
                                                      " (in 'optimize_glm.stan', line 128, column 2 to column 65)",
                                                      " (in 'optimize_glm.stan', line 129, column 2 to column 51)",
                                                      " (in 'optimize_glm.stan', line 131, column 2 to column 62)",
                                                      " (in 'optimize_glm.stan', line 132, column 2 to column 48)",
                                                      " (in 'optimize_glm.stan', line 134, column 2 to column 64)",
                                                      " (in 'optimize_glm.stan', line 135, column 2 to column 50)",
                                                      " (in 'optimize_glm.stan', line 137, column 2 to column 61)",
                                                      " (in 'optimize_glm.stan', line 138, column 2 to column 47)",
                                                      " (in 'optimize_glm.stan', line 140, column 2 to column 68)",
                                                      " (in 'optimize_glm.stan', line 141, column 2 to column 54)",
                                                      " (in 'optimize_glm.stan', line 143, column 2 to column 65)",
                                                      " (in 'optimize_glm.stan', line 144, column 2 to column 51)",
                                                      " (in 'optimize_glm.stan', line 146, column 2 to column 71)",
                                                      " (in 'optimize_glm.stan', line 147, column 2 to column 57)",
                                                      " (in 'optimize_glm.stan', line 149, column 2 to column 71)",
                                                      " (in 'optimize_glm.stan', line 150, column 2 to column 57)",
                                                      " (in 'optimize_glm.stan', line 152, column 2 to column 70)",
                                                      " (in 'optimize_glm.stan', line 153, column 2 to column 56)",
                                                      " (in 'optimize_glm.stan', line 155, column 2 to column 70)",
                                                      " (in 'optimize_glm.stan', line 156, column 2 to column 56)",
                                                      " (in 'optimize_glm.stan', line 158, column 2 to column 74)",
                                                      " (in 'optimize_glm.stan', line 159, column 2 to column 60)",
                                                      " (in 'optimize_glm.stan', line 161, column 2 to column 74)",
                                                      " (in 'optimize_glm.stan', line 162, column 2 to column 60)",
                                                      " (in 'optimize_glm.stan', line 164, column 2 to column 77)",
                                                      " (in 'optimize_glm.stan', line 165, column 2 to column 63)",
                                                      " (in 'optimize_glm.stan', line 167, column 2 to column 74)",
                                                      " (in 'optimize_glm.stan', line 168, column 2 to column 60)",
                                                      " (in 'optimize_glm.stan', line 170, column 2 to column 76)",
                                                      " (in 'optimize_glm.stan', line 171, column 2 to column 62)",
                                                      " (in 'optimize_glm.stan', line 173, column 2 to column 73)",
                                                      " (in 'optimize_glm.stan', line 174, column 2 to column 59)",
                                                      " (in 'optimize_glm.stan', line 176, column 2 to column 80)",
                                                      " (in 'optimize_glm.stan', line 177, column 2 to column 66)",
                                                      " (in 'optimize_glm.stan', line 179, column 2 to column 77)",
                                                      " (in 'optimize_glm.stan', line 180, column 2 to column 63)",
                                                      " (in 'optimize_glm.stan', line 182, column 2 to column 62)",
                                                      " (in 'optimize_glm.stan', line 183, column 2 to column 48)",
                                                      " (in 'optimize_glm.stan', line 185, column 2 to column 62)",
                                                      " (in 'optimize_glm.stan', line 186, column 2 to column 48)",
                                                      " (in 'optimize_glm.stan', line 188, column 2 to column 68)",
                                                      " (in 'optimize_glm.stan', line 189, column 2 to column 54)",
                                                      " (in 'optimize_glm.stan', line 191, column 2 to column 65)",
                                                      " (in 'optimize_glm.stan', line 192, column 2 to column 51)",
                                                      " (in 'optimize_glm.stan', line 194, column 2 to column 62)",
                                                      " (in 'optimize_glm.stan', line 195, column 2 to column 48)",
                                                      " (in 'optimize_glm.stan', line 197, column 2 to column 62)",
                                                      " (in 'optimize_glm.stan', line 198, column 2 to column 48)",
                                                      " (in 'optimize_glm.stan', line 200, column 2 to column 68)",
                                                      " (in 'optimize_glm.stan', line 201, column 2 to column 54)",
                                                      " (in 'optimize_glm.stan', line 203, column 2 to column 65)",
                                                      " (in 'optimize_glm.stan', line 204, column 2 to column 51)",
                                                      " (in 'optimize_glm.stan', line 206, column 2 to column 65)",
                                                      " (in 'optimize_glm.stan', line 207, column 2 to column 51)",
                                                      " (in 'optimize_glm.stan', line 209, column 2 to column 65)",
                                                      " (in 'optimize_glm.stan', line 210, column 2 to column 51)",
                                                      " (in 'optimize_glm.stan', line 212, column 2 to column 63)",
                                                      " (in 'optimize_glm.stan', line 213, column 2 to column 49)",
                                                      " (in 'optimize_glm.stan', line 215, column 2 to column 63)",
                                                      " (in 'optimize_glm.stan', line 216, column 2 to column 49)",
                                                      " (in 'optimize_glm.stan', line 218, column 2 to column 69)",
                                                      " (in 'optimize_glm.stan', line 219, column 2 to column 55)",
                                                      " (in 'optimize_glm.stan', line 221, column 2 to column 66)",
                                                      " (in 'optimize_glm.stan', line 222, column 2 to column 53)",
                                                      " (in 'optimize_glm.stan', line 224, column 2 to column 66)",
                                                      " (in 'optimize_glm.stan', line 225, column 2 to column 52)",
                                                      " (in 'optimize_glm.stan', line 227, column 2 to column 66)",
                                                      " (in 'optimize_glm.stan', line 228, column 2 to column 52)",
                                                      " (in 'optimize_glm.stan', line 230, column 2 to column 68)",
                                                      " (in 'optimize_glm.stan', line 231, column 2 to column 54)",
                                                      " (in 'optimize_glm.stan', line 233, column 2 to column 68)",
                                                      " (in 'optimize_glm.stan', line 234, column 2 to column 54)",
                                                      " (in 'optimize_glm.stan', line 236, column 2 to column 74)",
                                                      " (in 'optimize_glm.stan', line 237, column 2 to column 60)",
                                                      " (in 'optimize_glm.stan', line 239, column 2 to column 71)",
                                                      " (in 'optimize_glm.stan', line 240, column 2 to column 57)",
                                                      " (in 'optimize_glm.stan', line 242, column 2 to column 71)",
                                                      " (in 'optimize_glm.stan', line 243, column 2 to column 57)",
                                                      " (in 'optimize_glm.stan', line 245, column 2 to column 71)",
                                                      " (in 'optimize_glm.stan', line 246, column 2 to column 57)",
                                                      " (in 'optimize_glm.stan', line 248, column 2 to column 77)",
                                                      " (in 'optimize_glm.stan', line 249, column 2 to column 63)",
                                                      " (in 'optimize_glm.stan', line 251, column 2 to column 74)",
                                                      " (in 'optimize_glm.stan', line 252, column 2 to column 60)",
                                                      " (in 'optimize_glm.stan', line 254, column 2 to column 69)",
                                                      " (in 'optimize_glm.stan', line 255, column 2 to column 55)",
                                                      " (in 'optimize_glm.stan', line 257, column 2 to column 69)",
                                                      " (in 'optimize_glm.stan', line 258, column 2 to column 55)",
                                                      " (in 'optimize_glm.stan', line 260, column 2 to column 75)",
                                                      " (in 'optimize_glm.stan', line 261, column 2 to column 61)",
                                                      " (in 'optimize_glm.stan', line 263, column 2 to column 72)",
                                                      " (in 'optimize_glm.stan', line 264, column 2 to column 58)",
                                                      " (in 'optimize_glm.stan', line 266, column 2 to column 72)",
                                                      " (in 'optimize_glm.stan', line 267, column 2 to column 58)",
                                                      " (in 'optimize_glm.stan', line 269, column 2 to column 72)",
                                                      " (in 'optimize_glm.stan', line 270, column 2 to column 58)",
                                                      " (in 'optimize_glm.stan', line 272, column 2 to column 78)",
                                                      " (in 'optimize_glm.stan', line 273, column 2 to column 64)",
                                                      " (in 'optimize_glm.stan', line 275, column 2 to column 75)",
                                                      " (in 'optimize_glm.stan', line 276, column 2 to column 61)",
                                                      " (in 'optimize_glm.stan', line 278, column 2 to column 73)",
                                                      " (in 'optimize_glm.stan', line 279, column 2 to column 59)",
                                                      " (in 'optimize_glm.stan', line 281, column 2 to column 76)",
                                                      " (in 'optimize_glm.stan', line 282, column 2 to column 62)",
                                                      " (in 'optimize_glm.stan', line 2, column 2 to column 17)",
                                                      " (in 'optimize_glm.stan', line 3, column 2 to column 17)",
                                                      " (in 'optimize_glm.stan', line 4, column 2 to column 19)",
                                                      " (in 'optimize_glm.stan', line 5, column 2 to column 18)",
                                                      " (in 'optimize_glm.stan', line 6, column 2 to column 23)",
                                                      " (in 'optimize_glm.stan', line 7, column 2 to column 16)",
                                                      " (in 'optimize_glm.stan', line 8, column 2 to column 17)",
                                                      " (in 'optimize_glm.stan', line 9, column 2 to column 12)",
                                                      " (in 'optimize_glm.stan', line 10, column 2 to column 13)",
                                                      " (in 'optimize_glm.stan', line 14, column 2 to column 20)",
                                                      " (in 'optimize_glm.stan', line 15, column 2 to column 20)",
                                                      " (in 'optimize_glm.stan', line 16, column 2 to column 22)",
                                                      " (in 'optimize_glm.stan', line 17, column 2 to column 21)",
                                                      " (in 'optimize_glm.stan', line 18, column 2 to column 26)",
                                                      " (in 'optimize_glm.stan', line 19, column 2 to column 19)",
                                                      " (in 'optimize_glm.stan', line 20, column 2 to column 20)",
                                                      " (in 'optimize_glm.stan', line 21, column 2 to column 15)",
                                                      " (in 'optimize_glm.stan', line 22, column 2 to column 16)"};



class optimize_glm_model : public model_base_crtp<optimize_glm_model> {

 private:
  int pos__;
  int k;
  int n;
  Eigen::Matrix<double, -1, -1> X_d;
  Eigen::Matrix<double, -1, 1> y_v_d;
  Eigen::Matrix<double, 1, -1> X_rv_d;
  std::vector<int> y_vi_d;
  std::vector<int> y2_vi_d;
  int y_s_d;
  double y_r_d;
  int k_td;
  int n_td;
  Eigen::Matrix<double, -1, -1> X_d_td;
  Eigen::Matrix<double, -1, 1> y_v_d_td;
  Eigen::Matrix<double, 1, -1> X_rv_d_td;
  std::vector<int> y_vi_d_td;
  std::vector<int> y2_vi_d_td;
  int y_s_d_td;
  double y_r_d_td;
  matrix_cl<double> X_d_opencl__;
  matrix_cl<double> X_d_td_opencl__;
  matrix_cl<double> y_r_d_opencl__;
  matrix_cl<double> y_r_d_td_opencl__;
  matrix_cl<int> y_s_d_opencl__;
  matrix_cl<double> y_s_d_td_opencl__;
  matrix_cl<double> y_v_d_opencl__;
  matrix_cl<double> y_v_d_td_opencl__;
  matrix_cl<int> y_vi_d_opencl__;
  matrix_cl<double> y_vi_d_td_opencl__;
 
 public:
  ~optimize_glm_model() { }
  
  std::string model_name() const { return "optimize_glm_model"; }
  
  optimize_glm_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "optimize_glm_model_namespace::optimize_glm_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      context__.validate_dims("data initialization","k","int",
          context__.to_vec());
      k = std::numeric_limits<int>::min();
      
      current_statement__ = 174;
      k = context__.vals_i("k")[(1 - 1)];
      context__.validate_dims("data initialization","n","int",
          context__.to_vec());
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 175;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 176;
      validate_non_negative_index("X_d", "n", n);
      current_statement__ = 176;
      validate_non_negative_index("X_d", "k", k);
      context__.validate_dims("data initialization","X_d","double",
          context__.to_vec(n, k));
      X_d = Eigen::Matrix<double, -1, -1>(n, k);
      stan::math::fill(X_d, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_d_flat__;
        current_statement__ = 176;
        assign(X_d_flat__, nil_index_list(), context__.vals_r("X_d"),
          "assigning variable X_d_flat__");
        current_statement__ = 176;
        pos__ = 1;
        current_statement__ = 176;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 176;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 176;
            assign(X_d,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_d_flat__[(pos__ - 1)], "assigning variable X_d");
            current_statement__ = 176;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 177;
      validate_non_negative_index("y_v_d", "n", n);
      context__.validate_dims("data initialization","y_v_d","double",
          context__.to_vec(n));
      y_v_d = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(y_v_d, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_v_d_flat__;
        current_statement__ = 177;
        assign(y_v_d_flat__, nil_index_list(), context__.vals_r("y_v_d"),
          "assigning variable y_v_d_flat__");
        current_statement__ = 177;
        pos__ = 1;
        current_statement__ = 177;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 177;
          assign(y_v_d, cons_list(index_uni(sym1__), nil_index_list()),
            y_v_d_flat__[(pos__ - 1)], "assigning variable y_v_d");
          current_statement__ = 177;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 178;
      validate_non_negative_index("X_rv_d", "n", n);
      context__.validate_dims("data initialization","X_rv_d","double",
          context__.to_vec(n));
      X_rv_d = Eigen::Matrix<double, 1, -1>(n);
      stan::math::fill(X_rv_d, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_rv_d_flat__;
        current_statement__ = 178;
        assign(X_rv_d_flat__, nil_index_list(), context__.vals_r("X_rv_d"),
          "assigning variable X_rv_d_flat__");
        current_statement__ = 178;
        pos__ = 1;
        current_statement__ = 178;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 178;
          assign(X_rv_d, cons_list(index_uni(sym1__), nil_index_list()),
            X_rv_d_flat__[(pos__ - 1)], "assigning variable X_rv_d");
          current_statement__ = 178;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 179;
      validate_non_negative_index("y_vi_d", "n", n);
      context__.validate_dims("data initialization","y_vi_d","int",
          context__.to_vec(n));
      y_vi_d = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 179;
      assign(y_vi_d, nil_index_list(), context__.vals_i("y_vi_d"),
        "assigning variable y_vi_d");
      current_statement__ = 180;
      validate_non_negative_index("y2_vi_d", "n", n);
      context__.validate_dims("data initialization","y2_vi_d","int",
          context__.to_vec(n));
      y2_vi_d = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 180;
      assign(y2_vi_d, nil_index_list(), context__.vals_i("y2_vi_d"),
        "assigning variable y2_vi_d");
      context__.validate_dims("data initialization","y_s_d","int",
          context__.to_vec());
      y_s_d = std::numeric_limits<int>::min();
      
      current_statement__ = 181;
      y_s_d = context__.vals_i("y_s_d")[(1 - 1)];
      context__.validate_dims("data initialization","y_r_d","double",
          context__.to_vec());
      y_r_d = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 182;
      y_r_d = context__.vals_r("y_r_d")[(1 - 1)];
      k_td = std::numeric_limits<int>::min();
      
      n_td = std::numeric_limits<int>::min();
      
      current_statement__ = 185;
      validate_non_negative_index("X_d_td", "n", n);
      current_statement__ = 185;
      validate_non_negative_index("X_d_td", "k", k);
      X_d_td = Eigen::Matrix<double, -1, -1>(n, k);
      stan::math::fill(X_d_td, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 186;
      validate_non_negative_index("y_v_d_td", "n", n);
      y_v_d_td = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(y_v_d_td, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 187;
      validate_non_negative_index("X_rv_d_td", "n", n);
      X_rv_d_td = Eigen::Matrix<double, 1, -1>(n);
      stan::math::fill(X_rv_d_td, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 188;
      validate_non_negative_index("y_vi_d_td", "n", n);
      y_vi_d_td = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 189;
      validate_non_negative_index("y2_vi_d_td", "n", n);
      y2_vi_d_td = std::vector<int>(n, std::numeric_limits<int>::min());
      
      y_s_d_td = std::numeric_limits<int>::min();
      
      y_r_d_td = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 174;
      current_statement__ = 174;
      check_greater_or_equal(function__, "k", k, 1);
      current_statement__ = 175;
      current_statement__ = 175;
      check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 183;
      current_statement__ = 183;
      check_greater_or_equal(function__, "k_td", k_td, 1);
      current_statement__ = 184;
      current_statement__ = 184;
      check_greater_or_equal(function__, "n_td", n_td, 0);
      
      X_d_opencl__ = to_matrix_cl(X_d);
      
      X_d_td_opencl__ = to_matrix_cl(X_d_td);
      
      y_r_d_opencl__ = to_matrix_cl(y_r_d);
      
      y_r_d_td_opencl__ = to_matrix_cl(y_r_d_td);
      
      y_s_d_opencl__ = to_matrix_cl(y_s_d);
      
      y_s_d_td_opencl__ = to_matrix_cl(y_s_d_td);
      
      y_v_d_opencl__ = to_matrix_cl(y_v_d);
      
      y_v_d_td_opencl__ = to_matrix_cl(y_v_d_td);
      
      y_vi_d_opencl__ = to_matrix_cl(y_vi_d);
      
      y_vi_d_td_opencl__ = to_matrix_cl(y_vi_d_td);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      current_statement__ = 1;
      validate_non_negative_index("alpha_v", "k", k);
      num_params_r__ += k;
      current_statement__ = 2;
      validate_non_negative_index("beta", "k", k);
      num_params_r__ += k;
      current_statement__ = 3;
      validate_non_negative_index("cuts", "k", k);
      num_params_r__ += k;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      current_statement__ = 7;
      validate_non_negative_index("X_p", "n", n);
      current_statement__ = 7;
      validate_non_negative_index("X_p", "k", k);
      num_params_r__ += n * k;
      current_statement__ = 8;
      validate_non_negative_index("beta_m", "n", n);
      current_statement__ = 8;
      validate_non_negative_index("beta_m", "k", k);
      num_params_r__ += n * k;
      current_statement__ = 9;
      validate_non_negative_index("X_rv_p", "n", n);
      num_params_r__ += n;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "optimize_glm_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      current_statement__ = 1;
      validate_non_negative_index("alpha_v", "k", k);
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_v;
      alpha_v = Eigen::Matrix<local_scalar_t__, -1, 1>(k);
      stan::math::fill(alpha_v, DUMMY_VAR__);
      
      current_statement__ = 1;
      alpha_v = in__.vector(k);
      current_statement__ = 2;
      validate_non_negative_index("beta", "k", k);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(k);
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 2;
      beta = in__.vector(k);
      current_statement__ = 3;
      validate_non_negative_index("cuts", "k", k);
      Eigen::Matrix<local_scalar_t__, -1, 1> cuts;
      cuts = Eigen::Matrix<local_scalar_t__, -1, 1>(k);
      stan::math::fill(cuts, DUMMY_VAR__);
      
      current_statement__ = 3;
      cuts = in__.vector(k);
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 4;
      sigma = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 4;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      local_scalar_t__ alpha;
      alpha = DUMMY_VAR__;
      
      current_statement__ = 5;
      alpha = in__.scalar();
      local_scalar_t__ phi;
      phi = DUMMY_VAR__;
      
      current_statement__ = 6;
      phi = in__.scalar();
      current_statement__ = 7;
      validate_non_negative_index("X_p", "n", n);
      current_statement__ = 7;
      validate_non_negative_index("X_p", "k", k);
      Eigen::Matrix<local_scalar_t__, -1, -1> X_p;
      X_p = Eigen::Matrix<local_scalar_t__, -1, -1>(n, k);
      stan::math::fill(X_p, DUMMY_VAR__);
      
      current_statement__ = 7;
      X_p = in__.matrix(n, k);
      current_statement__ = 8;
      validate_non_negative_index("beta_m", "n", n);
      current_statement__ = 8;
      validate_non_negative_index("beta_m", "k", k);
      Eigen::Matrix<local_scalar_t__, -1, -1> beta_m;
      beta_m = Eigen::Matrix<local_scalar_t__, -1, -1>(n, k);
      stan::math::fill(beta_m, DUMMY_VAR__);
      
      current_statement__ = 8;
      beta_m = in__.matrix(n, k);
      current_statement__ = 9;
      validate_non_negative_index("X_rv_p", "n", n);
      Eigen::Matrix<local_scalar_t__, 1, -1> X_rv_p;
      X_rv_p = Eigen::Matrix<local_scalar_t__, 1, -1>(n);
      stan::math::fill(X_rv_p, DUMMY_VAR__);
      
      current_statement__ = 9;
      X_rv_p = in__.row_vector(n);
      {
        current_statement__ = 10;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d_opencl__, X_d_opencl__, alpha,
            beta, sigma));
        current_statement__ = 11;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d_opencl__, X_d_opencl__, alpha,
            beta, sigma));
        current_statement__ = 12;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d, X_p, alpha, beta, sigma));
        current_statement__ = 13;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d, X_p, alpha, beta, sigma));
        current_statement__ = 14;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_r_d_opencl__, X_d_opencl__, alpha,
            beta, beta));
        current_statement__ = 15;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_r_d_opencl__, X_d_opencl__, alpha,
            beta, beta));
        current_statement__ = 16;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_r_d, X_p, alpha, beta, beta));
        current_statement__ = 17;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_r_d, X_p, alpha, beta, beta));
        current_statement__ = 18;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d, X_rv_d, alpha, beta, beta));
        current_statement__ = 19;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d, X_rv_d, alpha, beta, beta));
        current_statement__ = 20;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d, X_rv_p, alpha, beta, beta));
        current_statement__ = 21;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d, X_rv_p, alpha, beta, beta));
        current_statement__ = 22;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d_td_opencl__, X_d_td_opencl__,
            alpha, beta, sigma));
        current_statement__ = 23;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d_td_opencl__, X_d_td_opencl__,
            alpha, beta, sigma));
        current_statement__ = 24;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d_td, X_p, alpha, beta, sigma));
        current_statement__ = 25;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d_td, X_p, alpha, beta, sigma));
        current_statement__ = 26;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_r_d_td_opencl__, X_d_td_opencl__,
            alpha, beta, beta));
        current_statement__ = 27;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_r_d_td_opencl__, X_d_td_opencl__,
            alpha, beta, beta));
        current_statement__ = 28;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_r_d_td, X_p, alpha, beta, beta));
        current_statement__ = 29;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_r_d_td, X_p, alpha, beta, beta));
        current_statement__ = 30;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d_td, X_rv_d_td, alpha, beta, beta));
        current_statement__ = 31;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d_td, X_rv_d_td, alpha, beta,
            beta));
        current_statement__ = 32;
        lp_accum__.add(
          normal_id_glm_lpdf<false>(y_v_d_td, X_rv_p, alpha, beta, beta));
        current_statement__ = 33;
        lp_accum__.add(
          normal_id_glm_lpdf<propto__>(y_v_d_td, X_rv_p, alpha, beta, beta));
        current_statement__ = 34;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d_opencl__, X_d_opencl__,
            alpha, beta));
        current_statement__ = 35;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d_opencl__, X_d_opencl__,
            alpha, beta));
        current_statement__ = 36;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d, X_p, alpha, beta));
        current_statement__ = 37;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d, X_p, alpha, beta));
        current_statement__ = 38;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d, X_rv_d, alpha, beta));
        current_statement__ = 39;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d, X_rv_d, alpha, beta));
        current_statement__ = 40;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d, X_rv_p, alpha, beta));
        current_statement__ = 41;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d, X_rv_p, alpha, beta));
        current_statement__ = 42;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_s_d_opencl__, X_d_opencl__,
            alpha, beta));
        current_statement__ = 43;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_s_d_opencl__, X_d_opencl__,
            alpha, beta));
        current_statement__ = 44;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_s_d, X_p, alpha, beta));
        current_statement__ = 45;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_s_d, X_p, alpha, beta));
        current_statement__ = 46;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d_td_opencl__,
            X_d_td_opencl__, alpha, beta));
        current_statement__ = 47;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d_td_opencl__,
            X_d_td_opencl__, alpha, beta));
        current_statement__ = 48;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d_td, X_p, alpha, beta));
        current_statement__ = 49;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d_td, X_p, alpha, beta));
        current_statement__ = 50;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d_td, X_rv_d_td, alpha, beta));
        current_statement__ = 51;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d_td, X_rv_d_td, alpha,
            beta));
        current_statement__ = 52;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_vi_d_td, X_rv_p, alpha, beta));
        current_statement__ = 53;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_vi_d_td, X_rv_p, alpha, beta));
        current_statement__ = 54;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_s_d_td_opencl__, X_d_td_opencl__,
            alpha, beta));
        current_statement__ = 55;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_s_d_td_opencl__,
            X_d_td_opencl__, alpha, beta));
        current_statement__ = 56;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<false>(y_s_d_td, X_p, alpha, beta));
        current_statement__ = 57;
        lp_accum__.add(
          bernoulli_logit_glm_lpmf<propto__>(y_s_d_td, X_p, alpha, beta));
        current_statement__ = 58;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_vi_d_opencl__, X_d_opencl__, alpha,
            beta));
        current_statement__ = 59;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d_opencl__, X_d_opencl__,
            alpha, beta));
        current_statement__ = 60;
        lp_accum__.add(poisson_log_glm_lpmf<false>(y_vi_d, X_p, alpha, beta));
        current_statement__ = 61;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d, X_p, alpha, beta));
        current_statement__ = 62;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_s_d_opencl__, X_d_opencl__, alpha,
            beta));
        current_statement__ = 63;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_s_d_opencl__, X_d_opencl__, alpha,
            beta));
        current_statement__ = 64;
        lp_accum__.add(poisson_log_glm_lpmf<false>(y_s_d, X_p, alpha, beta));
        current_statement__ = 65;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_s_d, X_p, alpha, beta));
        current_statement__ = 66;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_vi_d, X_rv_d, alpha, beta));
        current_statement__ = 67;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d, X_rv_d, alpha, beta));
        current_statement__ = 68;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_vi_d, X_rv_p, alpha, beta));
        current_statement__ = 69;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d, X_rv_p, alpha, beta));
        current_statement__ = 70;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_vi_d_td_opencl__, X_d_td_opencl__,
            alpha, beta));
        current_statement__ = 71;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d_td_opencl__, X_d_td_opencl__,
            alpha, beta));
        current_statement__ = 72;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_vi_d_td, X_p, alpha, beta));
        current_statement__ = 73;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d_td, X_p, alpha, beta));
        current_statement__ = 74;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_s_d_td_opencl__, X_d_td_opencl__,
            alpha, beta));
        current_statement__ = 75;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_s_d_td_opencl__, X_d_td_opencl__,
            alpha, beta));
        current_statement__ = 76;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_s_d_td, X_p, alpha, beta));
        current_statement__ = 77;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_s_d_td, X_p, alpha, beta));
        current_statement__ = 78;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_vi_d_td, X_rv_d_td, alpha, beta));
        current_statement__ = 79;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d_td, X_rv_d_td, alpha, beta));
        current_statement__ = 80;
        lp_accum__.add(
          poisson_log_glm_lpmf<false>(y_vi_d_td, X_rv_p, alpha, beta));
        current_statement__ = 81;
        lp_accum__.add(
          poisson_log_glm_lpmf<propto__>(y_vi_d_td, X_rv_p, alpha, beta));
        current_statement__ = 82;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d_opencl__, X_d_opencl__,
            alpha, beta, phi));
        current_statement__ = 83;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d_opencl__,
            X_d_opencl__, alpha, beta, phi));
        current_statement__ = 84;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d, X_p, alpha, beta, phi));
        current_statement__ = 85;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d, X_p, alpha, beta,
            phi));
        current_statement__ = 86;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_s_d_opencl__, X_d_opencl__,
            alpha, beta, phi));
        current_statement__ = 87;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_s_d_opencl__, X_d_opencl__,
            alpha, beta, phi));
        current_statement__ = 88;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_s_d, X_p, alpha, beta, phi));
        current_statement__ = 89;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_s_d, X_p, alpha, beta, phi));
        current_statement__ = 90;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d, X_rv_d, alpha, beta,
            phi));
        current_statement__ = 91;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d, X_rv_d, alpha, beta,
            phi));
        current_statement__ = 92;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d, X_rv_p, alpha, beta,
            phi));
        current_statement__ = 93;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d, X_rv_p, alpha, beta,
            phi));
        current_statement__ = 94;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d_td_opencl__,
            X_d_td_opencl__, alpha, beta, phi));
        current_statement__ = 95;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d_td_opencl__,
            X_d_td_opencl__, alpha, beta, phi));
        current_statement__ = 96;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d_td, X_p, alpha, beta,
            phi));
        current_statement__ = 97;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d_td, X_p, alpha, beta,
            phi));
        current_statement__ = 98;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_s_d_td_opencl__,
            X_d_td_opencl__, alpha, beta, phi));
        current_statement__ = 99;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_s_d_td_opencl__,
            X_d_td_opencl__, alpha, beta, phi));
        current_statement__ = 100;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_s_d_td, X_p, alpha, beta, phi));
        current_statement__ = 101;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_s_d_td, X_p, alpha, beta,
            phi));
        current_statement__ = 102;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d_td, X_rv_d_td, alpha,
            beta, phi));
        current_statement__ = 103;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d_td, X_rv_d_td, alpha,
            beta, phi));
        current_statement__ = 104;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<false>(y_vi_d_td, X_rv_p, alpha, beta,
            phi));
        current_statement__ = 105;
        lp_accum__.add(
          neg_binomial_2_log_glm_lpmf<propto__>(y_vi_d_td, X_rv_p, alpha,
            beta, phi));
        current_statement__ = 106;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d_opencl__, X_d_opencl__,
            beta, cuts));
        current_statement__ = 107;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d_opencl__, X_d_opencl__,
            beta, cuts));
        current_statement__ = 108;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d, X_p, beta, cuts));
        current_statement__ = 109;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d, X_p, beta, cuts));
        current_statement__ = 110;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d_td_opencl__,
            X_d_td_opencl__, beta, cuts));
        current_statement__ = 111;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d_td_opencl__,
            X_d_td_opencl__, beta, cuts));
        current_statement__ = 112;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d_td, X_p, beta, cuts));
        current_statement__ = 113;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d_td, X_p, beta, cuts));
        current_statement__ = 114;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d_opencl__, X_d_opencl__,
            beta, cuts));
        current_statement__ = 115;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d_opencl__, X_d_opencl__,
            beta, cuts));
        current_statement__ = 116;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d, X_p, beta, cuts));
        current_statement__ = 117;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d, X_p, beta, cuts));
        current_statement__ = 118;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d_td_opencl__,
            X_d_td_opencl__, beta, cuts));
        current_statement__ = 119;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d_td_opencl__,
            X_d_td_opencl__, beta, cuts));
        current_statement__ = 120;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d_td, X_p, beta, cuts));
        current_statement__ = 121;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d_td, X_p, beta, cuts));
        current_statement__ = 122;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d, X_rv_d, beta, cuts));
        current_statement__ = 123;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d, X_rv_d, beta, cuts));
        current_statement__ = 124;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_s_d, X_rv_p, beta, cuts));
        current_statement__ = 125;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_s_d, X_rv_p, beta, cuts));
        current_statement__ = 126;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_vi_d_opencl__, X_d_opencl__,
            beta, cuts));
        current_statement__ = 127;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_vi_d_opencl__, X_d_opencl__,
            beta, cuts));
        current_statement__ = 128;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_vi_d, X_p, beta, cuts));
        current_statement__ = 129;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_vi_d, X_p, beta, cuts));
        current_statement__ = 130;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_vi_d_td_opencl__,
            X_d_td_opencl__, beta, cuts));
        current_statement__ = 131;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_vi_d_td_opencl__,
            X_d_td_opencl__, beta, cuts));
        current_statement__ = 132;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_vi_d_td, X_p, beta, cuts));
        current_statement__ = 133;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_vi_d_td, X_p, beta, cuts));
        current_statement__ = 134;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_vi_d, X_rv_d, beta, cuts));
        current_statement__ = 135;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_vi_d, X_rv_d, beta, cuts));
        current_statement__ = 136;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<false>(y_vi_d, X_rv_p, beta, cuts));
        current_statement__ = 137;
        lp_accum__.add(
          ordered_logistic_glm_lpmf<propto__>(y_vi_d, X_rv_p, beta, cuts));
        current_statement__ = 138;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d_opencl__, X_d_opencl__,
            alpha_v, beta_m));
        current_statement__ = 139;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d_opencl__, X_d_opencl__,
            alpha_v, beta_m));
        current_statement__ = 140;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d, X_p, alpha_v, beta_m));
        current_statement__ = 141;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d, X_p, alpha_v, beta_m));
        current_statement__ = 142;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d_td_opencl__,
            X_d_td_opencl__, alpha_v, beta_m));
        current_statement__ = 143;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d_td_opencl__,
            X_d_td_opencl__, alpha_v, beta_m));
        current_statement__ = 144;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d_td, X_p, alpha_v, beta_m));
        current_statement__ = 145;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d_td, X_p, alpha_v,
            beta_m));
        current_statement__ = 146;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d, X_rv_d, alpha_v, beta_m));
        current_statement__ = 147;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d, X_rv_d, alpha_v,
            beta_m));
        current_statement__ = 148;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d, X_rv_p, alpha_v, beta_m));
        current_statement__ = 149;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 150;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d_td, X_rv_d_td, alpha_v,
            beta_m));
        current_statement__ = 151;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d_td, X_rv_d_td, alpha_v,
            beta_m));
        current_statement__ = 152;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_s_d_td, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 153;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_s_d_td, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 154;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d_opencl__, X_d_opencl__,
            alpha_v, beta_m));
        current_statement__ = 155;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d_opencl__, X_d_opencl__,
            alpha_v, beta_m));
        current_statement__ = 156;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d, X_p, alpha_v, beta_m));
        current_statement__ = 157;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d, X_p, alpha_v, beta_m));
        current_statement__ = 158;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d_td_opencl__,
            X_d_td_opencl__, alpha_v, beta_m));
        current_statement__ = 159;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d_td_opencl__,
            X_d_td_opencl__, alpha_v, beta_m));
        current_statement__ = 160;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d_td, X_p, alpha_v, beta_m));
        current_statement__ = 161;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d_td, X_p, alpha_v,
            beta_m));
        current_statement__ = 162;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d, X_rv_d, alpha_v, beta_m));
        current_statement__ = 163;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d, X_rv_d, alpha_v,
            beta_m));
        current_statement__ = 164;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d, X_rv_p, alpha_v, beta_m));
        current_statement__ = 165;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 166;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d_td, X_rv_d_td, alpha_v,
            beta_m));
        current_statement__ = 167;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d_td, X_rv_d_td, alpha_v,
            beta_m));
        current_statement__ = 168;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y_vi_d_td, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 169;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y_vi_d_td, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 170;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y2_vi_d, X_rv_p, alpha_v, beta_m));
        current_statement__ = 171;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y2_vi_d, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 172;
        lp_accum__.add(
          categorical_logit_glm_lpmf<false>(y2_vi_d_td, X_rv_p, alpha_v,
            beta_m));
        current_statement__ = 173;
        lp_accum__.add(
          categorical_logit_glm_lpmf<propto__>(y2_vi_d_td, X_rv_p, alpha_v,
            beta_m));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = 0) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "optimize_glm_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      current_statement__ = 1;
      validate_non_negative_index("alpha_v", "k", k);
      Eigen::Matrix<double, -1, 1> alpha_v;
      alpha_v = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(alpha_v, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      alpha_v = in__.vector(k);
      current_statement__ = 2;
      validate_non_negative_index("beta", "k", k);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      beta = in__.vector(k);
      current_statement__ = 3;
      validate_non_negative_index("cuts", "k", k);
      Eigen::Matrix<double, -1, 1> cuts;
      cuts = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(cuts, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      cuts = in__.vector(k);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma = in__.scalar();
      current_statement__ = 4;
      sigma = stan::math::lb_constrain(sigma, 0);
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      alpha = in__.scalar();
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      phi = in__.scalar();
      current_statement__ = 7;
      validate_non_negative_index("X_p", "n", n);
      current_statement__ = 7;
      validate_non_negative_index("X_p", "k", k);
      Eigen::Matrix<double, -1, -1> X_p;
      X_p = Eigen::Matrix<double, -1, -1>(n, k);
      stan::math::fill(X_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      X_p = in__.matrix(n, k);
      current_statement__ = 8;
      validate_non_negative_index("beta_m", "n", n);
      current_statement__ = 8;
      validate_non_negative_index("beta_m", "k", k);
      Eigen::Matrix<double, -1, -1> beta_m;
      beta_m = Eigen::Matrix<double, -1, -1>(n, k);
      stan::math::fill(beta_m, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      beta_m = in__.matrix(n, k);
      current_statement__ = 9;
      validate_non_negative_index("X_rv_p", "n", n);
      Eigen::Matrix<double, 1, -1> X_rv_p;
      X_rv_p = Eigen::Matrix<double, 1, -1>(n);
      stan::math::fill(X_rv_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      X_rv_p = in__.row_vector(n);
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.push_back(alpha_v[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.push_back(beta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.push_back(cuts[(sym1__ - 1)]);}
      vars__.push_back(sigma);
      vars__.push_back(alpha);
      vars__.push_back(phi);
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          vars__.push_back(
            rvalue(X_p,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "X_p"));}}
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          vars__.push_back(
            rvalue(beta_m,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "beta_m"));}
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.push_back(X_rv_p[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 1;
      validate_non_negative_index("alpha_v", "k", k);
      Eigen::Matrix<double, -1, 1> alpha_v;
      alpha_v = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(alpha_v, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_v_flat__;
        current_statement__ = 1;
        assign(alpha_v_flat__, nil_index_list(), context__.vals_r("alpha_v"),
          "assigning variable alpha_v_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 1;
          assign(alpha_v, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_v_flat__[(pos__ - 1)], "assigning variable alpha_v");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 2;
      validate_non_negative_index("beta", "k", k);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 2;
        assign(beta_flat__, nil_index_list(), context__.vals_r("beta"),
          "assigning variable beta_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 2;
          assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
            beta_flat__[(pos__ - 1)], "assigning variable beta");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 3;
      validate_non_negative_index("cuts", "k", k);
      Eigen::Matrix<double, -1, 1> cuts;
      cuts = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(cuts, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> cuts_flat__;
        current_statement__ = 3;
        assign(cuts_flat__, nil_index_list(), context__.vals_r("cuts"),
          "assigning variable cuts_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 3;
          assign(cuts, cons_list(index_uni(sym1__), nil_index_list()),
            cuts_flat__[(pos__ - 1)], "assigning variable cuts");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      current_statement__ = 4;
      sigma = stan::math::lb_free(sigma, 0);
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      phi = context__.vals_r("phi")[(1 - 1)];
      current_statement__ = 7;
      validate_non_negative_index("X_p", "n", n);
      current_statement__ = 7;
      validate_non_negative_index("X_p", "k", k);
      Eigen::Matrix<double, -1, -1> X_p;
      X_p = Eigen::Matrix<double, -1, -1>(n, k);
      stan::math::fill(X_p, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_p_flat__;
        current_statement__ = 7;
        assign(X_p_flat__, nil_index_list(), context__.vals_r("X_p"),
          "assigning variable X_p_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 7;
            assign(X_p,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_p_flat__[(pos__ - 1)], "assigning variable X_p");
            current_statement__ = 7;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 8;
      validate_non_negative_index("beta_m", "n", n);
      current_statement__ = 8;
      validate_non_negative_index("beta_m", "k", k);
      Eigen::Matrix<double, -1, -1> beta_m;
      beta_m = Eigen::Matrix<double, -1, -1>(n, k);
      stan::math::fill(beta_m, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_m_flat__;
        current_statement__ = 8;
        assign(beta_m_flat__, nil_index_list(), context__.vals_r("beta_m"),
          "assigning variable beta_m_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 8;
            assign(beta_m,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              beta_m_flat__[(pos__ - 1)], "assigning variable beta_m");
            current_statement__ = 8;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 9;
      validate_non_negative_index("X_rv_p", "n", n);
      Eigen::Matrix<double, 1, -1> X_rv_p;
      X_rv_p = Eigen::Matrix<double, 1, -1>(n);
      stan::math::fill(X_rv_p, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_rv_p_flat__;
        current_statement__ = 9;
        assign(X_rv_p_flat__, nil_index_list(), context__.vals_r("X_rv_p"),
          "assigning variable X_rv_p_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 9;
          assign(X_rv_p, cons_list(index_uni(sym1__), nil_index_list()),
            X_rv_p_flat__[(pos__ - 1)], "assigning variable X_rv_p");
          current_statement__ = 9;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.push_back(alpha_v[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.push_back(beta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.push_back(cuts[(sym1__ - 1)]);}
      vars__.push_back(sigma);
      vars__.push_back(alpha);
      vars__.push_back(phi);
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          vars__.push_back(
            rvalue(X_p,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "X_p"));}}
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          vars__.push_back(
            rvalue(beta_m,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "beta_m"));}
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.push_back(X_rv_p[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("alpha_v");
    names__.push_back("beta");
    names__.push_back("cuts");
    names__.push_back("sigma");
    names__.push_back("alpha");
    names__.push_back("phi");
    names__.push_back("X_p");
    names__.push_back("beta_m");
    names__.push_back("X_rv_p");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dims__.push_back(k);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(k);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(k);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(n);
    
    dims__.push_back(k);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(n);
    
    dims__.push_back(k);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(n);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const {
    
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.push_back(std::string() + "alpha_v" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.push_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.push_back(std::string() + "cuts" + '.' + std::to_string(sym1__));
      }}
    param_names__.push_back(std::string() + "sigma");
    param_names__.push_back(std::string() + "alpha");
    param_names__.push_back(std::string() + "phi");
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          {
            param_names__.push_back(std::string() + "X_p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          {
            param_names__.push_back(std::string() + "beta_m" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.push_back(std::string() + "X_rv_p" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const {
    
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.push_back(std::string() + "alpha_v" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.push_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.push_back(std::string() + "cuts" + '.' + std::to_string(sym1__));
      }}
    param_names__.push_back(std::string() + "sigma");
    param_names__.push_back(std::string() + "alpha");
    param_names__.push_back(std::string() + "phi");
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          {
            param_names__.push_back(std::string() + "X_p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          {
            param_names__.push_back(std::string() + "beta_m" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.push_back(std::string() + "X_rv_p" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha_v\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"parameters\"},{\"name\":\"cuts\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"X_p\",\"type\":{\"name\":\"matrix\",\"rows\":" << n << ",\"cols\":" << k << "},\"block\":\"parameters\"},{\"name\":\"beta_m\",\"type\":{\"name\":\"matrix\",\"rows\":" << n << ",\"cols\":" << k << "},\"block\":\"parameters\"},{\"name\":\"X_rv_p\",\"type\":{\"name\":\"vector\",\"length\":" << n << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha_v\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"parameters\"},{\"name\":\"cuts\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"X_p\",\"type\":{\"name\":\"matrix\",\"rows\":" << n << ",\"cols\":" << k << "},\"block\":\"parameters\"},{\"name\":\"beta_m\",\"type\":{\"name\":\"matrix\",\"rows\":" << n << ",\"cols\":" << k << "},\"block\":\"parameters\"},{\"name\":\"X_rv_p\",\"type\":{\"name\":\"vector\",\"length\":" << n << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
typedef optimize_glm_model_namespace::optimize_glm_model stan_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif



