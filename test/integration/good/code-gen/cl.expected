  $ ../../../../../install/default/bin/stanc --print-cpp --use-opencl optimize_glm.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace optimize_glm_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 217> locations_array__ =
  {" (found before start of program)",
  " (in 'optimize_glm.stan', line 25, column 2 to column 20)",
  " (in 'optimize_glm.stan', line 26, column 2 to column 17)",
  " (in 'optimize_glm.stan', line 27, column 2 to column 17)",
  " (in 'optimize_glm.stan', line 28, column 2 to column 22)",
  " (in 'optimize_glm.stan', line 29, column 2 to column 13)",
  " (in 'optimize_glm.stan', line 30, column 2 to column 11)",
  " (in 'optimize_glm.stan', line 31, column 2 to column 19)",
  " (in 'optimize_glm.stan', line 32, column 2 to column 22)",
  " (in 'optimize_glm.stan', line 33, column 2 to column 23)",
  " (in 'optimize_glm.stan', line 36, column 2 to column 64)",
  " (in 'optimize_glm.stan', line 37, column 2 to column 49)",
  " (in 'optimize_glm.stan', line 39, column 2 to column 64)",
  " (in 'optimize_glm.stan', line 40, column 2 to column 49)",
  " (in 'optimize_glm.stan', line 42, column 2 to column 63)",
  " (in 'optimize_glm.stan', line 43, column 2 to column 48)",
  " (in 'optimize_glm.stan', line 45, column 2 to column 63)",
  " (in 'optimize_glm.stan', line 46, column 2 to column 48)",
  " (in 'optimize_glm.stan', line 48, column 2 to column 66)",
  " (in 'optimize_glm.stan', line 49, column 2 to column 51)",
  " (in 'optimize_glm.stan', line 51, column 2 to column 66)",
  " (in 'optimize_glm.stan', line 52, column 2 to column 51)",
  " (in 'optimize_glm.stan', line 54, column 2 to column 70)",
  " (in 'optimize_glm.stan', line 55, column 2 to column 55)",
  " (in 'optimize_glm.stan', line 57, column 2 to column 67)",
  " (in 'optimize_glm.stan', line 58, column 2 to column 52)",
  " (in 'optimize_glm.stan', line 60, column 2 to column 69)",
  " (in 'optimize_glm.stan', line 61, column 2 to column 54)",
  " (in 'optimize_glm.stan', line 63, column 2 to column 66)",
  " (in 'optimize_glm.stan', line 64, column 2 to column 51)",
  " (in 'optimize_glm.stan', line 66, column 2 to column 72)",
  " (in 'optimize_glm.stan', line 67, column 2 to column 57)",
  " (in 'optimize_glm.stan', line 69, column 2 to column 69)",
  " (in 'optimize_glm.stan', line 70, column 2 to column 54)",
  " (in 'optimize_glm.stan', line 72, column 2 to column 64)",
  " (in 'optimize_glm.stan', line 73, column 2 to column 49)",
  " (in 'optimize_glm.stan', line 75, column 2 to column 64)",
  " (in 'optimize_glm.stan', line 76, column 2 to column 49)",
  " (in 'optimize_glm.stan', line 78, column 2 to column 67)",
  " (in 'optimize_glm.stan', line 79, column 2 to column 52)",
  " (in 'optimize_glm.stan', line 81, column 2 to column 67)",
  " (in 'optimize_glm.stan', line 82, column 2 to column 52)",
  " (in 'optimize_glm.stan', line 84, column 2 to column 63)",
  " (in 'optimize_glm.stan', line 85, column 2 to column 48)",
  " (in 'optimize_glm.stan', line 87, column 2 to column 63)",
  " (in 'optimize_glm.stan', line 88, column 2 to column 48)",
  " (in 'optimize_glm.stan', line 90, column 2 to column 70)",
  " (in 'optimize_glm.stan', line 91, column 2 to column 55)",
  " (in 'optimize_glm.stan', line 93, column 2 to column 67)",
  " (in 'optimize_glm.stan', line 94, column 2 to column 52)",
  " (in 'optimize_glm.stan', line 96, column 2 to column 73)",
  " (in 'optimize_glm.stan', line 97, column 2 to column 58)",
  " (in 'optimize_glm.stan', line 99, column 2 to column 70)",
  " (in 'optimize_glm.stan', line 100, column 2 to column 55)",
  " (in 'optimize_glm.stan', line 102, column 2 to column 69)",
  " (in 'optimize_glm.stan', line 103, column 2 to column 54)",
  " (in 'optimize_glm.stan', line 105, column 2 to column 66)",
  " (in 'optimize_glm.stan', line 106, column 2 to column 51)",
  " (in 'optimize_glm.stan', line 108, column 2 to column 60)",
  " (in 'optimize_glm.stan', line 109, column 2 to column 45)",
  " (in 'optimize_glm.stan', line 111, column 2 to column 60)",
  " (in 'optimize_glm.stan', line 112, column 2 to column 45)",
  " (in 'optimize_glm.stan', line 114, column 2 to column 59)",
  " (in 'optimize_glm.stan', line 115, column 2 to column 44)",
  " (in 'optimize_glm.stan', line 117, column 2 to column 59)",
  " (in 'optimize_glm.stan', line 118, column 2 to column 44)",
  " (in 'optimize_glm.stan', line 120, column 2 to column 63)",
  " (in 'optimize_glm.stan', line 121, column 2 to column 48)",
  " (in 'optimize_glm.stan', line 123, column 2 to column 63)",
  " (in 'optimize_glm.stan', line 124, column 2 to column 48)",
  " (in 'optimize_glm.stan', line 126, column 2 to column 66)",
  " (in 'optimize_glm.stan', line 127, column 2 to column 51)",
  " (in 'optimize_glm.stan', line 129, column 2 to column 63)",
  " (in 'optimize_glm.stan', line 130, column 2 to column 48)",
  " (in 'optimize_glm.stan', line 132, column 2 to column 65)",
  " (in 'optimize_glm.stan', line 133, column 2 to column 50)",
  " (in 'optimize_glm.stan', line 135, column 2 to column 62)",
  " (in 'optimize_glm.stan', line 136, column 2 to column 47)",
  " (in 'optimize_glm.stan', line 138, column 2 to column 69)",
  " (in 'optimize_glm.stan', line 139, column 2 to column 54)",
  " (in 'optimize_glm.stan', line 141, column 2 to column 66)",
  " (in 'optimize_glm.stan', line 142, column 2 to column 51)",
  " (in 'optimize_glm.stan', line 144, column 2 to column 72)",
  " (in 'optimize_glm.stan', line 145, column 2 to column 57)",
  " (in 'optimize_glm.stan', line 147, column 2 to column 72)",
  " (in 'optimize_glm.stan', line 148, column 2 to column 57)",
  " (in 'optimize_glm.stan', line 150, column 2 to column 71)",
  " (in 'optimize_glm.stan', line 151, column 2 to column 56)",
  " (in 'optimize_glm.stan', line 153, column 2 to column 71)",
  " (in 'optimize_glm.stan', line 154, column 2 to column 56)",
  " (in 'optimize_glm.stan', line 156, column 2 to column 75)",
  " (in 'optimize_glm.stan', line 157, column 2 to column 60)",
  " (in 'optimize_glm.stan', line 159, column 2 to column 75)",
  " (in 'optimize_glm.stan', line 160, column 2 to column 60)",
  " (in 'optimize_glm.stan', line 162, column 2 to column 78)",
  " (in 'optimize_glm.stan', line 163, column 2 to column 63)",
  " (in 'optimize_glm.stan', line 165, column 2 to column 75)",
  " (in 'optimize_glm.stan', line 166, column 2 to column 60)",
  " (in 'optimize_glm.stan', line 168, column 2 to column 77)",
  " (in 'optimize_glm.stan', line 169, column 2 to column 62)",
  " (in 'optimize_glm.stan', line 171, column 2 to column 74)",
  " (in 'optimize_glm.stan', line 172, column 2 to column 59)",
  " (in 'optimize_glm.stan', line 174, column 2 to column 81)",
  " (in 'optimize_glm.stan', line 175, column 2 to column 66)",
  " (in 'optimize_glm.stan', line 177, column 2 to column 78)",
  " (in 'optimize_glm.stan', line 178, column 2 to column 63)",
  " (in 'optimize_glm.stan', line 180, column 2 to column 63)",
  " (in 'optimize_glm.stan', line 181, column 2 to column 48)",
  " (in 'optimize_glm.stan', line 183, column 2 to column 63)",
  " (in 'optimize_glm.stan', line 184, column 2 to column 48)",
  " (in 'optimize_glm.stan', line 186, column 2 to column 69)",
  " (in 'optimize_glm.stan', line 187, column 2 to column 54)",
  " (in 'optimize_glm.stan', line 189, column 2 to column 66)",
  " (in 'optimize_glm.stan', line 190, column 2 to column 51)",
  " (in 'optimize_glm.stan', line 192, column 2 to column 63)",
  " (in 'optimize_glm.stan', line 193, column 2 to column 48)",
  " (in 'optimize_glm.stan', line 195, column 2 to column 63)",
  " (in 'optimize_glm.stan', line 196, column 2 to column 48)",
  " (in 'optimize_glm.stan', line 198, column 2 to column 69)",
  " (in 'optimize_glm.stan', line 199, column 2 to column 54)",
  " (in 'optimize_glm.stan', line 201, column 2 to column 66)",
  " (in 'optimize_glm.stan', line 202, column 2 to column 51)",
  " (in 'optimize_glm.stan', line 204, column 2 to column 66)",
  " (in 'optimize_glm.stan', line 205, column 2 to column 51)",
  " (in 'optimize_glm.stan', line 207, column 2 to column 66)",
  " (in 'optimize_glm.stan', line 208, column 2 to column 51)",
  " (in 'optimize_glm.stan', line 210, column 2 to column 64)",
  " (in 'optimize_glm.stan', line 211, column 2 to column 49)",
  " (in 'optimize_glm.stan', line 213, column 2 to column 64)",
  " (in 'optimize_glm.stan', line 214, column 2 to column 49)",
  " (in 'optimize_glm.stan', line 216, column 2 to column 70)",
  " (in 'optimize_glm.stan', line 217, column 2 to column 55)",
  " (in 'optimize_glm.stan', line 219, column 2 to column 67)",
  " (in 'optimize_glm.stan', line 220, column 2 to column 52)",
  " (in 'optimize_glm.stan', line 222, column 2 to column 67)",
  " (in 'optimize_glm.stan', line 223, column 2 to column 52)",
  " (in 'optimize_glm.stan', line 225, column 2 to column 67)",
  " (in 'optimize_glm.stan', line 226, column 2 to column 52)",
  " (in 'optimize_glm.stan', line 228, column 2 to column 69)",
  " (in 'optimize_glm.stan', line 229, column 2 to column 54)",
  " (in 'optimize_glm.stan', line 231, column 2 to column 69)",
  " (in 'optimize_glm.stan', line 232, column 2 to column 54)",
  " (in 'optimize_glm.stan', line 234, column 2 to column 75)",
  " (in 'optimize_glm.stan', line 235, column 2 to column 60)",
  " (in 'optimize_glm.stan', line 237, column 2 to column 72)",
  " (in 'optimize_glm.stan', line 238, column 2 to column 57)",
  " (in 'optimize_glm.stan', line 240, column 2 to column 72)",
  " (in 'optimize_glm.stan', line 241, column 2 to column 57)",
  " (in 'optimize_glm.stan', line 243, column 2 to column 72)",
  " (in 'optimize_glm.stan', line 244, column 2 to column 57)",
  " (in 'optimize_glm.stan', line 246, column 2 to column 78)",
  " (in 'optimize_glm.stan', line 247, column 2 to column 63)",
  " (in 'optimize_glm.stan', line 249, column 2 to column 75)",
  " (in 'optimize_glm.stan', line 250, column 2 to column 60)",
  " (in 'optimize_glm.stan', line 252, column 2 to column 70)",
  " (in 'optimize_glm.stan', line 253, column 2 to column 55)",
  " (in 'optimize_glm.stan', line 255, column 2 to column 70)",
  " (in 'optimize_glm.stan', line 256, column 2 to column 55)",
  " (in 'optimize_glm.stan', line 258, column 2 to column 76)",
  " (in 'optimize_glm.stan', line 259, column 2 to column 61)",
  " (in 'optimize_glm.stan', line 261, column 2 to column 73)",
  " (in 'optimize_glm.stan', line 262, column 2 to column 58)",
  " (in 'optimize_glm.stan', line 264, column 2 to column 73)",
  " (in 'optimize_glm.stan', line 265, column 2 to column 58)",
  " (in 'optimize_glm.stan', line 267, column 2 to column 73)",
  " (in 'optimize_glm.stan', line 268, column 2 to column 58)",
  " (in 'optimize_glm.stan', line 270, column 2 to column 79)",
  " (in 'optimize_glm.stan', line 271, column 2 to column 64)",
  " (in 'optimize_glm.stan', line 273, column 2 to column 76)",
  " (in 'optimize_glm.stan', line 274, column 2 to column 61)",
  " (in 'optimize_glm.stan', line 276, column 2 to column 74)",
  " (in 'optimize_glm.stan', line 277, column 2 to column 59)",
  " (in 'optimize_glm.stan', line 279, column 2 to column 77)",
  " (in 'optimize_glm.stan', line 280, column 2 to column 62)",
  " (in 'optimize_glm.stan', line 282, column 2 to column 69)",
  " (in 'optimize_glm.stan', line 283, column 2 to column 54)",
  " (in 'optimize_glm.stan', line 2, column 2 to column 17)",
  " (in 'optimize_glm.stan', line 3, column 2 to column 17)",
  " (in 'optimize_glm.stan', line 4, column 9 to column 10)",
  " (in 'optimize_glm.stan', line 4, column 12 to column 13)",
  " (in 'optimize_glm.stan', line 4, column 2 to column 19)",
  " (in 'optimize_glm.stan', line 5, column 18 to column 19)",
  " (in 'optimize_glm.stan', line 5, column 21 to column 22)",
  " (in 'optimize_glm.stan', line 5, column 2 to column 30)",
  " (in 'optimize_glm.stan', line 6, column 9 to column 10)",
  " (in 'optimize_glm.stan', line 6, column 2 to column 18)",
  " (in 'optimize_glm.stan', line 7, column 13 to column 14)",
  " (in 'optimize_glm.stan', line 7, column 2 to column 23)",
  " (in 'optimize_glm.stan', line 8, column 8 to column 9)",
  " (in 'optimize_glm.stan', line 8, column 2 to column 22)",
  " (in 'optimize_glm.stan', line 9, column 8 to column 9)",
  " (in 'optimize_glm.stan', line 9, column 2 to column 23)",
  " (in 'optimize_glm.stan', line 10, column 2 to column 12)",
  " (in 'optimize_glm.stan', line 11, column 2 to column 13)",
  " (in 'optimize_glm.stan', line 14, column 2 to column 20)",
  " (in 'optimize_glm.stan', line 15, column 2 to column 20)",
  " (in 'optimize_glm.stan', line 16, column 9 to column 10)",
  " (in 'optimize_glm.stan', line 16, column 12 to column 13)",
  " (in 'optimize_glm.stan', line 16, column 2 to column 22)",
  " (in 'optimize_glm.stan', line 17, column 9 to column 10)",
  " (in 'optimize_glm.stan', line 17, column 2 to column 21)",
  " (in 'optimize_glm.stan', line 18, column 13 to column 14)",
  " (in 'optimize_glm.stan', line 18, column 2 to column 26)",
  " (in 'optimize_glm.stan', line 19, column 8 to column 9)",
  " (in 'optimize_glm.stan', line 19, column 2 to column 25)",
  " (in 'optimize_glm.stan', line 20, column 8 to column 9)",
  " (in 'optimize_glm.stan', line 20, column 2 to column 26)",
  " (in 'optimize_glm.stan', line 21, column 2 to column 15)",
  " (in 'optimize_glm.stan', line 22, column 2 to column 16)",
  " (in 'optimize_glm.stan', line 25, column 9 to column 10)",
  " (in 'optimize_glm.stan', line 26, column 9 to column 10)",
  " (in 'optimize_glm.stan', line 27, column 9 to column 10)",
  " (in 'optimize_glm.stan', line 31, column 9 to column 10)",
  " (in 'optimize_glm.stan', line 31, column 12 to column 13)",
  " (in 'optimize_glm.stan', line 32, column 9 to column 10)",
  " (in 'optimize_glm.stan', line 32, column 12 to column 13)",
  " (in 'optimize_glm.stan', line 33, column 13 to column 14)"};
class optimize_glm_model final : public model_base_crtp<optimize_glm_model> {
 private:
  int k;
  int n;
  Eigen::Matrix<double,-1,-1> X_d_data__;
  std::vector<Eigen::Matrix<double,-1,-1>> X_d_a;
  Eigen::Matrix<double,-1,1> y_v_d_data__;
  Eigen::Matrix<double,1,-1> X_rv_d_data__;
  std::vector<int> y_vi_d;
  std::vector<int> y2_vi_d;
  int y_s_d;
  double y_r_d;
  int k_td;
  int n_td;
  Eigen::Matrix<double,-1,-1> X_d_td_data__;
  Eigen::Matrix<double,-1,1> y_v_d_td_data__;
  Eigen::Matrix<double,1,-1> X_rv_d_td_data__;
  std::vector<int> y_vi_d_td;
  std::vector<int> y2_vi_d_td;
  int y_s_d_td;
  double y_r_d_td;
  matrix_cl<double> X_d_opencl__;
  matrix_cl<double> X_d_td_opencl__;
  matrix_cl<double> y_v_d_opencl__;
  matrix_cl<double> y_v_d_td_opencl__;
  matrix_cl<int> y_vi_d_opencl__;
  matrix_cl<double> y_vi_d_td_opencl__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_d{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y_v_d{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,1,-1>> X_rv_d{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_d_td{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y_v_d_td{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,1,-1>> X_rv_d_td{nullptr, 0};
 public:
  ~optimize_glm_model() {}
  optimize_glm_model(stan::io::var_context& context__, unsigned int
                     random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "optimize_glm_model_namespace::optimize_glm_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 176;
      context__.validate_dims("data initialization", "k", "int",
        std::vector<size_t>{});
      k = std::numeric_limits<int>::min();
      current_statement__ = 176;
      k = context__.vals_i("k")[(1 - 1)];
      current_statement__ = 176;
      stan::math::check_greater_or_equal(function__, "k", k, 1);
      current_statement__ = 177;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 177;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 177;
      stan::math::check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 178;
      stan::math::validate_non_negative_index("X_d", "n", n);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("X_d", "k", k);
      current_statement__ = 180;
      context__.validate_dims("data initialization", "X_d", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(k)});
      X_d_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, k,
                     std::numeric_limits<double>::quiet_NaN());
      new (&X_d) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_d_data__.data(),
        n, k);
      {
        std::vector<local_scalar_t__> X_d_flat__;
        current_statement__ = 180;
        X_d_flat__ = context__.vals_r("X_d");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(X_d, X_d_flat__[(pos__ - 1)],
              "assigning variable X_d", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 181;
      stan::math::validate_non_negative_index("X_d_a", "n", n);
      current_statement__ = 182;
      stan::math::validate_non_negative_index("X_d_a", "k", k);
      current_statement__ = 183;
      context__.validate_dims("data initialization", "X_d_a", "double",
        std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(n),
          static_cast<size_t>(k)});
      X_d_a = std::vector<Eigen::Matrix<double,-1,-1>>(2,
                Eigen::Matrix<double,-1,-1>::Constant(n, k,
                  std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> X_d_a_flat__;
        current_statement__ = 183;
        X_d_a_flat__ = context__.vals_r("X_d_a");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              stan::model::assign(X_d_a, X_d_a_flat__[(pos__ - 1)],
                "assigning variable X_d_a", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 184;
      stan::math::validate_non_negative_index("y_v_d", "n", n);
      current_statement__ = 185;
      context__.validate_dims("data initialization", "y_v_d", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      y_v_d_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                       std::numeric_limits<double>::quiet_NaN());
      new (&y_v_d)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(y_v_d_data__.data(), n);
      {
        std::vector<local_scalar_t__> y_v_d_flat__;
        current_statement__ = 185;
        y_v_d_flat__ = context__.vals_r("y_v_d");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          stan::model::assign(y_v_d, y_v_d_flat__[(pos__ - 1)],
            "assigning variable y_v_d", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 186;
      stan::math::validate_non_negative_index("X_rv_d", "n", n);
      current_statement__ = 187;
      context__.validate_dims("data initialization", "X_rv_d", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      X_rv_d_data__ = Eigen::Matrix<double,1,-1>::Constant(n,
                        std::numeric_limits<double>::quiet_NaN());
      new (&X_rv_d)
        Eigen::Map<Eigen::Matrix<double,1,-1>>(X_rv_d_data__.data(), n);
      {
        std::vector<local_scalar_t__> X_rv_d_flat__;
        current_statement__ = 187;
        X_rv_d_flat__ = context__.vals_r("X_rv_d");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          stan::model::assign(X_rv_d, X_rv_d_flat__[(pos__ - 1)],
            "assigning variable X_rv_d", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 188;
      stan::math::validate_non_negative_index("y_vi_d", "n", n);
      current_statement__ = 189;
      context__.validate_dims("data initialization", "y_vi_d", "int",
        std::vector<size_t>{static_cast<size_t>(n)});
      y_vi_d = std::vector<int>(n, std::numeric_limits<int>::min());
      current_statement__ = 189;
      y_vi_d = context__.vals_i("y_vi_d");
      current_statement__ = 190;
      stan::math::validate_non_negative_index("y2_vi_d", "n", n);
      current_statement__ = 191;
      context__.validate_dims("data initialization", "y2_vi_d", "int",
        std::vector<size_t>{static_cast<size_t>(n)});
      y2_vi_d = std::vector<int>(n, std::numeric_limits<int>::min());
      current_statement__ = 191;
      y2_vi_d = context__.vals_i("y2_vi_d");
      current_statement__ = 192;
      context__.validate_dims("data initialization", "y_s_d", "int",
        std::vector<size_t>{});
      y_s_d = std::numeric_limits<int>::min();
      current_statement__ = 192;
      y_s_d = context__.vals_i("y_s_d")[(1 - 1)];
      current_statement__ = 193;
      context__.validate_dims("data initialization", "y_r_d", "double",
        std::vector<size_t>{});
      y_r_d = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 193;
      y_r_d = context__.vals_r("y_r_d")[(1 - 1)];
      current_statement__ = 194;
      k_td = std::numeric_limits<int>::min();
      current_statement__ = 195;
      n_td = std::numeric_limits<int>::min();
      current_statement__ = 196;
      stan::math::validate_non_negative_index("X_d_td", "n", n);
      current_statement__ = 197;
      stan::math::validate_non_negative_index("X_d_td", "k", k);
      current_statement__ = 198;
      X_d_td_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, k,
                        std::numeric_limits<double>::quiet_NaN());
      new (&X_d_td)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_d_td_data__.data(), n, k);
      current_statement__ = 199;
      stan::math::validate_non_negative_index("y_v_d_td", "n", n);
      current_statement__ = 200;
      y_v_d_td_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                          std::numeric_limits<double>::quiet_NaN());
      new (&y_v_d_td)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(y_v_d_td_data__.data(), n);
      current_statement__ = 201;
      stan::math::validate_non_negative_index("X_rv_d_td", "n", n);
      current_statement__ = 202;
      X_rv_d_td_data__ = Eigen::Matrix<double,1,-1>::Constant(n,
                           std::numeric_limits<double>::quiet_NaN());
      new (&X_rv_d_td)
        Eigen::Map<Eigen::Matrix<double,1,-1>>(X_rv_d_td_data__.data(), n);
      current_statement__ = 203;
      stan::math::validate_non_negative_index("y_vi_d_td", "n", n);
      current_statement__ = 204;
      y_vi_d_td = std::vector<int>(n, std::numeric_limits<int>::min());
      current_statement__ = 205;
      stan::math::validate_non_negative_index("y2_vi_d_td", "n", n);
      current_statement__ = 206;
      y2_vi_d_td = std::vector<int>(n, std::numeric_limits<int>::min());
      current_statement__ = 207;
      y_s_d_td = std::numeric_limits<int>::min();
      current_statement__ = 208;
      y_r_d_td = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 194;
      stan::math::check_greater_or_equal(function__, "k_td", k_td, 1);
      current_statement__ = 195;
      stan::math::check_greater_or_equal(function__, "n_td", n_td, 0);
      current_statement__ = 209;
      stan::math::validate_non_negative_index("alpha_v", "k", k);
      current_statement__ = 210;
      stan::math::validate_non_negative_index("beta", "k", k);
      current_statement__ = 211;
      stan::math::validate_non_negative_index("cuts", "k", k);
      current_statement__ = 212;
      stan::math::validate_non_negative_index("X_p", "n", n);
      current_statement__ = 213;
      stan::math::validate_non_negative_index("X_p", "k", k);
      current_statement__ = 214;
      stan::math::validate_non_negative_index("beta_m", "n", n);
      current_statement__ = 215;
      stan::math::validate_non_negative_index("beta_m", "k", k);
      current_statement__ = 216;
      stan::math::validate_non_negative_index("X_rv_p", "n", n);
      X_d_opencl__ = stan::math::to_matrix_cl(X_d);
      X_d_td_opencl__ = stan::math::to_matrix_cl(X_d_td);
      y_v_d_opencl__ = stan::math::to_matrix_cl(y_v_d);
      y_v_d_td_opencl__ = stan::math::to_matrix_cl(y_v_d_td);
      y_vi_d_opencl__ = stan::math::to_matrix_cl(y_vi_d);
      y_vi_d_td_opencl__ = stan::math::to_matrix_cl(y_vi_d_td);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = k + k + k + 1 + 1 + 1 + (n * k) + (n * k) + n;
  }
  inline std::string model_name() const final {
    return "optimize_glm_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = --print-cpp --use-opencl"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "optimize_glm_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      current_statement__ = 1;
      alpha_v = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(k);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      current_statement__ = 2;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(k);
      Eigen::Matrix<local_scalar_t__,-1,1> cuts =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      current_statement__ = 3;
      cuts = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(k);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 5;
      alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 6;
      phi = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,-1> X_p =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, k, DUMMY_VAR__);
      current_statement__ = 7;
      X_p = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n, k);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_m =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, k, DUMMY_VAR__);
      current_statement__ = 8;
      beta_m = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n,
                 k);
      Eigen::Matrix<local_scalar_t__,1,-1> X_rv_p =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 9;
      X_rv_p = in__.template read<Eigen::Matrix<local_scalar_t__,1,-1>>(n);
      {
        current_statement__ = 10;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_v_d_opencl__,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta),
                         sigma));
        current_statement__ = 11;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(
                         y_v_d_opencl__, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_v_d_opencl__,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 13;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(
                         y_v_d_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 14;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_r_d,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 15;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_r_d,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 16;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_r_d,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 17;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_r_d,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 18;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_v_d, X_rv_d,
                         alpha, beta, beta));
        current_statement__ = 19;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_v_d,
                         X_rv_d, alpha, beta, beta));
        current_statement__ = 20;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_v_d, X_rv_p,
                         alpha, beta, beta));
        current_statement__ = 21;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_v_d,
                         X_rv_p, alpha, beta, beta));
        current_statement__ = 22;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(
                         y_v_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 23;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(
                         y_v_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 24;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(
                         y_v_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 25;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(
                         y_v_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 26;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_r_d_td,
                         X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 27;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_r_d_td,
                         X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_r_d_td,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_r_d_td,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 30;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_v_d_td,
                         X_rv_d_td, alpha, beta, beta));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_v_d_td,
                         X_rv_d_td, alpha, beta, beta));
        current_statement__ = 32;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_v_d_td,
                         X_rv_p, alpha, beta, beta));
        current_statement__ = 33;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_v_d_td,
                         X_rv_p, alpha, beta, beta));
        current_statement__ = 34;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(
                         y_vi_d_opencl__, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 35;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_vi_d_opencl__, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 36;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 37;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 38;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_vi_d,
                         X_rv_d, alpha, beta));
        current_statement__ = 39;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(y_vi_d,
                         X_rv_d, alpha, beta));
        current_statement__ = 40;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_vi_d,
                         X_rv_p, alpha, beta));
        current_statement__ = 41;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(y_vi_d,
                         X_rv_p, alpha, beta));
        current_statement__ = 42;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_s_d,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 43;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(y_s_d,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 44;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_s_d,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 45;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(y_s_d,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 46;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(
                         y_vi_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 47;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 48;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 49;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 50;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_vi_d_td,
                         X_rv_d_td, alpha, beta));
        current_statement__ = 51;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_vi_d_td, X_rv_d_td, alpha, beta));
        current_statement__ = 52;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_vi_d_td,
                         X_rv_p, alpha, beta));
        current_statement__ = 53;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_vi_d_td, X_rv_p, alpha, beta));
        current_statement__ = 54;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_s_d_td,
                         X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 55;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_s_d_td, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 56;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_s_d_td,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 57;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_s_d_td, stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 58;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(
                         y_vi_d_opencl__, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 59;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(
                         y_vi_d_opencl__, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 60;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 61;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 62;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_s_d,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 63;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_s_d,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 64;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_s_d,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 65;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_s_d,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 66;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_vi_d,
                         X_rv_d, alpha, beta));
        current_statement__ = 67;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_vi_d,
                         X_rv_d, alpha, beta));
        current_statement__ = 68;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_vi_d,
                         X_rv_p, alpha, beta));
        current_statement__ = 69;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_vi_d,
                         X_rv_p, alpha, beta));
        current_statement__ = 70;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(
                         y_vi_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 71;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 72;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 73;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 74;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_s_d_td,
                         X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 75;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_s_d_td,
                         X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 76;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_s_d_td,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 77;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_s_d_td,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 78;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_vi_d_td,
                         X_rv_d_td, alpha, beta));
        current_statement__ = 79;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_vi_d_td,
                         X_rv_d_td, alpha, beta));
        current_statement__ = 80;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_vi_d_td,
                         X_rv_p, alpha, beta));
        current_statement__ = 81;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_vi_d_td,
                         X_rv_p, alpha, beta));
        current_statement__ = 82;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_vi_d_opencl__, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 83;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d_opencl__, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 84;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 85;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 86;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(y_s_d,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta),
                         phi));
        current_statement__ = 87;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_s_d, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 88;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(y_s_d,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 89;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_s_d, stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 90;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(y_vi_d,
                         X_rv_d, alpha, beta, phi));
        current_statement__ = 91;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d, X_rv_d, alpha, beta, phi));
        current_statement__ = 92;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(y_vi_d,
                         X_rv_p, alpha, beta, phi));
        current_statement__ = 93;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d, X_rv_p, alpha, beta, phi));
        current_statement__ = 94;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_vi_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 95;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 96;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 97;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 98;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_s_d_td, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 99;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_s_d_td, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 100;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_s_d_td, stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 101;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_s_d_td, stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 102;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_vi_d_td, X_rv_d_td, alpha, beta, phi));
        current_statement__ = 103;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d_td, X_rv_d_td, alpha, beta, phi));
        current_statement__ = 104;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_vi_d_td, X_rv_p, alpha, beta, phi));
        current_statement__ = 105;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d_td, X_rv_p, alpha, beta, phi));
        current_statement__ = 106;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d,
                         X_d_opencl__, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 107;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(y_s_d,
                         X_d_opencl__, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 108;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d,
                         stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 109;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(y_s_d,
                         stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 110;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d_td,
                         X_d_td_opencl__, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 111;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_s_d_td, X_d_td_opencl__,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 112;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d_td,
                         stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 113;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_s_d_td, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 114;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d,
                         X_d_opencl__, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 115;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(y_s_d,
                         X_d_opencl__, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 116;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d,
                         stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 117;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(y_s_d,
                         stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 118;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d_td,
                         X_d_td_opencl__, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 119;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_s_d_td, X_d_td_opencl__,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 120;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d_td,
                         stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 121;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_s_d_td, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 122;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d,
                         X_rv_d, beta, cuts));
        current_statement__ = 123;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(y_s_d,
                         X_rv_d, beta, cuts));
        current_statement__ = 124;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d,
                         X_rv_p, beta, cuts));
        current_statement__ = 125;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(y_s_d,
                         X_rv_p, beta, cuts));
        current_statement__ = 126;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(
                         y_vi_d_opencl__, X_d_opencl__,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 127;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_vi_d_opencl__, X_d_opencl__,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 128;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 129;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 130;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(
                         y_vi_d_td_opencl__, X_d_td_opencl__,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 131;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, X_d_td_opencl__,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 132;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 133;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 134;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_vi_d,
                         X_rv_d, beta, cuts));
        current_statement__ = 135;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_vi_d, X_rv_d, beta, cuts));
        current_statement__ = 136;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_vi_d,
                         X_rv_p, beta, cuts));
        current_statement__ = 137;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_vi_d, X_rv_p, beta, cuts));
        current_statement__ = 138;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(y_s_d,
                         X_d_opencl__, stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 139;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d, X_d_opencl__,
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 140;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(y_s_d,
                         stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 141;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 142;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_s_d_td, X_d_td_opencl__,
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 143;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d_td, X_d_td_opencl__,
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 144;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_s_d_td, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 145;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d_td, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 146;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(y_s_d,
                         X_rv_d, alpha_v, beta_m));
        current_statement__ = 147;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d, X_rv_d, alpha_v, beta_m));
        current_statement__ = 148;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(y_s_d,
                         X_rv_p, alpha_v, beta_m));
        current_statement__ = 149;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d, X_rv_p, alpha_v, beta_m));
        current_statement__ = 150;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_s_d_td, X_rv_d_td, alpha_v, beta_m));
        current_statement__ = 151;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d_td, X_rv_d_td, alpha_v, beta_m));
        current_statement__ = 152;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_s_d_td, X_rv_p, alpha_v, beta_m));
        current_statement__ = 153;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d_td, X_rv_p, alpha_v, beta_m));
        current_statement__ = 154;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_vi_d_opencl__, X_d_opencl__,
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 155;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d_opencl__, X_d_opencl__,
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 156;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 157;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 158;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_vi_d_td_opencl__, X_d_td_opencl__,
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 159;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, X_d_td_opencl__,
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 160;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 161;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 162;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(y_vi_d,
                         X_rv_d, alpha_v, beta_m));
        current_statement__ = 163;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d, X_rv_d, alpha_v, beta_m));
        current_statement__ = 164;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(y_vi_d,
                         X_rv_p, alpha_v, beta_m));
        current_statement__ = 165;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d, X_rv_p, alpha_v, beta_m));
        current_statement__ = 166;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_vi_d_td, X_rv_d_td, alpha_v, beta_m));
        current_statement__ = 167;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d_td, X_rv_d_td, alpha_v, beta_m));
        current_statement__ = 168;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_vi_d_td, X_rv_p, alpha_v, beta_m));
        current_statement__ = 169;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d_td, X_rv_p, alpha_v, beta_m));
        current_statement__ = 170;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(y2_vi_d,
                         X_rv_p, alpha_v, beta_m));
        current_statement__ = 171;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y2_vi_d, X_rv_p, alpha_v, beta_m));
        current_statement__ = 172;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y2_vi_d_td, X_rv_p, alpha_v, beta_m));
        current_statement__ = 173;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y2_vi_d_td, X_rv_p, alpha_v, beta_m));
        current_statement__ = 174;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_v_d_opencl__,
                         stan::math::to_matrix_cl(
                           stan::model::rvalue(X_d_a, "X_d_a",
                             stan::model::index_uni(1))), alpha,
                         stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 175;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(
                         y_v_d_opencl__,
                         stan::math::to_matrix_cl(
                           stan::model::rvalue(X_d_a, "X_d_a",
                             stan::model::index_uni(1))), alpha,
                         stan::math::to_matrix_cl(beta), sigma));
      }
      X_d_opencl__.wait_for_read_write_events();
      X_d_td_opencl__.wait_for_read_write_events();
      y_v_d_opencl__.wait_for_read_write_events();
      y_v_d_td_opencl__.wait_for_read_write_events();
      y_vi_d_opencl__.wait_for_read_write_events();
      y_vi_d_td_opencl__.wait_for_read_write_events();
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "optimize_glm_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      current_statement__ = 1;
      alpha_v = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(k);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      current_statement__ = 2;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(k);
      Eigen::Matrix<local_scalar_t__,-1,1> cuts =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      current_statement__ = 3;
      cuts = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(k);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 5;
      alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 6;
      phi = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,-1> X_p =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, k, DUMMY_VAR__);
      current_statement__ = 7;
      X_p = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n, k);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_m =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, k, DUMMY_VAR__);
      current_statement__ = 8;
      beta_m = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n,
                 k);
      Eigen::Matrix<local_scalar_t__,1,-1> X_rv_p =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 9;
      X_rv_p = in__.template read<Eigen::Matrix<local_scalar_t__,1,-1>>(n);
      {
        current_statement__ = 10;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_v_d_opencl__,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta),
                         sigma));
        current_statement__ = 11;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(
                         y_v_d_opencl__, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_v_d_opencl__,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 13;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(
                         y_v_d_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 14;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_r_d,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 15;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_r_d,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 16;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_r_d,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 17;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_r_d,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 18;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_v_d, X_rv_d,
                         alpha, beta, beta));
        current_statement__ = 19;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_v_d,
                         X_rv_d, alpha, beta, beta));
        current_statement__ = 20;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_v_d, X_rv_p,
                         alpha, beta, beta));
        current_statement__ = 21;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_v_d,
                         X_rv_p, alpha, beta, beta));
        current_statement__ = 22;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(
                         y_v_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 23;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(
                         y_v_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 24;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(
                         y_v_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 25;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(
                         y_v_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 26;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_r_d_td,
                         X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 27;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_r_d_td,
                         X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_r_d_td,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_r_d_td,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 30;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_v_d_td,
                         X_rv_d_td, alpha, beta, beta));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_v_d_td,
                         X_rv_d_td, alpha, beta, beta));
        current_statement__ = 32;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_v_d_td,
                         X_rv_p, alpha, beta, beta));
        current_statement__ = 33;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(y_v_d_td,
                         X_rv_p, alpha, beta, beta));
        current_statement__ = 34;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(
                         y_vi_d_opencl__, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 35;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_vi_d_opencl__, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 36;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 37;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 38;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_vi_d,
                         X_rv_d, alpha, beta));
        current_statement__ = 39;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(y_vi_d,
                         X_rv_d, alpha, beta));
        current_statement__ = 40;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_vi_d,
                         X_rv_p, alpha, beta));
        current_statement__ = 41;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(y_vi_d,
                         X_rv_p, alpha, beta));
        current_statement__ = 42;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_s_d,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 43;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(y_s_d,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 44;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_s_d,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 45;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(y_s_d,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 46;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(
                         y_vi_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 47;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 48;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 49;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 50;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_vi_d_td,
                         X_rv_d_td, alpha, beta));
        current_statement__ = 51;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_vi_d_td, X_rv_d_td, alpha, beta));
        current_statement__ = 52;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_vi_d_td,
                         X_rv_p, alpha, beta));
        current_statement__ = 53;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_vi_d_td, X_rv_p, alpha, beta));
        current_statement__ = 54;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_s_d_td,
                         X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 55;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_s_d_td, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 56;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<false>(y_s_d_td,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 57;
        lp_accum__.add(stan::math::bernoulli_logit_glm_lpmf<propto__>(
                         y_s_d_td, stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 58;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(
                         y_vi_d_opencl__, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 59;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(
                         y_vi_d_opencl__, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 60;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 61;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 62;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_s_d,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 63;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_s_d,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 64;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_s_d,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 65;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_s_d,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 66;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_vi_d,
                         X_rv_d, alpha, beta));
        current_statement__ = 67;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_vi_d,
                         X_rv_d, alpha, beta));
        current_statement__ = 68;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_vi_d,
                         X_rv_p, alpha, beta));
        current_statement__ = 69;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_vi_d,
                         X_rv_p, alpha, beta));
        current_statement__ = 70;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(
                         y_vi_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 71;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 72;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 73;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta)));
        current_statement__ = 74;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_s_d_td,
                         X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 75;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_s_d_td,
                         X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 76;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_s_d_td,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 77;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_s_d_td,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta)));
        current_statement__ = 78;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_vi_d_td,
                         X_rv_d_td, alpha, beta));
        current_statement__ = 79;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_vi_d_td,
                         X_rv_d_td, alpha, beta));
        current_statement__ = 80;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<false>(y_vi_d_td,
                         X_rv_p, alpha, beta));
        current_statement__ = 81;
        lp_accum__.add(stan::math::poisson_log_glm_lpmf<propto__>(y_vi_d_td,
                         X_rv_p, alpha, beta));
        current_statement__ = 82;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_vi_d_opencl__, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 83;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d_opencl__, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 84;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 85;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 86;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(y_s_d,
                         X_d_opencl__, alpha, stan::math::to_matrix_cl(beta),
                         phi));
        current_statement__ = 87;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_s_d, X_d_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 88;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(y_s_d,
                         stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 89;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_s_d, stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 90;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(y_vi_d,
                         X_rv_d, alpha, beta, phi));
        current_statement__ = 91;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d, X_rv_d, alpha, beta, phi));
        current_statement__ = 92;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(y_vi_d,
                         X_rv_p, alpha, beta, phi));
        current_statement__ = 93;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d, X_rv_p, alpha, beta, phi));
        current_statement__ = 94;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_vi_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 95;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 96;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 97;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         alpha, stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 98;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_s_d_td, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 99;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_s_d_td, X_d_td_opencl__, alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 100;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_s_d_td, stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 101;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_s_d_td, stan::math::to_matrix_cl(X_p), alpha,
                         stan::math::to_matrix_cl(beta), phi));
        current_statement__ = 102;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_vi_d_td, X_rv_d_td, alpha, beta, phi));
        current_statement__ = 103;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d_td, X_rv_d_td, alpha, beta, phi));
        current_statement__ = 104;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<false>(
                         y_vi_d_td, X_rv_p, alpha, beta, phi));
        current_statement__ = 105;
        lp_accum__.add(stan::math::neg_binomial_2_log_glm_lpmf<propto__>(
                         y_vi_d_td, X_rv_p, alpha, beta, phi));
        current_statement__ = 106;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d,
                         X_d_opencl__, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 107;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(y_s_d,
                         X_d_opencl__, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 108;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d,
                         stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 109;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(y_s_d,
                         stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 110;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d_td,
                         X_d_td_opencl__, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 111;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_s_d_td, X_d_td_opencl__,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 112;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d_td,
                         stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 113;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_s_d_td, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 114;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d,
                         X_d_opencl__, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 115;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(y_s_d,
                         X_d_opencl__, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 116;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d,
                         stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 117;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(y_s_d,
                         stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 118;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d_td,
                         X_d_td_opencl__, stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 119;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_s_d_td, X_d_td_opencl__,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 120;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d_td,
                         stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 121;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_s_d_td, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 122;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d,
                         X_rv_d, beta, cuts));
        current_statement__ = 123;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(y_s_d,
                         X_rv_d, beta, cuts));
        current_statement__ = 124;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_s_d,
                         X_rv_p, beta, cuts));
        current_statement__ = 125;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(y_s_d,
                         X_rv_p, beta, cuts));
        current_statement__ = 126;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(
                         y_vi_d_opencl__, X_d_opencl__,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 127;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_vi_d_opencl__, X_d_opencl__,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 128;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 129;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 130;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(
                         y_vi_d_td_opencl__, X_d_td_opencl__,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 131;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, X_d_td_opencl__,
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 132;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 133;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(beta),
                         stan::math::to_matrix_cl(cuts)));
        current_statement__ = 134;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_vi_d,
                         X_rv_d, beta, cuts));
        current_statement__ = 135;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_vi_d, X_rv_d, beta, cuts));
        current_statement__ = 136;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<false>(y_vi_d,
                         X_rv_p, beta, cuts));
        current_statement__ = 137;
        lp_accum__.add(stan::math::ordered_logistic_glm_lpmf<propto__>(
                         y_vi_d, X_rv_p, beta, cuts));
        current_statement__ = 138;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(y_s_d,
                         X_d_opencl__, stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 139;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d, X_d_opencl__,
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 140;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(y_s_d,
                         stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 141;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 142;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_s_d_td, X_d_td_opencl__,
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 143;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d_td, X_d_td_opencl__,
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 144;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_s_d_td, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 145;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d_td, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 146;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(y_s_d,
                         X_rv_d, alpha_v, beta_m));
        current_statement__ = 147;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d, X_rv_d, alpha_v, beta_m));
        current_statement__ = 148;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(y_s_d,
                         X_rv_p, alpha_v, beta_m));
        current_statement__ = 149;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d, X_rv_p, alpha_v, beta_m));
        current_statement__ = 150;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_s_d_td, X_rv_d_td, alpha_v, beta_m));
        current_statement__ = 151;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d_td, X_rv_d_td, alpha_v, beta_m));
        current_statement__ = 152;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_s_d_td, X_rv_p, alpha_v, beta_m));
        current_statement__ = 153;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_s_d_td, X_rv_p, alpha_v, beta_m));
        current_statement__ = 154;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_vi_d_opencl__, X_d_opencl__,
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 155;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d_opencl__, X_d_opencl__,
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 156;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 157;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 158;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_vi_d_td_opencl__, X_d_td_opencl__,
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 159;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, X_d_td_opencl__,
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 160;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 161;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d_td_opencl__, stan::math::to_matrix_cl(X_p),
                         stan::math::to_matrix_cl(alpha_v),
                         stan::math::to_matrix_cl(beta_m)));
        current_statement__ = 162;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(y_vi_d,
                         X_rv_d, alpha_v, beta_m));
        current_statement__ = 163;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d, X_rv_d, alpha_v, beta_m));
        current_statement__ = 164;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(y_vi_d,
                         X_rv_p, alpha_v, beta_m));
        current_statement__ = 165;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d, X_rv_p, alpha_v, beta_m));
        current_statement__ = 166;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_vi_d_td, X_rv_d_td, alpha_v, beta_m));
        current_statement__ = 167;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d_td, X_rv_d_td, alpha_v, beta_m));
        current_statement__ = 168;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y_vi_d_td, X_rv_p, alpha_v, beta_m));
        current_statement__ = 169;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y_vi_d_td, X_rv_p, alpha_v, beta_m));
        current_statement__ = 170;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(y2_vi_d,
                         X_rv_p, alpha_v, beta_m));
        current_statement__ = 171;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y2_vi_d, X_rv_p, alpha_v, beta_m));
        current_statement__ = 172;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<false>(
                         y2_vi_d_td, X_rv_p, alpha_v, beta_m));
        current_statement__ = 173;
        lp_accum__.add(stan::math::categorical_logit_glm_lpmf<propto__>(
                         y2_vi_d_td, X_rv_p, alpha_v, beta_m));
        current_statement__ = 174;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<false>(y_v_d_opencl__,
                         stan::math::to_matrix_cl(
                           stan::model::rvalue(X_d_a, "X_d_a",
                             stan::model::index_uni(1))), alpha,
                         stan::math::to_matrix_cl(beta), sigma));
        current_statement__ = 175;
        lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(
                         y_v_d_opencl__,
                         stan::math::to_matrix_cl(
                           stan::model::rvalue(X_d_a, "X_d_a",
                             stan::model::index_uni(1))), alpha,
                         stan::math::to_matrix_cl(beta), sigma));
      }
      X_d_opencl__.wait_for_read_write_events();
      X_d_td_opencl__.wait_for_read_write_events();
      y_v_d_opencl__.wait_for_read_write_events();
      y_v_d_td_opencl__.wait_for_read_write_events();
      y_vi_d_opencl__.wait_for_read_write_events();
      y_vi_d_td_opencl__.wait_for_read_write_events();
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "optimize_glm_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> alpha_v =
        Eigen::Matrix<double,-1,1>::Constant(k,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alpha_v = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(k);
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(k,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(k);
      Eigen::Matrix<double,-1,1> cuts =
        Eigen::Matrix<double,-1,1>::Constant(k,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      cuts = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(k);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      alpha = in__.template read<local_scalar_t__>();
      double phi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      phi = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,-1> X_p =
        Eigen::Matrix<double,-1,-1>::Constant(n, k,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      X_p = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n, k);
      Eigen::Matrix<double,-1,-1> beta_m =
        Eigen::Matrix<double,-1,-1>::Constant(n, k,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      beta_m = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n,
                 k);
      Eigen::Matrix<double,1,-1> X_rv_p =
        Eigen::Matrix<double,1,-1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      X_rv_p = in__.template read<Eigen::Matrix<local_scalar_t__,1,-1>>(n);
      out__.write(alpha_v);
      out__.write(beta);
      out__.write(cuts);
      out__.write(sigma);
      out__.write(alpha);
      out__.write(phi);
      out__.write(X_p);
      out__.write(beta_m);
      out__.write(X_rv_p);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alpha_v,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(k),
        "assigning variable alpha_v");
      out__.write(alpha_v);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(k),
        "assigning variable beta");
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> cuts =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(cuts,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(k),
        "assigning variable cuts");
      out__.write(cuts);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 5;
      alpha = in__.read<local_scalar_t__>();
      out__.write(alpha);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 6;
      phi = in__.read<local_scalar_t__>();
      out__.write(phi);
      Eigen::Matrix<local_scalar_t__,-1,-1> X_p =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, k, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(X_p,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n, k),
        "assigning variable X_p");
      out__.write(X_p);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_m =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, k, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(beta_m,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n, k),
        "assigning variable beta_m");
      out__.write(beta_m);
      Eigen::Matrix<local_scalar_t__,1,-1> X_rv_p =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(X_rv_p,
        in__.read<Eigen::Matrix<local_scalar_t__,1,-1>>(n),
        "assigning variable X_rv_p");
      out__.write(X_rv_p);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha_v",
        "double", std::vector<size_t>{static_cast<size_t>(k)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(k)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "cuts", "double",
        std::vector<size_t>{static_cast<size_t>(k)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "X_p", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(k)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "beta_m", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(k)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "X_rv_p", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_v_flat__;
        current_statement__ = 1;
        alpha_v_flat__ = context__.vals_r("alpha_v");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          stan::model::assign(alpha_v, alpha_v_flat__[(pos__ - 1)],
            "assigning variable alpha_v", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha_v);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 2;
        beta_flat__ = context__.vals_r("beta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> cuts =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> cuts_flat__;
        current_statement__ = 3;
        cuts_flat__ = context__.vals_r("cuts");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          stan::model::assign(cuts, cuts_flat__[(pos__ - 1)],
            "assigning variable cuts", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(cuts);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 5;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      out__.write(alpha);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 6;
      phi = context__.vals_r("phi")[(1 - 1)];
      out__.write(phi);
      Eigen::Matrix<local_scalar_t__,-1,-1> X_p =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, k, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> X_p_flat__;
        current_statement__ = 7;
        X_p_flat__ = context__.vals_r("X_p");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(X_p, X_p_flat__[(pos__ - 1)],
              "assigning variable X_p", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(X_p);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_m =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, k, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_m_flat__;
        current_statement__ = 8;
        beta_m_flat__ = context__.vals_r("beta_m");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(beta_m, beta_m_flat__[(pos__ - 1)],
              "assigning variable beta_m", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(beta_m);
      Eigen::Matrix<local_scalar_t__,1,-1> X_rv_p =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(n, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> X_rv_p_flat__;
        current_statement__ = 9;
        X_rv_p_flat__ = context__.vals_r("X_rv_p");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          stan::model::assign(X_rv_p, X_rv_p_flat__[(pos__ - 1)],
            "assigning variable X_rv_p", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(X_rv_p);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha_v", "beta", "cuts", "sigma",
                "alpha", "phi", "X_p", "beta_m", "X_rv_p"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(k)},
                std::vector<size_t>{static_cast<size_t>(k)},
                std::vector<size_t>{static_cast<size_t>(k)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(n),
                  static_cast<size_t>(k)},
                std::vector<size_t>{static_cast<size_t>(n),
                  static_cast<size_t>(k)},
                std::vector<size_t>{static_cast<size_t>(n)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_v" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      param_names__.emplace_back(std::string() + "cuts" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "phi");
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
        param_names__.emplace_back(std::string() + "X_p" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_m" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      param_names__.emplace_back(std::string() + "X_rv_p" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_v" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      param_names__.emplace_back(std::string() + "cuts" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "phi");
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
        param_names__.emplace_back(std::string() + "X_p" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_m" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      param_names__.emplace_back(std::string() + "X_rv_p" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"cuts\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"X_p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"beta_m\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"X_rv_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"cuts\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"X_p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"beta_m\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"X_rv_p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((k + k) + k) + 1) + 1) + 1) + (n * k))
      + (n * k)) + n);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((k + k) + k) + 1) + 1) + 1) + (n * k))
      + (n * k)) + n);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = optimize_glm_model_namespace::optimize_glm_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return optimize_glm_model_namespace::profiles__;
}
#endif
