
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace mem_patterns_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 111> locations_array__ = 
{" (found before start of program)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 16, column 2 to column 13)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 18, column 2 to column 24)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 19, column 2 to column 25)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 20, column 2 to column 38)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 21, column 2 to column 36)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 22, column 2 to column 30)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 23, column 2 to column 41)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 24, column 2 to column 35)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 25, column 2 to column 31)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 26, column 2 to column 48)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 27, column 2 to column 33)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 30, column 2 to column 38)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 32, column 2 to column 38)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 34, column 2 to column 37)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 36, column 2 to column 43)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 37, column 2 to column 41)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 38, column 2 to column 47)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 41, column 2 to column 25)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 43, column 2 to column 48)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 44, column 2 to column 48)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 49, column 2 to column 41)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 52, column 2 to column 58)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 55, column 2 to column 63)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 59, column 2 to column 44)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 60, column 2 to column 77)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 61, column 2 to column 68)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 57, column 2 to column 45)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 62, column 2 to column 75)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 66, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 66, column 2 to column 108)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 67, column 2 to column 95)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 68, column 2 to column 56)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 69, column 2 to column 62)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 70, column 2 to column 79)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 71, column 2 to column 81)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 72, column 2 to column 85)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 73, column 2 to column 94)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 74, column 2 to column 106)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 75, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 75, column 2 to column 33)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 76, column 2 to column 32)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 77, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 77, column 2 to column 42)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 78, column 2 to column 86)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 81, column 4 to column 57)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 82, column 4 to column 69)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 83, column 4 to column 69)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 84, column 4 to column 70)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 85, column 4 to column 73)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 86, column 4 to column 69)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 87, column 4 to column 88)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 80, column 18 to line 88, column 3)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 80, column 2 to line 88, column 3)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 90, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 90, column 2 to column 38)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 91, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 91, column 2 to column 44)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 92, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 92, column 2 to column 60)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 95, column 4 to column 84)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 96, column 4 to column 102)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 97, column 4 to column 111)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 99, column 4 to column 70)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 100, column 4 to column 75)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 101, column 4 to line 102, column 73)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 93, column 17 to line 103, column 3)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 93, column 2 to line 103, column 3)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 8, column 1 to column 7)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 9, column 1 to column 7)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 10, column 8 to column 9)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 10, column 11 to column 12)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 10, column 1 to column 20)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 11, column 8 to column 9)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 11, column 1 to column 13)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 12, column 16 to column 17)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 12, column 1 to column 19)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 18, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 19, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 19, column 12 to column 13)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 20, column 19 to column 20)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 21, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 21, column 11 to column 12)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 22, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 23, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 23, column 11 to column 12)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 24, column 13 to column 14)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 25, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 26, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 27, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 30, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 32, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 34, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 36, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 37, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 37, column 11 to column 12)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 38, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 38, column 11 to column 12)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 41, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 41, column 12 to column 13)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 43, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 43, column 12 to column 13)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 44, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 44, column 12 to column 13)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 52, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 55, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 59, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 60, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 61, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 3, column 4 to column 13)",
 " (in '/home/steve/stan/stevebronder/stanc3/test/integration/good/code-gen/mem_patterns.stan', line 2, column 22 to line 4, column 3)"};


int
mask_fun(const int& i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 109;
    return i;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct mask_fun_functor__ {
int
operator()(const int& i, std::ostream* pstream__)  const 
{
return mask_fun(i, pstream__);
}
};

class mem_patterns_model final : public model_base_crtp<mem_patterns_model> {

 private:
  int N;
  int M;
  Eigen::Matrix<double, -1, -1> dat_x__;
  Eigen::Matrix<double, -1, 1> y__;
  std::vector<int> idx_tester; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> dat_x{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
 
 public:
  ~mem_patterns_model() { }
  
  inline std::string model_name() const final { return "mem_patterns_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --debug-transformed-mir"};
  }
  
  
  mem_patterns_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "mem_patterns_model_namespace::mem_patterns_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 68;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 68;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 69;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 69;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 70;
      validate_non_negative_index("dat_x", "N", N);
      current_statement__ = 71;
      validate_non_negative_index("dat_x", "M", M);
      current_statement__ = 72;
      context__.validate_dims("data initialization","dat_x","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(M)});
      dat_x__ = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      new (&dat_x) Eigen::Map<Eigen::Matrix<double, -1, -1>>(dat_x__.data(), N, M);
      
      
      {
        std::vector<local_scalar_t__> dat_x_flat__;
        current_statement__ = 72;
        dat_x_flat__ = context__.vals_r("dat_x");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 72;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 72;
            assign(dat_x, dat_x_flat__[(pos__ - 1)],
              "assigning variable dat_x", index_uni(sym2__),
                                            index_uni(sym1__));
            current_statement__ = 72;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 73;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 74;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y__ = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 74;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 74;
        pos__ = 1;
        current_statement__ = 74;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 74;
          assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", index_uni(sym1__));
          current_statement__ = 74;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 75;
      validate_non_negative_index("idx_tester", "N", N);
      current_statement__ = 76;
      context__.validate_dims("data initialization","idx_tester","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      idx_tester = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 76;
      idx_tester = context__.vals_i("idx_tester");
      current_statement__ = 77;
      validate_non_negative_index("p_soa_vec_v", "M", M);
      current_statement__ = 78;
      validate_non_negative_index("p_soa_mat", "N", N);
      current_statement__ = 79;
      validate_non_negative_index("p_soa_mat", "M", M);
      current_statement__ = 80;
      validate_non_negative_index("p_soa_arr_vec_v", "N", N);
      current_statement__ = 81;
      validate_non_negative_index("p_soa_mat_uni_col_idx", "N", N);
      current_statement__ = 82;
      validate_non_negative_index("p_soa_mat_uni_col_idx", "M", M);
      current_statement__ = 83;
      validate_non_negative_index("p_soa_vec_uni_idx", "N", N);
      current_statement__ = 84;
      validate_non_negative_index("p_soa_loop_mat_uni_col_idx", "N", N);
      current_statement__ = 85;
      validate_non_negative_index("p_soa_loop_mat_uni_col_idx", "M", M);
      current_statement__ = 86;
      validate_non_negative_index("p_soa_lhs_loop_mul", "N", N);
      current_statement__ = 87;
      validate_non_negative_index("p_soa_rhs_loop_mul", "N", N);
      current_statement__ = 88;
      validate_non_negative_index("p_soa_used_with_aos_in_excluded_fun", "N",
                                  N);
      current_statement__ = 89;
      validate_non_negative_index("p_soa_rep_matrix_vec", "N", N);
      current_statement__ = 90;
      validate_non_negative_index("p_aos_vec_v_assign_to_aos", "M", M);
      current_statement__ = 91;
      validate_non_negative_index("p_aos_vec_v_tp_fails_func", "M", M);
      current_statement__ = 92;
      validate_non_negative_index("p_aos_loop_vec_v_uni_idx", "M", M);
      current_statement__ = 93;
      validate_non_negative_index("p_aos_fail_assign_from_top_idx", "M", M);
      current_statement__ = 94;
      validate_non_negative_index("p_aos_loop_mat_uni_uni_idx", "N", N);
      current_statement__ = 95;
      validate_non_negative_index("p_aos_loop_mat_uni_uni_idx", "M", M);
      current_statement__ = 96;
      validate_non_negative_index("p_aos_loop_mat_multi_uni_uni_idx", "N", N);
      current_statement__ = 97;
      validate_non_negative_index("p_aos_loop_mat_multi_uni_uni_idx", "M", M);
      current_statement__ = 98;
      validate_non_negative_index("p_aos_mat", "N", N);
      current_statement__ = 99;
      validate_non_negative_index("p_aos_mat", "M", M);
      current_statement__ = 100;
      validate_non_negative_index("p_aos_mat_fail_func_uni_uni_idx1", "N", N);
      current_statement__ = 101;
      validate_non_negative_index("p_aos_mat_fail_func_uni_uni_idx1", "M", M);
      current_statement__ = 102;
      validate_non_negative_index("p_aos_mat_fail_func_uni_uni_idx2", "N", N);
      current_statement__ = 103;
      validate_non_negative_index("p_aos_mat_fail_func_uni_uni_idx2", "M", M);
      current_statement__ = 104;
      validate_non_negative_index("tp_aos_vec_v", "M", M);
      current_statement__ = 105;
      validate_non_negative_index("tp_aos_fail_func_vec_v", "M", M);
      current_statement__ = 106;
      validate_non_negative_index("tp_aos_fail_assign_from_top_idx", "M", M);
      current_statement__ = 107;
      validate_non_negative_index("tp_soa_rep_matrix_mat", "N", N);
      current_statement__ = 108;
      validate_non_negative_index("tp_soa_rep_matrix_from_data_mat", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + M + (N * M) + (10 * N) + (N * M) + N + (N * M) + 
      N + N + N + N + M + M + M + M + (N * M) + (N * M) + (N * M) + (N * M)
       + (N * M);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mem_patterns_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ alpha = DUMMY_VAR__;
      
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> p_soa_vec_v = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 2;
      p_soa_vec_v = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                      M);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>> p_soa_mat = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 3;
      p_soa_mat = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(
                    N, M);
      stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> p_soa_arr_vec_v = 
      std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(10, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 4;
      p_soa_arr_vec_v = in__.template read<stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
                          10, N);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>> p_soa_mat_uni_col_idx = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 5;
      p_soa_mat_uni_col_idx = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(
                                N, M);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> p_soa_vec_uni_idx = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 6;
      p_soa_vec_uni_idx = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                            N);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>> p_soa_loop_mat_uni_col_idx = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>(Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 7;
      p_soa_loop_mat_uni_col_idx = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, -1>>>(
                                     N, M);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>> p_soa_lhs_loop_mul = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>(Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 8;
      p_soa_lhs_loop_mul = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, 1, -1>>>(
                             N);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> p_soa_rhs_loop_mul = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 9;
      p_soa_rhs_loop_mul = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                             N);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> p_soa_used_with_aos_in_excluded_fun = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 10;
      p_soa_used_with_aos_in_excluded_fun = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                                              N);
      Eigen::Matrix<local_scalar_t__, -1, 1> p_soa_rep_matrix_vec = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
                                                                    
      
      current_statement__ = 11;
      p_soa_rep_matrix_vec = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                               N);
      Eigen::Matrix<local_scalar_t__, -1, 1> p_aos_vec_v_assign_to_aos = 
      Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      
      current_statement__ = 12;
      p_aos_vec_v_assign_to_aos = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                    M);
      Eigen::Matrix<local_scalar_t__, -1, 1> p_aos_vec_v_tp_fails_func = 
      Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      
      current_statement__ = 13;
      p_aos_vec_v_tp_fails_func = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                    M);
      Eigen::Matrix<local_scalar_t__, -1, 1> p_aos_loop_vec_v_uni_idx = 
      Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      
      current_statement__ = 14;
      p_aos_loop_vec_v_uni_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                   M);
      Eigen::Matrix<local_scalar_t__, -1, 1> p_aos_fail_assign_from_top_idx = 
      Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      
      current_statement__ = 15;
      p_aos_fail_assign_from_top_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                         M);
      Eigen::Matrix<local_scalar_t__, -1, -1> p_aos_loop_mat_uni_uni_idx = 
      Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, M, DUMMY_VAR__);
      
      current_statement__ = 16;
      p_aos_loop_mat_uni_uni_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                     N, M);
      Eigen::Matrix<local_scalar_t__, -1, -1> p_aos_loop_mat_multi_uni_uni_idx = 
      Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, M, DUMMY_VAR__);
      
      current_statement__ = 17;
      p_aos_loop_mat_multi_uni_uni_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                           N, M);
      Eigen::Matrix<local_scalar_t__, -1, -1> p_aos_mat = Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, M, DUMMY_VAR__);
                                                          
      
      current_statement__ = 18;
      p_aos_mat = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    N, M);
      Eigen::Matrix<local_scalar_t__, -1, -1> p_aos_mat_fail_func_uni_uni_idx1 = 
      Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, M, DUMMY_VAR__);
      
      current_statement__ = 19;
      p_aos_mat_fail_func_uni_uni_idx1 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                           N, M);
      Eigen::Matrix<local_scalar_t__, -1, -1> p_aos_mat_fail_func_uni_uni_idx2 = 
      Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, M, DUMMY_VAR__);
      
      current_statement__ = 20;
      p_aos_mat_fail_func_uni_uni_idx2 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                           N, M);
      local_scalar_t__ tp_real_from_aos = DUMMY_VAR__;
      
      current_statement__ = 21;
      tp_real_from_aos = rvalue(p_soa_vec_v, "p_soa_vec_v", index_uni(1));
      Eigen::Matrix<local_scalar_t__, -1, 1> tp_aos_vec_v = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
                                                            
      
      current_statement__ = 22;
      assign(tp_aos_vec_v, inv(p_aos_vec_v_assign_to_aos),
        "assigning variable tp_aos_vec_v");
      Eigen::Matrix<local_scalar_t__, -1, 1> tp_aos_fail_func_vec_v = 
      Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      
      current_statement__ = 23;
      assign(tp_aos_fail_func_vec_v, p_aos_vec_v_tp_fails_func,
        "assigning variable tp_aos_fail_func_vec_v");
      current_statement__ = 27;
      assign(tp_aos_fail_func_vec_v,
        rvalue(p_soa_vec_v, "p_soa_vec_v", index_uni(1)),
        "assigning variable tp_aos_fail_func_vec_v", index_uni(1));
      Eigen::Matrix<local_scalar_t__, -1, 1> tp_aos_fail_assign_from_top_idx = 
      Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> tp_soa_rep_matrix_mat = 
      Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, 10, DUMMY_VAR__);
      
      current_statement__ = 25;
      assign(tp_soa_rep_matrix_mat, rep_matrix(p_soa_rep_matrix_vec, 10),
        "assigning variable tp_soa_rep_matrix_mat");
      Eigen::Matrix<local_scalar_t__, -1, -1> tp_soa_rep_matrix_from_data_mat = 
      Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N, 10, DUMMY_VAR__);
      
      current_statement__ = 26;
      assign(tp_soa_rep_matrix_from_data_mat, rep_matrix(y, 10),
        "assigning variable tp_soa_rep_matrix_from_data_mat");
      current_statement__ = 28;
      assign(tp_aos_fail_assign_from_top_idx,
        rvalue(p_aos_fail_assign_from_top_idx,
          "p_aos_fail_assign_from_top_idx", index_min(1)),
        "assigning variable tp_aos_fail_assign_from_top_idx", index_min(1));
      {
        current_statement__ = 29;
        validate_non_negative_index("tp_soa_used_with_aos_in_excluded_fun",
                                    "N", N);
        stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> tp_soa_used_with_aos_in_excluded_fun = 
        stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
        
        
        current_statement__ = 30;
        assign(tp_soa_used_with_aos_in_excluded_fun,
          multiply(p_soa_used_with_aos_in_excluded_fun, size(tp_aos_vec_v)),
          "assigning variable tp_soa_used_with_aos_in_excluded_fun");
        current_statement__ = 31;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            add(alpha,
              multiply(dat_x,
                add(p_soa_vec_v, tp_soa_used_with_aos_in_excluded_fun))),
            1.0));
        current_statement__ = 32;
        lp_accum__.add(
          normal_lpdf<propto__>(y, add(alpha, multiply(dat_x, p_soa_vec_v)),
            1.0));
        current_statement__ = 33;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            multiply(dat_x,
              rvalue(p_soa_mat_uni_col_idx, "p_soa_mat_uni_col_idx",
                index_omni(), index_uni(N))), 1.0));
        current_statement__ = 34;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            multiply(dat_x,
              rvalue(p_soa_mat_uni_col_idx, "p_soa_mat_uni_col_idx",
                index_omni(), index_uni(N))),
            rvalue(p_soa_vec_uni_idx, "p_soa_vec_uni_idx", index_uni(N))));
        current_statement__ = 35;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            multiply(dat_x, inv(tp_aos_fail_func_vec_v)),
            rvalue(p_soa_vec_uni_idx, "p_soa_vec_uni_idx", index_uni(N))));
        current_statement__ = 36;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            multiply(p_soa_mat, inv(tp_aos_fail_func_vec_v)),
            rvalue(p_soa_vec_uni_idx, "p_soa_vec_uni_idx", index_uni(N))));
        current_statement__ = 37;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            multiply(p_soa_mat, inv(tp_aos_fail_assign_from_top_idx)),
            rvalue(p_soa_vec_uni_idx, "p_soa_vec_uni_idx", index_uni(N))));
        current_statement__ = 38;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            multiply(p_soa_mat,
              inv(multiply(p_aos_mat, tp_aos_fail_func_vec_v))),
            rvalue(p_soa_vec_uni_idx, "p_soa_vec_uni_idx", index_uni(N))));
        current_statement__ = 39;
        validate_non_negative_index("tp_soa_single_assign", "N", N);
        stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> tp_soa_single_assign = 
        stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
        
        
        current_statement__ = 41;
        assign(tp_soa_single_assign, 2.0,
          "assigning variable tp_soa_single_assign", index_uni(1));
        current_statement__ = 42;
        validate_non_negative_index("tp_soa_single_assign_from_soa", "N", N);
        stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> tp_soa_single_assign_from_soa = 
        stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
        
        
        current_statement__ = 44;
        assign(tp_soa_single_assign_from_soa,
          multiply(p_soa_lhs_loop_mul, p_soa_rhs_loop_mul),
          "assigning variable tp_soa_single_assign_from_soa", index_uni(2));
        current_statement__ = 53;
        for (int i = 1; i <= 10; ++i) {
          current_statement__ = 45;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(dat_x,
                rvalue(p_soa_arr_vec_v, "p_soa_arr_vec_v", index_uni(i))),
              1.0));
          current_statement__ = 46;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(dat_x,
                rvalue(p_soa_loop_mat_uni_col_idx,
                  "p_soa_loop_mat_uni_col_idx", index_omni(), index_uni(i))),
              1.0));
          current_statement__ = 47;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(
                rvalue(p_soa_loop_mat_uni_col_idx,
                  "p_soa_loop_mat_uni_col_idx", index_uni(i), index_omni()),
                dat_x), 1.0));
          current_statement__ = 48;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(dat_x,
                transpose(
                  rvalue(p_soa_loop_mat_uni_col_idx,
                    "p_soa_loop_mat_uni_col_idx", index_uni(i), index_omni()))),
              1.0));
          current_statement__ = 49;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(dat_x,
                rvalue(p_soa_loop_mat_uni_col_idx,
                  "p_soa_loop_mat_uni_col_idx",
                  index_min_max(1, N), index_uni(1))), 1.0));
          current_statement__ = 50;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(dat_x,
                transpose(
                  rvalue(p_soa_loop_mat_uni_col_idx,
                    "p_soa_loop_mat_uni_col_idx", index_uni(i)))), 1.0));
          current_statement__ = 51;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(dat_x,
                transpose(
                  rvalue(p_aos_loop_mat_multi_uni_uni_idx,
                    "p_aos_loop_mat_multi_uni_uni_idx",
                    index_uni(rvalue(idx_tester, "idx_tester", index_uni(i))),
                      index_omni()))), 1.0));
        }
        current_statement__ = 54;
        validate_non_negative_index("tp_aos_loop_vec_v_uni_idx", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> tp_aos_loop_vec_v_uni_idx = 
        Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
        
        current_statement__ = 56;
        validate_non_negative_index("tp_aos_loop_vec_v_multi_uni_idx", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> tp_aos_loop_vec_v_multi_uni_idx = 
        Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
        
        current_statement__ = 58;
        validate_non_negative_index("tp_aos_loop_vec_v_double_brackets_multi_uni_idx",
                                    "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> tp_aos_loop_vec_v_double_brackets_multi_uni_idx = 
        Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
        
        current_statement__ = 67;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 60;
          assign(tp_aos_loop_vec_v_uni_idx,
            multiply(p_soa_lhs_loop_mul, p_soa_rhs_loop_mul),
            "assigning variable tp_aos_loop_vec_v_uni_idx", index_uni(i));
          current_statement__ = 61;
          assign(tp_aos_loop_vec_v_multi_uni_idx,
            multiply(p_soa_lhs_loop_mul, p_soa_rhs_loop_mul),
            "assigning variable tp_aos_loop_vec_v_multi_uni_idx", index_uni(
                                                                    rvalue(
                                                                    idx_tester,
                                                                    "idx_tester",
                                                                    index_uni(i))));
          current_statement__ = 62;
          assign(tp_aos_loop_vec_v_double_brackets_multi_uni_idx,
            multiply(p_soa_lhs_loop_mul, p_soa_rhs_loop_mul),
            "assigning variable tp_aos_loop_vec_v_double_brackets_multi_uni_idx", 
            index_min_max(1, N), index_uni(i));
          current_statement__ = 63;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(rvalue(dat_x, "dat_x", index_omni(), index_uni(i)),
                rvalue(p_aos_loop_vec_v_uni_idx, "p_aos_loop_vec_v_uni_idx",
                  index_uni(i))), 1.0));
          current_statement__ = 64;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(rvalue(dat_x, "dat_x", index_omni(), index_uni(i)),
                rvalue(p_aos_loop_mat_uni_uni_idx,
                  "p_aos_loop_mat_uni_uni_idx", index_uni(i), index_uni(i))),
              1.0));
          current_statement__ = 65;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(rvalue(dat_x, "dat_x", index_omni(), index_uni(i)),
                rvalue(
                  transpose(
  multiply(p_aos_mat_fail_func_uni_uni_idx1,
    p_aos_mat_fail_func_uni_uni_idx2)),
                  "transpose(multiply(p_aos_mat_fail_func_uni_uni_idx1,\np_aos_mat_fail_func_uni_uni_idx2))",
                  index_uni(mask_fun(i, pstream__)),
                    index_uni(mask_fun(i, pstream__)))), 1.0));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mem_patterns_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> p_soa_vec_v = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      current_statement__ = 2;
      p_soa_vec_v = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                      M);
      Eigen::Matrix<double, -1, -1> p_soa_mat = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                
      
      current_statement__ = 3;
      p_soa_mat = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    N, M);
      std::vector<Eigen::Matrix<double, -1, 1>> p_soa_arr_vec_v = std::vector<Eigen::Matrix<double, -1, 1>>(10, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      current_statement__ = 4;
      p_soa_arr_vec_v = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                          10, N);
      Eigen::Matrix<double, -1, -1> p_soa_mat_uni_col_idx = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                            
      
      current_statement__ = 5;
      p_soa_mat_uni_col_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                N, M);
      Eigen::Matrix<double, -1, 1> p_soa_vec_uni_idx = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                       
      
      current_statement__ = 6;
      p_soa_vec_uni_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                            N);
      Eigen::Matrix<double, -1, -1> p_soa_loop_mat_uni_col_idx = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                                 
      
      current_statement__ = 7;
      p_soa_loop_mat_uni_col_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                     N, M);
      Eigen::Matrix<double, 1, -1> p_soa_lhs_loop_mul = Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                        
      
      current_statement__ = 8;
      p_soa_lhs_loop_mul = in__.template read<Eigen::Matrix<local_scalar_t__, 1, -1>>(
                             N);
      Eigen::Matrix<double, -1, 1> p_soa_rhs_loop_mul = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                        
      
      current_statement__ = 9;
      p_soa_rhs_loop_mul = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                             N);
      Eigen::Matrix<double, -1, 1> p_soa_used_with_aos_in_excluded_fun = 
      Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 10;
      p_soa_used_with_aos_in_excluded_fun = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                              N);
      Eigen::Matrix<double, -1, 1> p_soa_rep_matrix_vec = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                          
      
      current_statement__ = 11;
      p_soa_rep_matrix_vec = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                               N);
      Eigen::Matrix<double, -1, 1> p_aos_vec_v_assign_to_aos = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                               
      
      current_statement__ = 12;
      p_aos_vec_v_assign_to_aos = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                    M);
      Eigen::Matrix<double, -1, 1> p_aos_vec_v_tp_fails_func = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                               
      
      current_statement__ = 13;
      p_aos_vec_v_tp_fails_func = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                    M);
      Eigen::Matrix<double, -1, 1> p_aos_loop_vec_v_uni_idx = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                              
      
      current_statement__ = 14;
      p_aos_loop_vec_v_uni_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                   M);
      Eigen::Matrix<double, -1, 1> p_aos_fail_assign_from_top_idx = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                                    
      
      current_statement__ = 15;
      p_aos_fail_assign_from_top_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                         M);
      Eigen::Matrix<double, -1, -1> p_aos_loop_mat_uni_uni_idx = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                                 
      
      current_statement__ = 16;
      p_aos_loop_mat_uni_uni_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                     N, M);
      Eigen::Matrix<double, -1, -1> p_aos_loop_mat_multi_uni_uni_idx = 
      Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 17;
      p_aos_loop_mat_multi_uni_uni_idx = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                           N, M);
      Eigen::Matrix<double, -1, -1> p_aos_mat = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                
      
      current_statement__ = 18;
      p_aos_mat = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    N, M);
      Eigen::Matrix<double, -1, -1> p_aos_mat_fail_func_uni_uni_idx1 = 
      Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 19;
      p_aos_mat_fail_func_uni_uni_idx1 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                           N, M);
      Eigen::Matrix<double, -1, -1> p_aos_mat_fail_func_uni_uni_idx2 = 
      Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 20;
      p_aos_mat_fail_func_uni_uni_idx2 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                                           N, M);
      double tp_real_from_aos = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> tp_aos_vec_v = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                  
      
      Eigen::Matrix<double, -1, 1> tp_aos_fail_func_vec_v = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                            
      
      Eigen::Matrix<double, -1, 1> tp_aos_fail_assign_from_top_idx = 
      Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, -1> tp_soa_rep_matrix_mat = Eigen::Matrix<double, -1, -1>::Constant(N, 10, std::numeric_limits<double>::quiet_NaN());
                                                            
      
      Eigen::Matrix<double, -1, -1> tp_soa_rep_matrix_from_data_mat = 
      Eigen::Matrix<double, -1, -1>::Constant(N, 10, std::numeric_limits<double>::quiet_NaN());
      
      
      vars__.emplace_back(alpha);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_soa_vec_v[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_soa_mat, "p_soa_mat",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
          vars__.emplace_back(p_soa_arr_vec_v[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_soa_mat_uni_col_idx, "p_soa_mat_uni_col_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_vec_uni_idx[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_soa_loop_mat_uni_col_idx, "p_soa_loop_mat_uni_col_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_lhs_loop_mul[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_rhs_loop_mul[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(
          p_soa_used_with_aos_in_excluded_fun[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_rep_matrix_vec[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_vec_v_assign_to_aos[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_vec_v_tp_fails_func[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_loop_vec_v_uni_idx[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_fail_assign_from_top_idx[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_loop_mat_uni_uni_idx, "p_aos_loop_mat_uni_uni_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_loop_mat_multi_uni_uni_idx,
              "p_aos_loop_mat_multi_uni_uni_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_mat, "p_aos_mat",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_mat_fail_func_uni_uni_idx1,
              "p_aos_mat_fail_func_uni_uni_idx1",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_mat_fail_func_uni_uni_idx2,
              "p_aos_mat_fail_func_uni_uni_idx2",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 21;
      tp_real_from_aos = rvalue(p_soa_vec_v, "p_soa_vec_v", index_uni(1));
      current_statement__ = 22;
      assign(tp_aos_vec_v, inv(p_aos_vec_v_assign_to_aos),
        "assigning variable tp_aos_vec_v");
      current_statement__ = 23;
      assign(tp_aos_fail_func_vec_v, p_aos_vec_v_tp_fails_func,
        "assigning variable tp_aos_fail_func_vec_v");
      current_statement__ = 27;
      assign(tp_aos_fail_func_vec_v,
        rvalue(p_soa_vec_v, "p_soa_vec_v", index_uni(1)),
        "assigning variable tp_aos_fail_func_vec_v", index_uni(1));
      current_statement__ = 25;
      assign(tp_soa_rep_matrix_mat, rep_matrix(p_soa_rep_matrix_vec, 10),
        "assigning variable tp_soa_rep_matrix_mat");
      current_statement__ = 26;
      assign(tp_soa_rep_matrix_from_data_mat, rep_matrix(y, 10),
        "assigning variable tp_soa_rep_matrix_from_data_mat");
      current_statement__ = 28;
      assign(tp_aos_fail_assign_from_top_idx,
        rvalue(p_aos_fail_assign_from_top_idx,
          "p_aos_fail_assign_from_top_idx", index_min(1)),
        "assigning variable tp_aos_fail_assign_from_top_idx", index_min(1));
      if (emit_transformed_parameters__) {
        vars__.emplace_back(tp_real_from_aos);
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          vars__.emplace_back(tp_aos_vec_v[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          vars__.emplace_back(tp_aos_fail_func_vec_v[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          vars__.emplace_back(tp_aos_fail_assign_from_top_idx[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(tp_soa_rep_matrix_mat, "tp_soa_rep_matrix_mat",
                index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(tp_soa_rep_matrix_from_data_mat,
                "tp_soa_rep_matrix_from_data_mat",
                index_uni(sym2__), index_uni(sym1__)));
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> p_soa_vec_v = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                 
      
      {
        std::vector<local_scalar_t__> p_soa_vec_v_flat__;
        current_statement__ = 2;
        p_soa_vec_v_flat__ = context__.vals_r("p_soa_vec_v");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 2;
          assign(p_soa_vec_v, p_soa_vec_v_flat__[(pos__ - 1)],
            "assigning variable p_soa_vec_v", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, -1> p_soa_mat = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                
      
      {
        std::vector<local_scalar_t__> p_soa_mat_flat__;
        current_statement__ = 3;
        p_soa_mat_flat__ = context__.vals_r("p_soa_mat");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 3;
            assign(p_soa_mat, p_soa_mat_flat__[(pos__ - 1)],
              "assigning variable p_soa_mat", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 3;
            pos__ = (pos__ + 1);
          }
        }
      }
      std::vector<Eigen::Matrix<double, -1, 1>> p_soa_arr_vec_v = std::vector<Eigen::Matrix<double, -1, 1>>(10, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                                  
      
      {
        std::vector<local_scalar_t__> p_soa_arr_vec_v_flat__;
        current_statement__ = 4;
        p_soa_arr_vec_v_flat__ = context__.vals_r("p_soa_arr_vec_v");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
            current_statement__ = 4;
            assign(p_soa_arr_vec_v, p_soa_arr_vec_v_flat__[(pos__ - 1)],
              "assigning variable p_soa_arr_vec_v", index_uni(sym2__),
                                                      index_uni(sym1__));
            current_statement__ = 4;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> p_soa_mat_uni_col_idx = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                            
      
      {
        std::vector<local_scalar_t__> p_soa_mat_uni_col_idx_flat__;
        current_statement__ = 5;
        p_soa_mat_uni_col_idx_flat__ = context__.vals_r("p_soa_mat_uni_col_idx");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 5;
            assign(p_soa_mat_uni_col_idx,
              p_soa_mat_uni_col_idx_flat__[(pos__ - 1)],
              "assigning variable p_soa_mat_uni_col_idx", index_uni(sym2__),
                                                            index_uni(sym1__));
            current_statement__ = 5;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, 1> p_soa_vec_uni_idx = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                       
      
      {
        std::vector<local_scalar_t__> p_soa_vec_uni_idx_flat__;
        current_statement__ = 6;
        p_soa_vec_uni_idx_flat__ = context__.vals_r("p_soa_vec_uni_idx");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 6;
          assign(p_soa_vec_uni_idx, p_soa_vec_uni_idx_flat__[(pos__ - 1)],
            "assigning variable p_soa_vec_uni_idx", index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, -1> p_soa_loop_mat_uni_col_idx = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                                 
      
      {
        std::vector<local_scalar_t__> p_soa_loop_mat_uni_col_idx_flat__;
        current_statement__ = 7;
        p_soa_loop_mat_uni_col_idx_flat__ = context__.vals_r("p_soa_loop_mat_uni_col_idx");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 7;
            assign(p_soa_loop_mat_uni_col_idx,
              p_soa_loop_mat_uni_col_idx_flat__[(pos__ - 1)],
              "assigning variable p_soa_loop_mat_uni_col_idx", index_uni(sym2__),
                                                                 index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, 1, -1> p_soa_lhs_loop_mul = Eigen::Matrix<double, 1, -1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                        
      
      {
        std::vector<local_scalar_t__> p_soa_lhs_loop_mul_flat__;
        current_statement__ = 8;
        p_soa_lhs_loop_mul_flat__ = context__.vals_r("p_soa_lhs_loop_mul");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 8;
          assign(p_soa_lhs_loop_mul, p_soa_lhs_loop_mul_flat__[(pos__ - 1)],
            "assigning variable p_soa_lhs_loop_mul", index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_soa_rhs_loop_mul = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                        
      
      {
        std::vector<local_scalar_t__> p_soa_rhs_loop_mul_flat__;
        current_statement__ = 9;
        p_soa_rhs_loop_mul_flat__ = context__.vals_r("p_soa_rhs_loop_mul");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 9;
          assign(p_soa_rhs_loop_mul, p_soa_rhs_loop_mul_flat__[(pos__ - 1)],
            "assigning variable p_soa_rhs_loop_mul", index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_soa_used_with_aos_in_excluded_fun = 
      Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
      
      
      {
        std::vector<local_scalar_t__> p_soa_used_with_aos_in_excluded_fun_flat__;
        current_statement__ = 10;
        p_soa_used_with_aos_in_excluded_fun_flat__ = context__.vals_r("p_soa_used_with_aos_in_excluded_fun");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 10;
          assign(p_soa_used_with_aos_in_excluded_fun,
            p_soa_used_with_aos_in_excluded_fun_flat__[(pos__ - 1)],
            "assigning variable p_soa_used_with_aos_in_excluded_fun", 
            index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_soa_rep_matrix_vec = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
                                                          
      
      {
        std::vector<local_scalar_t__> p_soa_rep_matrix_vec_flat__;
        current_statement__ = 11;
        p_soa_rep_matrix_vec_flat__ = context__.vals_r("p_soa_rep_matrix_vec");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 11;
          assign(p_soa_rep_matrix_vec,
            p_soa_rep_matrix_vec_flat__[(pos__ - 1)],
            "assigning variable p_soa_rep_matrix_vec", index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_aos_vec_v_assign_to_aos = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                               
      
      {
        std::vector<local_scalar_t__> p_aos_vec_v_assign_to_aos_flat__;
        current_statement__ = 12;
        p_aos_vec_v_assign_to_aos_flat__ = context__.vals_r("p_aos_vec_v_assign_to_aos");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 12;
          assign(p_aos_vec_v_assign_to_aos,
            p_aos_vec_v_assign_to_aos_flat__[(pos__ - 1)],
            "assigning variable p_aos_vec_v_assign_to_aos", index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_aos_vec_v_tp_fails_func = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                               
      
      {
        std::vector<local_scalar_t__> p_aos_vec_v_tp_fails_func_flat__;
        current_statement__ = 13;
        p_aos_vec_v_tp_fails_func_flat__ = context__.vals_r("p_aos_vec_v_tp_fails_func");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 13;
          assign(p_aos_vec_v_tp_fails_func,
            p_aos_vec_v_tp_fails_func_flat__[(pos__ - 1)],
            "assigning variable p_aos_vec_v_tp_fails_func", index_uni(sym1__));
          current_statement__ = 13;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_aos_loop_vec_v_uni_idx = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                              
      
      {
        std::vector<local_scalar_t__> p_aos_loop_vec_v_uni_idx_flat__;
        current_statement__ = 14;
        p_aos_loop_vec_v_uni_idx_flat__ = context__.vals_r("p_aos_loop_vec_v_uni_idx");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 14;
          assign(p_aos_loop_vec_v_uni_idx,
            p_aos_loop_vec_v_uni_idx_flat__[(pos__ - 1)],
            "assigning variable p_aos_loop_vec_v_uni_idx", index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> p_aos_fail_assign_from_top_idx = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                                    
      
      {
        std::vector<local_scalar_t__> p_aos_fail_assign_from_top_idx_flat__;
        current_statement__ = 15;
        p_aos_fail_assign_from_top_idx_flat__ = context__.vals_r("p_aos_fail_assign_from_top_idx");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 15;
          assign(p_aos_fail_assign_from_top_idx,
            p_aos_fail_assign_from_top_idx_flat__[(pos__ - 1)],
            "assigning variable p_aos_fail_assign_from_top_idx", index_uni(sym1__));
          current_statement__ = 15;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, -1> p_aos_loop_mat_uni_uni_idx = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                                 
      
      {
        std::vector<local_scalar_t__> p_aos_loop_mat_uni_uni_idx_flat__;
        current_statement__ = 16;
        p_aos_loop_mat_uni_uni_idx_flat__ = context__.vals_r("p_aos_loop_mat_uni_uni_idx");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 16;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 16;
            assign(p_aos_loop_mat_uni_uni_idx,
              p_aos_loop_mat_uni_uni_idx_flat__[(pos__ - 1)],
              "assigning variable p_aos_loop_mat_uni_uni_idx", index_uni(sym2__),
                                                                 index_uni(sym1__));
            current_statement__ = 16;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> p_aos_loop_mat_multi_uni_uni_idx = 
      Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      
      
      {
        std::vector<local_scalar_t__> p_aos_loop_mat_multi_uni_uni_idx_flat__;
        current_statement__ = 17;
        p_aos_loop_mat_multi_uni_uni_idx_flat__ = context__.vals_r("p_aos_loop_mat_multi_uni_uni_idx");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 17;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 17;
            assign(p_aos_loop_mat_multi_uni_uni_idx,
              p_aos_loop_mat_multi_uni_uni_idx_flat__[(pos__ - 1)],
              "assigning variable p_aos_loop_mat_multi_uni_uni_idx", 
              index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 17;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> p_aos_mat = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
                                                
      
      {
        std::vector<local_scalar_t__> p_aos_mat_flat__;
        current_statement__ = 18;
        p_aos_mat_flat__ = context__.vals_r("p_aos_mat");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 18;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 18;
            assign(p_aos_mat, p_aos_mat_flat__[(pos__ - 1)],
              "assigning variable p_aos_mat", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 18;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> p_aos_mat_fail_func_uni_uni_idx1 = 
      Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      
      
      {
        std::vector<local_scalar_t__> p_aos_mat_fail_func_uni_uni_idx1_flat__;
        current_statement__ = 19;
        p_aos_mat_fail_func_uni_uni_idx1_flat__ = context__.vals_r("p_aos_mat_fail_func_uni_uni_idx1");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 19;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 19;
            assign(p_aos_mat_fail_func_uni_uni_idx1,
              p_aos_mat_fail_func_uni_uni_idx1_flat__[(pos__ - 1)],
              "assigning variable p_aos_mat_fail_func_uni_uni_idx1", 
              index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 19;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> p_aos_mat_fail_func_uni_uni_idx2 = 
      Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      
      
      {
        std::vector<local_scalar_t__> p_aos_mat_fail_func_uni_uni_idx2_flat__;
        current_statement__ = 20;
        p_aos_mat_fail_func_uni_uni_idx2_flat__ = context__.vals_r("p_aos_mat_fail_func_uni_uni_idx2");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 20;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 20;
            assign(p_aos_mat_fail_func_uni_uni_idx2,
              p_aos_mat_fail_func_uni_uni_idx2_flat__[(pos__ - 1)],
              "assigning variable p_aos_mat_fail_func_uni_uni_idx2", 
              index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 20;
            pos__ = (pos__ + 1);
          }
        }
      }
      vars__.emplace_back(alpha);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_soa_vec_v[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_soa_mat, "p_soa_mat",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(p_soa_arr_vec_v[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_soa_mat_uni_col_idx, "p_soa_mat_uni_col_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_vec_uni_idx[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_soa_loop_mat_uni_col_idx, "p_soa_loop_mat_uni_col_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_lhs_loop_mul[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_rhs_loop_mul[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(
          p_soa_used_with_aos_in_excluded_fun[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(p_soa_rep_matrix_vec[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_vec_v_assign_to_aos[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_vec_v_tp_fails_func[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_loop_vec_v_uni_idx[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(p_aos_fail_assign_from_top_idx[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_loop_mat_uni_uni_idx, "p_aos_loop_mat_uni_uni_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_loop_mat_multi_uni_uni_idx,
              "p_aos_loop_mat_multi_uni_uni_idx",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_mat, "p_aos_mat",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_mat_fail_func_uni_uni_idx1,
              "p_aos_mat_fail_func_uni_uni_idx1",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(
            rvalue(p_aos_mat_fail_func_uni_uni_idx2,
              "p_aos_mat_fail_func_uni_uni_idx2",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha", "p_soa_vec_v", "p_soa_mat",
      "p_soa_arr_vec_v", "p_soa_mat_uni_col_idx", "p_soa_vec_uni_idx",
      "p_soa_loop_mat_uni_col_idx", "p_soa_lhs_loop_mul",
      "p_soa_rhs_loop_mul", "p_soa_used_with_aos_in_excluded_fun",
      "p_soa_rep_matrix_vec", "p_aos_vec_v_assign_to_aos",
      "p_aos_vec_v_tp_fails_func", "p_aos_loop_vec_v_uni_idx",
      "p_aos_fail_assign_from_top_idx", "p_aos_loop_mat_uni_uni_idx",
      "p_aos_loop_mat_multi_uni_uni_idx", "p_aos_mat",
      "p_aos_mat_fail_func_uni_uni_idx1", "p_aos_mat_fail_func_uni_uni_idx2",
      "tp_real_from_aos", "tp_aos_vec_v", "tp_aos_fail_func_vec_v",
      "tp_aos_fail_assign_from_top_idx", "tp_soa_rep_matrix_mat",
      "tp_soa_rep_matrix_from_data_mat"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(10), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(10)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(10)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_vec_v" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_arr_vec_v" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_mat_uni_col_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_vec_uni_idx" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_loop_mat_uni_col_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_lhs_loop_mul" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_rhs_loop_mul" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_used_with_aos_in_excluded_fun" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_rep_matrix_vec" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_vec_v_assign_to_aos" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_vec_v_tp_fails_func" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_loop_vec_v_uni_idx" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_fail_assign_from_top_idx" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_loop_mat_uni_uni_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_loop_mat_multi_uni_uni_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_mat_fail_func_uni_uni_idx1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_mat_fail_func_uni_uni_idx2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "tp_real_from_aos");
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_aos_vec_v" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_aos_fail_func_vec_v" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_aos_fail_assign_from_top_idx" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_soa_rep_matrix_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_soa_rep_matrix_from_data_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_vec_v" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_arr_vec_v" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_mat_uni_col_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_vec_uni_idx" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_soa_loop_mat_uni_col_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_lhs_loop_mul" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_rhs_loop_mul" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_used_with_aos_in_excluded_fun" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_soa_rep_matrix_vec" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_vec_v_assign_to_aos" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_vec_v_tp_fails_func" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_loop_vec_v_uni_idx" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_aos_fail_assign_from_top_idx" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_loop_mat_uni_uni_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_loop_mat_multi_uni_uni_idx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_mat_fail_func_uni_uni_idx1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_aos_mat_fail_func_uni_uni_idx2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "tp_real_from_aos");
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_aos_vec_v" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_aos_fail_func_vec_v" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_aos_fail_assign_from_top_idx" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_soa_rep_matrix_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_soa_rep_matrix_from_data_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_soa_vec_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_arr_vec_v\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(10) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"p_soa_mat_uni_col_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_vec_uni_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_loop_mat_uni_col_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_lhs_loop_mul\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_rhs_loop_mul\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_used_with_aos_in_excluded_fun\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_rep_matrix_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_vec_v_assign_to_aos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_vec_v_tp_fails_func\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_loop_vec_v_uni_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_fail_assign_from_top_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_loop_mat_uni_uni_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_loop_mat_multi_uni_uni_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_mat_fail_func_uni_uni_idx1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_mat_fail_func_uni_uni_idx2\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"tp_real_from_aos\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_aos_vec_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_aos_fail_func_vec_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_aos_fail_assign_from_top_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_soa_rep_matrix_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(10) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_soa_rep_matrix_from_data_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(10) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_soa_vec_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_arr_vec_v\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(10) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"p_soa_mat_uni_col_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_vec_uni_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_loop_mat_uni_col_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_lhs_loop_mul\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_rhs_loop_mul\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_used_with_aos_in_excluded_fun\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_soa_rep_matrix_vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_vec_v_assign_to_aos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_vec_v_tp_fails_func\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_loop_vec_v_uni_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_fail_assign_from_top_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_loop_mat_uni_uni_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_loop_mat_multi_uni_uni_idx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_mat_fail_func_uni_uni_idx1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"p_aos_mat_fail_func_uni_uni_idx2\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"tp_real_from_aos\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_aos_vec_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_aos_fail_func_vec_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_aos_fail_assign_from_top_idx\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_soa_rep_matrix_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(10) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_soa_rep_matrix_from_data_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(10) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = mem_patterns_model_namespace::mem_patterns_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return mem_patterns_model_namespace::profiles__;
}

#endif


