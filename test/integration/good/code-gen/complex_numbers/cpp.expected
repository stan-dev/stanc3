  $ ../../../../../../install/default/bin/stanc --print-cpp basic_op_param.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace basic_op_param_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 134> locations_array__ =
  {" (found before start of program)",
  " (in 'basic_op_param.stan', line 5, column 2 to column 27)",
  " (in 'basic_op_param.stan', line 6, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 7, column 2 to column 32)",
  " (in 'basic_op_param.stan', line 8, column 2 to column 12)",
  " (in 'basic_op_param.stan', line 10, column 2 to column 18)",
  " (in 'basic_op_param.stan', line 11, column 2 to column 16)",
  " (in 'basic_op_param.stan', line 12, column 2 to column 23)",
  " (in 'basic_op_param.stan', line 13, column 2 to column 9)",
  " (in 'basic_op_param.stan', line 18, column 2 to column 34)",
  " (in 'basic_op_param.stan', line 54, column 2 to column 43)",
  " (in 'basic_op_param.stan', line 86, column 2 to column 47)",
  " (in 'basic_op_param.stan', line 118, column 2 to column 15)",
  " (in 'basic_op_param.stan', line 165, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 21, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 22, column 2 to column 27)",
  " (in 'basic_op_param.stan', line 23, column 2 to column 27)",
  " (in 'basic_op_param.stan', line 24, column 2 to column 29)",
  " (in 'basic_op_param.stan', line 25, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 26, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 27, column 2 to column 29)",
  " (in 'basic_op_param.stan', line 28, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 29, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 32, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 33, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 34, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 35, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 36, column 2 to column 24)",
  " (in 'basic_op_param.stan', line 37, column 2 to column 24)",
  " (in 'basic_op_param.stan', line 40, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 41, column 2 to column 27)",
  " (in 'basic_op_param.stan', line 42, column 2 to column 27)",
  " (in 'basic_op_param.stan', line 43, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 44, column 2 to column 27)",
  " (in 'basic_op_param.stan', line 45, column 2 to column 27)",
  " (in 'basic_op_param.stan', line 46, column 2 to column 22)",
  " (in 'basic_op_param.stan', line 47, column 2 to column 21)",
  " (in 'basic_op_param.stan', line 50, column 2 to column 31)",
  " (in 'basic_op_param.stan', line 51, column 2 to column 30)",
  " (in 'basic_op_param.stan', line 52, column 2 to column 30)",
  " (in 'basic_op_param.stan', line 56, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 57, column 2 to column 27)",
  " (in 'basic_op_param.stan', line 58, column 2 to column 27)",
  " (in 'basic_op_param.stan', line 61, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 62, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 63, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 64, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 65, column 2 to column 24)",
  " (in 'basic_op_param.stan', line 66, column 2 to column 24)",
  " (in 'basic_op_param.stan', line 69, column 2 to column 29)",
  " (in 'basic_op_param.stan', line 70, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 71, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 72, column 2 to column 29)",
  " (in 'basic_op_param.stan', line 73, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 74, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 77, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 78, column 2 to column 27)",
  " (in 'basic_op_param.stan', line 79, column 2 to column 27)",
  " (in 'basic_op_param.stan', line 80, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 81, column 2 to column 27)",
  " (in 'basic_op_param.stan', line 82, column 2 to column 27)",
  " (in 'basic_op_param.stan', line 83, column 2 to column 22)",
  " (in 'basic_op_param.stan', line 84, column 2 to column 21)",
  " (in 'basic_op_param.stan', line 88, column 2 to column 34)",
  " (in 'basic_op_param.stan', line 89, column 2 to column 33)",
  " (in 'basic_op_param.stan', line 90, column 2 to column 33)",
  " (in 'basic_op_param.stan', line 93, column 2 to column 31)",
  " (in 'basic_op_param.stan', line 94, column 2 to column 31)",
  " (in 'basic_op_param.stan', line 95, column 2 to column 31)",
  " (in 'basic_op_param.stan', line 96, column 2 to column 31)",
  " (in 'basic_op_param.stan', line 97, column 2 to column 30)",
  " (in 'basic_op_param.stan', line 98, column 2 to column 30)",
  " (in 'basic_op_param.stan', line 101, column 2 to column 38)",
  " (in 'basic_op_param.stan', line 102, column 2 to column 37)",
  " (in 'basic_op_param.stan', line 103, column 2 to column 37)",
  " (in 'basic_op_param.stan', line 104, column 2 to column 38)",
  " (in 'basic_op_param.stan', line 105, column 2 to column 37)",
  " (in 'basic_op_param.stan', line 106, column 2 to column 37)",
  " (in 'basic_op_param.stan', line 109, column 2 to column 37)",
  " (in 'basic_op_param.stan', line 110, column 2 to column 36)",
  " (in 'basic_op_param.stan', line 111, column 2 to column 36)",
  " (in 'basic_op_param.stan', line 112, column 2 to column 37)",
  " (in 'basic_op_param.stan', line 113, column 2 to column 36)",
  " (in 'basic_op_param.stan', line 114, column 2 to column 36)",
  " (in 'basic_op_param.stan', line 115, column 2 to column 28)",
  " (in 'basic_op_param.stan', line 116, column 2 to column 27)",
  " (in 'basic_op_param.stan', line 120, column 2 to column 24)",
  " (in 'basic_op_param.stan', line 121, column 2 to column 23)",
  " (in 'basic_op_param.stan', line 122, column 2 to column 23)",
  " (in 'basic_op_param.stan', line 125, column 2 to column 32)",
  " (in 'basic_op_param.stan', line 127, column 2 to column 32)",
  " (in 'basic_op_param.stan', line 128, column 2 to column 19)",
  " (in 'basic_op_param.stan', line 129, column 2 to column 22)",
  " (in 'basic_op_param.stan', line 130, column 2 to column 19)",
  " (in 'basic_op_param.stan', line 134, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 135, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 136, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 137, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 139, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 140, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 141, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 142, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 144, column 2 to column 26)",
  " (in 'basic_op_param.stan', line 145, column 2 to column 26)",
  " (in 'basic_op_param.stan', line 146, column 2 to column 26)",
  " (in 'basic_op_param.stan', line 147, column 2 to column 26)",
  " (in 'basic_op_param.stan', line 149, column 2 to column 26)",
  " (in 'basic_op_param.stan', line 150, column 2 to column 26)",
  " (in 'basic_op_param.stan', line 151, column 2 to column 26)",
  " (in 'basic_op_param.stan', line 152, column 2 to column 26)",
  " (in 'basic_op_param.stan', line 154, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 155, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 156, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 157, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 159, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 160, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 161, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 162, column 2 to column 25)",
  " (in 'basic_op_param.stan', line 166, column 2 to column 29)",
  " (in 'basic_op_param.stan', line 2, column 2 to column 8)",
  " (in 'basic_op_param.stan', line 5, column 17 to column 18)",
  " (in 'basic_op_param.stan', line 5, column 19 to column 20)",
  " (in 'basic_op_param.stan', line 6, column 17 to column 18)",
  " (in 'basic_op_param.stan', line 7, column 21 to column 22)",
  " (in 'basic_op_param.stan', line 10, column 9 to column 10)",
  " (in 'basic_op_param.stan', line 10, column 11 to column 12)",
  " (in 'basic_op_param.stan', line 11, column 9 to column 10)",
  " (in 'basic_op_param.stan', line 12, column 13 to column 14)",
  " (in 'basic_op_param.stan', line 18, column 17 to column 18)",
  " (in 'basic_op_param.stan', line 18, column 19 to column 20)",
  " (in 'basic_op_param.stan', line 54, column 17 to column 18)",
  " (in 'basic_op_param.stan', line 86, column 21 to column 22)",
  " (in 'basic_op_param.stan', line 165, column 8 to column 9)",
  " (in 'basic_op_param.stan', line 165, column 10 to column 11)"};
class basic_op_param_model final : public model_base_crtp<basic_op_param_model> {
 private:
  int N;
 public:
  ~basic_op_param_model() {}
  basic_op_param_model(stan::io::var_context& context__, unsigned int
                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "basic_op_param_model_namespace::basic_op_param_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 119;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 119;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 120;
      stan::math::validate_non_negative_index("cmat", "N", N);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("cmat", "N", N);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("cvec", "N", N);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("crowvec", "N", N);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("mat", "N", N);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("mat", "N", N);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("vec", "N", N);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("rowvec", "N", N);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("tp_c_matrix", "N", N);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("tp_c_matrix", "N", N);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("tp_c_vector", "N", N);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("tp_c_rowvector", "N", N);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("carray", "N", N);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("carray", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (N * (N * 2)) + (N * 2) + (N * 2) + 2 + (N * N) + N + N
      + 1;
  }
  inline std::string model_name() const final {
    return "basic_op_param_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "basic_op_param_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> cmat =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 1;
      cmat = in__.template read<
               Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>>(N, N);
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> cvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 2;
      cvec = in__.template read<
               Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>>(N);
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> crowvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 3;
      crowvec = in__.template read<
                  Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>>(N);
      std::complex<local_scalar_t__> z =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 4;
      z = in__.template read<std::complex<local_scalar_t__>>();
      Eigen::Matrix<local_scalar_t__,-1,-1> mat =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 5;
      mat = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, N);
      Eigen::Matrix<local_scalar_t__,-1,1> vec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 6;
      vec = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<local_scalar_t__,1,-1> rowvec =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 7;
      rowvec = in__.template read<Eigen::Matrix<local_scalar_t__,1,-1>>(N);
      local_scalar_t__ r = DUMMY_VAR__;
      current_statement__ = 8;
      r = in__.template read<local_scalar_t__>();
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> tp_c_matrix =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 14;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 15;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 16;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 17;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 18;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 19;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 20;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 21;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 22;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 23;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 24;
      stan::model::assign(tp_c_matrix, stan::math::multiply(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 25;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 26;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 27;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat), z),
        "assigning variable tp_c_matrix");
      current_statement__ = 28;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 29;
      stan::model::assign(tp_c_matrix, stan::math::add(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 30;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 31;
      stan::model::assign(tp_c_matrix,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 32;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 33;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 34;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 35;
      stan::model::assign(tp_c_matrix, stan::math::minus(cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 36;
      stan::model::assign(tp_c_matrix, stan::math::minus(mat),
        "assigning variable tp_c_matrix");
      current_statement__ = 37;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cvec, crowvec),
        "assigning variable tp_c_matrix");
      current_statement__ = 38;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          crowvec), "assigning variable tp_c_matrix");
      current_statement__ = 39;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_matrix");
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> tp_c_vector =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 10;
      stan::model::assign(tp_c_vector, stan::math::transpose(crowvec),
        "assigning variable tp_c_vector");
      current_statement__ = 40;
      stan::model::assign(tp_c_vector, stan::math::multiply(cmat, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 41;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 42;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 43;
      stan::model::assign(tp_c_vector, stan::math::multiply(z, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 44;
      stan::model::assign(tp_c_vector, stan::math::multiply(cvec, z),
        "assigning variable tp_c_vector");
      current_statement__ = 45;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 46;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_vector");
      current_statement__ = 47;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 48;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec), z),
        "assigning variable tp_c_vector");
      current_statement__ = 49;
      stan::model::assign(tp_c_vector, stan::math::elt_multiply(cvec, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 50;
      stan::model::assign(tp_c_vector,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 51;
      stan::model::assign(tp_c_vector,
        stan::math::elt_multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 52;
      stan::model::assign(tp_c_vector, stan::math::elt_divide(cvec, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 53;
      stan::model::assign(tp_c_vector,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 54;
      stan::model::assign(tp_c_vector,
        stan::math::elt_divide(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 55;
      stan::model::assign(tp_c_vector, stan::math::add(cvec, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 56;
      stan::model::assign(tp_c_vector,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 57;
      stan::model::assign(tp_c_vector,
        stan::math::add(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 58;
      stan::model::assign(tp_c_vector, stan::math::subtract(cvec, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 59;
      stan::model::assign(tp_c_vector,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 60;
      stan::model::assign(tp_c_vector,
        stan::math::subtract(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 61;
      stan::model::assign(tp_c_vector, stan::math::minus(cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 62;
      stan::model::assign(tp_c_vector, stan::math::minus(vec),
        "assigning variable tp_c_vector");
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> tp_c_rowvector =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 11;
      stan::model::assign(tp_c_rowvector, stan::math::transpose(cvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 63;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec, cmat),
        "assigning variable tp_c_rowvector");
      current_statement__ = 64;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          cmat), "assigning variable tp_c_rowvector");
      current_statement__ = 65;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 66;
      stan::model::assign(tp_c_rowvector, stan::math::multiply(z, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 67;
      stan::model::assign(tp_c_rowvector, stan::math::multiply(crowvec, z),
        "assigning variable tp_c_rowvector");
      current_statement__ = 68;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 69;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 70;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 71;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          z), "assigning variable tp_c_rowvector");
      current_statement__ = 72;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(crowvec, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 73;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 74;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 75;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(crowvec, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 76;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 77;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 78;
      stan::model::assign(tp_c_rowvector, stan::math::add(crowvec, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 79;
      stan::model::assign(tp_c_rowvector,
        stan::math::add(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 80;
      stan::model::assign(tp_c_rowvector,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 81;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(crowvec, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 82;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 83;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 84;
      stan::model::assign(tp_c_rowvector, stan::math::minus(crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 85;
      stan::model::assign(tp_c_rowvector, stan::math::minus(rowvec),
        "assigning variable tp_c_rowvector");
      std::complex<local_scalar_t__> tp_c =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 86;
      tp_c = stan::math::multiply(crowvec, cvec);
      current_statement__ = 87;
      tp_c = stan::math::multiply(crowvec,
               stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec));
      current_statement__ = 88;
      tp_c = stan::math::multiply(
               stan::math::promote_scalar<std::complex<local_scalar_t__>>(
                 rowvec), cvec);
      current_statement__ = 89;
      tp_c = stan::math::sum(stan::math::to_array_1d(cvec));
      current_statement__ = 90;
      tp_c = stan::math::sum(stan::math::to_array_1d(cvec));
      current_statement__ = 91;
      tp_c = stan::math::sum(cvec);
      current_statement__ = 92;
      tp_c = stan::math::sum(crowvec);
      current_statement__ = 93;
      tp_c = stan::math::sum(cmat);
      current_statement__ = 94;
      stan::model::assign(tp_c_matrix, stan::math::subtract(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 95;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 96;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 97;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 98;
      stan::model::assign(tp_c_matrix, stan::math::add(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 99;
      stan::model::assign(tp_c_matrix,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 100;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 101;
      stan::model::assign(tp_c_matrix, stan::math::add(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 102;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 103;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 104;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 105;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 106;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 107;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 108;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 109;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 110;
      stan::model::assign(tp_c_matrix, stan::math::divide(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 111;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 112;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 113;
      stan::model::assign(tp_c_matrix, stan::math::divide(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 114;
      stan::model::assign(tp_c_matrix, stan::math::multiply(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 115;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 116;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 117;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, z),
        "assigning variable tp_c_matrix");
      std::vector<std::vector<std::complex<local_scalar_t__>>> carray =
        std::vector<std::vector<std::complex<local_scalar_t__>>>(N,
          std::vector<std::complex<local_scalar_t__>>(N,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      current_statement__ = 118;
      stan::model::assign(carray, stan::math::to_array_2d(cmat),
        "assigning variable carray");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "basic_op_param_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> cmat =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 1;
      cmat = in__.template read<
               Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>>(N, N);
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> cvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 2;
      cvec = in__.template read<
               Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>>(N);
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> crowvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 3;
      crowvec = in__.template read<
                  Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>>(N);
      std::complex<local_scalar_t__> z =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 4;
      z = in__.template read<std::complex<local_scalar_t__>>();
      Eigen::Matrix<local_scalar_t__,-1,-1> mat =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 5;
      mat = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, N);
      Eigen::Matrix<local_scalar_t__,-1,1> vec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 6;
      vec = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<local_scalar_t__,1,-1> rowvec =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 7;
      rowvec = in__.template read<Eigen::Matrix<local_scalar_t__,1,-1>>(N);
      local_scalar_t__ r = DUMMY_VAR__;
      current_statement__ = 8;
      r = in__.template read<local_scalar_t__>();
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> tp_c_matrix =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 14;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 15;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 16;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 17;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 18;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 19;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 20;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 21;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 22;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 23;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 24;
      stan::model::assign(tp_c_matrix, stan::math::multiply(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 25;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 26;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 27;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat), z),
        "assigning variable tp_c_matrix");
      current_statement__ = 28;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 29;
      stan::model::assign(tp_c_matrix, stan::math::add(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 30;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 31;
      stan::model::assign(tp_c_matrix,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 32;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 33;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 34;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 35;
      stan::model::assign(tp_c_matrix, stan::math::minus(cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 36;
      stan::model::assign(tp_c_matrix, stan::math::minus(mat),
        "assigning variable tp_c_matrix");
      current_statement__ = 37;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cvec, crowvec),
        "assigning variable tp_c_matrix");
      current_statement__ = 38;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          crowvec), "assigning variable tp_c_matrix");
      current_statement__ = 39;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_matrix");
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> tp_c_vector =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 10;
      stan::model::assign(tp_c_vector, stan::math::transpose(crowvec),
        "assigning variable tp_c_vector");
      current_statement__ = 40;
      stan::model::assign(tp_c_vector, stan::math::multiply(cmat, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 41;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 42;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 43;
      stan::model::assign(tp_c_vector, stan::math::multiply(z, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 44;
      stan::model::assign(tp_c_vector, stan::math::multiply(cvec, z),
        "assigning variable tp_c_vector");
      current_statement__ = 45;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 46;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_vector");
      current_statement__ = 47;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 48;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec), z),
        "assigning variable tp_c_vector");
      current_statement__ = 49;
      stan::model::assign(tp_c_vector, stan::math::elt_multiply(cvec, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 50;
      stan::model::assign(tp_c_vector,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 51;
      stan::model::assign(tp_c_vector,
        stan::math::elt_multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 52;
      stan::model::assign(tp_c_vector, stan::math::elt_divide(cvec, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 53;
      stan::model::assign(tp_c_vector,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 54;
      stan::model::assign(tp_c_vector,
        stan::math::elt_divide(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 55;
      stan::model::assign(tp_c_vector, stan::math::add(cvec, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 56;
      stan::model::assign(tp_c_vector,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 57;
      stan::model::assign(tp_c_vector,
        stan::math::add(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 58;
      stan::model::assign(tp_c_vector, stan::math::subtract(cvec, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 59;
      stan::model::assign(tp_c_vector,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 60;
      stan::model::assign(tp_c_vector,
        stan::math::subtract(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 61;
      stan::model::assign(tp_c_vector, stan::math::minus(cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 62;
      stan::model::assign(tp_c_vector, stan::math::minus(vec),
        "assigning variable tp_c_vector");
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> tp_c_rowvector =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 11;
      stan::model::assign(tp_c_rowvector, stan::math::transpose(cvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 63;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec, cmat),
        "assigning variable tp_c_rowvector");
      current_statement__ = 64;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          cmat), "assigning variable tp_c_rowvector");
      current_statement__ = 65;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 66;
      stan::model::assign(tp_c_rowvector, stan::math::multiply(z, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 67;
      stan::model::assign(tp_c_rowvector, stan::math::multiply(crowvec, z),
        "assigning variable tp_c_rowvector");
      current_statement__ = 68;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 69;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 70;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 71;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          z), "assigning variable tp_c_rowvector");
      current_statement__ = 72;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(crowvec, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 73;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 74;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 75;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(crowvec, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 76;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 77;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 78;
      stan::model::assign(tp_c_rowvector, stan::math::add(crowvec, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 79;
      stan::model::assign(tp_c_rowvector,
        stan::math::add(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 80;
      stan::model::assign(tp_c_rowvector,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 81;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(crowvec, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 82;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 83;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 84;
      stan::model::assign(tp_c_rowvector, stan::math::minus(crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 85;
      stan::model::assign(tp_c_rowvector, stan::math::minus(rowvec),
        "assigning variable tp_c_rowvector");
      std::complex<local_scalar_t__> tp_c =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 86;
      tp_c = stan::math::multiply(crowvec, cvec);
      current_statement__ = 87;
      tp_c = stan::math::multiply(crowvec,
               stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec));
      current_statement__ = 88;
      tp_c = stan::math::multiply(
               stan::math::promote_scalar<std::complex<local_scalar_t__>>(
                 rowvec), cvec);
      current_statement__ = 89;
      tp_c = stan::math::sum(stan::math::to_array_1d(cvec));
      current_statement__ = 90;
      tp_c = stan::math::sum(stan::math::to_array_1d(cvec));
      current_statement__ = 91;
      tp_c = stan::math::sum(cvec);
      current_statement__ = 92;
      tp_c = stan::math::sum(crowvec);
      current_statement__ = 93;
      tp_c = stan::math::sum(cmat);
      current_statement__ = 94;
      stan::model::assign(tp_c_matrix, stan::math::subtract(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 95;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 96;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 97;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 98;
      stan::model::assign(tp_c_matrix, stan::math::add(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 99;
      stan::model::assign(tp_c_matrix,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 100;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 101;
      stan::model::assign(tp_c_matrix, stan::math::add(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 102;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 103;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 104;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 105;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 106;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 107;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 108;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 109;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 110;
      stan::model::assign(tp_c_matrix, stan::math::divide(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 111;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 112;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 113;
      stan::model::assign(tp_c_matrix, stan::math::divide(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 114;
      stan::model::assign(tp_c_matrix, stan::math::multiply(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 115;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 116;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 117;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, z),
        "assigning variable tp_c_matrix");
      std::vector<std::vector<std::complex<local_scalar_t__>>> carray =
        std::vector<std::vector<std::complex<local_scalar_t__>>>(N,
          std::vector<std::complex<local_scalar_t__>>(N,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      current_statement__ = 118;
      stan::model::assign(carray, stan::math::to_array_2d(cmat),
        "assigning variable carray");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "basic_op_param_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<std::complex<double>,-1,-1> cmat =
        Eigen::Matrix<std::complex<double>,-1,-1>::Constant(N, N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      cmat = in__.template read<
               Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>>(N, N);
      Eigen::Matrix<std::complex<double>,-1,1> cvec =
        Eigen::Matrix<std::complex<double>,-1,1>::Constant(N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 2;
      cvec = in__.template read<
               Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>>(N);
      Eigen::Matrix<std::complex<double>,1,-1> crowvec =
        Eigen::Matrix<std::complex<double>,1,-1>::Constant(N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 3;
      crowvec = in__.template read<
                  Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>>(N);
      std::complex<double> z =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      z = in__.template read<std::complex<local_scalar_t__>>();
      Eigen::Matrix<double,-1,-1> mat =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      mat = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, N);
      Eigen::Matrix<double,-1,1> vec =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      vec = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<double,1,-1> rowvec =
        Eigen::Matrix<double,1,-1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      rowvec = in__.template read<Eigen::Matrix<local_scalar_t__,1,-1>>(N);
      double r = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      r = in__.template read<local_scalar_t__>();
      Eigen::Matrix<std::complex<double>,-1,-1> tp_c_matrix =
        Eigen::Matrix<std::complex<double>,-1,-1>::Constant(N, N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<std::complex<double>,-1,1> tp_c_vector =
        Eigen::Matrix<std::complex<double>,-1,1>::Constant(N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<std::complex<double>,1,-1> tp_c_rowvector =
        Eigen::Matrix<std::complex<double>,1,-1>::Constant(N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      std::complex<double> tp_c =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());
      std::vector<std::vector<std::complex<double>>> carray =
        std::vector<std::vector<std::complex<double>>>(N,
          std::vector<std::complex<double>>(N,
            std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
              std::numeric_limits<double>::quiet_NaN())));
      out__.write(cmat);
      out__.write(cvec);
      out__.write(crowvec);
      out__.write(z);
      out__.write(mat);
      out__.write(vec);
      out__.write(rowvec);
      out__.write(r);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 14;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 15;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 16;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 17;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 18;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 19;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 20;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 21;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 22;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 23;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 24;
      stan::model::assign(tp_c_matrix, stan::math::multiply(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 25;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 26;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 27;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat), z),
        "assigning variable tp_c_matrix");
      current_statement__ = 28;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 29;
      stan::model::assign(tp_c_matrix, stan::math::add(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 30;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 31;
      stan::model::assign(tp_c_matrix,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 32;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cmat, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 33;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 34;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cmat), "assigning variable tp_c_matrix");
      current_statement__ = 35;
      stan::model::assign(tp_c_matrix, stan::math::minus(cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 36;
      stan::model::assign(tp_c_matrix, stan::math::minus(mat),
        "assigning variable tp_c_matrix");
      current_statement__ = 37;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cvec, crowvec),
        "assigning variable tp_c_matrix");
      current_statement__ = 38;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          crowvec), "assigning variable tp_c_matrix");
      current_statement__ = 39;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_matrix");
      current_statement__ = 10;
      stan::model::assign(tp_c_vector, stan::math::transpose(crowvec),
        "assigning variable tp_c_vector");
      current_statement__ = 40;
      stan::model::assign(tp_c_vector, stan::math::multiply(cmat, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 41;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 42;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 43;
      stan::model::assign(tp_c_vector, stan::math::multiply(z, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 44;
      stan::model::assign(tp_c_vector, stan::math::multiply(cvec, z),
        "assigning variable tp_c_vector");
      current_statement__ = 45;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 46;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_vector");
      current_statement__ = 47;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 48;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec), z),
        "assigning variable tp_c_vector");
      current_statement__ = 49;
      stan::model::assign(tp_c_vector, stan::math::elt_multiply(cvec, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 50;
      stan::model::assign(tp_c_vector,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 51;
      stan::model::assign(tp_c_vector,
        stan::math::elt_multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 52;
      stan::model::assign(tp_c_vector, stan::math::elt_divide(cvec, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 53;
      stan::model::assign(tp_c_vector,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 54;
      stan::model::assign(tp_c_vector,
        stan::math::elt_divide(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 55;
      stan::model::assign(tp_c_vector, stan::math::add(cvec, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 56;
      stan::model::assign(tp_c_vector,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 57;
      stan::model::assign(tp_c_vector,
        stan::math::add(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 58;
      stan::model::assign(tp_c_vector, stan::math::subtract(cvec, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 59;
      stan::model::assign(tp_c_vector,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec),
          cvec), "assigning variable tp_c_vector");
      current_statement__ = 60;
      stan::model::assign(tp_c_vector,
        stan::math::subtract(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec)),
        "assigning variable tp_c_vector");
      current_statement__ = 61;
      stan::model::assign(tp_c_vector, stan::math::minus(cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 62;
      stan::model::assign(tp_c_vector, stan::math::minus(vec),
        "assigning variable tp_c_vector");
      current_statement__ = 11;
      stan::model::assign(tp_c_rowvector, stan::math::transpose(cvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 63;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec, cmat),
        "assigning variable tp_c_rowvector");
      current_statement__ = 64;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          cmat), "assigning variable tp_c_rowvector");
      current_statement__ = 65;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(mat)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 66;
      stan::model::assign(tp_c_rowvector, stan::math::multiply(z, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 67;
      stan::model::assign(tp_c_rowvector, stan::math::multiply(crowvec, z),
        "assigning variable tp_c_rowvector");
      current_statement__ = 68;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 69;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 70;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 71;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          z), "assigning variable tp_c_rowvector");
      current_statement__ = 72;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(crowvec, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 73;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 74;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 75;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(crowvec, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 76;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 77;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 78;
      stan::model::assign(tp_c_rowvector, stan::math::add(crowvec, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 79;
      stan::model::assign(tp_c_rowvector,
        stan::math::add(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 80;
      stan::model::assign(tp_c_rowvector,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 81;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(crowvec, crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 82;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 83;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(rowvec),
          crowvec), "assigning variable tp_c_rowvector");
      current_statement__ = 84;
      stan::model::assign(tp_c_rowvector, stan::math::minus(crowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 85;
      stan::model::assign(tp_c_rowvector, stan::math::minus(rowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 86;
      tp_c = stan::math::multiply(crowvec, cvec);
      current_statement__ = 87;
      tp_c = stan::math::multiply(crowvec,
               stan::math::promote_scalar<std::complex<local_scalar_t__>>(vec));
      current_statement__ = 88;
      tp_c = stan::math::multiply(
               stan::math::promote_scalar<std::complex<local_scalar_t__>>(
                 rowvec), cvec);
      current_statement__ = 89;
      tp_c = stan::math::sum(stan::math::to_array_1d(cvec));
      current_statement__ = 90;
      tp_c = stan::math::sum(stan::math::to_array_1d(cvec));
      current_statement__ = 91;
      tp_c = stan::math::sum(cvec);
      current_statement__ = 92;
      tp_c = stan::math::sum(crowvec);
      current_statement__ = 93;
      tp_c = stan::math::sum(cmat);
      current_statement__ = 94;
      stan::model::assign(tp_c_matrix, stan::math::subtract(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 95;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 96;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 97;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 98;
      stan::model::assign(tp_c_matrix, stan::math::add(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 99;
      stan::model::assign(tp_c_matrix,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 100;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 101;
      stan::model::assign(tp_c_matrix, stan::math::add(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 102;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 103;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 104;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 105;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 106;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 107;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 108;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 109;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 110;
      stan::model::assign(tp_c_matrix, stan::math::divide(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 111;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 112;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 113;
      stan::model::assign(tp_c_matrix, stan::math::divide(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 114;
      stan::model::assign(tp_c_matrix, stan::math::multiply(z, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 115;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 116;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(r)),
        "assigning variable tp_c_matrix");
      current_statement__ = 117;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 118;
      stan::model::assign(carray, stan::math::to_array_2d(cmat),
        "assigning variable carray");
      if (emit_transformed_parameters__) {
        out__.write(tp_c_matrix);
        out__.write(tp_c_vector);
        out__.write(tp_c_rowvector);
        out__.write(tp_c);
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(carray[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> cmat =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 1;
      stan::model::assign(cmat,
        in__.read<Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>>(N, N),
        "assigning variable cmat");
      out__.write(cmat);
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> cvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 2;
      stan::model::assign(cvec,
        in__.read<Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>>(N),
        "assigning variable cvec");
      out__.write(cvec);
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> crowvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 3;
      stan::model::assign(crowvec,
        in__.read<Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>>(N),
        "assigning variable crowvec");
      out__.write(crowvec);
      std::complex<local_scalar_t__> z =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 4;
      z = in__.read<std::complex<local_scalar_t__>>();
      out__.write(z);
      Eigen::Matrix<local_scalar_t__,-1,-1> mat =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(mat,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, N),
        "assigning variable mat");
      out__.write(mat);
      Eigen::Matrix<local_scalar_t__,-1,1> vec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(vec,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable vec");
      out__.write(vec);
      Eigen::Matrix<local_scalar_t__,1,-1> rowvec =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(rowvec,
        in__.read<Eigen::Matrix<local_scalar_t__,1,-1>>(N),
        "assigning variable rowvec");
      out__.write(rowvec);
      local_scalar_t__ r = DUMMY_VAR__;
      current_statement__ = 8;
      r = in__.read<local_scalar_t__>();
      out__.write(r);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "cmat", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
          static_cast<size_t>(2)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "cvec", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "crowvec",
        "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "z", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "mat", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "vec", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "rowvec", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "r", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> cmat =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      {
        std::vector<std::complex<local_scalar_t__>> cmat_flat__;
        current_statement__ = 1;
        cmat_flat__ = context__.vals_c("cmat");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(cmat, cmat_flat__[(pos__ - 1)],
              "assigning variable cmat", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(cmat);
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> cvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      {
        std::vector<std::complex<local_scalar_t__>> cvec_flat__;
        current_statement__ = 2;
        cvec_flat__ = context__.vals_c("cvec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(cvec, cvec_flat__[(pos__ - 1)],
            "assigning variable cvec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(cvec);
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> crowvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      {
        std::vector<std::complex<local_scalar_t__>> crowvec_flat__;
        current_statement__ = 3;
        crowvec_flat__ = context__.vals_c("crowvec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(crowvec, crowvec_flat__[(pos__ - 1)],
            "assigning variable crowvec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(crowvec);
      std::complex<local_scalar_t__> z =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 4;
      z = context__.vals_c("z")[(1 - 1)];
      out__.write(z);
      Eigen::Matrix<local_scalar_t__,-1,-1> mat =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mat_flat__;
        current_statement__ = 5;
        mat_flat__ = context__.vals_r("mat");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(mat, mat_flat__[(pos__ - 1)],
              "assigning variable mat", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(mat);
      Eigen::Matrix<local_scalar_t__,-1,1> vec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> vec_flat__;
        current_statement__ = 6;
        vec_flat__ = context__.vals_r("vec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(vec, vec_flat__[(pos__ - 1)],
            "assigning variable vec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(vec);
      Eigen::Matrix<local_scalar_t__,1,-1> rowvec =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> rowvec_flat__;
        current_statement__ = 7;
        rowvec_flat__ = context__.vals_r("rowvec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(rowvec, rowvec_flat__[(pos__ - 1)],
            "assigning variable rowvec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(rowvec);
      local_scalar_t__ r = DUMMY_VAR__;
      current_statement__ = 8;
      r = context__.vals_r("r")[(1 - 1)];
      out__.write(r);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"cmat", "cvec", "crowvec", "z", "mat",
                "vec", "rowvec", "r"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"tp_c_matrix", "tp_c_vector", "tp_c_rowvector", "tp_c", "carray"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(N),
                                                 static_cast<size_t>(N),
                                                 static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(N),
                  static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(N),
                  static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(N),
                  static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N), static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N), static_cast<size_t>(2)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "cmat" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
          "real");
        param_names__.emplace_back(std::string() + "cmat" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
          "imag");
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "cvec" + '.' +
        std::to_string(sym1__) + '.' + "real");
      param_names__.emplace_back(std::string() + "cvec" + '.' +
        std::to_string(sym1__) + '.' + "imag");
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "crowvec" + '.' +
        std::to_string(sym1__) + '.' + "real");
      param_names__.emplace_back(std::string() + "crowvec" + '.' +
        std::to_string(sym1__) + '.' + "imag");
    }
    param_names__.emplace_back(std::string() + "z" + '.' + "real");
    param_names__.emplace_back(std::string() + "z" + '.' + "imag");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "mat" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "vec" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "rowvec" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "r");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "tp_c_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "tp_c_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "tp_c_vector" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "tp_c_vector" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "tp_c_rowvector" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "tp_c_rowvector" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      param_names__.emplace_back(std::string() + "tp_c" + '.' + "real");
      param_names__.emplace_back(std::string() + "tp_c" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "carray" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "carray" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "cmat" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
          "real");
        param_names__.emplace_back(std::string() + "cmat" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
          "imag");
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "cvec" + '.' +
        std::to_string(sym1__) + '.' + "real");
      param_names__.emplace_back(std::string() + "cvec" + '.' +
        std::to_string(sym1__) + '.' + "imag");
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "crowvec" + '.' +
        std::to_string(sym1__) + '.' + "real");
      param_names__.emplace_back(std::string() + "crowvec" + '.' +
        std::to_string(sym1__) + '.' + "imag");
    }
    param_names__.emplace_back(std::string() + "z" + '.' + "real");
    param_names__.emplace_back(std::string() + "z" + '.' + "imag");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "mat" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "vec" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "rowvec" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "r");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "tp_c_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "tp_c_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "tp_c_vector" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "tp_c_vector" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "tp_c_rowvector" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "tp_c_rowvector" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      param_names__.emplace_back(std::string() + "tp_c" + '.' + "real");
      param_names__.emplace_back(std::string() + "tp_c" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "carray" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "carray" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"cmat\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"cvec\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"crowvec\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"complex\"},\"block\":\"parameters\"},{\"name\":\"mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"rowvec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tp_c_matrix\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_c_vector\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_c_rowvector\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_c\",\"type\":{\"name\":\"complex\"},\"block\":\"transformed_parameters\"},{\"name\":\"carray\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"cmat\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"cvec\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"crowvec\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"complex\"},\"block\":\"parameters\"},{\"name\":\"mat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"vec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"rowvec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tp_c_matrix\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_c_vector\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_c_rowvector\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_c\",\"type\":{\"name\":\"complex\"},\"block\":\"transformed_parameters\"},{\"name\":\"carray\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((N * (N * 2)) + (N * 2)) + (N * 2)) +
      2) + (N * N)) + N) + N) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((((N * (N
      * 2)) + (N * 2)) + (N * 2)) + 2) + (N * (N * 2))));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((N * (N * 2)) + (N * 2)) + (N * 2)) +
      2) + (N * N)) + N) + N) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((((N * (N
      * 2)) + (N * 2)) + (N * 2)) + 2) + (N * (N * 2))));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = basic_op_param_model_namespace::basic_op_param_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return basic_op_param_model_namespace::profiles__;
}
#endif
  $ ../../../../../../install/default/bin/stanc --print-cpp basic_operations.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace basic_operations_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 133> locations_array__ =
  {" (found before start of program)",
  " (in 'basic_operations.stan', line 16, column 2 to column 34)",
  " (in 'basic_operations.stan', line 52, column 2 to column 43)",
  " (in 'basic_operations.stan', line 84, column 2 to column 47)",
  " (in 'basic_operations.stan', line 116, column 2 to column 15)",
  " (in 'basic_operations.stan', line 163, column 2 to column 28)",
  " (in 'basic_operations.stan', line 19, column 2 to column 28)",
  " (in 'basic_operations.stan', line 20, column 2 to column 27)",
  " (in 'basic_operations.stan', line 21, column 2 to column 27)",
  " (in 'basic_operations.stan', line 22, column 2 to column 29)",
  " (in 'basic_operations.stan', line 23, column 2 to column 28)",
  " (in 'basic_operations.stan', line 24, column 2 to column 28)",
  " (in 'basic_operations.stan', line 25, column 2 to column 29)",
  " (in 'basic_operations.stan', line 26, column 2 to column 28)",
  " (in 'basic_operations.stan', line 27, column 2 to column 28)",
  " (in 'basic_operations.stan', line 30, column 2 to column 25)",
  " (in 'basic_operations.stan', line 31, column 2 to column 25)",
  " (in 'basic_operations.stan', line 32, column 2 to column 25)",
  " (in 'basic_operations.stan', line 33, column 2 to column 25)",
  " (in 'basic_operations.stan', line 34, column 2 to column 24)",
  " (in 'basic_operations.stan', line 35, column 2 to column 24)",
  " (in 'basic_operations.stan', line 38, column 2 to column 28)",
  " (in 'basic_operations.stan', line 39, column 2 to column 27)",
  " (in 'basic_operations.stan', line 40, column 2 to column 27)",
  " (in 'basic_operations.stan', line 41, column 2 to column 28)",
  " (in 'basic_operations.stan', line 42, column 2 to column 27)",
  " (in 'basic_operations.stan', line 43, column 2 to column 27)",
  " (in 'basic_operations.stan', line 44, column 2 to column 22)",
  " (in 'basic_operations.stan', line 45, column 2 to column 21)",
  " (in 'basic_operations.stan', line 48, column 2 to column 31)",
  " (in 'basic_operations.stan', line 49, column 2 to column 30)",
  " (in 'basic_operations.stan', line 50, column 2 to column 30)",
  " (in 'basic_operations.stan', line 54, column 2 to column 28)",
  " (in 'basic_operations.stan', line 55, column 2 to column 27)",
  " (in 'basic_operations.stan', line 56, column 2 to column 27)",
  " (in 'basic_operations.stan', line 59, column 2 to column 25)",
  " (in 'basic_operations.stan', line 60, column 2 to column 25)",
  " (in 'basic_operations.stan', line 61, column 2 to column 25)",
  " (in 'basic_operations.stan', line 62, column 2 to column 25)",
  " (in 'basic_operations.stan', line 63, column 2 to column 24)",
  " (in 'basic_operations.stan', line 64, column 2 to column 24)",
  " (in 'basic_operations.stan', line 67, column 2 to column 29)",
  " (in 'basic_operations.stan', line 68, column 2 to column 28)",
  " (in 'basic_operations.stan', line 69, column 2 to column 28)",
  " (in 'basic_operations.stan', line 70, column 2 to column 29)",
  " (in 'basic_operations.stan', line 71, column 2 to column 28)",
  " (in 'basic_operations.stan', line 72, column 2 to column 28)",
  " (in 'basic_operations.stan', line 75, column 2 to column 28)",
  " (in 'basic_operations.stan', line 76, column 2 to column 27)",
  " (in 'basic_operations.stan', line 77, column 2 to column 27)",
  " (in 'basic_operations.stan', line 78, column 2 to column 28)",
  " (in 'basic_operations.stan', line 79, column 2 to column 27)",
  " (in 'basic_operations.stan', line 80, column 2 to column 27)",
  " (in 'basic_operations.stan', line 81, column 2 to column 22)",
  " (in 'basic_operations.stan', line 82, column 2 to column 21)",
  " (in 'basic_operations.stan', line 86, column 2 to column 34)",
  " (in 'basic_operations.stan', line 87, column 2 to column 33)",
  " (in 'basic_operations.stan', line 88, column 2 to column 33)",
  " (in 'basic_operations.stan', line 91, column 2 to column 31)",
  " (in 'basic_operations.stan', line 92, column 2 to column 31)",
  " (in 'basic_operations.stan', line 93, column 2 to column 31)",
  " (in 'basic_operations.stan', line 94, column 2 to column 31)",
  " (in 'basic_operations.stan', line 95, column 2 to column 30)",
  " (in 'basic_operations.stan', line 96, column 2 to column 30)",
  " (in 'basic_operations.stan', line 99, column 2 to column 38)",
  " (in 'basic_operations.stan', line 100, column 2 to column 37)",
  " (in 'basic_operations.stan', line 101, column 2 to column 37)",
  " (in 'basic_operations.stan', line 102, column 2 to column 38)",
  " (in 'basic_operations.stan', line 103, column 2 to column 37)",
  " (in 'basic_operations.stan', line 104, column 2 to column 37)",
  " (in 'basic_operations.stan', line 107, column 2 to column 37)",
  " (in 'basic_operations.stan', line 108, column 2 to column 36)",
  " (in 'basic_operations.stan', line 109, column 2 to column 36)",
  " (in 'basic_operations.stan', line 110, column 2 to column 37)",
  " (in 'basic_operations.stan', line 111, column 2 to column 36)",
  " (in 'basic_operations.stan', line 112, column 2 to column 36)",
  " (in 'basic_operations.stan', line 113, column 2 to column 28)",
  " (in 'basic_operations.stan', line 114, column 2 to column 27)",
  " (in 'basic_operations.stan', line 118, column 2 to column 24)",
  " (in 'basic_operations.stan', line 119, column 2 to column 23)",
  " (in 'basic_operations.stan', line 120, column 2 to column 23)",
  " (in 'basic_operations.stan', line 123, column 2 to column 32)",
  " (in 'basic_operations.stan', line 124, column 2 to column 19)",
  " (in 'basic_operations.stan', line 125, column 2 to column 22)",
  " (in 'basic_operations.stan', line 126, column 2 to column 19)",
  " (in 'basic_operations.stan', line 130, column 2 to column 25)",
  " (in 'basic_operations.stan', line 131, column 2 to column 25)",
  " (in 'basic_operations.stan', line 132, column 2 to column 25)",
  " (in 'basic_operations.stan', line 133, column 2 to column 25)",
  " (in 'basic_operations.stan', line 135, column 2 to column 25)",
  " (in 'basic_operations.stan', line 136, column 2 to column 25)",
  " (in 'basic_operations.stan', line 137, column 2 to column 25)",
  " (in 'basic_operations.stan', line 138, column 2 to column 25)",
  " (in 'basic_operations.stan', line 141, column 2 to column 26)",
  " (in 'basic_operations.stan', line 142, column 2 to column 26)",
  " (in 'basic_operations.stan', line 143, column 2 to column 26)",
  " (in 'basic_operations.stan', line 144, column 2 to column 26)",
  " (in 'basic_operations.stan', line 146, column 2 to column 26)",
  " (in 'basic_operations.stan', line 147, column 2 to column 26)",
  " (in 'basic_operations.stan', line 148, column 2 to column 26)",
  " (in 'basic_operations.stan', line 149, column 2 to column 26)",
  " (in 'basic_operations.stan', line 152, column 2 to column 25)",
  " (in 'basic_operations.stan', line 153, column 2 to column 25)",
  " (in 'basic_operations.stan', line 154, column 2 to column 25)",
  " (in 'basic_operations.stan', line 155, column 2 to column 25)",
  " (in 'basic_operations.stan', line 157, column 2 to column 25)",
  " (in 'basic_operations.stan', line 158, column 2 to column 25)",
  " (in 'basic_operations.stan', line 159, column 2 to column 25)",
  " (in 'basic_operations.stan', line 160, column 2 to column 25)",
  " (in 'basic_operations.stan', line 164, column 2 to column 29)",
  " (in 'basic_operations.stan', line 2, column 2 to column 8)",
  " (in 'basic_operations.stan', line 3, column 17 to column 18)",
  " (in 'basic_operations.stan', line 3, column 19 to column 20)",
  " (in 'basic_operations.stan', line 3, column 2 to column 27)",
  " (in 'basic_operations.stan', line 4, column 17 to column 18)",
  " (in 'basic_operations.stan', line 4, column 2 to column 25)",
  " (in 'basic_operations.stan', line 5, column 21 to column 22)",
  " (in 'basic_operations.stan', line 5, column 2 to column 32)",
  " (in 'basic_operations.stan', line 6, column 2 to column 12)",
  " (in 'basic_operations.stan', line 8, column 9 to column 10)",
  " (in 'basic_operations.stan', line 8, column 11 to column 12)",
  " (in 'basic_operations.stan', line 8, column 2 to column 18)",
  " (in 'basic_operations.stan', line 9, column 9 to column 10)",
  " (in 'basic_operations.stan', line 9, column 2 to column 16)",
  " (in 'basic_operations.stan', line 10, column 13 to column 14)",
  " (in 'basic_operations.stan', line 10, column 2 to column 23)",
  " (in 'basic_operations.stan', line 11, column 2 to column 9)",
  " (in 'basic_operations.stan', line 16, column 17 to column 18)",
  " (in 'basic_operations.stan', line 16, column 19 to column 20)",
  " (in 'basic_operations.stan', line 52, column 17 to column 18)",
  " (in 'basic_operations.stan', line 84, column 21 to column 22)",
  " (in 'basic_operations.stan', line 163, column 8 to column 9)",
  " (in 'basic_operations.stan', line 163, column 10 to column 11)"};
class basic_operations_model final : public model_base_crtp<basic_operations_model> {
 private:
  int N;
  Eigen::Matrix<std::complex<double>,-1,-1> cmat_data__;
  Eigen::Matrix<std::complex<double>,-1,1> cvec_data__;
  Eigen::Matrix<std::complex<double>,1,-1> crowvec_data__;
  std::complex<double> z;
  Eigen::Matrix<double,-1,-1> mat_data__;
  Eigen::Matrix<double,-1,1> vec_data__;
  Eigen::Matrix<double,1,-1> rowvec_data__;
  double r;
  Eigen::Map<Eigen::Matrix<std::complex<double>,-1,-1>> cmat{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<std::complex<double>,-1,1>> cvec{nullptr, 0};
  Eigen::Map<Eigen::Matrix<std::complex<double>,1,-1>> crowvec{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> mat{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> vec{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,1,-1>> rowvec{nullptr, 0};
 public:
  ~basic_operations_model() {}
  basic_operations_model(stan::io::var_context& context__, unsigned int
                         random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "basic_operations_model_namespace::basic_operations_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 110;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 110;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 111;
      stan::math::validate_non_negative_index("cmat", "N", N);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("cmat", "N", N);
      current_statement__ = 113;
      context__.validate_dims("data initialization", "cmat", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
          static_cast<size_t>(2)});
      cmat_data__ = Eigen::Matrix<std::complex<double>,-1,-1>::Constant(N, N,
                      std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                             ),
                        std::numeric_limits<double>::quiet_NaN()));
      new (&cmat)
        Eigen::Map<Eigen::Matrix<std::complex<double>,-1,-1>>(cmat_data__.data(),
        N, N);
      {
        std::vector<std::complex<local_scalar_t__>> cmat_flat__;
        current_statement__ = 113;
        cmat_flat__ = context__.vals_c("cmat");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(cmat, cmat_flat__[(pos__ - 1)],
              "assigning variable cmat", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 114;
      stan::math::validate_non_negative_index("cvec", "N", N);
      current_statement__ = 115;
      context__.validate_dims("data initialization", "cvec", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2)});
      cvec_data__ = Eigen::Matrix<std::complex<double>,-1,1>::Constant(N,
                      std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                             ),
                        std::numeric_limits<double>::quiet_NaN()));
      new (&cvec)
        Eigen::Map<Eigen::Matrix<std::complex<double>,-1,1>>(cvec_data__.data(),
        N);
      {
        std::vector<std::complex<local_scalar_t__>> cvec_flat__;
        current_statement__ = 115;
        cvec_flat__ = context__.vals_c("cvec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(cvec, cvec_flat__[(pos__ - 1)],
            "assigning variable cvec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 116;
      stan::math::validate_non_negative_index("crowvec", "N", N);
      current_statement__ = 117;
      context__.validate_dims("data initialization", "crowvec", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2)});
      crowvec_data__ = Eigen::Matrix<std::complex<double>,1,-1>::Constant(N,
                         std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                                ),
                           std::numeric_limits<double>::quiet_NaN()));
      new (&crowvec)
        Eigen::Map<Eigen::Matrix<std::complex<double>,1,-1>>(crowvec_data__.data(),
        N);
      {
        std::vector<std::complex<local_scalar_t__>> crowvec_flat__;
        current_statement__ = 117;
        crowvec_flat__ = context__.vals_c("crowvec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(crowvec, crowvec_flat__[(pos__ - 1)],
            "assigning variable crowvec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 118;
      context__.validate_dims("data initialization", "z", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      z = std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 118;
      z = context__.vals_c("z")[(1 - 1)];
      current_statement__ = 119;
      stan::math::validate_non_negative_index("mat", "N", N);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("mat", "N", N);
      current_statement__ = 121;
      context__.validate_dims("data initialization", "mat", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      mat_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                     std::numeric_limits<double>::quiet_NaN());
      new (&mat) Eigen::Map<Eigen::Matrix<double,-1,-1>>(mat_data__.data(),
        N, N);
      {
        std::vector<local_scalar_t__> mat_flat__;
        current_statement__ = 121;
        mat_flat__ = context__.vals_r("mat");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(mat, mat_flat__[(pos__ - 1)],
              "assigning variable mat", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 122;
      stan::math::validate_non_negative_index("vec", "N", N);
      current_statement__ = 123;
      context__.validate_dims("data initialization", "vec", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      vec_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                     std::numeric_limits<double>::quiet_NaN());
      new (&vec) Eigen::Map<Eigen::Matrix<double,-1,1>>(vec_data__.data(), N);
      {
        std::vector<local_scalar_t__> vec_flat__;
        current_statement__ = 123;
        vec_flat__ = context__.vals_r("vec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(vec, vec_flat__[(pos__ - 1)],
            "assigning variable vec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 124;
      stan::math::validate_non_negative_index("rowvec", "N", N);
      current_statement__ = 125;
      context__.validate_dims("data initialization", "rowvec", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      rowvec_data__ = Eigen::Matrix<double,1,-1>::Constant(N,
                        std::numeric_limits<double>::quiet_NaN());
      new (&rowvec)
        Eigen::Map<Eigen::Matrix<double,1,-1>>(rowvec_data__.data(), N);
      {
        std::vector<local_scalar_t__> rowvec_flat__;
        current_statement__ = 125;
        rowvec_flat__ = context__.vals_r("rowvec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(rowvec, rowvec_flat__[(pos__ - 1)],
            "assigning variable rowvec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 126;
      context__.validate_dims("data initialization", "r", "double",
        std::vector<size_t>{});
      r = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 126;
      r = context__.vals_r("r")[(1 - 1)];
      current_statement__ = 127;
      stan::math::validate_non_negative_index("gq_c_matrix", "N", N);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("gq_c_matrix", "N", N);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("gq_c_vector", "N", N);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("gq_c_rowvector", "N", N);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("carray", "N", N);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("carray", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "basic_operations_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "basic_operations_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "basic_operations_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "basic_operations_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<std::complex<double>,-1,-1> gq_c_matrix =
        Eigen::Matrix<std::complex<double>,-1,-1>::Constant(N, N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 6;
      stan::model::assign(gq_c_matrix, stan::math::multiply(cmat, cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 7;
      stan::model::assign(gq_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<double>>(mat)),
        "assigning variable gq_c_matrix");
      current_statement__ = 8;
      stan::model::assign(gq_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 9;
      stan::model::assign(gq_c_matrix, stan::math::elt_multiply(cmat, cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 10;
      stan::model::assign(gq_c_matrix,
        stan::math::elt_multiply(cmat,
          stan::math::promote_scalar<std::complex<double>>(mat)),
        "assigning variable gq_c_matrix");
      current_statement__ = 11;
      stan::model::assign(gq_c_matrix,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 12;
      stan::model::assign(gq_c_matrix, stan::math::elt_divide(cmat, cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 13;
      stan::model::assign(gq_c_matrix,
        stan::math::elt_divide(cmat,
          stan::math::promote_scalar<std::complex<double>>(mat)),
        "assigning variable gq_c_matrix");
      current_statement__ = 14;
      stan::model::assign(gq_c_matrix,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<double>>(mat), cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 15;
      stan::model::assign(gq_c_matrix, stan::math::multiply(cmat, z),
        "assigning variable gq_c_matrix");
      current_statement__ = 16;
      stan::model::assign(gq_c_matrix, stan::math::multiply(z, cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 17;
      stan::model::assign(gq_c_matrix,
        stan::math::multiply(stan::math::to_complex(r, 0), cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 18;
      stan::model::assign(gq_c_matrix,
        stan::math::multiply(cmat, stan::math::to_complex(r, 0)),
        "assigning variable gq_c_matrix");
      current_statement__ = 19;
      stan::model::assign(gq_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), z),
        "assigning variable gq_c_matrix");
      current_statement__ = 20;
      stan::model::assign(gq_c_matrix,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<double>>(mat)),
        "assigning variable gq_c_matrix");
      current_statement__ = 21;
      stan::model::assign(gq_c_matrix, stan::math::add(cmat, cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 22;
      stan::model::assign(gq_c_matrix,
        stan::math::add(cmat,
          stan::math::promote_scalar<std::complex<double>>(mat)),
        "assigning variable gq_c_matrix");
      current_statement__ = 23;
      stan::model::assign(gq_c_matrix,
        stan::math::add(
          stan::math::promote_scalar<std::complex<double>>(mat), cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 24;
      stan::model::assign(gq_c_matrix, stan::math::subtract(cmat, cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 25;
      stan::model::assign(gq_c_matrix,
        stan::math::subtract(cmat,
          stan::math::promote_scalar<std::complex<double>>(mat)),
        "assigning variable gq_c_matrix");
      current_statement__ = 26;
      stan::model::assign(gq_c_matrix,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<double>>(mat), cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 27;
      stan::model::assign(gq_c_matrix, stan::math::minus(cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 28;
      stan::model::assign(gq_c_matrix, stan::math::minus(mat),
        "assigning variable gq_c_matrix");
      current_statement__ = 29;
      stan::model::assign(gq_c_matrix, stan::math::multiply(cvec, crowvec),
        "assigning variable gq_c_matrix");
      current_statement__ = 30;
      stan::model::assign(gq_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(vec), crowvec),
        "assigning variable gq_c_matrix");
      current_statement__ = 31;
      stan::model::assign(gq_c_matrix,
        stan::math::multiply(cvec,
          stan::math::promote_scalar<std::complex<double>>(rowvec)),
        "assigning variable gq_c_matrix");
      Eigen::Matrix<std::complex<double>,-1,1> gq_c_vector =
        Eigen::Matrix<std::complex<double>,-1,1>::Constant(N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 2;
      stan::model::assign(gq_c_vector, stan::math::transpose(crowvec),
        "assigning variable gq_c_vector");
      current_statement__ = 32;
      stan::model::assign(gq_c_vector, stan::math::multiply(cmat, cvec),
        "assigning variable gq_c_vector");
      current_statement__ = 33;
      stan::model::assign(gq_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), cvec),
        "assigning variable gq_c_vector");
      current_statement__ = 34;
      stan::model::assign(gq_c_vector,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<double>>(vec)),
        "assigning variable gq_c_vector");
      current_statement__ = 35;
      stan::model::assign(gq_c_vector, stan::math::multiply(z, cvec),
        "assigning variable gq_c_vector");
      current_statement__ = 36;
      stan::model::assign(gq_c_vector, stan::math::multiply(cvec, z),
        "assigning variable gq_c_vector");
      current_statement__ = 37;
      stan::model::assign(gq_c_vector,
        stan::math::multiply(stan::math::to_complex(r, 0), cvec),
        "assigning variable gq_c_vector");
      current_statement__ = 38;
      stan::model::assign(gq_c_vector,
        stan::math::multiply(cvec, stan::math::to_complex(r, 0)),
        "assigning variable gq_c_vector");
      current_statement__ = 39;
      stan::model::assign(gq_c_vector,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<double>>(vec)),
        "assigning variable gq_c_vector");
      current_statement__ = 40;
      stan::model::assign(gq_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(vec), z),
        "assigning variable gq_c_vector");
      current_statement__ = 41;
      stan::model::assign(gq_c_vector, stan::math::elt_multiply(cvec, cvec),
        "assigning variable gq_c_vector");
      current_statement__ = 42;
      stan::model::assign(gq_c_vector,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<double>>(vec), cvec),
        "assigning variable gq_c_vector");
      current_statement__ = 43;
      stan::model::assign(gq_c_vector,
        stan::math::elt_multiply(cvec,
          stan::math::promote_scalar<std::complex<double>>(vec)),
        "assigning variable gq_c_vector");
      current_statement__ = 44;
      stan::model::assign(gq_c_vector, stan::math::elt_divide(cvec, cvec),
        "assigning variable gq_c_vector");
      current_statement__ = 45;
      stan::model::assign(gq_c_vector,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<double>>(vec), cvec),
        "assigning variable gq_c_vector");
      current_statement__ = 46;
      stan::model::assign(gq_c_vector,
        stan::math::elt_divide(cvec,
          stan::math::promote_scalar<std::complex<double>>(vec)),
        "assigning variable gq_c_vector");
      current_statement__ = 47;
      stan::model::assign(gq_c_vector, stan::math::add(cvec, cvec),
        "assigning variable gq_c_vector");
      current_statement__ = 48;
      stan::model::assign(gq_c_vector,
        stan::math::add(
          stan::math::promote_scalar<std::complex<double>>(vec), cvec),
        "assigning variable gq_c_vector");
      current_statement__ = 49;
      stan::model::assign(gq_c_vector,
        stan::math::add(cvec,
          stan::math::promote_scalar<std::complex<double>>(vec)),
        "assigning variable gq_c_vector");
      current_statement__ = 50;
      stan::model::assign(gq_c_vector, stan::math::subtract(cvec, cvec),
        "assigning variable gq_c_vector");
      current_statement__ = 51;
      stan::model::assign(gq_c_vector,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<double>>(vec), cvec),
        "assigning variable gq_c_vector");
      current_statement__ = 52;
      stan::model::assign(gq_c_vector,
        stan::math::subtract(cvec,
          stan::math::promote_scalar<std::complex<double>>(vec)),
        "assigning variable gq_c_vector");
      current_statement__ = 53;
      stan::model::assign(gq_c_vector, stan::math::minus(cvec),
        "assigning variable gq_c_vector");
      current_statement__ = 54;
      stan::model::assign(gq_c_vector, stan::math::minus(vec),
        "assigning variable gq_c_vector");
      Eigen::Matrix<std::complex<double>,1,-1> gq_c_rowvector =
        Eigen::Matrix<std::complex<double>,1,-1>::Constant(N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 3;
      stan::model::assign(gq_c_rowvector, stan::math::transpose(cvec),
        "assigning variable gq_c_rowvector");
      current_statement__ = 55;
      stan::model::assign(gq_c_rowvector,
        stan::math::multiply(crowvec, cmat),
        "assigning variable gq_c_rowvector");
      current_statement__ = 56;
      stan::model::assign(gq_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cmat),
        "assigning variable gq_c_rowvector");
      current_statement__ = 57;
      stan::model::assign(gq_c_rowvector,
        stan::math::multiply(crowvec,
          stan::math::promote_scalar<std::complex<double>>(mat)),
        "assigning variable gq_c_rowvector");
      current_statement__ = 58;
      stan::model::assign(gq_c_rowvector, stan::math::multiply(z, crowvec),
        "assigning variable gq_c_rowvector");
      current_statement__ = 59;
      stan::model::assign(gq_c_rowvector, stan::math::multiply(crowvec, z),
        "assigning variable gq_c_rowvector");
      current_statement__ = 60;
      stan::model::assign(gq_c_rowvector,
        stan::math::multiply(stan::math::to_complex(r, 0), crowvec),
        "assigning variable gq_c_rowvector");
      current_statement__ = 61;
      stan::model::assign(gq_c_rowvector,
        stan::math::multiply(crowvec, stan::math::to_complex(r, 0)),
        "assigning variable gq_c_rowvector");
      current_statement__ = 62;
      stan::model::assign(gq_c_rowvector,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<double>>(rowvec)),
        "assigning variable gq_c_rowvector");
      current_statement__ = 63;
      stan::model::assign(gq_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(rowvec), z),
        "assigning variable gq_c_rowvector");
      current_statement__ = 64;
      stan::model::assign(gq_c_rowvector,
        stan::math::elt_multiply(crowvec, crowvec),
        "assigning variable gq_c_rowvector");
      current_statement__ = 65;
      stan::model::assign(gq_c_rowvector,
        stan::math::elt_multiply(crowvec,
          stan::math::promote_scalar<std::complex<double>>(rowvec)),
        "assigning variable gq_c_rowvector");
      current_statement__ = 66;
      stan::model::assign(gq_c_rowvector,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<double>>(rowvec), crowvec),
        "assigning variable gq_c_rowvector");
      current_statement__ = 67;
      stan::model::assign(gq_c_rowvector,
        stan::math::elt_divide(crowvec, crowvec),
        "assigning variable gq_c_rowvector");
      current_statement__ = 68;
      stan::model::assign(gq_c_rowvector,
        stan::math::elt_divide(crowvec,
          stan::math::promote_scalar<std::complex<double>>(rowvec)),
        "assigning variable gq_c_rowvector");
      current_statement__ = 69;
      stan::model::assign(gq_c_rowvector,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<double>>(rowvec), crowvec),
        "assigning variable gq_c_rowvector");
      current_statement__ = 70;
      stan::model::assign(gq_c_rowvector, stan::math::add(crowvec, crowvec),
        "assigning variable gq_c_rowvector");
      current_statement__ = 71;
      stan::model::assign(gq_c_rowvector,
        stan::math::add(crowvec,
          stan::math::promote_scalar<std::complex<double>>(rowvec)),
        "assigning variable gq_c_rowvector");
      current_statement__ = 72;
      stan::model::assign(gq_c_rowvector,
        stan::math::add(
          stan::math::promote_scalar<std::complex<double>>(rowvec), crowvec),
        "assigning variable gq_c_rowvector");
      current_statement__ = 73;
      stan::model::assign(gq_c_rowvector,
        stan::math::subtract(crowvec, crowvec),
        "assigning variable gq_c_rowvector");
      current_statement__ = 74;
      stan::model::assign(gq_c_rowvector,
        stan::math::subtract(crowvec,
          stan::math::promote_scalar<std::complex<double>>(rowvec)),
        "assigning variable gq_c_rowvector");
      current_statement__ = 75;
      stan::model::assign(gq_c_rowvector,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<double>>(rowvec), crowvec),
        "assigning variable gq_c_rowvector");
      current_statement__ = 76;
      stan::model::assign(gq_c_rowvector, stan::math::minus(crowvec),
        "assigning variable gq_c_rowvector");
      current_statement__ = 77;
      stan::model::assign(gq_c_rowvector, stan::math::minus(rowvec),
        "assigning variable gq_c_rowvector");
      std::complex<double> gq_c =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 78;
      gq_c = stan::math::multiply(crowvec, cvec);
      current_statement__ = 79;
      gq_c = stan::math::multiply(crowvec,
               stan::math::promote_scalar<std::complex<double>>(vec));
      current_statement__ = 80;
      gq_c = stan::math::multiply(
               stan::math::promote_scalar<std::complex<double>>(rowvec), cvec);
      current_statement__ = 81;
      gq_c = stan::math::sum(stan::math::to_array_1d(cvec));
      current_statement__ = 82;
      gq_c = stan::math::sum(cvec);
      current_statement__ = 83;
      gq_c = stan::math::sum(crowvec);
      current_statement__ = 84;
      gq_c = stan::math::sum(cmat);
      current_statement__ = 85;
      stan::model::assign(gq_c_matrix, stan::math::subtract(z, cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 86;
      stan::model::assign(gq_c_matrix,
        stan::math::subtract(stan::math::to_complex(r, 0), cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 87;
      stan::model::assign(gq_c_matrix,
        stan::math::subtract(cmat, stan::math::to_complex(r, 0)),
        "assigning variable gq_c_matrix");
      current_statement__ = 88;
      stan::model::assign(gq_c_matrix, stan::math::subtract(cmat, z),
        "assigning variable gq_c_matrix");
      current_statement__ = 89;
      stan::model::assign(gq_c_matrix, stan::math::add(z, cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 90;
      stan::model::assign(gq_c_matrix,
        stan::math::add(stan::math::to_complex(r, 0), cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 91;
      stan::model::assign(gq_c_matrix,
        stan::math::add(cmat, stan::math::to_complex(r, 0)),
        "assigning variable gq_c_matrix");
      current_statement__ = 92;
      stan::model::assign(gq_c_matrix, stan::math::add(cmat, z),
        "assigning variable gq_c_matrix");
      current_statement__ = 93;
      stan::model::assign(gq_c_matrix, stan::math::elt_divide(z, cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 94;
      stan::model::assign(gq_c_matrix,
        stan::math::elt_divide(stan::math::to_complex(r, 0), cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 95;
      stan::model::assign(gq_c_matrix,
        stan::math::elt_divide(cmat, stan::math::to_complex(r, 0)),
        "assigning variable gq_c_matrix");
      current_statement__ = 96;
      stan::model::assign(gq_c_matrix, stan::math::elt_divide(cmat, z),
        "assigning variable gq_c_matrix");
      current_statement__ = 97;
      stan::model::assign(gq_c_matrix, stan::math::elt_multiply(z, cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 98;
      stan::model::assign(gq_c_matrix,
        stan::math::elt_multiply(stan::math::to_complex(r, 0), cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 99;
      stan::model::assign(gq_c_matrix,
        stan::math::elt_multiply(cmat, stan::math::to_complex(r, 0)),
        "assigning variable gq_c_matrix");
      current_statement__ = 100;
      stan::model::assign(gq_c_matrix, stan::math::elt_multiply(cmat, z),
        "assigning variable gq_c_matrix");
      current_statement__ = 101;
      stan::model::assign(gq_c_matrix, stan::math::divide(z, cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 102;
      stan::model::assign(gq_c_matrix,
        stan::math::divide(stan::math::to_complex(r, 0), cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 103;
      stan::model::assign(gq_c_matrix,
        stan::math::divide(cmat, stan::math::to_complex(r, 0)),
        "assigning variable gq_c_matrix");
      current_statement__ = 104;
      stan::model::assign(gq_c_matrix, stan::math::divide(cmat, z),
        "assigning variable gq_c_matrix");
      current_statement__ = 105;
      stan::model::assign(gq_c_matrix, stan::math::multiply(z, cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 106;
      stan::model::assign(gq_c_matrix,
        stan::math::multiply(stan::math::to_complex(r, 0), cmat),
        "assigning variable gq_c_matrix");
      current_statement__ = 107;
      stan::model::assign(gq_c_matrix,
        stan::math::multiply(cmat, stan::math::to_complex(r, 0)),
        "assigning variable gq_c_matrix");
      current_statement__ = 108;
      stan::model::assign(gq_c_matrix, stan::math::multiply(cmat, z),
        "assigning variable gq_c_matrix");
      std::vector<std::vector<std::complex<double>>> carray =
        std::vector<std::vector<std::complex<double>>>(N,
          std::vector<std::complex<double>>(N,
            std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
              std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 109;
      stan::model::assign(carray, stan::math::to_array_2d(cmat),
        "assigning variable carray");
      out__.write(gq_c_matrix);
      out__.write(gq_c_vector);
      out__.write(gq_c_rowvector);
      out__.write(gq_c);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(carray[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"gq_c_matrix", "gq_c_vector", "gq_c_rowvector", "gq_c", "carray"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N), static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N), static_cast<size_t>(2)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "gq_c_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "gq_c_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "gq_c_vector" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "gq_c_vector" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "gq_c_rowvector" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "gq_c_rowvector" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      param_names__.emplace_back(std::string() + "gq_c" + '.' + "real");
      param_names__.emplace_back(std::string() + "gq_c" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "carray" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "carray" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "gq_c_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "gq_c_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "gq_c_vector" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "gq_c_vector" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "gq_c_rowvector" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "gq_c_rowvector" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      param_names__.emplace_back(std::string() + "gq_c" + '.' + "real");
      param_names__.emplace_back(std::string() + "gq_c" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "carray" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "carray" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"gq_c_matrix\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_c_vector\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_c_rowvector\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_c\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"carray\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"gq_c_matrix\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_c_vector\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_c_rowvector\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"gq_c\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"carray\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((((((N *
      (N * 2)) + (N * 2)) + (N * 2)) + 2) + (N * (N * 2))));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((((((N *
      (N * 2)) + (N * 2)) + (N * 2)) + 2) + (N * (N * 2))));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = basic_operations_model_namespace::basic_operations_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return basic_operations_model_namespace::profiles__;
}
#endif
  $ ../../../../../../install/default/bin/stanc --print-cpp basic_ops_mix.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace basic_ops_mix_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 165> locations_array__ =
  {" (found before start of program)",
  " (in 'basic_ops_mix.stan', line 15, column 2 to column 28)",
  " (in 'basic_ops_mix.stan', line 16, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 17, column 2 to column 33)",
  " (in 'basic_ops_mix.stan', line 18, column 2 to column 13)",
  " (in 'basic_ops_mix.stan', line 20, column 2 to column 19)",
  " (in 'basic_ops_mix.stan', line 21, column 2 to column 17)",
  " (in 'basic_ops_mix.stan', line 22, column 2 to column 24)",
  " (in 'basic_ops_mix.stan', line 23, column 2 to column 9)",
  " (in 'basic_ops_mix.stan', line 28, column 2 to column 34)",
  " (in 'basic_ops_mix.stan', line 62, column 2 to column 44)",
  " (in 'basic_ops_mix.stan', line 93, column 2 to column 48)",
  " (in 'basic_ops_mix.stan', line 123, column 2 to column 15)",
  " (in 'basic_ops_mix.stan', line 193, column 2 to column 28)",
  " (in 'basic_ops_mix.stan', line 31, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 32, column 2 to column 28)",
  " (in 'basic_ops_mix.stan', line 33, column 2 to column 28)",
  " (in 'basic_ops_mix.stan', line 34, column 2 to column 30)",
  " (in 'basic_ops_mix.stan', line 35, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 36, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 37, column 2 to column 30)",
  " (in 'basic_ops_mix.stan', line 38, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 39, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 42, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 43, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 44, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 45, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 46, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 47, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 50, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 51, column 2 to column 28)",
  " (in 'basic_ops_mix.stan', line 52, column 2 to column 28)",
  " (in 'basic_ops_mix.stan', line 53, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 54, column 2 to column 28)",
  " (in 'basic_ops_mix.stan', line 55, column 2 to column 28)",
  " (in 'basic_ops_mix.stan', line 58, column 2 to column 32)",
  " (in 'basic_ops_mix.stan', line 59, column 2 to column 31)",
  " (in 'basic_ops_mix.stan', line 60, column 2 to column 31)",
  " (in 'basic_ops_mix.stan', line 64, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 65, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 66, column 2 to column 28)",
  " (in 'basic_ops_mix.stan', line 67, column 2 to column 28)",
  " (in 'basic_ops_mix.stan', line 70, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 71, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 72, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 73, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 74, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 75, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 78, column 2 to column 30)",
  " (in 'basic_ops_mix.stan', line 79, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 80, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 81, column 2 to column 30)",
  " (in 'basic_ops_mix.stan', line 82, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 83, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 86, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 87, column 2 to column 28)",
  " (in 'basic_ops_mix.stan', line 88, column 2 to column 28)",
  " (in 'basic_ops_mix.stan', line 89, column 2 to column 29)",
  " (in 'basic_ops_mix.stan', line 90, column 2 to column 28)",
  " (in 'basic_ops_mix.stan', line 91, column 2 to column 28)",
  " (in 'basic_ops_mix.stan', line 95, column 2 to column 35)",
  " (in 'basic_ops_mix.stan', line 96, column 2 to column 34)",
  " (in 'basic_ops_mix.stan', line 97, column 2 to column 34)",
  " (in 'basic_ops_mix.stan', line 100, column 2 to column 32)",
  " (in 'basic_ops_mix.stan', line 101, column 2 to column 32)",
  " (in 'basic_ops_mix.stan', line 102, column 2 to column 32)",
  " (in 'basic_ops_mix.stan', line 103, column 2 to column 31)",
  " (in 'basic_ops_mix.stan', line 104, column 2 to column 31)",
  " (in 'basic_ops_mix.stan', line 105, column 2 to column 31)",
  " (in 'basic_ops_mix.stan', line 108, column 2 to column 39)",
  " (in 'basic_ops_mix.stan', line 109, column 2 to column 38)",
  " (in 'basic_ops_mix.stan', line 110, column 2 to column 38)",
  " (in 'basic_ops_mix.stan', line 111, column 2 to column 39)",
  " (in 'basic_ops_mix.stan', line 112, column 2 to column 38)",
  " (in 'basic_ops_mix.stan', line 113, column 2 to column 38)",
  " (in 'basic_ops_mix.stan', line 116, column 2 to column 38)",
  " (in 'basic_ops_mix.stan', line 117, column 2 to column 37)",
  " (in 'basic_ops_mix.stan', line 118, column 2 to column 37)",
  " (in 'basic_ops_mix.stan', line 119, column 2 to column 38)",
  " (in 'basic_ops_mix.stan', line 120, column 2 to column 37)",
  " (in 'basic_ops_mix.stan', line 121, column 2 to column 37)",
  " (in 'basic_ops_mix.stan', line 125, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 126, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 127, column 2 to column 24)",
  " (in 'basic_ops_mix.stan', line 128, column 2 to column 24)",
  " (in 'basic_ops_mix.stan', line 131, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 132, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 133, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 134, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 136, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 137, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 138, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 139, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 141, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 142, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 143, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 144, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 146, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 147, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 148, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 149, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 151, column 2 to column 27)",
  " (in 'basic_ops_mix.stan', line 152, column 2 to column 27)",
  " (in 'basic_ops_mix.stan', line 153, column 2 to column 27)",
  " (in 'basic_ops_mix.stan', line 154, column 2 to column 27)",
  " (in 'basic_ops_mix.stan', line 156, column 2 to column 27)",
  " (in 'basic_ops_mix.stan', line 157, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 158, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 159, column 2 to column 27)",
  " (in 'basic_ops_mix.stan', line 162, column 2 to column 27)",
  " (in 'basic_ops_mix.stan', line 163, column 2 to column 27)",
  " (in 'basic_ops_mix.stan', line 164, column 2 to column 27)",
  " (in 'basic_ops_mix.stan', line 165, column 2 to column 27)",
  " (in 'basic_ops_mix.stan', line 167, column 2 to column 27)",
  " (in 'basic_ops_mix.stan', line 168, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 169, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 170, column 2 to column 27)",
  " (in 'basic_ops_mix.stan', line 172, column 4 to column 28)",
  " (in 'basic_ops_mix.stan', line 173, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 174, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 175, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 177, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 178, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 179, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 180, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 182, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 183, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 184, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 185, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 187, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 188, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 189, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 190, column 2 to column 26)",
  " (in 'basic_ops_mix.stan', line 194, column 2 to column 30)",
  " (in 'basic_ops_mix.stan', line 2, column 2 to column 8)",
  " (in 'basic_ops_mix.stan', line 3, column 17 to column 18)",
  " (in 'basic_ops_mix.stan', line 3, column 19 to column 20)",
  " (in 'basic_ops_mix.stan', line 3, column 2 to column 27)",
  " (in 'basic_ops_mix.stan', line 4, column 17 to column 18)",
  " (in 'basic_ops_mix.stan', line 4, column 2 to column 25)",
  " (in 'basic_ops_mix.stan', line 5, column 21 to column 22)",
  " (in 'basic_ops_mix.stan', line 5, column 2 to column 32)",
  " (in 'basic_ops_mix.stan', line 6, column 2 to column 12)",
  " (in 'basic_ops_mix.stan', line 8, column 9 to column 10)",
  " (in 'basic_ops_mix.stan', line 8, column 11 to column 12)",
  " (in 'basic_ops_mix.stan', line 8, column 2 to column 18)",
  " (in 'basic_ops_mix.stan', line 9, column 9 to column 10)",
  " (in 'basic_ops_mix.stan', line 9, column 2 to column 16)",
  " (in 'basic_ops_mix.stan', line 10, column 13 to column 14)",
  " (in 'basic_ops_mix.stan', line 10, column 2 to column 23)",
  " (in 'basic_ops_mix.stan', line 11, column 2 to column 9)",
  " (in 'basic_ops_mix.stan', line 15, column 17 to column 18)",
  " (in 'basic_ops_mix.stan', line 15, column 19 to column 20)",
  " (in 'basic_ops_mix.stan', line 16, column 17 to column 18)",
  " (in 'basic_ops_mix.stan', line 17, column 21 to column 22)",
  " (in 'basic_ops_mix.stan', line 20, column 9 to column 10)",
  " (in 'basic_ops_mix.stan', line 20, column 11 to column 12)",
  " (in 'basic_ops_mix.stan', line 21, column 9 to column 10)",
  " (in 'basic_ops_mix.stan', line 22, column 13 to column 14)",
  " (in 'basic_ops_mix.stan', line 28, column 17 to column 18)",
  " (in 'basic_ops_mix.stan', line 28, column 19 to column 20)",
  " (in 'basic_ops_mix.stan', line 62, column 17 to column 18)",
  " (in 'basic_ops_mix.stan', line 93, column 21 to column 22)",
  " (in 'basic_ops_mix.stan', line 193, column 8 to column 9)",
  " (in 'basic_ops_mix.stan', line 193, column 10 to column 11)"};
class basic_ops_mix_model final : public model_base_crtp<basic_ops_mix_model> {
 private:
  int N;
  Eigen::Matrix<std::complex<double>,-1,-1> cmat_data__;
  Eigen::Matrix<std::complex<double>,-1,1> cvec_data__;
  Eigen::Matrix<std::complex<double>,1,-1> crowvec_data__;
  std::complex<double> z;
  Eigen::Matrix<double,-1,-1> mat_data__;
  Eigen::Matrix<double,-1,1> vec_data__;
  Eigen::Matrix<double,1,-1> rowvec_data__;
  double r;
  Eigen::Map<Eigen::Matrix<std::complex<double>,-1,-1>> cmat{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<std::complex<double>,-1,1>> cvec{nullptr, 0};
  Eigen::Map<Eigen::Matrix<std::complex<double>,1,-1>> crowvec{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> mat{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> vec{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,1,-1>> rowvec{nullptr, 0};
 public:
  ~basic_ops_mix_model() {}
  basic_ops_mix_model(stan::io::var_context& context__, unsigned int
                      random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "basic_ops_mix_model_namespace::basic_ops_mix_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 134;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 134;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 135;
      stan::math::validate_non_negative_index("cmat", "N", N);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("cmat", "N", N);
      current_statement__ = 137;
      context__.validate_dims("data initialization", "cmat", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
          static_cast<size_t>(2)});
      cmat_data__ = Eigen::Matrix<std::complex<double>,-1,-1>::Constant(N, N,
                      std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                             ),
                        std::numeric_limits<double>::quiet_NaN()));
      new (&cmat)
        Eigen::Map<Eigen::Matrix<std::complex<double>,-1,-1>>(cmat_data__.data(),
        N, N);
      {
        std::vector<std::complex<local_scalar_t__>> cmat_flat__;
        current_statement__ = 137;
        cmat_flat__ = context__.vals_c("cmat");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(cmat, cmat_flat__[(pos__ - 1)],
              "assigning variable cmat", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 138;
      stan::math::validate_non_negative_index("cvec", "N", N);
      current_statement__ = 139;
      context__.validate_dims("data initialization", "cvec", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2)});
      cvec_data__ = Eigen::Matrix<std::complex<double>,-1,1>::Constant(N,
                      std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                             ),
                        std::numeric_limits<double>::quiet_NaN()));
      new (&cvec)
        Eigen::Map<Eigen::Matrix<std::complex<double>,-1,1>>(cvec_data__.data(),
        N);
      {
        std::vector<std::complex<local_scalar_t__>> cvec_flat__;
        current_statement__ = 139;
        cvec_flat__ = context__.vals_c("cvec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(cvec, cvec_flat__[(pos__ - 1)],
            "assigning variable cvec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 140;
      stan::math::validate_non_negative_index("crowvec", "N", N);
      current_statement__ = 141;
      context__.validate_dims("data initialization", "crowvec", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2)});
      crowvec_data__ = Eigen::Matrix<std::complex<double>,1,-1>::Constant(N,
                         std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                                ),
                           std::numeric_limits<double>::quiet_NaN()));
      new (&crowvec)
        Eigen::Map<Eigen::Matrix<std::complex<double>,1,-1>>(crowvec_data__.data(),
        N);
      {
        std::vector<std::complex<local_scalar_t__>> crowvec_flat__;
        current_statement__ = 141;
        crowvec_flat__ = context__.vals_c("crowvec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(crowvec, crowvec_flat__[(pos__ - 1)],
            "assigning variable crowvec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 142;
      context__.validate_dims("data initialization", "z", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      z = std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 142;
      z = context__.vals_c("z")[(1 - 1)];
      current_statement__ = 143;
      stan::math::validate_non_negative_index("mat", "N", N);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("mat", "N", N);
      current_statement__ = 145;
      context__.validate_dims("data initialization", "mat", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      mat_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, N,
                     std::numeric_limits<double>::quiet_NaN());
      new (&mat) Eigen::Map<Eigen::Matrix<double,-1,-1>>(mat_data__.data(),
        N, N);
      {
        std::vector<local_scalar_t__> mat_flat__;
        current_statement__ = 145;
        mat_flat__ = context__.vals_r("mat");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(mat, mat_flat__[(pos__ - 1)],
              "assigning variable mat", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 146;
      stan::math::validate_non_negative_index("vec", "N", N);
      current_statement__ = 147;
      context__.validate_dims("data initialization", "vec", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      vec_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                     std::numeric_limits<double>::quiet_NaN());
      new (&vec) Eigen::Map<Eigen::Matrix<double,-1,1>>(vec_data__.data(), N);
      {
        std::vector<local_scalar_t__> vec_flat__;
        current_statement__ = 147;
        vec_flat__ = context__.vals_r("vec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(vec, vec_flat__[(pos__ - 1)],
            "assigning variable vec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 148;
      stan::math::validate_non_negative_index("rowvec", "N", N);
      current_statement__ = 149;
      context__.validate_dims("data initialization", "rowvec", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      rowvec_data__ = Eigen::Matrix<double,1,-1>::Constant(N,
                        std::numeric_limits<double>::quiet_NaN());
      new (&rowvec)
        Eigen::Map<Eigen::Matrix<double,1,-1>>(rowvec_data__.data(), N);
      {
        std::vector<local_scalar_t__> rowvec_flat__;
        current_statement__ = 149;
        rowvec_flat__ = context__.vals_r("rowvec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(rowvec, rowvec_flat__[(pos__ - 1)],
            "assigning variable rowvec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 150;
      context__.validate_dims("data initialization", "r", "double",
        std::vector<size_t>{});
      r = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 150;
      r = context__.vals_r("r")[(1 - 1)];
      current_statement__ = 151;
      stan::math::validate_non_negative_index("cvmat", "N", N);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("cvmat", "N", N);
      current_statement__ = 153;
      stan::math::validate_non_negative_index("cvvec", "N", N);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("cvrowvec", "N", N);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("vmat", "N", N);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("vmat", "N", N);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("vvec", "N", N);
      current_statement__ = 158;
      stan::math::validate_non_negative_index("vrowvec", "N", N);
      current_statement__ = 159;
      stan::math::validate_non_negative_index("tp_c_matrix", "N", N);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("tp_c_matrix", "N", N);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("tp_c_vector", "N", N);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("tp_c_rowvector", "N", N);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("carray", "N", N);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("carray", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (N * (N * 2)) + (N * 2) + (N * 2) + 2 + (N * N) + N + N
      + 1;
  }
  inline std::string model_name() const final {
    return "basic_ops_mix_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "basic_ops_mix_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> cvmat =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 1;
      cvmat = in__.template read<
                Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>>(N, N);
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> cvvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 2;
      cvvec = in__.template read<
                Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>>(N);
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> cvrowvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 3;
      cvrowvec = in__.template read<
                   Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>>(N);
      std::complex<local_scalar_t__> zv =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 4;
      zv = in__.template read<std::complex<local_scalar_t__>>();
      Eigen::Matrix<local_scalar_t__,-1,-1> vmat =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 5;
      vmat = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, N);
      Eigen::Matrix<local_scalar_t__,-1,1> vvec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 6;
      vvec = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<local_scalar_t__,1,-1> vrowvec =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 7;
      vrowvec = in__.template read<Eigen::Matrix<local_scalar_t__,1,-1>>(N);
      local_scalar_t__ v = DUMMY_VAR__;
      current_statement__ = 8;
      v = in__.template read<local_scalar_t__>();
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> tp_c_matrix =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 14;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 15;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 16;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 17;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 18;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 19;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 20;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 21;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 22;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 23;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 24;
      stan::model::assign(tp_c_matrix, stan::math::multiply(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 25;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 26;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 27;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 28;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 29;
      stan::model::assign(tp_c_matrix, stan::math::add(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 30;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 31;
      stan::model::assign(tp_c_matrix,
        stan::math::add(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 32;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 33;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 34;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 35;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cvec, cvrowvec),
        "assigning variable tp_c_matrix");
      current_statement__ = 36;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(vec), cvrowvec),
        "assigning variable tp_c_matrix");
      current_statement__ = 37;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_matrix");
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> tp_c_vector =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 10;
      stan::model::assign(tp_c_vector, stan::math::transpose(cvrowvec),
        "assigning variable tp_c_vector");
      current_statement__ = 38;
      stan::model::assign(tp_c_vector, stan::math::multiply(cmat, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 39;
      stan::model::assign(tp_c_vector, stan::math::multiply(cvmat, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 40;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 41;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 42;
      stan::model::assign(tp_c_vector, stan::math::multiply(z, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 43;
      stan::model::assign(tp_c_vector, stan::math::multiply(cvec, zv),
        "assigning variable tp_c_vector");
      current_statement__ = 44;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(stan::math::to_complex(r, 0), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 45;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_vector");
      current_statement__ = 46;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 47;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(vec), zv),
        "assigning variable tp_c_vector");
      current_statement__ = 48;
      stan::model::assign(tp_c_vector, stan::math::elt_multiply(cvec, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 49;
      stan::model::assign(tp_c_vector,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<double>>(vec), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 50;
      stan::model::assign(tp_c_vector,
        stan::math::elt_multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 51;
      stan::model::assign(tp_c_vector, stan::math::elt_divide(cvec, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 52;
      stan::model::assign(tp_c_vector,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<double>>(vec), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 53;
      stan::model::assign(tp_c_vector,
        stan::math::elt_divide(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 54;
      stan::model::assign(tp_c_vector, stan::math::add(cvec, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 55;
      stan::model::assign(tp_c_vector,
        stan::math::add(
          stan::math::promote_scalar<std::complex<double>>(vec), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 56;
      stan::model::assign(tp_c_vector,
        stan::math::add(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 57;
      stan::model::assign(tp_c_vector, stan::math::subtract(cvec, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 58;
      stan::model::assign(tp_c_vector,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<double>>(vec), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 59;
      stan::model::assign(tp_c_vector,
        stan::math::subtract(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> tp_c_rowvector =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 11;
      stan::model::assign(tp_c_rowvector, stan::math::transpose(cvvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 60;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec, cvmat),
        "assigning variable tp_c_rowvector");
      current_statement__ = 61;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvmat),
        "assigning variable tp_c_rowvector");
      current_statement__ = 62;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 63;
      stan::model::assign(tp_c_rowvector, stan::math::multiply(z, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 64;
      stan::model::assign(tp_c_rowvector, stan::math::multiply(crowvec, zv),
        "assigning variable tp_c_rowvector");
      current_statement__ = 65;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(stan::math::to_complex(r, 0), cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 66;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 67;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 68;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(rowvec), zv),
        "assigning variable tp_c_rowvector");
      current_statement__ = 69;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(crowvec, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 70;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 71;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 72;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(crowvec, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 73;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 74;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 75;
      stan::model::assign(tp_c_rowvector, stan::math::add(crowvec, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 76;
      stan::model::assign(tp_c_rowvector,
        stan::math::add(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 77;
      stan::model::assign(tp_c_rowvector,
        stan::math::add(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 78;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(crowvec, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 79;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 80;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvrowvec),
        "assigning variable tp_c_rowvector");
      std::complex<local_scalar_t__> tp_c =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 81;
      tp_c = stan::math::multiply(crowvec, cvvec);
      current_statement__ = 82;
      tp_c = stan::math::multiply(cvrowvec, cvec);
      current_statement__ = 83;
      tp_c = stan::math::multiply(crowvec,
               stan::math::promote_scalar<std::complex<local_scalar_t__>>(
                 vvec));
      current_statement__ = 84;
      tp_c = stan::math::multiply(
               stan::math::promote_scalar<std::complex<double>>(rowvec),
               cvvec);
      current_statement__ = 85;
      stan::model::assign(tp_c_matrix, stan::math::subtract(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 86;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 87;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 88;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 89;
      stan::model::assign(tp_c_matrix, stan::math::add(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 90;
      stan::model::assign(tp_c_matrix,
        stan::math::add(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 91;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 92;
      stan::model::assign(tp_c_matrix, stan::math::add(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 93;
      stan::model::assign(tp_c_matrix, stan::math::subtract(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 94;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 95;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 96;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 97;
      stan::model::assign(tp_c_matrix, stan::math::add(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 98;
      stan::model::assign(tp_c_matrix,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 99;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 100;
      stan::model::assign(tp_c_matrix, stan::math::add(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 101;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 102;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 103;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 104;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 105;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 106;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 107;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 108;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 109;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 110;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 111;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 112;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 113;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 114;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 115;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 116;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 117;
      stan::model::assign(tp_c_matrix, stan::math::divide(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 118;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 119;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 120;
      stan::model::assign(tp_c_matrix, stan::math::divide(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 121;
      stan::model::assign(tp_c_matrix, stan::math::divide(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 122;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 123;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 124;
      stan::model::assign(tp_c_matrix, stan::math::divide(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 125;
      stan::model::assign(tp_c_matrix, stan::math::multiply(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 126;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 127;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 128;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 129;
      stan::model::assign(tp_c_matrix, stan::math::multiply(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 130;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 131;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 132;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, zv),
        "assigning variable tp_c_matrix");
      std::vector<std::vector<std::complex<local_scalar_t__>>> carray =
        std::vector<std::vector<std::complex<local_scalar_t__>>>(N,
          std::vector<std::complex<local_scalar_t__>>(N,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      current_statement__ = 133;
      stan::model::assign(carray, stan::math::to_array_2d(cvmat),
        "assigning variable carray");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "basic_ops_mix_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> cvmat =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 1;
      cvmat = in__.template read<
                Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>>(N, N);
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> cvvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 2;
      cvvec = in__.template read<
                Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>>(N);
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> cvrowvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 3;
      cvrowvec = in__.template read<
                   Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>>(N);
      std::complex<local_scalar_t__> zv =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 4;
      zv = in__.template read<std::complex<local_scalar_t__>>();
      Eigen::Matrix<local_scalar_t__,-1,-1> vmat =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 5;
      vmat = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, N);
      Eigen::Matrix<local_scalar_t__,-1,1> vvec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 6;
      vvec = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<local_scalar_t__,1,-1> vrowvec =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 7;
      vrowvec = in__.template read<Eigen::Matrix<local_scalar_t__,1,-1>>(N);
      local_scalar_t__ v = DUMMY_VAR__;
      current_statement__ = 8;
      v = in__.template read<local_scalar_t__>();
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> tp_c_matrix =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 14;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 15;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 16;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 17;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 18;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 19;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 20;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 21;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 22;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 23;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 24;
      stan::model::assign(tp_c_matrix, stan::math::multiply(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 25;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 26;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 27;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 28;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 29;
      stan::model::assign(tp_c_matrix, stan::math::add(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 30;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 31;
      stan::model::assign(tp_c_matrix,
        stan::math::add(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 32;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 33;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 34;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 35;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cvec, cvrowvec),
        "assigning variable tp_c_matrix");
      current_statement__ = 36;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(vec), cvrowvec),
        "assigning variable tp_c_matrix");
      current_statement__ = 37;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_matrix");
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> tp_c_vector =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 10;
      stan::model::assign(tp_c_vector, stan::math::transpose(cvrowvec),
        "assigning variable tp_c_vector");
      current_statement__ = 38;
      stan::model::assign(tp_c_vector, stan::math::multiply(cmat, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 39;
      stan::model::assign(tp_c_vector, stan::math::multiply(cvmat, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 40;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 41;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 42;
      stan::model::assign(tp_c_vector, stan::math::multiply(z, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 43;
      stan::model::assign(tp_c_vector, stan::math::multiply(cvec, zv),
        "assigning variable tp_c_vector");
      current_statement__ = 44;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(stan::math::to_complex(r, 0), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 45;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_vector");
      current_statement__ = 46;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 47;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(vec), zv),
        "assigning variable tp_c_vector");
      current_statement__ = 48;
      stan::model::assign(tp_c_vector, stan::math::elt_multiply(cvec, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 49;
      stan::model::assign(tp_c_vector,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<double>>(vec), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 50;
      stan::model::assign(tp_c_vector,
        stan::math::elt_multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 51;
      stan::model::assign(tp_c_vector, stan::math::elt_divide(cvec, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 52;
      stan::model::assign(tp_c_vector,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<double>>(vec), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 53;
      stan::model::assign(tp_c_vector,
        stan::math::elt_divide(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 54;
      stan::model::assign(tp_c_vector, stan::math::add(cvec, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 55;
      stan::model::assign(tp_c_vector,
        stan::math::add(
          stan::math::promote_scalar<std::complex<double>>(vec), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 56;
      stan::model::assign(tp_c_vector,
        stan::math::add(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 57;
      stan::model::assign(tp_c_vector, stan::math::subtract(cvec, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 58;
      stan::model::assign(tp_c_vector,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<double>>(vec), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 59;
      stan::model::assign(tp_c_vector,
        stan::math::subtract(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> tp_c_rowvector =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 11;
      stan::model::assign(tp_c_rowvector, stan::math::transpose(cvvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 60;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec, cvmat),
        "assigning variable tp_c_rowvector");
      current_statement__ = 61;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvmat),
        "assigning variable tp_c_rowvector");
      current_statement__ = 62;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 63;
      stan::model::assign(tp_c_rowvector, stan::math::multiply(z, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 64;
      stan::model::assign(tp_c_rowvector, stan::math::multiply(crowvec, zv),
        "assigning variable tp_c_rowvector");
      current_statement__ = 65;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(stan::math::to_complex(r, 0), cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 66;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 67;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 68;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(rowvec), zv),
        "assigning variable tp_c_rowvector");
      current_statement__ = 69;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(crowvec, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 70;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 71;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 72;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(crowvec, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 73;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 74;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 75;
      stan::model::assign(tp_c_rowvector, stan::math::add(crowvec, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 76;
      stan::model::assign(tp_c_rowvector,
        stan::math::add(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 77;
      stan::model::assign(tp_c_rowvector,
        stan::math::add(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 78;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(crowvec, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 79;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 80;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvrowvec),
        "assigning variable tp_c_rowvector");
      std::complex<local_scalar_t__> tp_c =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 81;
      tp_c = stan::math::multiply(crowvec, cvvec);
      current_statement__ = 82;
      tp_c = stan::math::multiply(cvrowvec, cvec);
      current_statement__ = 83;
      tp_c = stan::math::multiply(crowvec,
               stan::math::promote_scalar<std::complex<local_scalar_t__>>(
                 vvec));
      current_statement__ = 84;
      tp_c = stan::math::multiply(
               stan::math::promote_scalar<std::complex<double>>(rowvec),
               cvvec);
      current_statement__ = 85;
      stan::model::assign(tp_c_matrix, stan::math::subtract(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 86;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 87;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 88;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 89;
      stan::model::assign(tp_c_matrix, stan::math::add(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 90;
      stan::model::assign(tp_c_matrix,
        stan::math::add(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 91;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 92;
      stan::model::assign(tp_c_matrix, stan::math::add(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 93;
      stan::model::assign(tp_c_matrix, stan::math::subtract(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 94;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 95;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 96;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 97;
      stan::model::assign(tp_c_matrix, stan::math::add(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 98;
      stan::model::assign(tp_c_matrix,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 99;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 100;
      stan::model::assign(tp_c_matrix, stan::math::add(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 101;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 102;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 103;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 104;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 105;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 106;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 107;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 108;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 109;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 110;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 111;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 112;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 113;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 114;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 115;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 116;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 117;
      stan::model::assign(tp_c_matrix, stan::math::divide(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 118;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 119;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 120;
      stan::model::assign(tp_c_matrix, stan::math::divide(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 121;
      stan::model::assign(tp_c_matrix, stan::math::divide(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 122;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 123;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 124;
      stan::model::assign(tp_c_matrix, stan::math::divide(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 125;
      stan::model::assign(tp_c_matrix, stan::math::multiply(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 126;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 127;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 128;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 129;
      stan::model::assign(tp_c_matrix, stan::math::multiply(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 130;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 131;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 132;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, zv),
        "assigning variable tp_c_matrix");
      std::vector<std::vector<std::complex<local_scalar_t__>>> carray =
        std::vector<std::vector<std::complex<local_scalar_t__>>>(N,
          std::vector<std::complex<local_scalar_t__>>(N,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      current_statement__ = 133;
      stan::model::assign(carray, stan::math::to_array_2d(cvmat),
        "assigning variable carray");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "basic_ops_mix_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<std::complex<double>,-1,-1> cvmat =
        Eigen::Matrix<std::complex<double>,-1,-1>::Constant(N, N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      cvmat = in__.template read<
                Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>>(N, N);
      Eigen::Matrix<std::complex<double>,-1,1> cvvec =
        Eigen::Matrix<std::complex<double>,-1,1>::Constant(N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 2;
      cvvec = in__.template read<
                Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>>(N);
      Eigen::Matrix<std::complex<double>,1,-1> cvrowvec =
        Eigen::Matrix<std::complex<double>,1,-1>::Constant(N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 3;
      cvrowvec = in__.template read<
                   Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>>(N);
      std::complex<double> zv =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      zv = in__.template read<std::complex<local_scalar_t__>>();
      Eigen::Matrix<double,-1,-1> vmat =
        Eigen::Matrix<double,-1,-1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      vmat = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, N);
      Eigen::Matrix<double,-1,1> vvec =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      vvec = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      Eigen::Matrix<double,1,-1> vrowvec =
        Eigen::Matrix<double,1,-1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      vrowvec = in__.template read<Eigen::Matrix<local_scalar_t__,1,-1>>(N);
      double v = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      v = in__.template read<local_scalar_t__>();
      Eigen::Matrix<std::complex<double>,-1,-1> tp_c_matrix =
        Eigen::Matrix<std::complex<double>,-1,-1>::Constant(N, N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<std::complex<double>,-1,1> tp_c_vector =
        Eigen::Matrix<std::complex<double>,-1,1>::Constant(N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<std::complex<double>,1,-1> tp_c_rowvector =
        Eigen::Matrix<std::complex<double>,1,-1>::Constant(N,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      std::complex<double> tp_c =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());
      std::vector<std::vector<std::complex<double>>> carray =
        std::vector<std::vector<std::complex<double>>>(N,
          std::vector<std::complex<double>>(N,
            std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
              std::numeric_limits<double>::quiet_NaN())));
      out__.write(cvmat);
      out__.write(cvvec);
      out__.write(cvrowvec);
      out__.write(zv);
      out__.write(vmat);
      out__.write(vvec);
      out__.write(vrowvec);
      out__.write(v);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 14;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 15;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 16;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 17;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 18;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 19;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 20;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 21;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 22;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 23;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 24;
      stan::model::assign(tp_c_matrix, stan::math::multiply(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 25;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 26;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 27;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 28;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 29;
      stan::model::assign(tp_c_matrix, stan::math::add(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 30;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 31;
      stan::model::assign(tp_c_matrix,
        stan::math::add(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 32;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cmat, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 33;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_matrix");
      current_statement__ = 34;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<double>>(mat), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 35;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cvec, cvrowvec),
        "assigning variable tp_c_matrix");
      current_statement__ = 36;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(vec), cvrowvec),
        "assigning variable tp_c_matrix");
      current_statement__ = 37;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_matrix");
      current_statement__ = 10;
      stan::model::assign(tp_c_vector, stan::math::transpose(cvrowvec),
        "assigning variable tp_c_vector");
      current_statement__ = 38;
      stan::model::assign(tp_c_vector, stan::math::multiply(cmat, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 39;
      stan::model::assign(tp_c_vector, stan::math::multiply(cvmat, cvec),
        "assigning variable tp_c_vector");
      current_statement__ = 40;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(mat), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 41;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 42;
      stan::model::assign(tp_c_vector, stan::math::multiply(z, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 43;
      stan::model::assign(tp_c_vector, stan::math::multiply(cvec, zv),
        "assigning variable tp_c_vector");
      current_statement__ = 44;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(stan::math::to_complex(r, 0), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 45;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_vector");
      current_statement__ = 46;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 47;
      stan::model::assign(tp_c_vector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(vec), zv),
        "assigning variable tp_c_vector");
      current_statement__ = 48;
      stan::model::assign(tp_c_vector, stan::math::elt_multiply(cvec, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 49;
      stan::model::assign(tp_c_vector,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<double>>(vec), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 50;
      stan::model::assign(tp_c_vector,
        stan::math::elt_multiply(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 51;
      stan::model::assign(tp_c_vector, stan::math::elt_divide(cvec, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 52;
      stan::model::assign(tp_c_vector,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<double>>(vec), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 53;
      stan::model::assign(tp_c_vector,
        stan::math::elt_divide(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 54;
      stan::model::assign(tp_c_vector, stan::math::add(cvec, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 55;
      stan::model::assign(tp_c_vector,
        stan::math::add(
          stan::math::promote_scalar<std::complex<double>>(vec), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 56;
      stan::model::assign(tp_c_vector,
        stan::math::add(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 57;
      stan::model::assign(tp_c_vector, stan::math::subtract(cvec, cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 58;
      stan::model::assign(tp_c_vector,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<double>>(vec), cvvec),
        "assigning variable tp_c_vector");
      current_statement__ = 59;
      stan::model::assign(tp_c_vector,
        stan::math::subtract(cvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vvec)),
        "assigning variable tp_c_vector");
      current_statement__ = 11;
      stan::model::assign(tp_c_rowvector, stan::math::transpose(cvvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 60;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec, cvmat),
        "assigning variable tp_c_rowvector");
      current_statement__ = 61;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvmat),
        "assigning variable tp_c_rowvector");
      current_statement__ = 62;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vmat)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 63;
      stan::model::assign(tp_c_rowvector, stan::math::multiply(z, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 64;
      stan::model::assign(tp_c_rowvector, stan::math::multiply(crowvec, zv),
        "assigning variable tp_c_rowvector");
      current_statement__ = 65;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(stan::math::to_complex(r, 0), cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 66;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 67;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(z,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 68;
      stan::model::assign(tp_c_rowvector,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<double>>(rowvec), zv),
        "assigning variable tp_c_rowvector");
      current_statement__ = 69;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(crowvec, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 70;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 71;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 72;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(crowvec, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 73;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 74;
      stan::model::assign(tp_c_rowvector,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 75;
      stan::model::assign(tp_c_rowvector, stan::math::add(crowvec, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 76;
      stan::model::assign(tp_c_rowvector,
        stan::math::add(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 77;
      stan::model::assign(tp_c_rowvector,
        stan::math::add(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 78;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(crowvec, cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 79;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(crowvec,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(vrowvec)),
        "assigning variable tp_c_rowvector");
      current_statement__ = 80;
      stan::model::assign(tp_c_rowvector,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<double>>(rowvec), cvrowvec),
        "assigning variable tp_c_rowvector");
      current_statement__ = 81;
      tp_c = stan::math::multiply(crowvec, cvvec);
      current_statement__ = 82;
      tp_c = stan::math::multiply(cvrowvec, cvec);
      current_statement__ = 83;
      tp_c = stan::math::multiply(crowvec,
               stan::math::promote_scalar<std::complex<local_scalar_t__>>(
                 vvec));
      current_statement__ = 84;
      tp_c = stan::math::multiply(
               stan::math::promote_scalar<std::complex<double>>(rowvec),
               cvvec);
      current_statement__ = 85;
      stan::model::assign(tp_c_matrix, stan::math::subtract(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 86;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 87;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 88;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 89;
      stan::model::assign(tp_c_matrix, stan::math::add(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 90;
      stan::model::assign(tp_c_matrix,
        stan::math::add(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 91;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 92;
      stan::model::assign(tp_c_matrix, stan::math::add(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 93;
      stan::model::assign(tp_c_matrix, stan::math::subtract(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 94;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 95;
      stan::model::assign(tp_c_matrix,
        stan::math::subtract(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 96;
      stan::model::assign(tp_c_matrix, stan::math::subtract(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 97;
      stan::model::assign(tp_c_matrix, stan::math::add(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 98;
      stan::model::assign(tp_c_matrix,
        stan::math::add(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 99;
      stan::model::assign(tp_c_matrix,
        stan::math::add(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 100;
      stan::model::assign(tp_c_matrix, stan::math::add(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 101;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 102;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 103;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 104;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 105;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 106;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 107;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 108;
      stan::model::assign(tp_c_matrix, stan::math::elt_divide(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 109;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 110;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 111;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 112;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 113;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 114;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 115;
      stan::model::assign(tp_c_matrix,
        stan::math::elt_multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 116;
      stan::model::assign(tp_c_matrix, stan::math::elt_multiply(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 117;
      stan::model::assign(tp_c_matrix, stan::math::divide(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 118;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 119;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 120;
      stan::model::assign(tp_c_matrix, stan::math::divide(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 121;
      stan::model::assign(tp_c_matrix, stan::math::divide(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 122;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 123;
      stan::model::assign(tp_c_matrix,
        stan::math::divide(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 124;
      stan::model::assign(tp_c_matrix, stan::math::divide(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 125;
      stan::model::assign(tp_c_matrix, stan::math::multiply(z, cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 126;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(stan::math::to_complex(r, 0), cvmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 127;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cvmat, stan::math::to_complex(r, 0)),
        "assigning variable tp_c_matrix");
      current_statement__ = 128;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cvmat, z),
        "assigning variable tp_c_matrix");
      current_statement__ = 129;
      stan::model::assign(tp_c_matrix, stan::math::multiply(zv, cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 130;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v), cmat),
        "assigning variable tp_c_matrix");
      current_statement__ = 131;
      stan::model::assign(tp_c_matrix,
        stan::math::multiply(cmat,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(v)),
        "assigning variable tp_c_matrix");
      current_statement__ = 132;
      stan::model::assign(tp_c_matrix, stan::math::multiply(cmat, zv),
        "assigning variable tp_c_matrix");
      current_statement__ = 133;
      stan::model::assign(carray, stan::math::to_array_2d(cvmat),
        "assigning variable carray");
      if (emit_transformed_parameters__) {
        out__.write(tp_c_matrix);
        out__.write(tp_c_vector);
        out__.write(tp_c_rowvector);
        out__.write(tp_c);
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(carray[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> cvmat =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 1;
      stan::model::assign(cvmat,
        in__.read<Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>>(N, N),
        "assigning variable cvmat");
      out__.write(cvmat);
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> cvvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 2;
      stan::model::assign(cvvec,
        in__.read<Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>>(N),
        "assigning variable cvvec");
      out__.write(cvvec);
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> cvrowvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 3;
      stan::model::assign(cvrowvec,
        in__.read<Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>>(N),
        "assigning variable cvrowvec");
      out__.write(cvrowvec);
      std::complex<local_scalar_t__> zv =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 4;
      zv = in__.read<std::complex<local_scalar_t__>>();
      out__.write(zv);
      Eigen::Matrix<local_scalar_t__,-1,-1> vmat =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(vmat,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, N),
        "assigning variable vmat");
      out__.write(vmat);
      Eigen::Matrix<local_scalar_t__,-1,1> vvec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(vvec,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable vvec");
      out__.write(vvec);
      Eigen::Matrix<local_scalar_t__,1,-1> vrowvec =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(vrowvec,
        in__.read<Eigen::Matrix<local_scalar_t__,1,-1>>(N),
        "assigning variable vrowvec");
      out__.write(vrowvec);
      local_scalar_t__ v = DUMMY_VAR__;
      current_statement__ = 8;
      v = in__.read<local_scalar_t__>();
      out__.write(v);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "cvmat", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
          static_cast<size_t>(2)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "cvvec", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "cvrowvec",
        "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "zv", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "vmat", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "vvec", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "vrowvec",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "v", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> cvmat =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      {
        std::vector<std::complex<local_scalar_t__>> cvmat_flat__;
        current_statement__ = 1;
        cvmat_flat__ = context__.vals_c("cvmat");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(cvmat, cvmat_flat__[(pos__ - 1)],
              "assigning variable cvmat", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(cvmat);
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> cvvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      {
        std::vector<std::complex<local_scalar_t__>> cvvec_flat__;
        current_statement__ = 2;
        cvvec_flat__ = context__.vals_c("cvvec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(cvvec, cvvec_flat__[(pos__ - 1)],
            "assigning variable cvvec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(cvvec);
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> cvrowvec =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      {
        std::vector<std::complex<local_scalar_t__>> cvrowvec_flat__;
        current_statement__ = 3;
        cvrowvec_flat__ = context__.vals_c("cvrowvec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(cvrowvec, cvrowvec_flat__[(pos__ - 1)],
            "assigning variable cvrowvec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(cvrowvec);
      std::complex<local_scalar_t__> zv =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 4;
      zv = context__.vals_c("zv")[(1 - 1)];
      out__.write(zv);
      Eigen::Matrix<local_scalar_t__,-1,-1> vmat =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> vmat_flat__;
        current_statement__ = 5;
        vmat_flat__ = context__.vals_r("vmat");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(vmat, vmat_flat__[(pos__ - 1)],
              "assigning variable vmat", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(vmat);
      Eigen::Matrix<local_scalar_t__,-1,1> vvec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> vvec_flat__;
        current_statement__ = 6;
        vvec_flat__ = context__.vals_r("vvec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(vvec, vvec_flat__[(pos__ - 1)],
            "assigning variable vvec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(vvec);
      Eigen::Matrix<local_scalar_t__,1,-1> vrowvec =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> vrowvec_flat__;
        current_statement__ = 7;
        vrowvec_flat__ = context__.vals_r("vrowvec");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(vrowvec, vrowvec_flat__[(pos__ - 1)],
            "assigning variable vrowvec", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(vrowvec);
      local_scalar_t__ v = DUMMY_VAR__;
      current_statement__ = 8;
      v = context__.vals_r("v")[(1 - 1)];
      out__.write(v);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"cvmat", "cvvec", "cvrowvec", "zv",
                "vmat", "vvec", "vrowvec", "v"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"tp_c_matrix", "tp_c_vector", "tp_c_rowvector", "tp_c", "carray"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(N),
                                                 static_cast<size_t>(N),
                                                 static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(N),
                  static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(N),
                  static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(N),
                  static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N), static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(N), static_cast<size_t>(2)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "cvmat" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
          "real");
        param_names__.emplace_back(std::string() + "cvmat" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
          "imag");
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "cvvec" + '.' +
        std::to_string(sym1__) + '.' + "real");
      param_names__.emplace_back(std::string() + "cvvec" + '.' +
        std::to_string(sym1__) + '.' + "imag");
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "cvrowvec" + '.' +
        std::to_string(sym1__) + '.' + "real");
      param_names__.emplace_back(std::string() + "cvrowvec" + '.' +
        std::to_string(sym1__) + '.' + "imag");
    }
    param_names__.emplace_back(std::string() + "zv" + '.' + "real");
    param_names__.emplace_back(std::string() + "zv" + '.' + "imag");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "vmat" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "vvec" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "vrowvec" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "v");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "tp_c_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "tp_c_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "tp_c_vector" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "tp_c_vector" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "tp_c_rowvector" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "tp_c_rowvector" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      param_names__.emplace_back(std::string() + "tp_c" + '.' + "real");
      param_names__.emplace_back(std::string() + "tp_c" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "carray" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "carray" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "cvmat" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
          "real");
        param_names__.emplace_back(std::string() + "cvmat" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
          "imag");
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "cvvec" + '.' +
        std::to_string(sym1__) + '.' + "real");
      param_names__.emplace_back(std::string() + "cvvec" + '.' +
        std::to_string(sym1__) + '.' + "imag");
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "cvrowvec" + '.' +
        std::to_string(sym1__) + '.' + "real");
      param_names__.emplace_back(std::string() + "cvrowvec" + '.' +
        std::to_string(sym1__) + '.' + "imag");
    }
    param_names__.emplace_back(std::string() + "zv" + '.' + "real");
    param_names__.emplace_back(std::string() + "zv" + '.' + "imag");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "vmat" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "vvec" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "vrowvec" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "v");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "tp_c_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "tp_c_matrix" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "tp_c_vector" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "tp_c_vector" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "tp_c_rowvector" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "tp_c_rowvector" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      param_names__.emplace_back(std::string() + "tp_c" + '.' + "real");
      param_names__.emplace_back(std::string() + "tp_c" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "carray" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "carray" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"cvmat\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"cvvec\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"cvrowvec\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"zv\",\"type\":{\"name\":\"complex\"},\"block\":\"parameters\"},{\"name\":\"vmat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"vvec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"vrowvec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tp_c_matrix\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_c_vector\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_c_rowvector\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_c\",\"type\":{\"name\":\"complex\"},\"block\":\"transformed_parameters\"},{\"name\":\"carray\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"cvmat\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"cvvec\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"cvrowvec\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"zv\",\"type\":{\"name\":\"complex\"},\"block\":\"parameters\"},{\"name\":\"vmat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"vvec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"vrowvec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tp_c_matrix\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_c_vector\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_c_rowvector\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tp_c\",\"type\":{\"name\":\"complex\"},\"block\":\"transformed_parameters\"},{\"name\":\"carray\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((N * (N * 2)) + (N * 2)) + (N * 2)) +
      2) + (N * N)) + N) + N) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((((N * (N
      * 2)) + (N * 2)) + (N * 2)) + 2) + (N * (N * 2))));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((N * (N * 2)) + (N * 2)) + (N * 2)) +
      2) + (N * N)) + N) + N) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((((N * (N
      * 2)) + (N * 2)) + (N * 2)) + 2) + (N * (N * 2))));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = basic_ops_mix_model_namespace::basic_ops_mix_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return basic_ops_mix_model_namespace::profiles__;
}
#endif
  $ ../../../../../../install/default/bin/stanc --print-cpp complex_data.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace complex_data_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 26> locations_array__ =
  {" (found before start of program)",
  " (in 'complex_data.stan', line 2, column 2 to column 8)",
  " (in 'complex_data.stan', line 3, column 2 to column 12)",
  " (in 'complex_data.stan', line 4, column 17 to column 18)",
  " (in 'complex_data.stan', line 4, column 2 to column 23)",
  " (in 'complex_data.stan', line 5, column 21 to column 22)",
  " (in 'complex_data.stan', line 5, column 2 to column 27)",
  " (in 'complex_data.stan', line 6, column 17 to column 18)",
  " (in 'complex_data.stan', line 6, column 19 to column 20)",
  " (in 'complex_data.stan', line 6, column 2 to column 25)",
  " (in 'complex_data.stan', line 8, column 2 to column 8)",
  " (in 'complex_data.stan', line 9, column 8 to column 9)",
  " (in 'complex_data.stan', line 9, column 2 to column 22)",
  " (in 'complex_data.stan', line 10, column 8 to column 9)",
  " (in 'complex_data.stan', line 10, column 26 to column 27)",
  " (in 'complex_data.stan', line 10, column 2 to column 32)",
  " (in 'complex_data.stan', line 11, column 8 to column 9)",
  " (in 'complex_data.stan', line 11, column 30 to column 31)",
  " (in 'complex_data.stan', line 11, column 2 to column 36)",
  " (in 'complex_data.stan', line 12, column 8 to column 9)",
  " (in 'complex_data.stan', line 12, column 26 to column 27)",
  " (in 'complex_data.stan', line 12, column 28 to column 29)",
  " (in 'complex_data.stan', line 12, column 2 to column 34)",
  " (in 'complex_data.stan', line 15, column 17 to column 18)",
  " (in 'complex_data.stan', line 15, column 19 to column 20)",
  " (in 'complex_data.stan', line 15, column 2 to column 25)"};
class complex_data_model final : public model_base_crtp<complex_data_model> {
 private:
  int N;
  std::complex<double> z;
  Eigen::Matrix<std::complex<double>,-1,1> z1_data__;
  Eigen::Matrix<std::complex<double>,1,-1> z2_data__;
  Eigen::Matrix<std::complex<double>,-1,-1> z3_data__;
  int M;
  std::vector<std::complex<double>> z4;
  std::vector<Eigen::Matrix<std::complex<double>,-1,1>> z5;
  std::vector<Eigen::Matrix<std::complex<double>,1,-1>> z6;
  std::vector<Eigen::Matrix<std::complex<double>,-1,-1>> z7;
  Eigen::Matrix<std::complex<double>,-1,-1> z8_data__;
  Eigen::Map<Eigen::Matrix<std::complex<double>,-1,1>> z1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<std::complex<double>,1,-1>> z2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<std::complex<double>,-1,-1>> z3{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<std::complex<double>,-1,-1>> z8{nullptr, 0, 0};
 public:
  ~complex_data_model() {}
  complex_data_model(stan::io::var_context& context__, unsigned int
                     random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "complex_data_model_namespace::complex_data_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 1;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 1;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 2;
      context__.validate_dims("data initialization", "z", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      z = std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      z = context__.vals_c("z")[(1 - 1)];
      current_statement__ = 3;
      stan::math::validate_non_negative_index("z1", "N", N);
      current_statement__ = 4;
      context__.validate_dims("data initialization", "z1", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2)});
      z1_data__ = Eigen::Matrix<std::complex<double>,-1,1>::Constant(N,
                    std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                           ),
                      std::numeric_limits<double>::quiet_NaN()));
      new (&z1)
        Eigen::Map<Eigen::Matrix<std::complex<double>,-1,1>>(z1_data__.data(),
        N);
      {
        std::vector<std::complex<local_scalar_t__>> z1_flat__;
        current_statement__ = 4;
        z1_flat__ = context__.vals_c("z1");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(z1, z1_flat__[(pos__ - 1)],
            "assigning variable z1", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 5;
      stan::math::validate_non_negative_index("z2", "N", N);
      current_statement__ = 6;
      context__.validate_dims("data initialization", "z2", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2)});
      z2_data__ = Eigen::Matrix<std::complex<double>,1,-1>::Constant(N,
                    std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                           ),
                      std::numeric_limits<double>::quiet_NaN()));
      new (&z2)
        Eigen::Map<Eigen::Matrix<std::complex<double>,1,-1>>(z2_data__.data(),
        N);
      {
        std::vector<std::complex<local_scalar_t__>> z2_flat__;
        current_statement__ = 6;
        z2_flat__ = context__.vals_c("z2");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(z2, z2_flat__[(pos__ - 1)],
            "assigning variable z2", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 7;
      stan::math::validate_non_negative_index("z3", "N", N);
      current_statement__ = 8;
      stan::math::validate_non_negative_index("z3", "N", N);
      current_statement__ = 9;
      context__.validate_dims("data initialization", "z3", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
          static_cast<size_t>(2)});
      z3_data__ = Eigen::Matrix<std::complex<double>,-1,-1>::Constant(N, N,
                    std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                           ),
                      std::numeric_limits<double>::quiet_NaN()));
      new (&z3)
        Eigen::Map<Eigen::Matrix<std::complex<double>,-1,-1>>(z3_data__.data(),
        N, N);
      {
        std::vector<std::complex<local_scalar_t__>> z3_flat__;
        current_statement__ = 9;
        z3_flat__ = context__.vals_c("z3");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(z3, z3_flat__[(pos__ - 1)],
              "assigning variable z3", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 10;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 10;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 11;
      stan::math::validate_non_negative_index("z4", "M", M);
      current_statement__ = 12;
      context__.validate_dims("data initialization", "z4", "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(2)});
      z4 = std::vector<std::complex<double>>(M,
             std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
               std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<std::complex<local_scalar_t__>> z4_flat__;
        current_statement__ = 12;
        z4_flat__ = context__.vals_c("z4");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          stan::model::assign(z4, z4_flat__[(pos__ - 1)],
            "assigning variable z4", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 13;
      stan::math::validate_non_negative_index("z5", "M", M);
      current_statement__ = 14;
      stan::math::validate_non_negative_index("z5", "N", N);
      current_statement__ = 15;
      context__.validate_dims("data initialization", "z5", "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(N),
          static_cast<size_t>(2)});
      z5 = std::vector<Eigen::Matrix<std::complex<double>,-1,1>>(M,
             Eigen::Matrix<std::complex<double>,-1,1>::Constant(N,
               std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                 std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<std::complex<local_scalar_t__>> z5_flat__;
        current_statement__ = 15;
        z5_flat__ = context__.vals_c("z5");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            stan::model::assign(z5, z5_flat__[(pos__ - 1)],
              "assigning variable z5", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 16;
      stan::math::validate_non_negative_index("z6", "M", M);
      current_statement__ = 17;
      stan::math::validate_non_negative_index("z6", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "z6", "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(N),
          static_cast<size_t>(2)});
      z6 = std::vector<Eigen::Matrix<std::complex<double>,1,-1>>(M,
             Eigen::Matrix<std::complex<double>,1,-1>::Constant(N,
               std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                 std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<std::complex<local_scalar_t__>> z6_flat__;
        current_statement__ = 18;
        z6_flat__ = context__.vals_c("z6");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            stan::model::assign(z6, z6_flat__[(pos__ - 1)],
              "assigning variable z6", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 19;
      stan::math::validate_non_negative_index("z7", "M", M);
      current_statement__ = 20;
      stan::math::validate_non_negative_index("z7", "N", N);
      current_statement__ = 21;
      stan::math::validate_non_negative_index("z7", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization", "z7", "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(N),
          static_cast<size_t>(N), static_cast<size_t>(2)});
      z7 = std::vector<Eigen::Matrix<std::complex<double>,-1,-1>>(M,
             Eigen::Matrix<std::complex<double>,-1,-1>::Constant(N, N,
               std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                 std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<std::complex<local_scalar_t__>> z7_flat__;
        current_statement__ = 22;
        z7_flat__ = context__.vals_c("z7");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              stan::model::assign(z7, z7_flat__[(pos__ - 1)],
                "assigning variable z7", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 23;
      stan::math::validate_non_negative_index("z8", "N", N);
      current_statement__ = 24;
      stan::math::validate_non_negative_index("z8", "M", M);
      current_statement__ = 25;
      context__.validate_dims("data initialization", "z8", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M),
          static_cast<size_t>(2)});
      z8_data__ = Eigen::Matrix<std::complex<double>,-1,-1>::Constant(N, M,
                    std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                           ),
                      std::numeric_limits<double>::quiet_NaN()));
      new (&z8)
        Eigen::Map<Eigen::Matrix<std::complex<double>,-1,-1>>(z8_data__.data(),
        N, M);
      {
        std::vector<std::complex<local_scalar_t__>> z8_flat__;
        current_statement__ = 25;
        z8_flat__ = context__.vals_c("z8");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(z8, z8_flat__[(pos__ - 1)],
              "assigning variable z8", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "complex_data_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "complex_data_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "complex_data_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "complex_data_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = complex_data_model_namespace::complex_data_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return complex_data_model_namespace::profiles__;
}
#endif
  $ ../../../../../../install/default/bin/stanc --print-cpp complex_scalar.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace complex_scalar_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 428> locations_array__ =
  {" (found before start of program)",
  " (in 'complex_scalar.stan', line 111, column 2 to column 11)",
  " (in 'complex_scalar.stan', line 112, column 2 to column 20)",
  " (in 'complex_scalar.stan', line 113, column 2 to column 35)",
  " (in 'complex_scalar.stan', line 114, column 2 to column 41)",
  " (in 'complex_scalar.stan', line 117, column 2 to column 18)",
  " (in 'complex_scalar.stan', line 118, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 119, column 2 to column 36)",
  " (in 'complex_scalar.stan', line 120, column 2 to column 42)",
  " (in 'complex_scalar.stan', line 193, column 2 to column 15)",
  " (in 'complex_scalar.stan', line 194, column 2 to column 18)",
  " (in 'complex_scalar.stan', line 195, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 196, column 2 to column 36)",
  " (in 'complex_scalar.stan', line 197, column 2 to column 42)",
  " (in 'complex_scalar.stan', line 263, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 264, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 265, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 266, column 2 to column 23)",
  " (in 'complex_scalar.stan', line 521, column 2 to column 25)",
  " (in 'complex_scalar.stan', line 523, column 2 to column 72)",
  " (in 'complex_scalar.stan', line 524, column 2 to column 33)",
  " (in 'complex_scalar.stan', line 122, column 2 to column 20)",
  " (in 'complex_scalar.stan', line 123, column 2 to column 19)",
  " (in 'complex_scalar.stan', line 124, column 2 to column 19)",
  " (in 'complex_scalar.stan', line 125, column 2 to column 19)",
  " (in 'complex_scalar.stan', line 126, column 2 to column 17)",
  " (in 'complex_scalar.stan', line 127, column 2 to column 19)",
  " (in 'complex_scalar.stan', line 128, column 2 to column 25)",
  " (in 'complex_scalar.stan', line 129, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 130, column 2 to column 25)",
  " (in 'complex_scalar.stan', line 131, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 132, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 133, column 2 to column 29)",
  " (in 'complex_scalar.stan', line 134, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 135, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 136, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 137, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 138, column 2 to column 36)",
  " (in 'complex_scalar.stan', line 140, column 2 to column 37)",
  " (in 'complex_scalar.stan', line 141, column 2 to column 37)",
  " (in 'complex_scalar.stan', line 142, column 2 to column 55)",
  " (in 'complex_scalar.stan', line 143, column 2 to column 43)",
  " (in 'complex_scalar.stan', line 145, column 2 to column 43)",
  " (in 'complex_scalar.stan', line 146, column 2 to column 43)",
  " (in 'complex_scalar.stan', line 147, column 2 to line 148, column 78)",
  " (in 'complex_scalar.stan', line 149, column 2 to column 47)",
  " (in 'complex_scalar.stan', line 150, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 151, column 2 to column 44)",
  " (in 'complex_scalar.stan', line 152, column 2 to column 63)",
  " (in 'complex_scalar.stan', line 156, column 6 to column 59)",
  " (in 'complex_scalar.stan', line 155, column 24 to line 157, column 5)",
  " (in 'complex_scalar.stan', line 155, column 4 to line 157, column 5)",
  " (in 'complex_scalar.stan', line 154, column 22 to line 158, column 3)",
  " (in 'complex_scalar.stan', line 154, column 2 to line 158, column 3)",
  " (in 'complex_scalar.stan', line 160, column 2 to line 164, column 3)",
  " (in 'complex_scalar.stan', line 161, column 4 to line 163, column 5)",
  " (in 'complex_scalar.stan', line 162, column 6 to column 24)",
  " (in 'complex_scalar.stan', line 166, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 167, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 168, column 2 to column 39)",
  " (in 'complex_scalar.stan', line 169, column 2 to column 39)",
  " (in 'complex_scalar.stan', line 170, column 2 to column 45)",
  " (in 'complex_scalar.stan', line 171, column 2 to column 45)",
  " (in 'complex_scalar.stan', line 173, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 174, column 2 to column 26)",
  " (in 'complex_scalar.stan', line 175, column 2 to column 26)",
  " (in 'complex_scalar.stan', line 176, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 177, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 178, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 179, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 180, column 2 to column 44)",
  " (in 'complex_scalar.stan', line 181, column 2 to column 35)",
  " (in 'complex_scalar.stan', line 182, column 2 to column 35)",
  " (in 'complex_scalar.stan', line 183, column 2 to column 51)",
  " (in 'complex_scalar.stan', line 199, column 2 to column 20)",
  " (in 'complex_scalar.stan', line 200, column 2 to column 20)",
  " (in 'complex_scalar.stan', line 201, column 2 to column 19)",
  " (in 'complex_scalar.stan', line 202, column 2 to column 19)",
  " (in 'complex_scalar.stan', line 203, column 2 to column 19)",
  " (in 'complex_scalar.stan', line 204, column 2 to column 17)",
  " (in 'complex_scalar.stan', line 205, column 2 to column 19)",
  " (in 'complex_scalar.stan', line 206, column 2 to column 25)",
  " (in 'complex_scalar.stan', line 207, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 208, column 2 to column 25)",
  " (in 'complex_scalar.stan', line 209, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 210, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 211, column 2 to column 29)",
  " (in 'complex_scalar.stan', line 212, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 213, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 214, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 215, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 216, column 2 to column 36)",
  " (in 'complex_scalar.stan', line 218, column 2 to column 37)",
  " (in 'complex_scalar.stan', line 219, column 2 to column 37)",
  " (in 'complex_scalar.stan', line 220, column 2 to column 55)",
  " (in 'complex_scalar.stan', line 221, column 2 to column 43)",
  " (in 'complex_scalar.stan', line 223, column 2 to column 43)",
  " (in 'complex_scalar.stan', line 224, column 2 to column 43)",
  " (in 'complex_scalar.stan', line 225, column 2 to line 226, column 78)",
  " (in 'complex_scalar.stan', line 227, column 2 to column 47)",
  " (in 'complex_scalar.stan', line 228, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 229, column 2 to column 44)",
  " (in 'complex_scalar.stan', line 230, column 2 to column 63)",
  " (in 'complex_scalar.stan', line 234, column 6 to column 59)",
  " (in 'complex_scalar.stan', line 233, column 24 to line 235, column 5)",
  " (in 'complex_scalar.stan', line 233, column 4 to line 235, column 5)",
  " (in 'complex_scalar.stan', line 232, column 22 to line 236, column 3)",
  " (in 'complex_scalar.stan', line 232, column 2 to line 236, column 3)",
  " (in 'complex_scalar.stan', line 238, column 2 to line 242, column 3)",
  " (in 'complex_scalar.stan', line 239, column 4 to line 241, column 5)",
  " (in 'complex_scalar.stan', line 240, column 6 to column 24)",
  " (in 'complex_scalar.stan', line 244, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 245, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 246, column 2 to column 39)",
  " (in 'complex_scalar.stan', line 247, column 2 to column 39)",
  " (in 'complex_scalar.stan', line 248, column 2 to column 45)",
  " (in 'complex_scalar.stan', line 249, column 2 to column 45)",
  " (in 'complex_scalar.stan', line 251, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 252, column 2 to column 26)",
  " (in 'complex_scalar.stan', line 253, column 2 to column 26)",
  " (in 'complex_scalar.stan', line 254, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 255, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 256, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 257, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 258, column 2 to column 44)",
  " (in 'complex_scalar.stan', line 259, column 2 to column 35)",
  " (in 'complex_scalar.stan', line 260, column 2 to column 35)",
  " (in 'complex_scalar.stan', line 261, column 2 to column 51)",
  " (in 'complex_scalar.stan', line 268, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 269, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 270, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 271, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 272, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 273, column 2 to column 37)",
  " (in 'complex_scalar.stan', line 274, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 275, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 276, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 277, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 278, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 279, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 281, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 282, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 283, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 284, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 285, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 286, column 2 to column 37)",
  " (in 'complex_scalar.stan', line 287, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 288, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 289, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 290, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 291, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 292, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 294, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 295, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 296, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 297, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 298, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 299, column 2 to column 37)",
  " (in 'complex_scalar.stan', line 300, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 301, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 302, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 303, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 304, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 305, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 307, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 308, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 309, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 310, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 311, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 312, column 2 to column 37)",
  " (in 'complex_scalar.stan', line 313, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 314, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 315, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 316, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 317, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 318, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 319, column 2 to column 38)",
  " (in 'complex_scalar.stan', line 321, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 322, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 323, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 324, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 325, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 326, column 2 to column 37)",
  " (in 'complex_scalar.stan', line 327, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 328, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 329, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 330, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 331, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 332, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 334, column 2 to column 18)",
  " (in 'complex_scalar.stan', line 335, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 336, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 337, column 2 to column 26)",
  " (in 'complex_scalar.stan', line 338, column 2 to column 20)",
  " (in 'complex_scalar.stan', line 339, column 2 to column 26)",
  " (in 'complex_scalar.stan', line 340, column 2 to column 20)",
  " (in 'complex_scalar.stan', line 342, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 343, column 2 to column 36)",
  " (in 'complex_scalar.stan', line 344, column 2 to column 36)",
  " (in 'complex_scalar.stan', line 346, column 2 to column 18)",
  " (in 'complex_scalar.stan', line 347, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 348, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 349, column 2 to column 26)",
  " (in 'complex_scalar.stan', line 350, column 2 to column 26)",
  " (in 'complex_scalar.stan', line 351, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 352, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 353, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 354, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 355, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 357, column 2 to column 18)",
  " (in 'complex_scalar.stan', line 358, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 359, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 360, column 2 to column 26)",
  " (in 'complex_scalar.stan', line 361, column 2 to column 26)",
  " (in 'complex_scalar.stan', line 362, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 363, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 364, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 365, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 366, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 368, column 2 to column 16)",
  " (in 'complex_scalar.stan', line 369, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 370, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 372, column 2 to column 23)",
  " (in 'complex_scalar.stan', line 373, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 374, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 376, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 377, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 378, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 380, column 2 to column 23)",
  " (in 'complex_scalar.stan', line 381, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 382, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 384, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 385, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 386, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 388, column 2 to column 23)",
  " (in 'complex_scalar.stan', line 389, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 390, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 392, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 393, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 394, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 396, column 2 to column 23)",
  " (in 'complex_scalar.stan', line 397, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 398, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 400, column 2 to column 22)",
  " (in 'complex_scalar.stan', line 401, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 402, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 404, column 2 to column 23)",
  " (in 'complex_scalar.stan', line 405, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 406, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 408, column 2 to column 18)",
  " (in 'complex_scalar.stan', line 409, column 2 to column 26)",
  " (in 'complex_scalar.stan', line 410, column 2 to column 26)",
  " (in 'complex_scalar.stan', line 411, column 2 to column 35)",
  " (in 'complex_scalar.stan', line 412, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 413, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 415, column 2 to column 22)",
  " (in 'complex_scalar.stan', line 416, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 417, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 419, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 420, column 2 to column 29)",
  " (in 'complex_scalar.stan', line 421, column 2 to column 29)",
  " (in 'complex_scalar.stan', line 423, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 424, column 2 to column 29)",
  " (in 'complex_scalar.stan', line 425, column 2 to column 29)",
  " (in 'complex_scalar.stan', line 427, column 2 to column 47)",
  " (in 'complex_scalar.stan', line 428, column 2 to column 46)",
  " (in 'complex_scalar.stan', line 429, column 2 to column 46)",
  " (in 'complex_scalar.stan', line 431, column 2 to column 22)",
  " (in 'complex_scalar.stan', line 432, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 433, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 435, column 2 to column 24)",
  " (in 'complex_scalar.stan', line 436, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 437, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 439, column 2 to column 17)",
  " (in 'complex_scalar.stan', line 440, column 2 to column 25)",
  " (in 'complex_scalar.stan', line 441, column 2 to column 25)",
  " (in 'complex_scalar.stan', line 443, column 2 to column 40)",
  " (in 'complex_scalar.stan', line 444, column 2 to column 39)",
  " (in 'complex_scalar.stan', line 445, column 2 to column 39)",
  " (in 'complex_scalar.stan', line 447, column 2 to column 33)",
  " (in 'complex_scalar.stan', line 448, column 2 to column 33)",
  " (in 'complex_scalar.stan', line 449, column 2 to column 33)",
  " (in 'complex_scalar.stan', line 450, column 2 to column 33)",
  " (in 'complex_scalar.stan', line 451, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 452, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 453, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 455, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 456, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 457, column 2 to column 25)",
  " (in 'complex_scalar.stan', line 458, column 2 to column 35)",
  " (in 'complex_scalar.stan', line 459, column 2 to column 35)",
  " (in 'complex_scalar.stan', line 460, column 2 to column 36)",
  " (in 'complex_scalar.stan', line 461, column 2 to column 33)",
  " (in 'complex_scalar.stan', line 462, column 2 to column 41)",
  " (in 'complex_scalar.stan', line 463, column 2 to column 41)",
  " (in 'complex_scalar.stan', line 464, column 2 to column 35)",
  " (in 'complex_scalar.stan', line 465, column 2 to column 35)",
  " (in 'complex_scalar.stan', line 466, column 2 to column 36)",
  " (in 'complex_scalar.stan', line 467, column 2 to column 33)",
  " (in 'complex_scalar.stan', line 468, column 2 to column 41)",
  " (in 'complex_scalar.stan', line 469, column 2 to column 41)",
  " (in 'complex_scalar.stan', line 471, column 2 to column 23)",
  " (in 'complex_scalar.stan', line 472, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 473, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 475, column 2 to column 47)",
  " (in 'complex_scalar.stan', line 476, column 2 to column 46)",
  " (in 'complex_scalar.stan', line 477, column 2 to column 46)",
  " (in 'complex_scalar.stan', line 479, column 2 to column 22)",
  " (in 'complex_scalar.stan', line 480, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 481, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 483, column 2 to column 23)",
  " (in 'complex_scalar.stan', line 484, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 485, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 487, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 488, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 489, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 491, column 2 to column 23)",
  " (in 'complex_scalar.stan', line 492, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 493, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 495, column 2 to column 47)",
  " (in 'complex_scalar.stan', line 496, column 2 to column 46)",
  " (in 'complex_scalar.stan', line 497, column 2 to column 46)",
  " (in 'complex_scalar.stan', line 499, column 2 to column 22)",
  " (in 'complex_scalar.stan', line 500, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 501, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 503, column 2 to column 23)",
  " (in 'complex_scalar.stan', line 504, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 505, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 507, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 508, column 2 to column 38)",
  " (in 'complex_scalar.stan', line 509, column 2 to column 38)",
  " (in 'complex_scalar.stan', line 510, column 2 to column 38)",
  " (in 'complex_scalar.stan', line 511, column 2 to column 38)",
  " (in 'complex_scalar.stan', line 512, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 513, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 514, column 2 to column 37)",
  " (in 'complex_scalar.stan', line 515, column 2 to column 36)",
  " (in 'complex_scalar.stan', line 516, column 2 to column 37)",
  " (in 'complex_scalar.stan', line 517, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 518, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 522, column 2 to column 15)",
  " (in 'complex_scalar.stan', line 186, column 2 to column 20)",
  " (in 'complex_scalar.stan', line 187, column 2 to column 35)",
  " (in 'complex_scalar.stan', line 188, column 2 to column 41)",
  " (in 'complex_scalar.stan', line 190, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 38, column 2 to column 10)",
  " (in 'complex_scalar.stan', line 39, column 2 to column 11)",
  " (in 'complex_scalar.stan', line 40, column 2 to column 20)",
  " (in 'complex_scalar.stan', line 41, column 2 to column 35)",
  " (in 'complex_scalar.stan', line 42, column 2 to column 41)",
  " (in 'complex_scalar.stan', line 45, column 2 to column 15)",
  " (in 'complex_scalar.stan', line 46, column 2 to column 18)",
  " (in 'complex_scalar.stan', line 47, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 48, column 2 to column 36)",
  " (in 'complex_scalar.stan', line 49, column 2 to column 42)",
  " (in 'complex_scalar.stan', line 51, column 2 to column 20)",
  " (in 'complex_scalar.stan', line 52, column 2 to column 20)",
  " (in 'complex_scalar.stan', line 53, column 2 to column 19)",
  " (in 'complex_scalar.stan', line 54, column 2 to column 19)",
  " (in 'complex_scalar.stan', line 55, column 2 to column 17)",
  " (in 'complex_scalar.stan', line 56, column 2 to column 19)",
  " (in 'complex_scalar.stan', line 57, column 2 to column 25)",
  " (in 'complex_scalar.stan', line 58, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 59, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 60, column 2 to column 29)",
  " (in 'complex_scalar.stan', line 61, column 2 to column 31)",
  " (in 'complex_scalar.stan', line 62, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 63, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 64, column 2 to column 34)",
  " (in 'complex_scalar.stan', line 65, column 2 to column 36)",
  " (in 'complex_scalar.stan', line 67, column 2 to column 37)",
  " (in 'complex_scalar.stan', line 68, column 2 to column 55)",
  " (in 'complex_scalar.stan', line 69, column 2 to column 43)",
  " (in 'complex_scalar.stan', line 71, column 2 to column 43)",
  " (in 'complex_scalar.stan', line 72, column 2 to line 73, column 78)",
  " (in 'complex_scalar.stan', line 74, column 2 to column 47)",
  " (in 'complex_scalar.stan', line 75, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 76, column 2 to column 44)",
  " (in 'complex_scalar.stan', line 77, column 2 to column 63)",
  " (in 'complex_scalar.stan', line 81, column 6 to column 59)",
  " (in 'complex_scalar.stan', line 80, column 24 to line 82, column 5)",
  " (in 'complex_scalar.stan', line 80, column 4 to line 82, column 5)",
  " (in 'complex_scalar.stan', line 79, column 22 to line 83, column 3)",
  " (in 'complex_scalar.stan', line 79, column 2 to line 83, column 3)",
  " (in 'complex_scalar.stan', line 85, column 2 to line 89, column 3)",
  " (in 'complex_scalar.stan', line 86, column 4 to line 88, column 5)",
  " (in 'complex_scalar.stan', line 87, column 6 to column 24)",
  " (in 'complex_scalar.stan', line 91, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 92, column 2 to column 30)",
  " (in 'complex_scalar.stan', line 93, column 2 to column 39)",
  " (in 'complex_scalar.stan', line 94, column 2 to column 39)",
  " (in 'complex_scalar.stan', line 95, column 2 to column 45)",
  " (in 'complex_scalar.stan', line 96, column 2 to column 45)",
  " (in 'complex_scalar.stan', line 98, column 2 to column 21)",
  " (in 'complex_scalar.stan', line 99, column 2 to column 26)",
  " (in 'complex_scalar.stan', line 100, column 2 to column 26)",
  " (in 'complex_scalar.stan', line 101, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 102, column 2 to column 28)",
  " (in 'complex_scalar.stan', line 103, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 104, column 2 to column 32)",
  " (in 'complex_scalar.stan', line 105, column 2 to column 44)",
  " (in 'complex_scalar.stan', line 106, column 2 to column 35)",
  " (in 'complex_scalar.stan', line 107, column 2 to column 35)",
  " (in 'complex_scalar.stan', line 108, column 2 to column 51)",
  " (in 'complex_scalar.stan', line 265, column 8 to column 9)",
  " (in 'complex_scalar.stan', line 266, column 8 to column 9)",
  " (in 'complex_scalar.stan', line 3, column 4 to column 24)",
  " (in 'complex_scalar.stan', line 2, column 16 to line 4, column 3)",
  " (in 'complex_scalar.stan', line 6, column 4 to column 15)",
  " (in 'complex_scalar.stan', line 5, column 23 to line 7, column 3)",
  " (in 'complex_scalar.stan', line 9, column 4 to column 25)",
  " (in 'complex_scalar.stan', line 8, column 23 to line 10, column 3)",
  " (in 'complex_scalar.stan', line 12, column 4 to column 13)",
  " (in 'complex_scalar.stan', line 11, column 26 to line 13, column 3)",
  " (in 'complex_scalar.stan', line 15, column 4 to column 40)",
  " (in 'complex_scalar.stan', line 14, column 25 to line 16, column 3)",
  " (in 'complex_scalar.stan', line 18, column 4 to column 15)",
  " (in 'complex_scalar.stan', line 17, column 31 to line 19, column 3)",
  " (in 'complex_scalar.stan', line 21, column 4 to column 45)",
  " (in 'complex_scalar.stan', line 20, column 31 to line 22, column 3)",
  " (in 'complex_scalar.stan', line 24, column 4 to column 13)",
  " (in 'complex_scalar.stan', line 23, column 42 to line 25, column 3)",
  " (in 'complex_scalar.stan', line 27, column 4 to column 15)",
  " (in 'complex_scalar.stan', line 26, column 32 to line 28, column 3)",
  " (in 'complex_scalar.stan', line 30, column 4 to line 31, column 59)",
  " (in 'complex_scalar.stan', line 29, column 32 to line 32, column 3)",
  " (in 'complex_scalar.stan', line 34, column 4 to column 13)",
  " (in 'complex_scalar.stan', line 33, column 45 to line 35, column 3)"};
std::complex<double> foo(std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
stan::promote_args_t<T0__>
foo1(const std::complex<T0__>& z, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
std::complex<stan::promote_args_t<T0__>>
foo2(const T0__& r, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
std::complex<stan::promote_args_t<T0__>>
foo3(const std::complex<T0__>& z, std::ostream* pstream__);
std::vector<std::complex<double>> foo4(std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
stan::promote_args_t<T0__>
foo5(const std::vector<std::complex<T0__>>& z, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
std::vector<std::complex<stan::promote_args_t<T0__>>>
foo6(const T0__& r, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
std::vector<std::complex<stan::promote_args_t<T0__>>>
foo7(const std::vector<std::complex<T0__>>& z, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
stan::promote_args_t<T0__>
foo8(const std::vector<std::vector<std::complex<T0__>>>& z, std::ostream*
     pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
std::vector<std::vector<std::complex<stan::promote_args_t<T0__>>>>
foo9(const T0__& r, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
std::vector<std::vector<std::complex<stan::promote_args_t<T0__>>>>
foo10(const std::vector<std::vector<std::complex<T0__>>>& z, std::ostream*
      pstream__);
std::complex<double> foo(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 406;
    return stan::math::promote_scalar<std::complex<local_scalar_t__>>(
             stan::math::to_complex());
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
foo1(const std::complex<T0__>& z, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 408;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
std::complex<stan::promote_args_t<T0__>>
foo2(const T0__& r, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 410;
    return stan::math::to_complex(r);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
std::complex<stan::promote_args_t<T0__>>
foo3(const std::complex<T0__>& z, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 412;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<std::complex<double>> foo4(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 414;
    return std::vector<std::complex<local_scalar_t__>>{stan::math::promote_scalar<
                                                         std::complex<local_scalar_t__>>(
                                                         stan::math::to_complex(
                                                           )),
             stan::math::promote_scalar<std::complex<local_scalar_t__>>(
               stan::math::to_complex())};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
foo5(const std::vector<std::complex<T0__>>& z, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 416;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
std::vector<std::complex<stan::promote_args_t<T0__>>>
foo6(const T0__& r, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 418;
    return std::vector<std::complex<local_scalar_t__>>{stan::math::to_complex(
                                                         r),
             stan::math::to_complex(r, r)};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
std::vector<std::complex<stan::promote_args_t<T0__>>>
foo7(const std::vector<std::complex<T0__>>& z, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 420;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
foo8(const std::vector<std::vector<std::complex<T0__>>>& z, std::ostream*
     pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 422;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
std::vector<std::vector<std::complex<stan::promote_args_t<T0__>>>>
foo9(const T0__& r, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 424;
    return std::vector<std::vector<std::complex<local_scalar_t__>>>{std::vector<
                                                                    std::complex<local_scalar_t__>>{
                                                                    stan::math::to_complex(
                                                                    r),
                                                                    stan::math::to_complex(
                                                                    r),
                                                                    stan::math::to_complex(
                                                                    r)},
             std::vector<std::complex<local_scalar_t__>>{stan::math::to_complex(
                                                           r),
               stan::math::to_complex(r), stan::math::to_complex(r)}};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
std::vector<std::vector<std::complex<stan::promote_args_t<T0__>>>>
foo10(const std::vector<std::vector<std::complex<T0__>>>& z, std::ostream*
      pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 426;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class complex_scalar_model final : public model_base_crtp<complex_scalar_model> {
 private:
  int d_i;
  double d_r;
  std::complex<double> d_complex;
  std::vector<std::complex<double>> d_complex_array;
  std::vector<std::vector<std::complex<double>>> d_complex_array_2d;
  int td_i;
  double td_r;
  std::complex<double> td_complex;
  std::vector<std::complex<double>> td_complex_array;
  std::vector<std::vector<std::complex<double>>> td_complex_array_2d;
 public:
  ~complex_scalar_model() {}
  complex_scalar_model(stan::io::var_context& context__, unsigned int
                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "complex_scalar_model_namespace::complex_scalar_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 345;
      context__.validate_dims("data initialization", "d_i", "int",
        std::vector<size_t>{});
      d_i = std::numeric_limits<int>::min();
      current_statement__ = 345;
      d_i = context__.vals_i("d_i")[(1 - 1)];
      current_statement__ = 346;
      context__.validate_dims("data initialization", "d_r", "double",
        std::vector<size_t>{});
      d_r = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 346;
      d_r = context__.vals_r("d_r")[(1 - 1)];
      current_statement__ = 347;
      context__.validate_dims("data initialization", "d_complex", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      d_complex = std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
                    std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 347;
      d_complex = context__.vals_c("d_complex")[(1 - 1)];
      current_statement__ = 348;
      context__.validate_dims("data initialization", "d_complex_array",
        "double",
        std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)});
      d_complex_array = std::vector<std::complex<double>>(2,
                          std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                                 ),
                            std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<std::complex<local_scalar_t__>> d_complex_array_flat__;
        current_statement__ = 348;
        d_complex_array_flat__ = context__.vals_c("d_complex_array");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(d_complex_array, d_complex_array_flat__[(pos__
            - 1)], "assigning variable d_complex_array",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 349;
      context__.validate_dims("data initialization", "d_complex_array_2d",
        "double",
        std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3),
          static_cast<size_t>(2)});
      d_complex_array_2d = std::vector<std::vector<std::complex<double>>>(2,
                             std::vector<std::complex<double>>(3,
                               std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                                      ),
                                 std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<std::complex<local_scalar_t__>> d_complex_array_2d_flat__;
        current_statement__ = 349;
        d_complex_array_2d_flat__ = context__.vals_c("d_complex_array_2d");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            stan::model::assign(d_complex_array_2d,
              d_complex_array_2d_flat__[(pos__ - 1)],
              "assigning variable d_complex_array_2d",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 350;
      td_i = std::numeric_limits<int>::min();
      current_statement__ = 350;
      td_i = 1;
      current_statement__ = 351;
      td_r = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 351;
      td_r = 1.1;
      current_statement__ = 352;
      td_complex = std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                          ),
                     std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 353;
      td_complex_array = std::vector<std::complex<double>>(2,
                           std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                                  ),
                             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 354;
      td_complex_array_2d = std::vector<std::vector<std::complex<double>>>(2,
                              std::vector<std::complex<double>>(3,
                                std::complex<double>(std::numeric_limits<double>::quiet_NaN(
                                                       ),
                                  std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 355;
      td_complex = stan::math::to_complex(td_i, 0);
      current_statement__ = 356;
      td_complex = stan::math::to_complex(td_r, 0);
      current_statement__ = 357;
      td_complex = stan::math::to_complex(d_i, 0);
      current_statement__ = 358;
      td_complex = stan::math::to_complex(d_r, 0);
      current_statement__ = 359;
      td_complex = stan::math::to_complex(1, 0);
      current_statement__ = 360;
      td_complex = stan::math::to_complex(1.1, 0);
      current_statement__ = 361;
      td_complex = d_complex;
      current_statement__ = 362;
      td_complex = stan::model::rvalue(d_complex_array, "d_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 363;
      td_complex = stan::math::to_complex();
      current_statement__ = 364;
      td_complex = stan::math::to_complex(1);
      current_statement__ = 365;
      td_complex = stan::math::to_complex(1.2);
      current_statement__ = 366;
      td_complex = stan::math::to_complex(1, 2);
      current_statement__ = 367;
      td_complex = stan::math::to_complex(1.1, 2);
      current_statement__ = 368;
      td_complex = stan::math::to_complex(1, 2.2);
      current_statement__ = 369;
      td_complex = stan::math::to_complex(1.1, 2.2);
      current_statement__ = 370;
      stan::model::assign(td_complex_array, d_complex_array,
        "assigning variable td_complex_array");
      current_statement__ = 371;
      stan::model::assign(td_complex_array,
        std::vector<std::complex<double>>{td_complex,
          stan::math::to_complex(1, 0), stan::math::to_complex(2, 3)},
        "assigning variable td_complex_array");
      current_statement__ = 372;
      stan::model::assign(td_complex_array, stan::math::to_complex(5.1, 6),
        "assigning variable td_complex_array", stan::model::index_uni(1));
      current_statement__ = 373;
      stan::model::assign(td_complex_array_2d, d_complex_array_2d,
        "assigning variable td_complex_array_2d");
      current_statement__ = 374;
      stan::model::assign(td_complex_array_2d,
        std::vector<std::vector<std::complex<double>>>{std::vector<
                                                         std::complex<double>>{
                                                         stan::math::to_complex(
                                                           1, 0), td_complex,
                                                         stan::math::to_complex(
                                                           3, 0)},
          std::vector<std::complex<double>>{stan::math::to_complex(),
            stan::math::to_complex(1.1), stan::math::to_complex(1, 2.1)}},
        "assigning variable td_complex_array_2d");
      current_statement__ = 375;
      stan::model::assign(td_complex_array_2d, stan::math::to_complex(1, 2),
        "assigning variable td_complex_array_2d", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 376;
      stan::model::assign(td_complex_array_2d, 1,
        "assigning variable td_complex_array_2d", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 377;
      stan::model::assign(td_complex_array_2d, td_complex_array,
        "assigning variable td_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 378;
      stan::model::assign(td_complex_array_2d,
        std::vector<std::complex<double>>{td_complex,
          stan::math::to_complex(1, 2), stan::math::to_complex(2.4, 0)},
        "assigning variable td_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 383;
      for (int td_j = 1; td_j <= 2; ++td_j) {
        current_statement__ = 381;
        for (int td_k = 1; td_k <= 3; ++td_k) {
          current_statement__ = 379;
          stan::model::assign(td_complex_array_2d,
            stan::math::to_complex(1, 2.2),
            "assigning variable td_complex_array_2d",
            stan::model::index_uni(td_j), stan::model::index_uni(td_k));
        }
      }
      current_statement__ = 384;
      for (int sym1__ = 1; sym1__ <=
           stan::math::size(td_complex_array_2d); ++sym1__) {
        std::vector<std::complex<double>> td_j;
        current_statement__ = 384;
        stan::model::assign(td_j, td_complex_array_2d[(sym1__ - 1)],
          "assigning variable td_j");
        current_statement__ = 385;
        for (int sym1__ = 1; sym1__ <= stan::math::size(td_j); ++sym1__) {
          std::complex<double> td_k;
          current_statement__ = 385;
          td_k = td_j[(sym1__ - 1)];
          current_statement__ = 386;
          td_complex = td_k;
        }
      }
      current_statement__ = 387;
      td_r = stan::math::get_real(td_complex);
      current_statement__ = 388;
      td_r = stan::math::get_imag(td_complex);
      current_statement__ = 389;
      td_r = stan::math::get_real(
               stan::model::rvalue(td_complex_array, "td_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 390;
      td_r = stan::math::get_imag(
               stan::model::rvalue(td_complex_array, "td_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 391;
      td_r = stan::math::get_real(
               stan::model::rvalue(td_complex_array_2d,
                 "td_complex_array_2d", stan::model::index_uni(1),
                 stan::model::index_uni(1)));
      current_statement__ = 392;
      td_r = stan::math::get_imag(
               stan::model::rvalue(td_complex_array_2d,
                 "td_complex_array_2d", stan::model::index_uni(1),
                 stan::model::index_uni(1)));
      current_statement__ = 393;
      td_complex = foo(pstream__);
      current_statement__ = 394;
      td_r = foo1(td_complex, pstream__);
      current_statement__ = 395;
      td_complex = foo2(td_r, pstream__);
      current_statement__ = 396;
      td_complex = foo3(td_complex, pstream__);
      current_statement__ = 397;
      stan::model::assign(td_complex_array, foo4(pstream__),
        "assigning variable td_complex_array");
      current_statement__ = 398;
      td_r = foo5(td_complex_array, pstream__);
      current_statement__ = 399;
      stan::model::assign(td_complex_array, foo6(td_r, pstream__),
        "assigning variable td_complex_array");
      current_statement__ = 400;
      stan::model::assign(td_complex_array,
        foo7(stan::model::deep_copy(td_complex_array), pstream__),
        "assigning variable td_complex_array");
      current_statement__ = 401;
      td_r = foo8(td_complex_array_2d, pstream__);
      current_statement__ = 402;
      stan::model::assign(td_complex_array_2d, foo9(td_r, pstream__),
        "assigning variable td_complex_array_2d");
      current_statement__ = 403;
      stan::model::assign(td_complex_array_2d,
        foo10(stan::model::deep_copy(td_complex_array_2d), pstream__),
        "assigning variable td_complex_array_2d");
      current_statement__ = 404;
      stan::math::validate_non_negative_index("i_arr", "0", 0);
      current_statement__ = 405;
      stan::math::validate_non_negative_index("i_arr_1", "1", 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 2 + (2 * 2) + (2 * (3 * 2));
  }
  inline std::string model_name() const final {
    return "complex_scalar_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "complex_scalar_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ p_r = DUMMY_VAR__;
      current_statement__ = 1;
      p_r = in__.template read<local_scalar_t__>();
      std::complex<local_scalar_t__> p_complex =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 2;
      p_complex = in__.template read<std::complex<local_scalar_t__>>();
      std::vector<std::complex<local_scalar_t__>> p_complex_array =
        std::vector<std::complex<local_scalar_t__>>(2,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 3;
      p_complex_array = in__.template read<
                          std::vector<std::complex<local_scalar_t__>>>(2);
      std::vector<std::vector<std::complex<local_scalar_t__>>>
        p_complex_array_2d =
        std::vector<std::vector<std::complex<local_scalar_t__>>>(2,
          std::vector<std::complex<local_scalar_t__>>(3,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      current_statement__ = 4;
      p_complex_array_2d = in__.template read<
                             std::vector<
                               std::vector<std::complex<local_scalar_t__>>>>(2,
                             3);
      local_scalar_t__ tp_r = DUMMY_VAR__;
      current_statement__ = 5;
      tp_r = 1.1;
      std::complex<local_scalar_t__> tp_complex =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      std::vector<std::complex<local_scalar_t__>> tp_complex_array =
        std::vector<std::complex<local_scalar_t__>>(2,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      std::vector<std::vector<std::complex<local_scalar_t__>>>
        tp_complex_array_2d =
        std::vector<std::vector<std::complex<local_scalar_t__>>>(2,
          std::vector<std::complex<local_scalar_t__>>(3,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      current_statement__ = 21;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(tp_r);
      current_statement__ = 22;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(d_i);
      current_statement__ = 23;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(d_r);
      current_statement__ = 24;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(p_r);
      current_statement__ = 25;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(1);
      current_statement__ = 26;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(1.1);
      current_statement__ = 27;
      tp_complex = d_complex;
      current_statement__ = 28;
      tp_complex = stan::model::rvalue(d_complex_array, "d_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 29;
      tp_complex = p_complex;
      current_statement__ = 30;
      tp_complex = stan::model::rvalue(p_complex_array, "p_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 31;
      tp_complex = stan::math::to_complex();
      current_statement__ = 32;
      tp_complex = stan::math::to_complex(1);
      current_statement__ = 33;
      tp_complex = stan::math::to_complex(1.2);
      current_statement__ = 34;
      tp_complex = stan::math::to_complex(1, 2);
      current_statement__ = 35;
      tp_complex = stan::math::to_complex(1.1, 2);
      current_statement__ = 36;
      tp_complex = stan::math::to_complex(1, 2.2);
      current_statement__ = 37;
      tp_complex = stan::math::to_complex(1.1, 2.2);
      current_statement__ = 38;
      stan::model::assign(tp_complex_array, d_complex_array,
        "assigning variable tp_complex_array");
      current_statement__ = 39;
      stan::model::assign(tp_complex_array, p_complex_array,
        "assigning variable tp_complex_array");
      current_statement__ = 40;
      stan::model::assign(tp_complex_array,
        std::vector<std::complex<local_scalar_t__>>{tp_complex,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(1),
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(
            stan::math::to_complex(2, 3))},
        "assigning variable tp_complex_array");
      current_statement__ = 41;
      stan::model::assign(tp_complex_array, stan::math::to_complex(5.1, 6),
        "assigning variable tp_complex_array", stan::model::index_uni(1));
      current_statement__ = 42;
      stan::model::assign(tp_complex_array_2d, d_complex_array_2d,
        "assigning variable tp_complex_array_2d");
      current_statement__ = 43;
      stan::model::assign(tp_complex_array_2d, p_complex_array_2d,
        "assigning variable tp_complex_array_2d");
      current_statement__ = 44;
      stan::model::assign(tp_complex_array_2d,
        std::vector<std::vector<std::complex<local_scalar_t__>>>{std::vector<
                                                                   std::complex<local_scalar_t__>>{
                                                                   stan::math::promote_scalar<
                                                                    std::complex<local_scalar_t__>>(
                                                                    1),
                                                                   tp_complex,
                                                                   stan::math::promote_scalar<
                                                                    std::complex<local_scalar_t__>>(
                                                                    3)},
          std::vector<std::complex<local_scalar_t__>>{stan::math::promote_scalar<
                                                        std::complex<local_scalar_t__>>(
                                                        stan::math::to_complex(
                                                          )),
            stan::math::promote_scalar<std::complex<local_scalar_t__>>(
              stan::math::to_complex(1.1)),
            stan::math::promote_scalar<std::complex<local_scalar_t__>>(
              stan::math::to_complex(1, 2.1))}},
        "assigning variable tp_complex_array_2d");
      current_statement__ = 45;
      stan::model::assign(tp_complex_array_2d, stan::math::to_complex(1, 2),
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 46;
      stan::model::assign(tp_complex_array_2d, 1,
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 47;
      stan::model::assign(tp_complex_array_2d, tp_complex_array,
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 48;
      stan::model::assign(tp_complex_array_2d,
        std::vector<std::complex<local_scalar_t__>>{tp_complex,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(
            stan::math::to_complex(1, 2)),
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(2.4)},
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 53;
      for (int tp_j = 1; tp_j <= 2; ++tp_j) {
        current_statement__ = 51;
        for (int tp_k = 1; tp_k <= 3; ++tp_k) {
          current_statement__ = 49;
          stan::model::assign(tp_complex_array_2d,
            stan::math::to_complex(1, 2.2),
            "assigning variable tp_complex_array_2d",
            stan::model::index_uni(tp_j), stan::model::index_uni(tp_k));
        }
      }
      current_statement__ = 54;
      for (int sym1__ = 1; sym1__ <=
           stan::math::size(tp_complex_array_2d); ++sym1__) {
        std::vector<std::complex<local_scalar_t__>> tp_j;
        current_statement__ = 54;
        stan::model::assign(tp_j, tp_complex_array_2d[(sym1__ - 1)],
          "assigning variable tp_j");
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= stan::math::size(tp_j); ++sym1__) {
          std::complex<local_scalar_t__> tp_k;
          current_statement__ = 55;
          tp_k = tp_j[(sym1__ - 1)];
          current_statement__ = 56;
          tp_complex = tp_k;
        }
      }
      current_statement__ = 57;
      tp_r = stan::math::get_real(tp_complex);
      current_statement__ = 58;
      tp_r = stan::math::get_imag(tp_complex);
      current_statement__ = 59;
      tp_r = stan::math::get_real(
               stan::model::rvalue(tp_complex_array, "tp_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 60;
      tp_r = stan::math::get_imag(
               stan::model::rvalue(tp_complex_array, "tp_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 61;
      tp_r = stan::math::get_real(
               stan::model::rvalue(tp_complex_array_2d,
                 "tp_complex_array_2d", stan::model::index_uni(1),
                 stan::model::index_uni(1)));
      current_statement__ = 62;
      tp_r = stan::math::get_imag(
               stan::model::rvalue(tp_complex_array_2d,
                 "tp_complex_array_2d", stan::model::index_uni(1),
                 stan::model::index_uni(1)));
      current_statement__ = 63;
      tp_complex = foo(pstream__);
      current_statement__ = 64;
      tp_r = foo1(tp_complex, pstream__);
      current_statement__ = 65;
      tp_complex = foo2(tp_r, pstream__);
      current_statement__ = 66;
      tp_complex = foo3(tp_complex, pstream__);
      current_statement__ = 67;
      stan::model::assign(tp_complex_array, foo4(pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 68;
      tp_r = foo5(tp_complex_array, pstream__);
      current_statement__ = 69;
      stan::model::assign(tp_complex_array, foo6(tp_r, pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 70;
      stan::model::assign(tp_complex_array,
        foo7(stan::model::deep_copy(tp_complex_array), pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 71;
      tp_r = foo8(tp_complex_array_2d, pstream__);
      current_statement__ = 72;
      stan::model::assign(tp_complex_array_2d, foo9(tp_r, pstream__),
        "assigning variable tp_complex_array_2d");
      current_statement__ = 73;
      stan::model::assign(tp_complex_array_2d,
        foo10(stan::model::deep_copy(tp_complex_array_2d), pstream__),
        "assigning variable tp_complex_array_2d");
      {
        std::complex<local_scalar_t__> m_complex =
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
        std::vector<std::complex<local_scalar_t__>> m_complex_array =
          std::vector<std::complex<local_scalar_t__>>(2,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
        std::vector<std::vector<std::complex<local_scalar_t__>>>
          m_complex_array_2d =
          std::vector<std::vector<std::complex<local_scalar_t__>>>(2,
            std::vector<std::complex<local_scalar_t__>>(3,
              std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
        current_statement__ = 344;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::math::abs(p_complex), 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "complex_scalar_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ p_r = DUMMY_VAR__;
      current_statement__ = 1;
      p_r = in__.template read<local_scalar_t__>();
      std::complex<local_scalar_t__> p_complex =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 2;
      p_complex = in__.template read<std::complex<local_scalar_t__>>();
      std::vector<std::complex<local_scalar_t__>> p_complex_array =
        std::vector<std::complex<local_scalar_t__>>(2,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 3;
      p_complex_array = in__.template read<
                          std::vector<std::complex<local_scalar_t__>>>(2);
      std::vector<std::vector<std::complex<local_scalar_t__>>>
        p_complex_array_2d =
        std::vector<std::vector<std::complex<local_scalar_t__>>>(2,
          std::vector<std::complex<local_scalar_t__>>(3,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      current_statement__ = 4;
      p_complex_array_2d = in__.template read<
                             std::vector<
                               std::vector<std::complex<local_scalar_t__>>>>(2,
                             3);
      local_scalar_t__ tp_r = DUMMY_VAR__;
      current_statement__ = 5;
      tp_r = 1.1;
      std::complex<local_scalar_t__> tp_complex =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      std::vector<std::complex<local_scalar_t__>> tp_complex_array =
        std::vector<std::complex<local_scalar_t__>>(2,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      std::vector<std::vector<std::complex<local_scalar_t__>>>
        tp_complex_array_2d =
        std::vector<std::vector<std::complex<local_scalar_t__>>>(2,
          std::vector<std::complex<local_scalar_t__>>(3,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      current_statement__ = 21;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(tp_r);
      current_statement__ = 22;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(d_i);
      current_statement__ = 23;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(d_r);
      current_statement__ = 24;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(p_r);
      current_statement__ = 25;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(1);
      current_statement__ = 26;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(1.1);
      current_statement__ = 27;
      tp_complex = d_complex;
      current_statement__ = 28;
      tp_complex = stan::model::rvalue(d_complex_array, "d_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 29;
      tp_complex = p_complex;
      current_statement__ = 30;
      tp_complex = stan::model::rvalue(p_complex_array, "p_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 31;
      tp_complex = stan::math::to_complex();
      current_statement__ = 32;
      tp_complex = stan::math::to_complex(1);
      current_statement__ = 33;
      tp_complex = stan::math::to_complex(1.2);
      current_statement__ = 34;
      tp_complex = stan::math::to_complex(1, 2);
      current_statement__ = 35;
      tp_complex = stan::math::to_complex(1.1, 2);
      current_statement__ = 36;
      tp_complex = stan::math::to_complex(1, 2.2);
      current_statement__ = 37;
      tp_complex = stan::math::to_complex(1.1, 2.2);
      current_statement__ = 38;
      stan::model::assign(tp_complex_array, d_complex_array,
        "assigning variable tp_complex_array");
      current_statement__ = 39;
      stan::model::assign(tp_complex_array, p_complex_array,
        "assigning variable tp_complex_array");
      current_statement__ = 40;
      stan::model::assign(tp_complex_array,
        std::vector<std::complex<local_scalar_t__>>{tp_complex,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(1),
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(
            stan::math::to_complex(2, 3))},
        "assigning variable tp_complex_array");
      current_statement__ = 41;
      stan::model::assign(tp_complex_array, stan::math::to_complex(5.1, 6),
        "assigning variable tp_complex_array", stan::model::index_uni(1));
      current_statement__ = 42;
      stan::model::assign(tp_complex_array_2d, d_complex_array_2d,
        "assigning variable tp_complex_array_2d");
      current_statement__ = 43;
      stan::model::assign(tp_complex_array_2d, p_complex_array_2d,
        "assigning variable tp_complex_array_2d");
      current_statement__ = 44;
      stan::model::assign(tp_complex_array_2d,
        std::vector<std::vector<std::complex<local_scalar_t__>>>{std::vector<
                                                                   std::complex<local_scalar_t__>>{
                                                                   stan::math::promote_scalar<
                                                                    std::complex<local_scalar_t__>>(
                                                                    1),
                                                                   tp_complex,
                                                                   stan::math::promote_scalar<
                                                                    std::complex<local_scalar_t__>>(
                                                                    3)},
          std::vector<std::complex<local_scalar_t__>>{stan::math::promote_scalar<
                                                        std::complex<local_scalar_t__>>(
                                                        stan::math::to_complex(
                                                          )),
            stan::math::promote_scalar<std::complex<local_scalar_t__>>(
              stan::math::to_complex(1.1)),
            stan::math::promote_scalar<std::complex<local_scalar_t__>>(
              stan::math::to_complex(1, 2.1))}},
        "assigning variable tp_complex_array_2d");
      current_statement__ = 45;
      stan::model::assign(tp_complex_array_2d, stan::math::to_complex(1, 2),
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 46;
      stan::model::assign(tp_complex_array_2d, 1,
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 47;
      stan::model::assign(tp_complex_array_2d, tp_complex_array,
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 48;
      stan::model::assign(tp_complex_array_2d,
        std::vector<std::complex<local_scalar_t__>>{tp_complex,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(
            stan::math::to_complex(1, 2)),
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(2.4)},
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 53;
      for (int tp_j = 1; tp_j <= 2; ++tp_j) {
        current_statement__ = 51;
        for (int tp_k = 1; tp_k <= 3; ++tp_k) {
          current_statement__ = 49;
          stan::model::assign(tp_complex_array_2d,
            stan::math::to_complex(1, 2.2),
            "assigning variable tp_complex_array_2d",
            stan::model::index_uni(tp_j), stan::model::index_uni(tp_k));
        }
      }
      current_statement__ = 54;
      for (int sym1__ = 1; sym1__ <=
           stan::math::size(tp_complex_array_2d); ++sym1__) {
        std::vector<std::complex<local_scalar_t__>> tp_j;
        current_statement__ = 54;
        stan::model::assign(tp_j, tp_complex_array_2d[(sym1__ - 1)],
          "assigning variable tp_j");
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= stan::math::size(tp_j); ++sym1__) {
          std::complex<local_scalar_t__> tp_k;
          current_statement__ = 55;
          tp_k = tp_j[(sym1__ - 1)];
          current_statement__ = 56;
          tp_complex = tp_k;
        }
      }
      current_statement__ = 57;
      tp_r = stan::math::get_real(tp_complex);
      current_statement__ = 58;
      tp_r = stan::math::get_imag(tp_complex);
      current_statement__ = 59;
      tp_r = stan::math::get_real(
               stan::model::rvalue(tp_complex_array, "tp_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 60;
      tp_r = stan::math::get_imag(
               stan::model::rvalue(tp_complex_array, "tp_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 61;
      tp_r = stan::math::get_real(
               stan::model::rvalue(tp_complex_array_2d,
                 "tp_complex_array_2d", stan::model::index_uni(1),
                 stan::model::index_uni(1)));
      current_statement__ = 62;
      tp_r = stan::math::get_imag(
               stan::model::rvalue(tp_complex_array_2d,
                 "tp_complex_array_2d", stan::model::index_uni(1),
                 stan::model::index_uni(1)));
      current_statement__ = 63;
      tp_complex = foo(pstream__);
      current_statement__ = 64;
      tp_r = foo1(tp_complex, pstream__);
      current_statement__ = 65;
      tp_complex = foo2(tp_r, pstream__);
      current_statement__ = 66;
      tp_complex = foo3(tp_complex, pstream__);
      current_statement__ = 67;
      stan::model::assign(tp_complex_array, foo4(pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 68;
      tp_r = foo5(tp_complex_array, pstream__);
      current_statement__ = 69;
      stan::model::assign(tp_complex_array, foo6(tp_r, pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 70;
      stan::model::assign(tp_complex_array,
        foo7(stan::model::deep_copy(tp_complex_array), pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 71;
      tp_r = foo8(tp_complex_array_2d, pstream__);
      current_statement__ = 72;
      stan::model::assign(tp_complex_array_2d, foo9(tp_r, pstream__),
        "assigning variable tp_complex_array_2d");
      current_statement__ = 73;
      stan::model::assign(tp_complex_array_2d,
        foo10(stan::model::deep_copy(tp_complex_array_2d), pstream__),
        "assigning variable tp_complex_array_2d");
      {
        std::complex<local_scalar_t__> m_complex =
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
        std::vector<std::complex<local_scalar_t__>> m_complex_array =
          std::vector<std::complex<local_scalar_t__>>(2,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
        std::vector<std::vector<std::complex<local_scalar_t__>>>
          m_complex_array_2d =
          std::vector<std::vector<std::complex<local_scalar_t__>>>(2,
            std::vector<std::complex<local_scalar_t__>>(3,
              std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
        current_statement__ = 344;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::math::abs(p_complex), 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "complex_scalar_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double p_r = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      p_r = in__.template read<local_scalar_t__>();
      std::complex<double> p_complex =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      p_complex = in__.template read<std::complex<local_scalar_t__>>();
      std::vector<std::complex<double>> p_complex_array =
        std::vector<std::complex<double>>(2,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 3;
      p_complex_array = in__.template read<
                          std::vector<std::complex<local_scalar_t__>>>(2);
      std::vector<std::vector<std::complex<double>>> p_complex_array_2d =
        std::vector<std::vector<std::complex<double>>>(2,
          std::vector<std::complex<double>>(3,
            std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
              std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 4;
      p_complex_array_2d = in__.template read<
                             std::vector<
                               std::vector<std::complex<local_scalar_t__>>>>(2,
                             3);
      double tp_r = std::numeric_limits<double>::quiet_NaN();
      std::complex<double> tp_complex =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());
      std::vector<std::complex<double>> tp_complex_array =
        std::vector<std::complex<double>>(2,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<std::complex<double>>> tp_complex_array_2d =
        std::vector<std::vector<std::complex<double>>>(2,
          std::vector<std::complex<double>>(3,
            std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
              std::numeric_limits<double>::quiet_NaN())));
      out__.write(p_r);
      out__.write(p_complex);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        out__.write(p_complex_array[(sym1__ - 1)]);
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          out__.write(p_complex_array_2d[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 5;
      tp_r = 1.1;
      current_statement__ = 21;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(tp_r);
      current_statement__ = 22;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(d_i);
      current_statement__ = 23;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(d_r);
      current_statement__ = 24;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(p_r);
      current_statement__ = 25;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(1);
      current_statement__ = 26;
      tp_complex = stan::math::promote_scalar<
                     std::complex<local_scalar_t__>>(1.1);
      current_statement__ = 27;
      tp_complex = d_complex;
      current_statement__ = 28;
      tp_complex = stan::model::rvalue(d_complex_array, "d_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 29;
      tp_complex = p_complex;
      current_statement__ = 30;
      tp_complex = stan::model::rvalue(p_complex_array, "p_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 31;
      tp_complex = stan::math::to_complex();
      current_statement__ = 32;
      tp_complex = stan::math::to_complex(1);
      current_statement__ = 33;
      tp_complex = stan::math::to_complex(1.2);
      current_statement__ = 34;
      tp_complex = stan::math::to_complex(1, 2);
      current_statement__ = 35;
      tp_complex = stan::math::to_complex(1.1, 2);
      current_statement__ = 36;
      tp_complex = stan::math::to_complex(1, 2.2);
      current_statement__ = 37;
      tp_complex = stan::math::to_complex(1.1, 2.2);
      current_statement__ = 38;
      stan::model::assign(tp_complex_array, d_complex_array,
        "assigning variable tp_complex_array");
      current_statement__ = 39;
      stan::model::assign(tp_complex_array, p_complex_array,
        "assigning variable tp_complex_array");
      current_statement__ = 40;
      stan::model::assign(tp_complex_array,
        std::vector<std::complex<local_scalar_t__>>{tp_complex,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(1),
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(
            stan::math::to_complex(2, 3))},
        "assigning variable tp_complex_array");
      current_statement__ = 41;
      stan::model::assign(tp_complex_array, stan::math::to_complex(5.1, 6),
        "assigning variable tp_complex_array", stan::model::index_uni(1));
      current_statement__ = 42;
      stan::model::assign(tp_complex_array_2d, d_complex_array_2d,
        "assigning variable tp_complex_array_2d");
      current_statement__ = 43;
      stan::model::assign(tp_complex_array_2d, p_complex_array_2d,
        "assigning variable tp_complex_array_2d");
      current_statement__ = 44;
      stan::model::assign(tp_complex_array_2d,
        std::vector<std::vector<std::complex<local_scalar_t__>>>{std::vector<
                                                                   std::complex<local_scalar_t__>>{
                                                                   stan::math::promote_scalar<
                                                                    std::complex<local_scalar_t__>>(
                                                                    1),
                                                                   tp_complex,
                                                                   stan::math::promote_scalar<
                                                                    std::complex<local_scalar_t__>>(
                                                                    3)},
          std::vector<std::complex<local_scalar_t__>>{stan::math::promote_scalar<
                                                        std::complex<local_scalar_t__>>(
                                                        stan::math::to_complex(
                                                          )),
            stan::math::promote_scalar<std::complex<local_scalar_t__>>(
              stan::math::to_complex(1.1)),
            stan::math::promote_scalar<std::complex<local_scalar_t__>>(
              stan::math::to_complex(1, 2.1))}},
        "assigning variable tp_complex_array_2d");
      current_statement__ = 45;
      stan::model::assign(tp_complex_array_2d, stan::math::to_complex(1, 2),
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 46;
      stan::model::assign(tp_complex_array_2d, 1,
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 47;
      stan::model::assign(tp_complex_array_2d, tp_complex_array,
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 48;
      stan::model::assign(tp_complex_array_2d,
        std::vector<std::complex<local_scalar_t__>>{tp_complex,
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(
            stan::math::to_complex(1, 2)),
          stan::math::promote_scalar<std::complex<local_scalar_t__>>(2.4)},
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 53;
      for (int tp_j = 1; tp_j <= 2; ++tp_j) {
        current_statement__ = 51;
        for (int tp_k = 1; tp_k <= 3; ++tp_k) {
          current_statement__ = 49;
          stan::model::assign(tp_complex_array_2d,
            stan::math::to_complex(1, 2.2),
            "assigning variable tp_complex_array_2d",
            stan::model::index_uni(tp_j), stan::model::index_uni(tp_k));
        }
      }
      current_statement__ = 54;
      for (int sym1__ = 1; sym1__ <=
           stan::math::size(tp_complex_array_2d); ++sym1__) {
        std::vector<std::complex<local_scalar_t__>> tp_j;
        current_statement__ = 54;
        stan::model::assign(tp_j, tp_complex_array_2d[(sym1__ - 1)],
          "assigning variable tp_j");
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= stan::math::size(tp_j); ++sym1__) {
          std::complex<local_scalar_t__> tp_k;
          current_statement__ = 55;
          tp_k = tp_j[(sym1__ - 1)];
          current_statement__ = 56;
          tp_complex = tp_k;
        }
      }
      current_statement__ = 57;
      tp_r = stan::math::get_real(tp_complex);
      current_statement__ = 58;
      tp_r = stan::math::get_imag(tp_complex);
      current_statement__ = 59;
      tp_r = stan::math::get_real(
               stan::model::rvalue(tp_complex_array, "tp_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 60;
      tp_r = stan::math::get_imag(
               stan::model::rvalue(tp_complex_array, "tp_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 61;
      tp_r = stan::math::get_real(
               stan::model::rvalue(tp_complex_array_2d,
                 "tp_complex_array_2d", stan::model::index_uni(1),
                 stan::model::index_uni(1)));
      current_statement__ = 62;
      tp_r = stan::math::get_imag(
               stan::model::rvalue(tp_complex_array_2d,
                 "tp_complex_array_2d", stan::model::index_uni(1),
                 stan::model::index_uni(1)));
      current_statement__ = 63;
      tp_complex = foo(pstream__);
      current_statement__ = 64;
      tp_r = foo1(tp_complex, pstream__);
      current_statement__ = 65;
      tp_complex = foo2(tp_r, pstream__);
      current_statement__ = 66;
      tp_complex = foo3(tp_complex, pstream__);
      current_statement__ = 67;
      stan::model::assign(tp_complex_array, foo4(pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 68;
      tp_r = foo5(tp_complex_array, pstream__);
      current_statement__ = 69;
      stan::model::assign(tp_complex_array, foo6(tp_r, pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 70;
      stan::model::assign(tp_complex_array,
        foo7(stan::model::deep_copy(tp_complex_array), pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 71;
      tp_r = foo8(tp_complex_array_2d, pstream__);
      current_statement__ = 72;
      stan::model::assign(tp_complex_array_2d, foo9(tp_r, pstream__),
        "assigning variable tp_complex_array_2d");
      current_statement__ = 73;
      stan::model::assign(tp_complex_array_2d,
        foo10(stan::model::deep_copy(tp_complex_array_2d), pstream__),
        "assigning variable tp_complex_array_2d");
      if (emit_transformed_parameters__) {
        out__.write(tp_r);
        out__.write(tp_complex);
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          out__.write(tp_complex_array[(sym1__ - 1)]);
        }
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            out__.write(tp_complex_array_2d[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      int gq_i = std::numeric_limits<int>::min();
      current_statement__ = 9;
      gq_i = 1;
      double gq_r = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      gq_r = 1.1;
      std::complex<double> gq_complex =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());
      std::vector<std::complex<double>> gq_complex_array =
        std::vector<std::complex<double>>(2,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<std::complex<double>>> gq_complex_array_2d =
        std::vector<std::vector<std::complex<double>>>(2,
          std::vector<std::complex<double>>(3,
            std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
              std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 74;
      gq_complex = stan::math::to_complex(gq_i, 0);
      current_statement__ = 75;
      gq_complex = stan::math::to_complex(gq_r, 0);
      current_statement__ = 76;
      gq_complex = stan::math::to_complex(d_i, 0);
      current_statement__ = 77;
      gq_complex = stan::math::to_complex(d_r, 0);
      current_statement__ = 78;
      gq_complex = stan::math::to_complex(p_r, 0);
      current_statement__ = 79;
      gq_complex = stan::math::to_complex(1, 0);
      current_statement__ = 80;
      gq_complex = stan::math::to_complex(1.1, 0);
      current_statement__ = 81;
      gq_complex = d_complex;
      current_statement__ = 82;
      gq_complex = stan::model::rvalue(d_complex_array, "d_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 83;
      gq_complex = p_complex;
      current_statement__ = 84;
      gq_complex = stan::model::rvalue(p_complex_array, "p_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 85;
      gq_complex = stan::math::to_complex();
      current_statement__ = 86;
      gq_complex = stan::math::to_complex(1);
      current_statement__ = 87;
      gq_complex = stan::math::to_complex(1.2);
      current_statement__ = 88;
      gq_complex = stan::math::to_complex(1, 2);
      current_statement__ = 89;
      gq_complex = stan::math::to_complex(1.1, 2);
      current_statement__ = 90;
      gq_complex = stan::math::to_complex(1, 2.2);
      current_statement__ = 91;
      gq_complex = stan::math::to_complex(1.1, 2.2);
      current_statement__ = 92;
      stan::model::assign(gq_complex_array, d_complex_array,
        "assigning variable gq_complex_array");
      current_statement__ = 93;
      stan::model::assign(gq_complex_array, p_complex_array,
        "assigning variable gq_complex_array");
      current_statement__ = 94;
      stan::model::assign(gq_complex_array,
        std::vector<std::complex<double>>{gq_complex,
          stan::math::to_complex(1, 0), stan::math::to_complex(2, 3)},
        "assigning variable gq_complex_array");
      current_statement__ = 95;
      stan::model::assign(gq_complex_array, stan::math::to_complex(5.1, 6),
        "assigning variable gq_complex_array", stan::model::index_uni(1));
      current_statement__ = 96;
      stan::model::assign(gq_complex_array_2d, d_complex_array_2d,
        "assigning variable gq_complex_array_2d");
      current_statement__ = 97;
      stan::model::assign(gq_complex_array_2d, p_complex_array_2d,
        "assigning variable gq_complex_array_2d");
      current_statement__ = 98;
      stan::model::assign(gq_complex_array_2d,
        std::vector<std::vector<std::complex<double>>>{std::vector<
                                                         std::complex<double>>{
                                                         stan::math::to_complex(
                                                           1, 0), gq_complex,
                                                         stan::math::to_complex(
                                                           3, 0)},
          std::vector<std::complex<double>>{stan::math::to_complex(),
            stan::math::to_complex(1.1), stan::math::to_complex(1, 2.1)}},
        "assigning variable gq_complex_array_2d");
      current_statement__ = 99;
      stan::model::assign(gq_complex_array_2d, stan::math::to_complex(1, 2),
        "assigning variable gq_complex_array_2d", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 100;
      stan::model::assign(gq_complex_array_2d, 1,
        "assigning variable gq_complex_array_2d", stan::model::index_uni(1),
        stan::model::index_uni(1));
      current_statement__ = 101;
      stan::model::assign(gq_complex_array_2d, gq_complex_array,
        "assigning variable gq_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 102;
      stan::model::assign(gq_complex_array_2d,
        std::vector<std::complex<double>>{gq_complex,
          stan::math::to_complex(1, 2), stan::math::to_complex(2.4, 0)},
        "assigning variable gq_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 107;
      for (int gq_j = 1; gq_j <= 2; ++gq_j) {
        current_statement__ = 105;
        for (int gq_k = 1; gq_k <= 3; ++gq_k) {
          current_statement__ = 103;
          stan::model::assign(gq_complex_array_2d,
            stan::math::to_complex(1, 2.2),
            "assigning variable gq_complex_array_2d",
            stan::model::index_uni(gq_j), stan::model::index_uni(gq_k));
        }
      }
      current_statement__ = 108;
      for (int sym1__ = 1; sym1__ <=
           stan::math::size(gq_complex_array_2d); ++sym1__) {
        std::vector<std::complex<double>> gq_j;
        current_statement__ = 108;
        stan::model::assign(gq_j, gq_complex_array_2d[(sym1__ - 1)],
          "assigning variable gq_j");
        current_statement__ = 109;
        for (int sym1__ = 1; sym1__ <= stan::math::size(gq_j); ++sym1__) {
          std::complex<double> gq_k;
          current_statement__ = 109;
          gq_k = gq_j[(sym1__ - 1)];
          current_statement__ = 110;
          gq_complex = gq_k;
        }
      }
      current_statement__ = 111;
      gq_r = stan::math::get_real(gq_complex);
      current_statement__ = 112;
      gq_r = stan::math::get_imag(gq_complex);
      current_statement__ = 113;
      gq_r = stan::math::get_real(
               stan::model::rvalue(gq_complex_array, "gq_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 114;
      gq_r = stan::math::get_imag(
               stan::model::rvalue(gq_complex_array, "gq_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 115;
      gq_r = stan::math::get_real(
               stan::model::rvalue(gq_complex_array_2d,
                 "gq_complex_array_2d", stan::model::index_uni(1),
                 stan::model::index_uni(1)));
      current_statement__ = 116;
      gq_r = stan::math::get_imag(
               stan::model::rvalue(gq_complex_array_2d,
                 "gq_complex_array_2d", stan::model::index_uni(1),
                 stan::model::index_uni(1)));
      current_statement__ = 117;
      gq_complex = foo(pstream__);
      current_statement__ = 118;
      gq_r = foo1(gq_complex, pstream__);
      current_statement__ = 119;
      gq_complex = foo2(gq_r, pstream__);
      current_statement__ = 120;
      gq_complex = foo3(gq_complex, pstream__);
      current_statement__ = 121;
      stan::model::assign(gq_complex_array, foo4(pstream__),
        "assigning variable gq_complex_array");
      current_statement__ = 122;
      gq_r = foo5(gq_complex_array, pstream__);
      current_statement__ = 123;
      stan::model::assign(gq_complex_array, foo6(gq_r, pstream__),
        "assigning variable gq_complex_array");
      current_statement__ = 124;
      stan::model::assign(gq_complex_array,
        foo7(stan::model::deep_copy(gq_complex_array), pstream__),
        "assigning variable gq_complex_array");
      current_statement__ = 125;
      gq_r = foo8(gq_complex_array_2d, pstream__);
      current_statement__ = 126;
      stan::model::assign(gq_complex_array_2d, foo9(gq_r, pstream__),
        "assigning variable gq_complex_array_2d");
      current_statement__ = 127;
      stan::model::assign(gq_complex_array_2d,
        foo10(stan::model::deep_copy(gq_complex_array_2d), pstream__),
        "assigning variable gq_complex_array_2d");
      std::complex<double> z =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      z = stan::math::to_complex(1, 2);
      std::complex<double> y =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      y = stan::math::to_complex(3, 4);
      std::vector<int> i_arr =
        std::vector<int>(0, std::numeric_limits<int>::min());
      std::vector<int> i_arr_1 =
        std::vector<int>(1, std::numeric_limits<int>::min());
      current_statement__ = 128;
      gq_complex = (z + y);
      current_statement__ = 129;
      gq_complex = (z + gq_r);
      current_statement__ = 130;
      gq_complex = (gq_r + z);
      current_statement__ = 131;
      gq_complex = (z + gq_i);
      current_statement__ = 132;
      gq_complex = (gq_i + z);
      current_statement__ = 133;
      gq_complex = (d_complex + p_complex);
      current_statement__ = 134;
      gq_complex = (d_complex + d_r);
      current_statement__ = 135;
      gq_complex = (d_complex + p_r);
      current_statement__ = 136;
      gq_complex = (d_r + p_complex);
      current_statement__ = 137;
      gq_complex = (p_complex + p_r);
      current_statement__ = 138;
      gq_complex = (d_complex + gq_i);
      current_statement__ = 139;
      gq_complex = (gq_i + p_complex);
      current_statement__ = 140;
      gq_complex = (z - y);
      current_statement__ = 141;
      gq_complex = (z - gq_r);
      current_statement__ = 142;
      gq_complex = (gq_r - z);
      current_statement__ = 143;
      gq_complex = (z - gq_i);
      current_statement__ = 144;
      gq_complex = (gq_i - z);
      current_statement__ = 145;
      gq_complex = (d_complex - p_complex);
      current_statement__ = 146;
      gq_complex = (d_complex - d_r);
      current_statement__ = 147;
      gq_complex = (d_complex - p_r);
      current_statement__ = 148;
      gq_complex = (d_r - p_complex);
      current_statement__ = 149;
      gq_complex = (p_complex - p_r);
      current_statement__ = 150;
      gq_complex = (d_complex - gq_i);
      current_statement__ = 151;
      gq_complex = (gq_i - p_complex);
      current_statement__ = 152;
      gq_complex = (z * y);
      current_statement__ = 153;
      gq_complex = (z * gq_r);
      current_statement__ = 154;
      gq_complex = (gq_r * z);
      current_statement__ = 155;
      gq_complex = (z * gq_i);
      current_statement__ = 156;
      gq_complex = (gq_i * z);
      current_statement__ = 157;
      gq_complex = (d_complex * p_complex);
      current_statement__ = 158;
      gq_complex = (d_complex * d_r);
      current_statement__ = 159;
      gq_complex = (d_complex * p_r);
      current_statement__ = 160;
      gq_complex = (d_r * p_complex);
      current_statement__ = 161;
      gq_complex = (p_complex * p_r);
      current_statement__ = 162;
      gq_complex = (d_complex * gq_i);
      current_statement__ = 163;
      gq_complex = (gq_i * p_complex);
      current_statement__ = 164;
      gq_complex = (z / y);
      current_statement__ = 165;
      gq_complex = (z / gq_r);
      current_statement__ = 166;
      gq_complex = (gq_r / z);
      current_statement__ = 167;
      gq_complex = (z / gq_i);
      current_statement__ = 168;
      gq_complex = (gq_i / z);
      current_statement__ = 169;
      gq_complex = (d_complex / p_complex);
      current_statement__ = 170;
      gq_complex = (d_complex / d_r);
      current_statement__ = 171;
      gq_complex = (d_complex / p_r);
      current_statement__ = 172;
      gq_complex = (d_r / p_complex);
      current_statement__ = 173;
      gq_complex = (p_complex / p_r);
      current_statement__ = 174;
      gq_complex = (d_complex / gq_i);
      current_statement__ = 175;
      gq_complex = (gq_i / p_complex);
      current_statement__ = 176;
      gq_complex = (d_complex / p_complex);
      current_statement__ = 177;
      gq_complex = stan::math::pow(z, y);
      current_statement__ = 178;
      gq_complex = stan::math::pow(z, gq_r);
      current_statement__ = 179;
      gq_complex = stan::math::pow(gq_r, z);
      current_statement__ = 180;
      gq_complex = stan::math::pow(z, gq_i);
      current_statement__ = 181;
      gq_complex = stan::math::pow(gq_i, z);
      current_statement__ = 182;
      gq_complex = stan::math::pow(d_complex, p_complex);
      current_statement__ = 183;
      gq_complex = stan::math::pow(d_complex, d_r);
      current_statement__ = 184;
      gq_complex = stan::math::pow(d_complex, p_r);
      current_statement__ = 185;
      gq_complex = stan::math::pow(d_r, p_complex);
      current_statement__ = 186;
      gq_complex = stan::math::pow(p_complex, p_r);
      current_statement__ = 187;
      gq_complex = stan::math::pow(d_complex, gq_i);
      current_statement__ = 188;
      gq_complex = stan::math::pow(gq_i, p_complex);
      current_statement__ = 189;
      gq_complex = -(z);
      current_statement__ = 190;
      gq_complex = stan::math::to_complex(-(gq_r), 0);
      current_statement__ = 191;
      gq_complex = stan::math::to_complex(-(gq_i), 0);
      current_statement__ = 192;
      gq_complex = -(d_complex);
      current_statement__ = 193;
      gq_complex = stan::math::to_complex(-(d_r), 0);
      current_statement__ = 194;
      gq_complex = -(p_complex);
      current_statement__ = 195;
      gq_complex = stan::math::to_complex(-(p_r), 0);
      current_statement__ = 196;
      gq_complex = (gq_i ? z : y);
      current_statement__ = 197;
      gq_complex = (gq_i ? p_complex : z);
      current_statement__ = 198;
      gq_complex = (gq_i ? d_complex : z);
      current_statement__ = 199;
      gq_i = stan::math::logical_eq(z, z);
      current_statement__ = 200;
      gq_i = stan::math::logical_eq(z, gq_r);
      current_statement__ = 201;
      gq_i = stan::math::logical_eq(z, gq_i);
      current_statement__ = 202;
      gq_i = stan::math::logical_eq(p_complex, z);
      current_statement__ = 203;
      gq_i = stan::math::logical_eq(d_complex, z);
      current_statement__ = 204;
      gq_i = stan::math::logical_eq(p_complex, d_complex);
      current_statement__ = 205;
      gq_i = stan::math::logical_eq(p_complex, p_r);
      current_statement__ = 206;
      gq_i = stan::math::logical_eq(d_complex, d_r);
      current_statement__ = 207;
      gq_i = stan::math::logical_eq(p_r, d_complex);
      current_statement__ = 208;
      gq_i = stan::math::logical_eq(p_complex, d_r);
      current_statement__ = 209;
      gq_i = stan::math::logical_neq(z, z);
      current_statement__ = 210;
      gq_i = stan::math::logical_neq(z, gq_r);
      current_statement__ = 211;
      gq_i = stan::math::logical_neq(z, gq_i);
      current_statement__ = 212;
      gq_i = stan::math::logical_neq(p_complex, z);
      current_statement__ = 213;
      gq_i = stan::math::logical_neq(d_complex, z);
      current_statement__ = 214;
      gq_i = stan::math::logical_neq(p_complex, d_complex);
      current_statement__ = 215;
      gq_i = stan::math::logical_neq(p_complex, p_r);
      current_statement__ = 216;
      gq_i = stan::math::logical_neq(d_complex, d_r);
      current_statement__ = 217;
      gq_i = stan::math::logical_neq(p_r, d_complex);
      current_statement__ = 218;
      gq_i = stan::math::logical_neq(p_complex, d_r);
      current_statement__ = 219;
      gq_r = stan::math::abs(z);
      current_statement__ = 220;
      gq_r = stan::math::abs(p_complex);
      current_statement__ = 221;
      gq_r = stan::math::abs(d_complex);
      current_statement__ = 222;
      gq_complex = stan::math::acos(z);
      current_statement__ = 223;
      gq_complex = stan::math::acos(p_complex);
      current_statement__ = 224;
      gq_complex = stan::math::acos(d_complex);
      current_statement__ = 225;
      gq_complex = stan::math::acosh(z);
      current_statement__ = 226;
      gq_complex = stan::math::acosh(p_complex);
      current_statement__ = 227;
      gq_complex = stan::math::acosh(d_complex);
      current_statement__ = 228;
      gq_complex = stan::math::asin(z);
      current_statement__ = 229;
      gq_complex = stan::math::asin(p_complex);
      current_statement__ = 230;
      gq_complex = stan::math::asin(d_complex);
      current_statement__ = 231;
      gq_complex = stan::math::asinh(z);
      current_statement__ = 232;
      gq_complex = stan::math::asinh(p_complex);
      current_statement__ = 233;
      gq_complex = stan::math::asinh(d_complex);
      current_statement__ = 234;
      gq_complex = stan::math::atan(z);
      current_statement__ = 235;
      gq_complex = stan::math::atan(p_complex);
      current_statement__ = 236;
      gq_complex = stan::math::atan(d_complex);
      current_statement__ = 237;
      gq_complex = stan::math::atanh(z);
      current_statement__ = 238;
      gq_complex = stan::math::atanh(p_complex);
      current_statement__ = 239;
      gq_complex = stan::math::atanh(d_complex);
      current_statement__ = 240;
      gq_complex = stan::math::conj(z);
      current_statement__ = 241;
      gq_complex = stan::math::conj(p_complex);
      current_statement__ = 242;
      gq_complex = stan::math::conj(d_complex);
      current_statement__ = 243;
      gq_complex = stan::math::cos(z);
      current_statement__ = 244;
      gq_complex = stan::math::cos(p_complex);
      current_statement__ = 245;
      gq_complex = stan::math::cos(d_complex);
      current_statement__ = 246;
      gq_complex = stan::math::cosh(z);
      current_statement__ = 247;
      gq_complex = stan::math::cosh(p_complex);
      current_statement__ = 248;
      gq_complex = stan::math::cosh(d_complex);
      current_statement__ = 249;
      stan::model::assign(i_arr, stan::math::dims(z),
        "assigning variable i_arr");
      current_statement__ = 250;
      stan::model::assign(i_arr, stan::math::dims(p_complex),
        "assigning variable i_arr");
      current_statement__ = 251;
      stan::model::assign(i_arr, stan::math::dims(d_complex),
        "assigning variable i_arr");
      current_statement__ = 252;
      stan::model::assign(i_arr_1, stan::math::dims(gq_complex_array),
        "assigning variable i_arr_1");
      current_statement__ = 253;
      stan::model::assign(i_arr_1, stan::math::dims(p_complex_array),
        "assigning variable i_arr_1");
      current_statement__ = 254;
      stan::model::assign(i_arr_1, stan::math::dims(d_complex_array),
        "assigning variable i_arr_1");
      current_statement__ = 255;
      gq_complex = stan::math::exp(z);
      current_statement__ = 256;
      gq_complex = stan::math::exp(p_complex);
      current_statement__ = 257;
      gq_complex = stan::math::exp(d_complex);
      current_statement__ = 258;
      gq_r = stan::math::get_imag(z);
      current_statement__ = 259;
      gq_r = stan::math::get_imag(p_complex);
      current_statement__ = 260;
      gq_r = stan::math::get_imag(d_complex);
      current_statement__ = 261;
      gq_r = stan::math::get_real(z);
      current_statement__ = 262;
      gq_r = stan::math::get_real(p_complex);
      current_statement__ = 263;
      gq_r = stan::math::get_real(d_complex);
      current_statement__ = 264;
      stan::model::assign(gq_complex_array,
        stan::math::head(stan::model::deep_copy(gq_complex_array), 1),
        "assigning variable gq_complex_array");
      current_statement__ = 265;
      stan::model::assign(gq_complex_array,
        stan::math::head(p_complex_array, 1),
        "assigning variable gq_complex_array");
      current_statement__ = 266;
      stan::model::assign(gq_complex_array,
        stan::math::head(d_complex_array, 1),
        "assigning variable gq_complex_array");
      current_statement__ = 267;
      gq_complex = stan::math::log(z);
      current_statement__ = 268;
      gq_complex = stan::math::log(p_complex);
      current_statement__ = 269;
      gq_complex = stan::math::log(d_complex);
      current_statement__ = 270;
      gq_complex = stan::math::log10(z);
      current_statement__ = 271;
      gq_complex = stan::math::log10(p_complex);
      current_statement__ = 272;
      gq_complex = stan::math::log10(d_complex);
      current_statement__ = 273;
      gq_r = stan::math::norm(z);
      current_statement__ = 274;
      gq_r = stan::math::norm(p_complex);
      current_statement__ = 275;
      gq_r = stan::math::norm(d_complex);
      current_statement__ = 276;
      gq_i = stan::math::num_elements(gq_complex_array);
      current_statement__ = 277;
      gq_i = stan::math::num_elements(p_complex_array);
      current_statement__ = 278;
      gq_i = stan::math::num_elements(d_complex_array);
      current_statement__ = 279;
      gq_complex = stan::math::polar(gq_r, gq_r);
      current_statement__ = 280;
      gq_complex = stan::math::polar(gq_i, gq_i);
      current_statement__ = 281;
      gq_complex = stan::math::polar(gq_r, gq_i);
      current_statement__ = 282;
      gq_complex = stan::math::polar(gq_i, gq_r);
      current_statement__ = 283;
      gq_complex = stan::math::polar(p_r, gq_r);
      current_statement__ = 284;
      gq_complex = stan::math::polar(d_r, gq_r);
      current_statement__ = 285;
      gq_complex = stan::math::polar(p_r, d_r);
      current_statement__ = 286;
      gq_complex = stan::math::pow(z, stan::math::to_complex(gq_r, 0));
      current_statement__ = 287;
      gq_complex = stan::math::pow(z, stan::math::to_complex(gq_i, 0));
      current_statement__ = 288;
      gq_complex = stan::math::pow(z, z);
      current_statement__ = 289;
      gq_complex = stan::math::pow(p_complex, stan::math::to_complex(p_r, 0));
      current_statement__ = 290;
      gq_complex = stan::math::pow(p_complex, stan::math::to_complex(d_r, 0));
      current_statement__ = 291;
      gq_complex = stan::math::pow(p_complex, stan::math::to_complex(gq_r, 0));
      current_statement__ = 292;
      gq_complex = stan::math::pow(p_complex, z);
      current_statement__ = 293;
      gq_complex = stan::math::pow(p_complex, d_complex);
      current_statement__ = 294;
      gq_complex = stan::math::pow(p_complex, p_complex);
      current_statement__ = 295;
      gq_complex = stan::math::pow(d_complex, stan::math::to_complex(p_r, 0));
      current_statement__ = 296;
      gq_complex = stan::math::pow(d_complex, stan::math::to_complex(d_r, 0));
      current_statement__ = 297;
      gq_complex = stan::math::pow(d_complex, stan::math::to_complex(gq_r, 0));
      current_statement__ = 298;
      gq_complex = stan::math::pow(d_complex, z);
      current_statement__ = 299;
      gq_complex = stan::math::pow(d_complex, d_complex);
      current_statement__ = 300;
      gq_complex = stan::math::pow(d_complex, p_complex);
      current_statement__ = 301;
      gq_complex = stan::math::proj(z);
      current_statement__ = 302;
      gq_complex = stan::math::proj(p_complex);
      current_statement__ = 303;
      gq_complex = stan::math::proj(d_complex);
      current_statement__ = 304;
      stan::model::assign(gq_complex_array,
        stan::math::reverse(stan::model::deep_copy(gq_complex_array)),
        "assigning variable gq_complex_array");
      current_statement__ = 305;
      stan::model::assign(gq_complex_array,
        stan::math::reverse(p_complex_array),
        "assigning variable gq_complex_array");
      current_statement__ = 306;
      stan::model::assign(gq_complex_array,
        stan::math::reverse(d_complex_array),
        "assigning variable gq_complex_array");
      current_statement__ = 307;
      gq_complex = stan::math::sin(z);
      current_statement__ = 308;
      gq_complex = stan::math::sin(p_complex);
      current_statement__ = 309;
      gq_complex = stan::math::sin(d_complex);
      current_statement__ = 310;
      gq_complex = stan::math::sinh(z);
      current_statement__ = 311;
      gq_complex = stan::math::sinh(p_complex);
      current_statement__ = 312;
      gq_complex = stan::math::sinh(d_complex);
      current_statement__ = 313;
      gq_i = stan::math::size(gq_complex_array);
      current_statement__ = 314;
      gq_i = stan::math::size(p_complex_array);
      current_statement__ = 315;
      gq_i = stan::math::size(d_complex_array);
      current_statement__ = 316;
      gq_complex = stan::math::sqrt(z);
      current_statement__ = 317;
      gq_complex = stan::math::sqrt(p_complex);
      current_statement__ = 318;
      gq_complex = stan::math::sqrt(d_complex);
      current_statement__ = 319;
      stan::model::assign(gq_complex_array,
        stan::math::tail(stan::model::deep_copy(gq_complex_array), 1),
        "assigning variable gq_complex_array");
      current_statement__ = 320;
      stan::model::assign(gq_complex_array,
        stan::math::tail(p_complex_array, 1),
        "assigning variable gq_complex_array");
      current_statement__ = 321;
      stan::model::assign(gq_complex_array,
        stan::math::tail(d_complex_array, 1),
        "assigning variable gq_complex_array");
      current_statement__ = 322;
      gq_complex = stan::math::tan(z);
      current_statement__ = 323;
      gq_complex = stan::math::tan(p_complex);
      current_statement__ = 324;
      gq_complex = stan::math::tan(d_complex);
      current_statement__ = 325;
      gq_complex = stan::math::tanh(z);
      current_statement__ = 326;
      gq_complex = stan::math::tanh(p_complex);
      current_statement__ = 327;
      gq_complex = stan::math::tanh(d_complex);
      current_statement__ = 328;
      gq_complex = stan::math::to_complex();
      current_statement__ = 329;
      gq_complex = stan::math::to_complex(gq_r, gq_r);
      current_statement__ = 330;
      gq_complex = stan::math::to_complex(gq_i, gq_i);
      current_statement__ = 331;
      gq_complex = stan::math::to_complex(gq_r, gq_i);
      current_statement__ = 332;
      gq_complex = stan::math::to_complex(gq_i, gq_r);
      current_statement__ = 333;
      gq_complex = stan::math::to_complex(gq_r);
      current_statement__ = 334;
      gq_complex = stan::math::to_complex(gq_i);
      current_statement__ = 335;
      gq_complex = stan::math::to_complex(p_r, gq_r);
      current_statement__ = 336;
      gq_complex = stan::math::to_complex(p_r, d_r);
      current_statement__ = 337;
      gq_complex = stan::math::to_complex(d_r, gq_r);
      current_statement__ = 338;
      gq_complex = stan::math::to_complex(p_r);
      current_statement__ = 339;
      gq_complex = stan::math::to_complex(d_r);
      std::complex<double> zi =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 18;
      zi = (1 + stan::math::to_complex(0, 3.14));
      current_statement__ = 340;
      zi = (zi * stan::math::to_complex(0, 0));
      std::complex<double> yi =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      yi = ((stan::math::to_complex(0, 1.1) +
        stan::math::to_complex(0.0, 2.2)) + stan::math::to_complex());
      double x = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 20;
      x = stan::math::get_real((stan::math::to_complex(0, 3) -
            stan::math::to_complex(0, 40e-3)));
      out__.write(gq_i);
      out__.write(gq_r);
      out__.write(gq_complex);
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        out__.write(gq_complex_array[(sym1__ - 1)]);
      }
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          out__.write(gq_complex_array_2d[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(z);
      out__.write(y);
      out__.write(i_arr);
      out__.write(i_arr_1);
      out__.write(zi);
      out__.write(yi);
      out__.write(x);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ p_r = DUMMY_VAR__;
      current_statement__ = 1;
      p_r = in__.read<local_scalar_t__>();
      out__.write(p_r);
      std::complex<local_scalar_t__> p_complex =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 2;
      p_complex = in__.read<std::complex<local_scalar_t__>>();
      out__.write(p_complex);
      std::vector<std::complex<local_scalar_t__>> p_complex_array =
        std::vector<std::complex<local_scalar_t__>>(2,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        p_complex_array[(sym1__ -
          1)] = in__.read<std::complex<local_scalar_t__>>();
      }
      out__.write(p_complex_array);
      std::vector<std::vector<std::complex<local_scalar_t__>>>
        p_complex_array_2d =
        std::vector<std::vector<std::complex<local_scalar_t__>>>(2,
          std::vector<std::complex<local_scalar_t__>>(3,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 4;
          p_complex_array_2d[(sym2__ - 1)][(sym1__ -
            1)] = in__.read<std::complex<local_scalar_t__>>();
        }
      }
      out__.write(p_complex_array_2d);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "p_r", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "p_complex",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "p_complex_array",
        "double",
        std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization",
        "p_complex_array_2d", "double",
        std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3),
          static_cast<size_t>(2)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ p_r = DUMMY_VAR__;
      current_statement__ = 1;
      p_r = context__.vals_r("p_r")[(1 - 1)];
      out__.write(p_r);
      std::complex<local_scalar_t__> p_complex =
        std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 2;
      p_complex = context__.vals_c("p_complex")[(1 - 1)];
      out__.write(p_complex);
      std::vector<std::complex<local_scalar_t__>> p_complex_array =
        std::vector<std::complex<local_scalar_t__>>(2,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      {
        std::vector<std::complex<local_scalar_t__>> p_complex_array_flat__;
        current_statement__ = 3;
        p_complex_array_flat__ = context__.vals_c("p_complex_array");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(p_complex_array, p_complex_array_flat__[(pos__
            - 1)], "assigning variable p_complex_array",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(p_complex_array);
      std::vector<std::vector<std::complex<local_scalar_t__>>>
        p_complex_array_2d =
        std::vector<std::vector<std::complex<local_scalar_t__>>>(2,
          std::vector<std::complex<local_scalar_t__>>(3,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      {
        std::vector<std::complex<local_scalar_t__>> p_complex_array_2d_flat__;
        current_statement__ = 4;
        p_complex_array_2d_flat__ = context__.vals_c("p_complex_array_2d");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            stan::model::assign(p_complex_array_2d,
              p_complex_array_2d_flat__[(pos__ - 1)],
              "assigning variable p_complex_array_2d",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(p_complex_array_2d);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"p_r", "p_complex", "p_complex_array",
                "p_complex_array_2d"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"tp_r", "tp_complex", "tp_complex_array", "tp_complex_array_2d"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"gq_i", "gq_r", "gq_complex", "gq_complex_array",
             "gq_complex_array_2d", "z", "y", "i_arr", "i_arr_1", "zi", "yi",
             "x"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(2),
                  static_cast<size_t>(2)},
                std::vector<size_t>{static_cast<size_t>(2),
                  static_cast<size_t>(3), static_cast<size_t>(2)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2),
               static_cast<size_t>(3), static_cast<size_t>(2)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2),
               static_cast<size_t>(3), static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(0)},
             std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "p_r");
    param_names__.emplace_back(std::string() + "p_complex" + '.' + "real");
    param_names__.emplace_back(std::string() + "p_complex" + '.' + "imag");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "p_complex_array" + '.' +
        std::to_string(sym1__) + '.' + "real");
      param_names__.emplace_back(std::string() + "p_complex_array" + '.' +
        std::to_string(sym1__) + '.' + "imag");
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
        param_names__.emplace_back(std::string() + "p_complex_array_2d" + '.'
          + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
          "real");
        param_names__.emplace_back(std::string() + "p_complex_array_2d" + '.'
          + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
          "imag");
      }
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "tp_r");
      param_names__.emplace_back(std::string() + "tp_complex" + '.' + "real");
      param_names__.emplace_back(std::string() + "tp_complex" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "tp_complex_array" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "tp_complex_array" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          param_names__.emplace_back(std::string() + "tp_complex_array_2d" +
            '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.'
            + "real");
          param_names__.emplace_back(std::string() + "tp_complex_array_2d" +
            '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.'
            + "imag");
        }
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "gq_i");
      param_names__.emplace_back(std::string() + "gq_r");
      param_names__.emplace_back(std::string() + "gq_complex" + '.' + "real");
      param_names__.emplace_back(std::string() + "gq_complex" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "gq_complex_array" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "gq_complex_array" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          param_names__.emplace_back(std::string() + "gq_complex_array_2d" +
            '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.'
            + "real");
          param_names__.emplace_back(std::string() + "gq_complex_array_2d" +
            '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.'
            + "imag");
        }
      }
      param_names__.emplace_back(std::string() + "z" + '.' + "real");
      param_names__.emplace_back(std::string() + "z" + '.' + "imag");
      param_names__.emplace_back(std::string() + "y" + '.' + "real");
      param_names__.emplace_back(std::string() + "y" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 0; ++sym1__) {
        param_names__.emplace_back(std::string() + "i_arr" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "i_arr_1" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "zi" + '.' + "real");
      param_names__.emplace_back(std::string() + "zi" + '.' + "imag");
      param_names__.emplace_back(std::string() + "yi" + '.' + "real");
      param_names__.emplace_back(std::string() + "yi" + '.' + "imag");
      param_names__.emplace_back(std::string() + "x");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "p_r");
    param_names__.emplace_back(std::string() + "p_complex" + '.' + "real");
    param_names__.emplace_back(std::string() + "p_complex" + '.' + "imag");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "p_complex_array" + '.' +
        std::to_string(sym1__) + '.' + "real");
      param_names__.emplace_back(std::string() + "p_complex_array" + '.' +
        std::to_string(sym1__) + '.' + "imag");
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
        param_names__.emplace_back(std::string() + "p_complex_array_2d" + '.'
          + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
          "real");
        param_names__.emplace_back(std::string() + "p_complex_array_2d" + '.'
          + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
          "imag");
      }
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "tp_r");
      param_names__.emplace_back(std::string() + "tp_complex" + '.' + "real");
      param_names__.emplace_back(std::string() + "tp_complex" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "tp_complex_array" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "tp_complex_array" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          param_names__.emplace_back(std::string() + "tp_complex_array_2d" +
            '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.'
            + "real");
          param_names__.emplace_back(std::string() + "tp_complex_array_2d" +
            '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.'
            + "imag");
        }
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "gq_i");
      param_names__.emplace_back(std::string() + "gq_r");
      param_names__.emplace_back(std::string() + "gq_complex" + '.' + "real");
      param_names__.emplace_back(std::string() + "gq_complex" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "gq_complex_array" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "gq_complex_array" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          param_names__.emplace_back(std::string() + "gq_complex_array_2d" +
            '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.'
            + "real");
          param_names__.emplace_back(std::string() + "gq_complex_array_2d" +
            '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.'
            + "imag");
        }
      }
      param_names__.emplace_back(std::string() + "z" + '.' + "real");
      param_names__.emplace_back(std::string() + "z" + '.' + "imag");
      param_names__.emplace_back(std::string() + "y" + '.' + "real");
      param_names__.emplace_back(std::string() + "y" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 0; ++sym1__) {
        param_names__.emplace_back(std::string() + "i_arr" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "i_arr_1" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "zi" + '.' + "real");
      param_names__.emplace_back(std::string() + "zi" + '.' + "imag");
      param_names__.emplace_back(std::string() + "yi" + '.' + "real");
      param_names__.emplace_back(std::string() + "yi" + '.' + "imag");
      param_names__.emplace_back(std::string() + "x");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"p_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"parameters\"},{\"name\":\"p_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"parameters\"},{\"name\":\"p_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"parameters\"},{\"name\":\"tp_r\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"gq_i\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_r\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"generated_quantities\"},{\"name\":\"z\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"y\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"i_arr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(0) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"i_arr_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"zi\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"yi\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"x\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"p_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"parameters\"},{\"name\":\"p_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"parameters\"},{\"name\":\"p_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"parameters\"},{\"name\":\"tp_r\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"gq_i\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_r\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"generated_quantities\"},{\"name\":\"z\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"y\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"i_arr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(0) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"i_arr_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"zi\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"yi\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"x\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 2) + (2 * 2)) + (2 * (3 * 2)));
    const size_t num_transformed = emit_transformed_parameters * ((((1 + 2) +
      (2 * 2)) + (2 * (3 * 2))));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((1 + 1) + 2) + (2 * 2)) + (2 * (3 * 2))) + 2) + 2) + 0) + 1)
      + 2) + 2) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 2) + (2 * 2)) + (2 * (3 * 2)));
    const size_t num_transformed = emit_transformed_parameters * ((((1 + 2) +
      (2 * 2)) + (2 * (3 * 2))));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((1 + 1) + 2) + (2 * 2)) + (2 * (3 * 2))) + 2) + 2) + 0) + 1)
      + 2) + 2) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = complex_scalar_model_namespace::complex_scalar_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return complex_scalar_model_namespace::profiles__;
}
#endif
  $ ../../../../../../install/default/bin/stanc --print-cpp complex_vectors.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace complex_vectors_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 6> locations_array__ =
  {" (found before start of program)",
  " (in 'complex_vectors.stan', line 4, column 3 to column 37)",
  " (in 'complex_vectors.stan', line 5, column 3 to column 42)",
  " (in 'complex_vectors.stan', line 6, column 3 to column 27)",
  " (in 'complex_vectors.stan', line 7, column 3 to column 32)",
  " (in 'complex_vectors.stan', line 9, column 3 to column 44)"};
class complex_vectors_model final : public model_base_crtp<complex_vectors_model> {
 private:
  
 public:
  ~complex_vectors_model() {}
  complex_vectors_model(stan::io::var_context& context__, unsigned int
                        random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "complex_vectors_model_namespace::complex_vectors_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "complex_vectors_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "complex_vectors_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> z =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(3,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 1;
      stan::model::assign(z,
        (Eigen::Matrix<std::complex<double>,-1,1>(3) <<
                                                       stan::math::to_complex(
                                                         3, 0),
                                                       stan::math::to_complex(
                                                         0, 4),
                                                       stan::math::to_complex(
                                                         4, 0)).finished(),
        "assigning variable z");
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> zs =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(2, 2,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 2;
      stan::model::assign(zs,
        stan::math::to_matrix(
          std::vector<Eigen::Matrix<std::complex<double>,1,-1>>{(Eigen::Matrix<std::complex<double>,1,-1>(2) <<
                                                                   stan::math::to_complex(
                                                                    1, 0),
                                                                  stan::math::to_complex(
                                                                    2, 0)).finished(),
            (Eigen::Matrix<std::complex<double>,1,-1>(2) <<
                                                           stan::math::to_complex(
                                                             3, 0),
                                                           stan::math::to_complex(
                                                             4, 0)).finished()}),
        "assigning variable zs");
      Eigen::Matrix<local_scalar_t__,1,-1> x =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(x,
        (Eigen::Matrix<double,1,-1>(2) << 1, 2).finished(),
        "assigning variable x");
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> zx =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(2,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 4;
      stan::model::assign(zx, x, "assigning variable zx");
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> cm =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(2, 2,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 5;
      stan::model::assign(cm,
        stan::math::to_matrix(
          std::vector<Eigen::Matrix<std::complex<double>,1,-1>>{(Eigen::Matrix<std::complex<double>,1,-1>(2) <<
                                                                   stan::math::to_complex(
                                                                    1, 0),
                                                                  stan::math::to_complex(
                                                                    2, 0)).finished(),
            (Eigen::Matrix<std::complex<double>,1,-1>(2) <<
                                                           stan::math::to_complex(
                                                             3, 0),
                                                           stan::math::to_complex(
                                                             0, 4)).finished()}),
        "assigning variable cm");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "complex_vectors_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> z =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(3,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 1;
      stan::model::assign(z,
        (Eigen::Matrix<std::complex<double>,-1,1>(3) <<
                                                       stan::math::to_complex(
                                                         3, 0),
                                                       stan::math::to_complex(
                                                         0, 4),
                                                       stan::math::to_complex(
                                                         4, 0)).finished(),
        "assigning variable z");
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> zs =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(2, 2,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 2;
      stan::model::assign(zs,
        stan::math::to_matrix(
          std::vector<Eigen::Matrix<std::complex<double>,1,-1>>{(Eigen::Matrix<std::complex<double>,1,-1>(2) <<
                                                                   stan::math::to_complex(
                                                                    1, 0),
                                                                  stan::math::to_complex(
                                                                    2, 0)).finished(),
            (Eigen::Matrix<std::complex<double>,1,-1>(2) <<
                                                           stan::math::to_complex(
                                                             3, 0),
                                                           stan::math::to_complex(
                                                             4, 0)).finished()}),
        "assigning variable zs");
      Eigen::Matrix<local_scalar_t__,1,-1> x =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(x,
        (Eigen::Matrix<double,1,-1>(2) << 1, 2).finished(),
        "assigning variable x");
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> zx =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(2,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 4;
      stan::model::assign(zx, x, "assigning variable zx");
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> cm =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(2, 2,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 5;
      stan::model::assign(cm,
        stan::math::to_matrix(
          std::vector<Eigen::Matrix<std::complex<double>,1,-1>>{(Eigen::Matrix<std::complex<double>,1,-1>(2) <<
                                                                   stan::math::to_complex(
                                                                    1, 0),
                                                                  stan::math::to_complex(
                                                                    2, 0)).finished(),
            (Eigen::Matrix<std::complex<double>,1,-1>(2) <<
                                                           stan::math::to_complex(
                                                             3, 0),
                                                           stan::math::to_complex(
                                                             0, 4)).finished()}),
        "assigning variable cm");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "complex_vectors_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<std::complex<double>,-1,1> z =
        Eigen::Matrix<std::complex<double>,-1,1>::Constant(3,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<std::complex<double>,-1,-1> zs =
        Eigen::Matrix<std::complex<double>,-1,-1>::Constant(2, 2,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,1,-1> x =
        Eigen::Matrix<double,1,-1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<std::complex<double>,1,-1> zx =
        Eigen::Matrix<std::complex<double>,1,-1>::Constant(2,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<std::complex<double>,-1,-1> cm =
        Eigen::Matrix<std::complex<double>,-1,-1>::Constant(2, 2,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 1;
      stan::model::assign(z,
        (Eigen::Matrix<std::complex<double>,-1,1>(3) <<
                                                       stan::math::to_complex(
                                                         3, 0),
                                                       stan::math::to_complex(
                                                         0, 4),
                                                       stan::math::to_complex(
                                                         4, 0)).finished(),
        "assigning variable z");
      current_statement__ = 2;
      stan::model::assign(zs,
        stan::math::to_matrix(
          std::vector<Eigen::Matrix<std::complex<double>,1,-1>>{(Eigen::Matrix<std::complex<double>,1,-1>(2) <<
                                                                   stan::math::to_complex(
                                                                    1, 0),
                                                                  stan::math::to_complex(
                                                                    2, 0)).finished(),
            (Eigen::Matrix<std::complex<double>,1,-1>(2) <<
                                                           stan::math::to_complex(
                                                             3, 0),
                                                           stan::math::to_complex(
                                                             4, 0)).finished()}),
        "assigning variable zs");
      current_statement__ = 3;
      stan::model::assign(x,
        (Eigen::Matrix<double,1,-1>(2) << 1, 2).finished(),
        "assigning variable x");
      current_statement__ = 4;
      stan::model::assign(zx, x, "assigning variable zx");
      current_statement__ = 5;
      stan::model::assign(cm,
        stan::math::to_matrix(
          std::vector<Eigen::Matrix<std::complex<double>,1,-1>>{(Eigen::Matrix<std::complex<double>,1,-1>(2) <<
                                                                   stan::math::to_complex(
                                                                    1, 0),
                                                                  stan::math::to_complex(
                                                                    2, 0)).finished(),
            (Eigen::Matrix<std::complex<double>,1,-1>(2) <<
                                                           stan::math::to_complex(
                                                             3, 0),
                                                           stan::math::to_complex(
                                                             0, 4)).finished()}),
        "assigning variable cm");
      if (emit_transformed_parameters__) {
        out__.write(z);
        out__.write(zs);
        out__.write(x);
        out__.write(zx);
        out__.write(cm);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"z", "zs", "x", "zx", "cm"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(3),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2),
               static_cast<size_t>(2), static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2),
               static_cast<size_t>(2)},
             std::vector<size_t>{static_cast<size_t>(2),
               static_cast<size_t>(2), static_cast<size_t>(2)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "z" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "z" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          param_names__.emplace_back(std::string() + "zs" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "zs" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "x" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "zx" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "zx" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          param_names__.emplace_back(std::string() + "cm" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "cm" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "z" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "z" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          param_names__.emplace_back(std::string() + "zs" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "zs" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "x" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        param_names__.emplace_back(std::string() + "zx" + '.' +
          std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "zx" + '.' +
          std::to_string(sym1__) + '.' + "imag");
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          param_names__.emplace_back(std::string() + "cm" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "real");
          param_names__.emplace_back(std::string() + "cm" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' +
            "imag");
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"z\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"zs\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"zx\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cm\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"z\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"zs\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"zx\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cm\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * ((((((3 * 2)
      + (2 * (2 * 2))) + 2) + (2 * 2)) + (2 * (2 * 2))));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * ((((((3 * 2)
      + (2 * (2 * 2))) + 2) + (2 * 2)) + (2 * (2 * 2))));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = complex_vectors_model_namespace::complex_vectors_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return complex_vectors_model_namespace::profiles__;
}
#endif
  $ ../../../../../../install/default/bin/stanc --print-cpp user_function_templating.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace user_function_templating_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 31> locations_array__ =
  {" (found before start of program)",
  " (in 'user_function_templating.stan', line 32, column 17 to column 18)",
  " (in 'user_function_templating.stan', line 32, column 19 to column 20)",
  " (in 'user_function_templating.stan', line 32, column 2 to column 24)",
  " (in 'user_function_templating.stan', line 33, column 2 to column 13)",
  " (in 'user_function_templating.stan', line 34, column 17 to column 18)",
  " (in 'user_function_templating.stan', line 34, column 2 to column 22)",
  " (in 'user_function_templating.stan', line 35, column 2 to column 13)",
  " (in 'user_function_templating.stan', line 36, column 21 to column 22)",
  " (in 'user_function_templating.stan', line 36, column 2 to column 26)",
  " (in 'user_function_templating.stan', line 37, column 2 to column 13)",
  " (in 'user_function_templating.stan', line 38, column 26 to column 27)",
  " (in 'user_function_templating.stan', line 38, column 28 to column 29)",
  " (in 'user_function_templating.stan', line 38, column 2 to column 46)",
  " (in 'user_function_templating.stan', line 28, column 2 to column 10)",
  " (in 'user_function_templating.stan', line 3, column 4 to column 13)",
  " (in 'user_function_templating.stan', line 2, column 38 to line 4, column 3)",
  " (in 'user_function_templating.stan', line 6, column 4 to column 35)",
  " (in 'user_function_templating.stan', line 5, column 23 to line 7, column 3)",
  " (in 'user_function_templating.stan', line 9, column 4 to column 13)",
  " (in 'user_function_templating.stan', line 8, column 40 to line 10, column 3)",
  " (in 'user_function_templating.stan', line 12, column 4 to column 35)",
  " (in 'user_function_templating.stan', line 11, column 23 to line 13, column 3)",
  " (in 'user_function_templating.stan', line 15, column 4 to column 13)",
  " (in 'user_function_templating.stan', line 14, column 48 to line 16, column 3)",
  " (in 'user_function_templating.stan', line 18, column 4 to column 35)",
  " (in 'user_function_templating.stan', line 17, column 31 to line 19, column 3)",
  " (in 'user_function_templating.stan', line 21, column 4 to column 13)",
  " (in 'user_function_templating.stan', line 20, column 54 to line 22, column 3)",
  " (in 'user_function_templating.stan', line 24, column 4 to column 35)",
  " (in 'user_function_templating.stan', line 23, column 38 to line 25, column 3)"};
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_complex<T0__>>* = nullptr>
Eigen::Matrix<std::complex<stan::promote_args_t<stan::base_type_t<T0__>>>,-1,-1>
foo(const T0__& Z_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
foo(const T0__& A_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_complex<T0__>>* = nullptr>
Eigen::Matrix<std::complex<stan::promote_args_t<stan::base_type_t<T0__>>>,-1,1>
foo(const T0__& Z_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
foo(const T0__& A_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_complex<T0__>>* = nullptr>
Eigen::Matrix<std::complex<stan::promote_args_t<stan::base_type_t<T0__>>>,1,-1>
foo(const T0__& Z_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,1,-1>
foo(const T0__& A_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
std::vector<Eigen::Matrix<std::complex<stan::promote_args_t<T0__>>,-1,-1>>
foo(const std::vector<Eigen::Matrix<std::complex<T0__>,-1,-1>>& Z,
    std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__>,-1,-1>>
foo(const std::vector<Eigen::Matrix<T0__,-1,-1>>& A, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_complex<T0__>>*>
Eigen::Matrix<std::complex<stan::promote_args_t<stan::base_type_t<T0__>>>,-1,-1>
foo(const T0__& Z_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& Z = stan::math::to_ref(Z_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 15;
    return Z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
foo(const T0__& A_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 17;
    std::stringstream errmsg_stream__;
    stan::math::stan_print(&errmsg_stream__, "called the wrong foo");
    throw std::domain_error(errmsg_stream__.str());
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_complex<T0__>>*>
Eigen::Matrix<std::complex<stan::promote_args_t<stan::base_type_t<T0__>>>,-1,1>
foo(const T0__& Z_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& Z = stan::math::to_ref(Z_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 19;
    return Z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
foo(const T0__& A_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 21;
    std::stringstream errmsg_stream__;
    stan::math::stan_print(&errmsg_stream__, "called the wrong foo");
    throw std::domain_error(errmsg_stream__.str());
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_complex<T0__>>*>
Eigen::Matrix<std::complex<stan::promote_args_t<stan::base_type_t<T0__>>>,1,-1>
foo(const T0__& Z_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& Z = stan::math::to_ref(Z_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 23;
    return Z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_row_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,1,-1>
foo(const T0__& A_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 25;
    std::stringstream errmsg_stream__;
    stan::math::stan_print(&errmsg_stream__, "called the wrong foo");
    throw std::domain_error(errmsg_stream__.str());
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
std::vector<Eigen::Matrix<std::complex<stan::promote_args_t<T0__>>,-1,-1>>
foo(const std::vector<Eigen::Matrix<std::complex<T0__>,-1,-1>>& Z,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 27;
    return Z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__>,-1,-1>>
foo(const std::vector<Eigen::Matrix<T0__,-1,-1>>& A, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 29;
    std::stringstream errmsg_stream__;
    stan::math::stan_print(&errmsg_stream__, "called the wrong foo");
    throw std::domain_error(errmsg_stream__.str());
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class user_function_templating_model final : public model_base_crtp<user_function_templating_model> {
 private:
  int N;
 public:
  ~user_function_templating_model() {}
  user_function_templating_model(stan::io::var_context& context__,
                                 unsigned int random_seed__ = 0,
                                 std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "user_function_templating_model_namespace::user_function_templating_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 14;
      N = std::numeric_limits<int>::min();
      current_statement__ = 14;
      N = 3;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "user_function_templating_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "user_function_templating_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 2;
      stan::math::validate_non_negative_index("x", "N", N);
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> x =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 4;
      stan::model::assign(x, foo(stan::model::deep_copy(x), pstream__),
        "assigning variable x");
      current_statement__ = 5;
      stan::math::validate_non_negative_index("y", "N", N);
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> y =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 7;
      stan::model::assign(y, foo(stan::model::deep_copy(y), pstream__),
        "assigning variable y");
      current_statement__ = 8;
      stan::math::validate_non_negative_index("z", "N", N);
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> z =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 10;
      stan::model::assign(z, foo(stan::model::deep_copy(z), pstream__),
        "assigning variable z");
      current_statement__ = 11;
      stan::math::validate_non_negative_index("w", "N", N);
      current_statement__ = 12;
      stan::math::validate_non_negative_index("w", "N", N);
      std::vector<Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>> w =
        std::vector<Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>>(2,
          Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      current_statement__ = 13;
      stan::model::assign(w,
        foo(
          std::vector<Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>>{x,
            x}, pstream__), "assigning variable w");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "user_function_templating_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 2;
      stan::math::validate_non_negative_index("x", "N", N);
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1> x =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 4;
      stan::model::assign(x, foo(stan::model::deep_copy(x), pstream__),
        "assigning variable x");
      current_statement__ = 5;
      stan::math::validate_non_negative_index("y", "N", N);
      Eigen::Matrix<std::complex<local_scalar_t__>,-1,1> y =
        Eigen::Matrix<std::complex<local_scalar_t__>,-1,1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 7;
      stan::model::assign(y, foo(stan::model::deep_copy(y), pstream__),
        "assigning variable y");
      current_statement__ = 8;
      stan::math::validate_non_negative_index("z", "N", N);
      Eigen::Matrix<std::complex<local_scalar_t__>,1,-1> z =
        Eigen::Matrix<std::complex<local_scalar_t__>,1,-1>::Constant(N,
          std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 10;
      stan::model::assign(z, foo(stan::model::deep_copy(z), pstream__),
        "assigning variable z");
      current_statement__ = 11;
      stan::math::validate_non_negative_index("w", "N", N);
      current_statement__ = 12;
      stan::math::validate_non_negative_index("w", "N", N);
      std::vector<Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>> w =
        std::vector<Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>>(2,
          Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>::Constant(N, N,
            std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      current_statement__ = 13;
      stan::model::assign(w,
        foo(
          std::vector<Eigen::Matrix<std::complex<local_scalar_t__>,-1,-1>>{x,
            x}, pstream__), "assigning variable w");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "user_function_templating_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = user_function_templating_model_namespace::user_function_templating_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return user_function_templating_model_namespace::profiles__;
}
#endif
