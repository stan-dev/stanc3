  $ ../../../../../../install/default/bin/stanc --print-cpp arg_type_convert.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace arg_type_convert_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 6> locations_array__ = 
{" (found before start of program)",
 " (in 'arg_type_convert.stan', line 12, column 4 to column 14)",
 " (in 'arg_type_convert.stan', line 16, column 4 to column 55)",
 " (in 'arg_type_convert.stan', line 8, column 4 to column 10)",
 " (in 'arg_type_convert.stan', line 3, column 4 to column 44)",
 " (in 'arg_type_convert.stan', line 2, column 72 to line 4, column 3)"};
struct my_func_rsfunctor__;
template <typename T0__, typename T3__, typename T4__>
stan::promote_args_t<T0__, T3__,
T4__>
my_func(const std::vector<T0__>& y_slice, const int& start, const int& end,
        const T3__& mu, const T4__& sigma, std::ostream* pstream__) ;

struct my_func_rsfunctor__ {
template <typename T0__, typename T3__, typename T4__>
stan::promote_args_t<T0__, T3__,
T4__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__, const T3__& mu,
           const T4__& sigma) const 
{
return my_func(y_slice, start + 1, end + 1, mu, sigma, pstream__);
}
};


struct my_func_functor__ {
template <typename T0__, typename T3__, typename T4__>
stan::promote_args_t<T0__, T3__,
T4__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const T3__& mu, const T4__& sigma,
           std::ostream* pstream__)  const 
{
return my_func(y_slice, start, end, mu, sigma, pstream__);
}
};

template <typename T0__, typename T3__, typename T4__>
stan::promote_args_t<T0__, T3__,
T4__>
my_func(const std::vector<T0__>& y_slice, const int& start, const int& end,
        const T3__& mu, const T4__& sigma, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__, T4__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 4;
    return normal_lpdf<false>(y_slice, mu, sigma);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
class arg_type_convert_model final : public model_base_crtp<arg_type_convert_model> {

 private:
  int b; 
  
 
 public:
  ~arg_type_convert_model() { }
  
  inline std::string model_name() const final { return "arg_type_convert_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  arg_type_convert_model(stan::io::var_context& context__,
                         unsigned int random_seed__ = 0,
                         std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "arg_type_convert_model_namespace::arg_type_convert_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = 1;
      current_statement__ = 3;
      context__.validate_dims("data initialization","b","int",
           std::vector<size_t>{});
      b = std::numeric_limits<int>::min();
      
      current_statement__ = 3;
      b = context__.vals_i("b")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 5;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "arg_type_convert_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> a;
      current_statement__ = 1;
      a = in__.template read<std::vector<local_scalar_t__>>(5);
      {
        current_statement__ = 2;
        lp_accum__.add(
          reduce_sum_static<my_func_rsfunctor__>(a, 1, pstream__, 0.0, b));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "arg_type_convert_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> a;
      current_statement__ = 1;
      a = in__.template read<std::vector<local_scalar_t__>>(5);
      out__.write(a);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = 1;
      std::vector<local_scalar_t__> a;
      a = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        a[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(a);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"a"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(5)
                                                                   }};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 5;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 5;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
    const std::array<std::string, 1> names__ = std::array<std::string, 1>{"a"};
    
     std::vector<double> params_r_flat__;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       params_r_flat__.reserve(params_r_flat__.size() + param_vec__.size());
       for (auto&& param_val__ : param_vec__) {
         params_r_flat__.push_back(param_val__);
       }
     }
    vars.resize(params_r_flat__.size());
    transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = arg_type_convert_model_namespace::arg_type_convert_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return arg_type_convert_model_namespace::profiles__;
}

#endif



  $ ../../../../../../install/default/bin/stanc --print-cpp reduce_sum_m1.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace reduce_sum_m1_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 26> locations_array__ = 
{" (found before start of program)",
 " (in 'reduce_sum_m1.stan', line 26, column 2 to column 13)",
 " (in 'reduce_sum_m1.stan', line 27, column 2 to column 13)",
 " (in 'reduce_sum_m1.stan', line 28, column 2 to column 13)",
 " (in 'reduce_sum_m1.stan', line 32, column 2 to column 33)",
 " (in 'reduce_sum_m1.stan', line 33, column 2 to column 37)",
 " (in 'reduce_sum_m1.stan', line 34, column 2 to column 40)",
 " (in 'reduce_sum_m1.stan', line 35, column 2 to column 41)",
 " (in 'reduce_sum_m1.stan', line 22, column 2 to column 14)",
 " (in 'reduce_sum_m1.stan', line 26, column 10 to column 11)",
 " (in 'reduce_sum_m1.stan', line 27, column 10 to column 11)",
 " (in 'reduce_sum_m1.stan', line 28, column 10 to column 11)",
 " (in 'reduce_sum_m1.stan', line 6, column 6 to column 41)",
 " (in 'reduce_sum_m1.stan', line 5, column 11 to line 7, column 5)",
 " (in 'reduce_sum_m1.stan', line 4, column 6 to column 39)",
 " (in 'reduce_sum_m1.stan', line 3, column 26 to line 5, column 5)",
 " (in 'reduce_sum_m1.stan', line 3, column 4 to line 7, column 5)",
 " (in 'reduce_sum_m1.stan', line 2, column 45 to line 8, column 3)",
 " (in 'reduce_sum_m1.stan', line 13, column 6 to column 35)",
 " (in 'reduce_sum_m1.stan', line 12, column 11 to line 14, column 5)",
 " (in 'reduce_sum_m1.stan', line 11, column 6 to column 53)",
 " (in 'reduce_sum_m1.stan', line 10, column 20 to line 12, column 5)",
 " (in 'reduce_sum_m1.stan', line 10, column 4 to line 14, column 5)",
 " (in 'reduce_sum_m1.stan', line 9, column 55 to line 15, column 3)",
 " (in 'reduce_sum_m1.stan', line 17, column 4 to column 38)",
 " (in 'reduce_sum_m1.stan', line 16, column 52 to line 18, column 3)"};
struct g_rsfunctor__;
struct h_rsfunctor__;
template <bool propto__>
struct foo_lpdf_rsfunctor__;
template <typename T0__>
stan::promote_args_t<T0__>
g(const std::vector<T0__>& y_slice, const int& start, const int& end,
  std::ostream* pstream__) ;

struct g_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__) const 
{
return g(y_slice, start + 1, end + 1, pstream__);
}
};


struct g_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return g(y_slice, start, end, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h(const std::vector<T0__>& y_slice, const int& start, const int& end,
  const std::vector<T3__>& a, std::ostream* pstream__) ;

struct h_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<T3__>& a) const 
{
return h(y_slice, start + 1, end + 1, a, pstream__);
}
};


struct h_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const std::vector<T3__>& a,
           std::ostream* pstream__)  const 
{
return h(y_slice, start, end, a, pstream__);
}
};

template <bool propto__, typename T0__>
stan::promote_args_t<T0__>
foo_lpdf(const std::vector<T0__>& y_slice, const int& start, const int& end,
         std::ostream* pstream__) ;

template <bool propto__>
struct foo_lpdf_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__) const 
{
return foo_lpdf<propto__>(y_slice, start + 1, end + 1, pstream__);
}
};


struct foo_lpdf_functor__ {
template <bool propto__, typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return foo_lpdf<propto__>(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g(const std::vector<T0__>& y_slice, const int& start, const int& end,
  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 16;
    if (logical_gt(size(y_slice), 1)) {
      current_statement__ = 14;
      return reduce_sum<g_rsfunctor__>(y_slice, 1, pstream__);
    } else {
      current_statement__ = 12;
      return normal_lpdf<false>(y_slice, 0, 1);
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h(const std::vector<T0__>& y_slice, const int& start, const int& end,
  const std::vector<T3__>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 22;
    if (logical_gt(size(a), 1)) {
      current_statement__ = 20;
      return reduce_sum<h_rsfunctor__>(y_slice, 1, pstream__,
               rvalue(a, "a", index_min_max(start, end)));
    } else {
      current_statement__ = 18;
      return normal_lpdf<false>(a, 0, 1);
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <bool propto__, typename T0__>
stan::promote_args_t<T0__>
foo_lpdf(const std::vector<T0__>& y_slice, const int& start, const int& end,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 24;
    return normal_lpdf<false>(y_slice, 0, 1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
class reduce_sum_m1_model final : public model_base_crtp<reduce_sum_m1_model> {

 private:
  int N; 
  
 
 public:
  ~reduce_sum_m1_model() { }
  
  inline std::string model_name() const final { return "reduce_sum_m1_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  reduce_sum_m1_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m1_model_namespace::reduce_sum_m1_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = 1;
      current_statement__ = 8;
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 8;
      N = 100;
      current_statement__ = 9;
      validate_non_negative_index("y1", "N", N);
      current_statement__ = 10;
      validate_non_negative_index("y2", "N", N);
      current_statement__ = 11;
      validate_non_negative_index("y3", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N + N + N;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m1_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> y1;
      current_statement__ = 1;
      y1 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<local_scalar_t__> y2;
      current_statement__ = 2;
      y2 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<local_scalar_t__> y3;
      current_statement__ = 3;
      y3 = in__.template read<std::vector<local_scalar_t__>>(N);
      {
        current_statement__ = 4;
        lp_accum__.add(reduce_sum<g_rsfunctor__>(y1, 1, pstream__));
        current_statement__ = 5;
        lp_accum__.add(reduce_sum<h_rsfunctor__>(y2, 1, pstream__, y2));
        current_statement__ = 6;
        lp_accum__.add(
          reduce_sum<foo_lpdf_rsfunctor__<false>>(y3, 1, pstream__));
        current_statement__ = 7;
        lp_accum__.add(
          reduce_sum<foo_lpdf_rsfunctor__<propto__>>(y3, 1, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m1_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> y1;
      current_statement__ = 1;
      y1 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<double> y2;
      current_statement__ = 2;
      y2 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<double> y3;
      current_statement__ = 3;
      y3 = in__.template read<std::vector<local_scalar_t__>>(N);
      out__.write(y1);
      out__.write(y2);
      out__.write(y3);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = 1;
      std::vector<local_scalar_t__> y1;
      y1 = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        y1[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(y1);
      std::vector<local_scalar_t__> y2;
      y2 = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        y2[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(y2);
      std::vector<local_scalar_t__> y3;
      y3 = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        y3[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(y3);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"y1", "y2", "y3"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y2" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y3" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y2" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y3" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((N + N) + N);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((N + N) + N);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
    const std::array<std::string, 3> names__ = std::array<std::string, 3>{"y1",
      "y2", "y3"};
    
     std::vector<double> params_r_flat__;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       params_r_flat__.reserve(params_r_flat__.size() + param_vec__.size());
       for (auto&& param_val__ : param_vec__) {
         params_r_flat__.push_back(param_val__);
       }
     }
    vars.resize(params_r_flat__.size());
    transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = reduce_sum_m1_model_namespace::reduce_sum_m1_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return reduce_sum_m1_model_namespace::profiles__;
}

#endif



  $ ../../../../../../install/default/bin/stanc --print-cpp reduce_sum_m2.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace reduce_sum_m2_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 180> locations_array__ = 
{" (found before start of program)",
 " (in 'reduce_sum_m2.stan', line 130, column 2 to column 24)",
 " (in 'reduce_sum_m2.stan', line 131, column 2 to column 25)",
 " (in 'reduce_sum_m2.stan', line 132, column 2 to column 21)",
 " (in 'reduce_sum_m2.stan', line 133, column 2 to column 16)",
 " (in 'reduce_sum_m2.stan', line 134, column 2 to column 21)",
 " (in 'reduce_sum_m2.stan', line 135, column 2 to column 22)",
 " (in 'reduce_sum_m2.stan', line 136, column 2 to column 18)",
 " (in 'reduce_sum_m2.stan', line 137, column 2 to column 13)",
 " (in 'reduce_sum_m2.stan', line 139, column 2 to column 24)",
 " (in 'reduce_sum_m2.stan', line 140, column 2 to column 25)",
 " (in 'reduce_sum_m2.stan', line 141, column 2 to column 21)",
 " (in 'reduce_sum_m2.stan', line 142, column 2 to column 16)",
 " (in 'reduce_sum_m2.stan', line 143, column 2 to column 21)",
 " (in 'reduce_sum_m2.stan', line 144, column 2 to column 22)",
 " (in 'reduce_sum_m2.stan', line 145, column 2 to column 18)",
 " (in 'reduce_sum_m2.stan', line 146, column 2 to column 13)",
 " (in 'reduce_sum_m2.stan', line 150, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 151, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 152, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 153, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 154, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 155, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 156, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 157, column 2 to column 37)",
 " (in 'reduce_sum_m2.stan', line 159, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 160, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 161, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 162, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 163, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 164, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 165, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 166, column 2 to column 34)",
 " (in 'reduce_sum_m2.stan', line 125, column 2 to column 12)",
 " (in 'reduce_sum_m2.stan', line 126, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 126, column 2 to column 12)",
 " (in 'reduce_sum_m2.stan', line 130, column 18 to column 19)",
 " (in 'reduce_sum_m2.stan', line 130, column 21 to column 22)",
 " (in 'reduce_sum_m2.stan', line 130, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 130, column 12 to column 13)",
 " (in 'reduce_sum_m2.stan', line 131, column 19 to column 20)",
 " (in 'reduce_sum_m2.stan', line 131, column 22 to column 23)",
 " (in 'reduce_sum_m2.stan', line 131, column 13 to column 14)",
 " (in 'reduce_sum_m2.stan', line 132, column 15 to column 16)",
 " (in 'reduce_sum_m2.stan', line 132, column 18 to column 19)",
 " (in 'reduce_sum_m2.stan', line 132, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 133, column 10 to column 11)",
 " (in 'reduce_sum_m2.stan', line 133, column 13 to column 14)",
 " (in 'reduce_sum_m2.stan', line 134, column 18 to column 19)",
 " (in 'reduce_sum_m2.stan', line 134, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 134, column 12 to column 13)",
 " (in 'reduce_sum_m2.stan', line 135, column 19 to column 20)",
 " (in 'reduce_sum_m2.stan', line 135, column 13 to column 14)",
 " (in 'reduce_sum_m2.stan', line 136, column 15 to column 16)",
 " (in 'reduce_sum_m2.stan', line 136, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 137, column 10 to column 11)",
 " (in 'reduce_sum_m2.stan', line 139, column 18 to column 19)",
 " (in 'reduce_sum_m2.stan', line 139, column 21 to column 22)",
 " (in 'reduce_sum_m2.stan', line 139, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 139, column 12 to column 13)",
 " (in 'reduce_sum_m2.stan', line 140, column 19 to column 20)",
 " (in 'reduce_sum_m2.stan', line 140, column 22 to column 23)",
 " (in 'reduce_sum_m2.stan', line 140, column 13 to column 14)",
 " (in 'reduce_sum_m2.stan', line 141, column 15 to column 16)",
 " (in 'reduce_sum_m2.stan', line 141, column 18 to column 19)",
 " (in 'reduce_sum_m2.stan', line 141, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 142, column 10 to column 11)",
 " (in 'reduce_sum_m2.stan', line 142, column 13 to column 14)",
 " (in 'reduce_sum_m2.stan', line 143, column 18 to column 19)",
 " (in 'reduce_sum_m2.stan', line 143, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 143, column 12 to column 13)",
 " (in 'reduce_sum_m2.stan', line 144, column 19 to column 20)",
 " (in 'reduce_sum_m2.stan', line 144, column 13 to column 14)",
 " (in 'reduce_sum_m2.stan', line 145, column 15 to column 16)",
 " (in 'reduce_sum_m2.stan', line 145, column 9 to column 10)",
 " (in 'reduce_sum_m2.stan', line 146, column 10 to column 11)",
 " (in 'reduce_sum_m2.stan', line 3, column 4 to column 39)",
 " (in 'reduce_sum_m2.stan', line 2, column 46 to line 4, column 3)",
 " (in 'reduce_sum_m2.stan', line 6, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 8, column 6 to column 49)",
 " (in 'reduce_sum_m2.stan', line 7, column 30 to line 9, column 5)",
 " (in 'reduce_sum_m2.stan', line 7, column 4 to line 9, column 5)",
 " (in 'reduce_sum_m2.stan', line 10, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 5, column 48 to line 11, column 3)",
 " (in 'reduce_sum_m2.stan', line 13, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 15, column 6 to column 49)",
 " (in 'reduce_sum_m2.stan', line 14, column 30 to line 16, column 5)",
 " (in 'reduce_sum_m2.stan', line 14, column 4 to line 16, column 5)",
 " (in 'reduce_sum_m2.stan', line 17, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 12, column 52 to line 18, column 3)",
 " (in 'reduce_sum_m2.stan', line 20, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 22, column 6 to column 60)",
 " (in 'reduce_sum_m2.stan', line 21, column 30 to line 23, column 5)",
 " (in 'reduce_sum_m2.stan', line 21, column 4 to line 23, column 5)",
 " (in 'reduce_sum_m2.stan', line 24, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 19, column 48 to line 25, column 3)",
 " (in 'reduce_sum_m2.stan', line 27, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 30, column 8 to column 54)",
 " (in 'reduce_sum_m2.stan', line 29, column 35 to line 31, column 7)",
 " (in 'reduce_sum_m2.stan', line 29, column 6 to line 31, column 7)",
 " (in 'reduce_sum_m2.stan', line 28, column 30 to line 32, column 5)",
 " (in 'reduce_sum_m2.stan', line 28, column 4 to line 32, column 5)",
 " (in 'reduce_sum_m2.stan', line 33, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 26, column 47 to line 34, column 3)",
 " (in 'reduce_sum_m2.stan', line 36, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 39, column 8 to column 65)",
 " (in 'reduce_sum_m2.stan', line 38, column 35 to line 40, column 7)",
 " (in 'reduce_sum_m2.stan', line 38, column 6 to line 40, column 7)",
 " (in 'reduce_sum_m2.stan', line 37, column 30 to line 41, column 5)",
 " (in 'reduce_sum_m2.stan', line 37, column 4 to line 41, column 5)",
 " (in 'reduce_sum_m2.stan', line 42, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 35, column 49 to line 43, column 3)",
 " (in 'reduce_sum_m2.stan', line 45, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 48, column 8 to column 65)",
 " (in 'reduce_sum_m2.stan', line 47, column 35 to line 49, column 7)",
 " (in 'reduce_sum_m2.stan', line 47, column 6 to line 49, column 7)",
 " (in 'reduce_sum_m2.stan', line 46, column 30 to line 50, column 5)",
 " (in 'reduce_sum_m2.stan', line 46, column 4 to line 50, column 5)",
 " (in 'reduce_sum_m2.stan', line 51, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 44, column 53 to line 52, column 3)",
 " (in 'reduce_sum_m2.stan', line 54, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 57, column 8 to column 65)",
 " (in 'reduce_sum_m2.stan', line 56, column 35 to line 58, column 7)",
 " (in 'reduce_sum_m2.stan', line 56, column 6 to line 58, column 7)",
 " (in 'reduce_sum_m2.stan', line 55, column 30 to line 59, column 5)",
 " (in 'reduce_sum_m2.stan', line 55, column 4 to line 59, column 5)",
 " (in 'reduce_sum_m2.stan', line 60, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 53, column 49 to line 61, column 3)",
 " (in 'reduce_sum_m2.stan', line 63, column 4 to column 44)",
 " (in 'reduce_sum_m2.stan', line 62, column 50 to line 64, column 3)",
 " (in 'reduce_sum_m2.stan', line 66, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 68, column 6 to column 43)",
 " (in 'reduce_sum_m2.stan', line 67, column 24 to line 69, column 5)",
 " (in 'reduce_sum_m2.stan', line 67, column 4 to line 69, column 5)",
 " (in 'reduce_sum_m2.stan', line 70, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 65, column 52 to line 71, column 3)",
 " (in 'reduce_sum_m2.stan', line 73, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 75, column 6 to column 43)",
 " (in 'reduce_sum_m2.stan', line 74, column 24 to line 76, column 5)",
 " (in 'reduce_sum_m2.stan', line 74, column 4 to line 76, column 5)",
 " (in 'reduce_sum_m2.stan', line 77, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 72, column 56 to line 78, column 3)",
 " (in 'reduce_sum_m2.stan', line 80, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 82, column 6 to column 54)",
 " (in 'reduce_sum_m2.stan', line 81, column 24 to line 83, column 5)",
 " (in 'reduce_sum_m2.stan', line 81, column 4 to line 83, column 5)",
 " (in 'reduce_sum_m2.stan', line 84, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 79, column 52 to line 85, column 3)",
 " (in 'reduce_sum_m2.stan', line 87, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 90, column 8 to column 48)",
 " (in 'reduce_sum_m2.stan', line 89, column 29 to line 91, column 7)",
 " (in 'reduce_sum_m2.stan', line 89, column 6 to line 91, column 7)",
 " (in 'reduce_sum_m2.stan', line 88, column 24 to line 92, column 5)",
 " (in 'reduce_sum_m2.stan', line 88, column 4 to line 92, column 5)",
 " (in 'reduce_sum_m2.stan', line 93, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 86, column 51 to line 94, column 3)",
 " (in 'reduce_sum_m2.stan', line 96, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 99, column 8 to column 59)",
 " (in 'reduce_sum_m2.stan', line 98, column 29 to line 100, column 7)",
 " (in 'reduce_sum_m2.stan', line 98, column 6 to line 100, column 7)",
 " (in 'reduce_sum_m2.stan', line 97, column 24 to line 101, column 5)",
 " (in 'reduce_sum_m2.stan', line 97, column 4 to line 101, column 5)",
 " (in 'reduce_sum_m2.stan', line 102, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 95, column 53 to line 103, column 3)",
 " (in 'reduce_sum_m2.stan', line 105, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 108, column 8 to column 59)",
 " (in 'reduce_sum_m2.stan', line 107, column 29 to line 109, column 7)",
 " (in 'reduce_sum_m2.stan', line 107, column 6 to line 109, column 7)",
 " (in 'reduce_sum_m2.stan', line 106, column 24 to line 110, column 5)",
 " (in 'reduce_sum_m2.stan', line 106, column 4 to line 110, column 5)",
 " (in 'reduce_sum_m2.stan', line 111, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 104, column 57 to line 112, column 3)",
 " (in 'reduce_sum_m2.stan', line 114, column 4 to column 24)",
 " (in 'reduce_sum_m2.stan', line 117, column 8 to column 59)",
 " (in 'reduce_sum_m2.stan', line 116, column 29 to line 118, column 7)",
 " (in 'reduce_sum_m2.stan', line 116, column 6 to line 118, column 7)",
 " (in 'reduce_sum_m2.stan', line 115, column 24 to line 119, column 5)",
 " (in 'reduce_sum_m2.stan', line 115, column 4 to line 119, column 5)",
 " (in 'reduce_sum_m2.stan', line 120, column 4 to column 20)",
 " (in 'reduce_sum_m2.stan', line 113, column 53 to line 121, column 3)"};
struct g1_rsfunctor__;
struct g2_rsfunctor__;
struct g3_rsfunctor__;
struct g4_rsfunctor__;
struct g5_rsfunctor__;
struct g6_rsfunctor__;
struct g7_rsfunctor__;
struct g8_rsfunctor__;
struct h1_rsfunctor__;
struct h2_rsfunctor__;
struct h3_rsfunctor__;
struct h4_rsfunctor__;
struct h5_rsfunctor__;
struct h6_rsfunctor__;
struct h7_rsfunctor__;
struct h8_rsfunctor__;
template <typename T0__>
stan::promote_args_t<T0__>
g1(const std::vector<T0__>& y_slice, const int& start, const int& end,
   std::ostream* pstream__) ;

struct g1_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__) const 
{
return g1(y_slice, start + 1, end + 1, pstream__);
}
};


struct g1_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return g1(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g2(const std::vector<Eigen::Matrix<T0__, -1, 1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) ;

struct g2_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__) const 
{
return g2(y_slice, start + 1, end + 1, pstream__);
}
};


struct g2_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g2(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g3(const std::vector<Eigen::Matrix<T0__, 1, -1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) ;

struct g3_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, 1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__) const 
{
return g3(y_slice, start + 1, end + 1, pstream__);
}
};


struct g3_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, 1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g3(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g4(const std::vector<Eigen::Matrix<T0__, -1, -1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) ;

struct g4_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__) const 
{
return g4(y_slice, start + 1, end + 1, pstream__);
}
};


struct g4_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g4(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g5(const std::vector<std::vector<T0__>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) ;

struct g5_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<T0__>>& y_slice, const int& start,
           const int& end, std::ostream* pstream__) const 
{
return g5(y_slice, start + 1, end + 1, pstream__);
}
};


struct g5_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<T0__>>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return g5(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g6(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) ;

struct g6_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__) const 
{
return g6(y_slice, start + 1, end + 1, pstream__);
}
};


struct g6_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g6(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g7(const std::vector<std::vector<Eigen::Matrix<T0__, 1, -1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) ;

struct g7_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, 1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__) const 
{
return g7(y_slice, start + 1, end + 1, pstream__);
}
};


struct g7_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, 1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g7(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g8(const std::vector<std::vector<Eigen::Matrix<T0__, -1, -1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) ;

struct g8_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__) const 
{
return g8(y_slice, start + 1, end + 1, pstream__);
}
};


struct g8_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return g8(y_slice, start, end, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h1(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<T3__>& a, std::ostream* pstream__) ;

struct h1_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__, const std::vector<T3__>& a) const 
{
return h1(y, start + 1, end + 1, a, pstream__);
}
};


struct h1_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<T3__>& a, std::ostream* pstream__)  const 
{
return h1(y, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h2(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, -1, 1>>& a, std::ostream* pstream__) ;

struct h2_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__,
           const std::vector<Eigen::Matrix<T3__, -1, 1>>& a) const 
{
return h2(y, start + 1, end + 1, a, pstream__);
}
};


struct h2_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<Eigen::Matrix<T3__, -1, 1>>& a,
           std::ostream* pstream__)  const 
{
return h2(y, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h3(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, 1, -1>>& a, std::ostream* pstream__) ;

struct h3_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__,
           const std::vector<Eigen::Matrix<T3__, 1, -1>>& a) const 
{
return h3(y, start + 1, end + 1, a, pstream__);
}
};


struct h3_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<Eigen::Matrix<T3__, 1, -1>>& a,
           std::ostream* pstream__)  const 
{
return h3(y, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h4(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, -1, -1>>& a, std::ostream* pstream__) ;

struct h4_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__,
           const std::vector<Eigen::Matrix<T3__, -1, -1>>& a) const 
{
return h4(y, start + 1, end + 1, a, pstream__);
}
};


struct h4_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<Eigen::Matrix<T3__, -1, -1>>& a,
           std::ostream* pstream__)  const 
{
return h4(y, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h5(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<std::vector<T3__>>& a, std::ostream* pstream__) ;

struct h5_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__, const std::vector<std::vector<T3__>>& a) const 
{
return h5(y, start + 1, end + 1, a, pstream__);
}
};


struct h5_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<std::vector<T3__>>& a, std::ostream* pstream__)  const 
{
return h5(y, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h6(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<std::vector<Eigen::Matrix<T3__, -1, 1>>>& a,
   std::ostream* pstream__) ;

struct h6_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, 1>>>& a) const 
{
return h6(y, start + 1, end + 1, a, pstream__);
}
};


struct h6_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, 1>>>& a,
           std::ostream* pstream__)  const 
{
return h6(y, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h7(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<std::vector<Eigen::Matrix<T3__, 1, -1>>>& a,
   std::ostream* pstream__) ;

struct h7_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__,
           const std::vector<std::vector<Eigen::Matrix<T3__, 1, -1>>>& a) const 
{
return h7(y, start + 1, end + 1, a, pstream__);
}
};


struct h7_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<std::vector<Eigen::Matrix<T3__, 1, -1>>>& a,
           std::ostream* pstream__)  const 
{
return h7(y, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h8(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<std::vector<Eigen::Matrix<T3__, -1, -1>>>& a,
   std::ostream* pstream__) ;

struct h8_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           std::ostream* pstream__,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, -1>>>& a) const 
{
return h8(y, start + 1, end + 1, a, pstream__);
}
};


struct h8_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y, const int& start, const int& end,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, -1>>>& a,
           std::ostream* pstream__)  const 
{
return h8(y, start, end, a, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
g1(const std::vector<T0__>& y_slice, const int& start, const int& end,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 76;
    return normal_lpdf<false>(y_slice, 0, 1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
g2(const std::vector<Eigen::Matrix<T0__, -1, 1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf;
    current_statement__ = 78;
    sum_lpdf = 0.0;
    current_statement__ = 81;
    for (int n = 1; n <= size(y_slice); ++n) {
      current_statement__ = 79;
      sum_lpdf = (sum_lpdf +
                   normal_lpdf<false>(
                     rvalue(y_slice, "y_slice", index_uni(n)), 0, 1));
    }
    current_statement__ = 82;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
g3(const std::vector<Eigen::Matrix<T0__, 1, -1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf;
    current_statement__ = 84;
    sum_lpdf = 0.0;
    current_statement__ = 87;
    for (int n = 1; n <= size(y_slice); ++n) {
      current_statement__ = 85;
      sum_lpdf = (sum_lpdf +
                   normal_lpdf<false>(
                     rvalue(y_slice, "y_slice", index_uni(n)), 0, 1));
    }
    current_statement__ = 88;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
g4(const std::vector<Eigen::Matrix<T0__, -1, -1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf;
    current_statement__ = 90;
    sum_lpdf = 0.0;
    current_statement__ = 93;
    for (int n = 1; n <= size(y_slice); ++n) {
      current_statement__ = 91;
      sum_lpdf = (sum_lpdf +
                   normal_lpdf<false>(
                     to_vector(rvalue(y_slice, "y_slice", index_uni(n))), 0,
                     1));
    }
    current_statement__ = 94;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
g5(const std::vector<std::vector<T0__>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf;
    current_statement__ = 96;
    sum_lpdf = 0.0;
    current_statement__ = 101;
    for (int n = 1; n <= size(y_slice); ++n) {
      current_statement__ = 99;
      for (int m = 1; m <= size(rvalue(y_slice, "y_slice", index_uni(n)));
           ++m) {
        current_statement__ = 97;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       rvalue(y_slice, "y_slice", index_uni(n), index_uni(m)),
                       0, 1));
      }
    }
    current_statement__ = 102;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
g6(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf;
    current_statement__ = 104;
    sum_lpdf = 0.0;
    current_statement__ = 109;
    for (int n = 1; n <= size(y_slice); ++n) {
      current_statement__ = 107;
      for (int m = 1; m <= size(rvalue(y_slice, "y_slice", index_uni(n)));
           ++m) {
        current_statement__ = 105;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       to_vector(
                         rvalue(y_slice, "y_slice",
                           index_uni(n), index_uni(m))), 0, 1));
      }
    }
    current_statement__ = 110;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
g7(const std::vector<std::vector<Eigen::Matrix<T0__, 1, -1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf;
    current_statement__ = 112;
    sum_lpdf = 0.0;
    current_statement__ = 117;
    for (int n = 1; n <= size(y_slice); ++n) {
      current_statement__ = 115;
      for (int m = 1; m <= size(rvalue(y_slice, "y_slice", index_uni(n)));
           ++m) {
        current_statement__ = 113;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       to_vector(
                         rvalue(y_slice, "y_slice",
                           index_uni(n), index_uni(m))), 0, 1));
      }
    }
    current_statement__ = 118;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
g8(const std::vector<std::vector<Eigen::Matrix<T0__, -1, -1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf;
    current_statement__ = 120;
    sum_lpdf = 0.0;
    current_statement__ = 125;
    for (int n = 1; n <= size(y_slice); ++n) {
      current_statement__ = 123;
      for (int m = 1; m <= size(rvalue(y_slice, "y_slice", index_uni(n)));
           ++m) {
        current_statement__ = 121;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       to_vector(
                         rvalue(y_slice, "y_slice",
                           index_uni(n), index_uni(m))), 0, 1));
      }
    }
    current_statement__ = 126;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h1(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<T3__>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 128;
    return normal_lpdf<false>(rvalue(a, "a", index_min_max(start, end)), 0,
             1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h2(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, -1, 1>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf;
    current_statement__ = 130;
    sum_lpdf = 0.0;
    current_statement__ = 133;
    for (int n = start; n <= end; ++n) {
      current_statement__ = 131;
      sum_lpdf = (sum_lpdf +
                   normal_lpdf<false>(rvalue(a, "a", index_uni(n)), 0, 1));
    }
    current_statement__ = 134;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h3(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, 1, -1>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf;
    current_statement__ = 136;
    sum_lpdf = 0.0;
    current_statement__ = 139;
    for (int n = start; n <= end; ++n) {
      current_statement__ = 137;
      sum_lpdf = (sum_lpdf +
                   normal_lpdf<false>(rvalue(a, "a", index_uni(n)), 0, 1));
    }
    current_statement__ = 140;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h4(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, -1, -1>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf;
    current_statement__ = 142;
    sum_lpdf = 0.0;
    current_statement__ = 145;
    for (int n = start; n <= end; ++n) {
      current_statement__ = 143;
      sum_lpdf = (sum_lpdf +
                   normal_lpdf<false>(
                     to_vector(rvalue(a, "a", index_uni(n))), 0, 1));
    }
    current_statement__ = 146;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h5(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<std::vector<T3__>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf;
    current_statement__ = 148;
    sum_lpdf = 0.0;
    current_statement__ = 153;
    for (int n = start; n <= end; ++n) {
      current_statement__ = 151;
      for (int m = 1; m <= size(rvalue(a, "a", index_uni(n))); ++m) {
        current_statement__ = 149;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       rvalue(a, "a", index_uni(n), index_uni(m)), 0, 1));
      }
    }
    current_statement__ = 154;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h6(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<std::vector<Eigen::Matrix<T3__, -1, 1>>>& a,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf;
    current_statement__ = 156;
    sum_lpdf = 0.0;
    current_statement__ = 161;
    for (int n = start; n <= end; ++n) {
      current_statement__ = 159;
      for (int m = 1; m <= size(rvalue(a, "a", index_uni(n))); ++m) {
        current_statement__ = 157;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       to_vector(rvalue(a, "a", index_uni(n), index_uni(m))),
                       0, 1));
      }
    }
    current_statement__ = 162;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h7(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<std::vector<Eigen::Matrix<T3__, 1, -1>>>& a,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf;
    current_statement__ = 164;
    sum_lpdf = 0.0;
    current_statement__ = 169;
    for (int n = start; n <= end; ++n) {
      current_statement__ = 167;
      for (int m = 1; m <= size(rvalue(a, "a", index_uni(n))); ++m) {
        current_statement__ = 165;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       to_vector(rvalue(a, "a", index_uni(n), index_uni(m))),
                       0, 1));
      }
    }
    current_statement__ = 170;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
h8(const std::vector<T0__>& y, const int& start, const int& end,
   const std::vector<std::vector<Eigen::Matrix<T3__, -1, -1>>>& a,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ sum_lpdf;
    current_statement__ = 172;
    sum_lpdf = 0.0;
    current_statement__ = 177;
    for (int n = start; n <= end; ++n) {
      current_statement__ = 175;
      for (int m = 1; m <= size(rvalue(a, "a", index_uni(n))); ++m) {
        current_statement__ = 173;
        sum_lpdf = (sum_lpdf +
                     normal_lpdf<false>(
                       to_vector(rvalue(a, "a", index_uni(n), index_uni(m))),
                       0, 1));
      }
    }
    current_statement__ = 178;
    return sum_lpdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
class reduce_sum_m2_model final : public model_base_crtp<reduce_sum_m2_model> {

 private:
  int N;
  std::vector<double> x; 
  
 
 public:
  ~reduce_sum_m2_model() { }
  
  inline std::string model_name() const final { return "reduce_sum_m2_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  reduce_sum_m2_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m2_model_namespace::reduce_sum_m2_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = 1;
      current_statement__ = 33;
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 33;
      N = 2;
      current_statement__ = 34;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 35;
      x = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 36;
      validate_non_negative_index("a8", "N", N);
      current_statement__ = 37;
      validate_non_negative_index("a8", "N", N);
      current_statement__ = 38;
      validate_non_negative_index("a8", "N", N);
      current_statement__ = 39;
      validate_non_negative_index("a8", "N", N);
      current_statement__ = 40;
      validate_non_negative_index("a7", "N", N);
      current_statement__ = 41;
      validate_non_negative_index("a7", "N", N);
      current_statement__ = 42;
      validate_non_negative_index("a7", "N", N);
      current_statement__ = 43;
      validate_non_negative_index("a6", "N", N);
      current_statement__ = 44;
      validate_non_negative_index("a6", "N", N);
      current_statement__ = 45;
      validate_non_negative_index("a6", "N", N);
      current_statement__ = 46;
      validate_non_negative_index("a5", "N", N);
      current_statement__ = 47;
      validate_non_negative_index("a5", "N", N);
      current_statement__ = 48;
      validate_non_negative_index("a4", "N", N);
      current_statement__ = 49;
      validate_non_negative_index("a4", "N", N);
      current_statement__ = 50;
      validate_non_negative_index("a4", "N", N);
      current_statement__ = 51;
      validate_non_negative_index("a3", "N", N);
      current_statement__ = 52;
      validate_non_negative_index("a3", "N", N);
      current_statement__ = 53;
      validate_non_negative_index("a2", "N", N);
      current_statement__ = 54;
      validate_non_negative_index("a2", "N", N);
      current_statement__ = 55;
      validate_non_negative_index("a1", "N", N);
      current_statement__ = 56;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 57;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 58;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 59;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 60;
      validate_non_negative_index("y7", "N", N);
      current_statement__ = 61;
      validate_non_negative_index("y7", "N", N);
      current_statement__ = 62;
      validate_non_negative_index("y7", "N", N);
      current_statement__ = 63;
      validate_non_negative_index("y6", "N", N);
      current_statement__ = 64;
      validate_non_negative_index("y6", "N", N);
      current_statement__ = 65;
      validate_non_negative_index("y6", "N", N);
      current_statement__ = 66;
      validate_non_negative_index("y5", "N", N);
      current_statement__ = 67;
      validate_non_negative_index("y5", "N", N);
      current_statement__ = 68;
      validate_non_negative_index("y4", "N", N);
      current_statement__ = 69;
      validate_non_negative_index("y4", "N", N);
      current_statement__ = 70;
      validate_non_negative_index("y4", "N", N);
      current_statement__ = 71;
      validate_non_negative_index("y3", "N", N);
      current_statement__ = 72;
      validate_non_negative_index("y3", "N", N);
      current_statement__ = 73;
      validate_non_negative_index("y2", "N", N);
      current_statement__ = 74;
      validate_non_negative_index("y2", "N", N);
      current_statement__ = 75;
      validate_non_negative_index("y1", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (N * N * N * N) + (N * N * N) + (N * N * N) + (N * N)
       + (N * N * N) + (N * N) + (N * N) + N + (N * N * N * N) + (N * N * N)
       + (N * N * N) + (N * N) + (N * N * N) + (N * N) + (N * N) + N;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m2_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> a8;
      current_statement__ = 1;
      a8 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>(
             N, N, N, N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> a7;
      current_statement__ = 2;
      a7 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> a6;
      current_statement__ = 3;
      a6 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
             N, N, N);
      std::vector<std::vector<local_scalar_t__>> a5;
      current_statement__ = 4;
      a5 = in__.template read<std::vector<std::vector<local_scalar_t__>>>(N,
             N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> a4;
      current_statement__ = 5;
      a4 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(
             N, N, N);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> a3;
      current_statement__ = 6;
      a3 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
             N, N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> a2;
      current_statement__ = 7;
      a2 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
             N, N);
      std::vector<local_scalar_t__> a1;
      current_statement__ = 8;
      a1 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> y8;
      current_statement__ = 9;
      y8 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>(
             N, N, N, N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> y7;
      current_statement__ = 10;
      y7 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> y6;
      current_statement__ = 11;
      y6 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
             N, N, N);
      std::vector<std::vector<local_scalar_t__>> y5;
      current_statement__ = 12;
      y5 = in__.template read<std::vector<std::vector<local_scalar_t__>>>(N,
             N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> y4;
      current_statement__ = 13;
      y4 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(
             N, N, N);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> y3;
      current_statement__ = 14;
      y3 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
             N, N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y2;
      current_statement__ = 15;
      y2 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
             N, N);
      std::vector<local_scalar_t__> y1;
      current_statement__ = 16;
      y1 = in__.template read<std::vector<local_scalar_t__>>(N);
      {
        current_statement__ = 17;
        lp_accum__.add(reduce_sum<h8_rsfunctor__>(x, 1, pstream__, a8));
        current_statement__ = 18;
        lp_accum__.add(reduce_sum<h7_rsfunctor__>(x, 1, pstream__, a7));
        current_statement__ = 19;
        lp_accum__.add(reduce_sum<h6_rsfunctor__>(x, 1, pstream__, a6));
        current_statement__ = 20;
        lp_accum__.add(reduce_sum<h5_rsfunctor__>(x, 1, pstream__, a5));
        current_statement__ = 21;
        lp_accum__.add(reduce_sum<h4_rsfunctor__>(x, 1, pstream__, a4));
        current_statement__ = 22;
        lp_accum__.add(reduce_sum<h3_rsfunctor__>(x, 1, pstream__, a3));
        current_statement__ = 23;
        lp_accum__.add(reduce_sum<h2_rsfunctor__>(x, 1, pstream__, a2));
        current_statement__ = 24;
        lp_accum__.add(reduce_sum<h1_rsfunctor__>(x, 1, pstream__, a1));
        current_statement__ = 25;
        lp_accum__.add(reduce_sum<g8_rsfunctor__>(y8, 1, pstream__));
        current_statement__ = 26;
        lp_accum__.add(reduce_sum<g7_rsfunctor__>(y7, 1, pstream__));
        current_statement__ = 27;
        lp_accum__.add(reduce_sum<g6_rsfunctor__>(y6, 1, pstream__));
        current_statement__ = 28;
        lp_accum__.add(reduce_sum<g5_rsfunctor__>(y5, 1, pstream__));
        current_statement__ = 29;
        lp_accum__.add(reduce_sum<g4_rsfunctor__>(y4, 1, pstream__));
        current_statement__ = 30;
        lp_accum__.add(reduce_sum<g3_rsfunctor__>(y3, 1, pstream__));
        current_statement__ = 31;
        lp_accum__.add(reduce_sum<g2_rsfunctor__>(y2, 1, pstream__));
        current_statement__ = 32;
        lp_accum__.add(reduce_sum<g1_rsfunctor__>(y1, 1, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m2_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> a8;
      current_statement__ = 1;
      a8 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>(
             N, N, N, N);
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> a7;
      current_statement__ = 2;
      a7 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> a6;
      current_statement__ = 3;
      a6 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
             N, N, N);
      std::vector<std::vector<double>> a5;
      current_statement__ = 4;
      a5 = in__.template read<std::vector<std::vector<local_scalar_t__>>>(N,
             N);
      std::vector<Eigen::Matrix<double, -1, -1>> a4;
      current_statement__ = 5;
      a4 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(
             N, N, N);
      std::vector<Eigen::Matrix<double, 1, -1>> a3;
      current_statement__ = 6;
      a3 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
             N, N);
      std::vector<Eigen::Matrix<double, -1, 1>> a2;
      current_statement__ = 7;
      a2 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
             N, N);
      std::vector<double> a1;
      current_statement__ = 8;
      a1 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> y8;
      current_statement__ = 9;
      y8 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>(
             N, N, N, N);
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> y7;
      current_statement__ = 10;
      y7 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> y6;
      current_statement__ = 11;
      y6 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
             N, N, N);
      std::vector<std::vector<double>> y5;
      current_statement__ = 12;
      y5 = in__.template read<std::vector<std::vector<local_scalar_t__>>>(N,
             N);
      std::vector<Eigen::Matrix<double, -1, -1>> y4;
      current_statement__ = 13;
      y4 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(
             N, N, N);
      std::vector<Eigen::Matrix<double, 1, -1>> y3;
      current_statement__ = 14;
      y3 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
             N, N);
      std::vector<Eigen::Matrix<double, -1, 1>> y2;
      current_statement__ = 15;
      y2 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
             N, N);
      std::vector<double> y1;
      current_statement__ = 16;
      y1 = in__.template read<std::vector<local_scalar_t__>>(N);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              out__.write(
                rvalue(a8, "a8",
                  index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                    index_uni(sym1__)));
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            out__.write(a7[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            out__.write(a6[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(a5[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            out__.write(
              rvalue(a4, "a4",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(a3[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(a2[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(a1);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              out__.write(
                rvalue(y8, "y8",
                  index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                    index_uni(sym1__)));
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            out__.write(y7[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            out__.write(y6[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(y5[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            out__.write(
              rvalue(y4, "y4",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(y3[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(y2[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(y1);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = 1;
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> a8;
      a8 = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>(N, N)));
      stan::math::fill(a8, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              assign(a8, in__.read<local_scalar_t__>(),
                "assigning variable a8", index_uni(sym4__),
                                           index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
            }
          }
        }
      }
      out__.write(a8);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> a7;
      a7 = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N)));
      stan::math::fill(a7, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            assign(a7, in__.read<local_scalar_t__>(),
              "assigning variable a7", index_uni(sym3__), index_uni(sym2__),
                                         index_uni(sym1__));
          }
        }
      }
      out__.write(a7);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> a6;
      a6 = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N)));
      stan::math::fill(a6, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            assign(a6, in__.read<local_scalar_t__>(),
              "assigning variable a6", index_uni(sym3__), index_uni(sym2__),
                                         index_uni(sym1__));
          }
        }
      }
      out__.write(a6);
      std::vector<std::vector<local_scalar_t__>> a5;
      a5 = std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__));
      
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          a5[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write(a5);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> a4;
      a4 = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>(N, N));
      stan::math::fill(a4, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            assign(a4, in__.read<local_scalar_t__>(),
              "assigning variable a4", index_uni(sym3__), index_uni(sym2__),
                                         index_uni(sym1__));
          }
        }
      }
      out__.write(a4);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> a3;
      a3 = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N));
      stan::math::fill(a3, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          assign(a3, in__.read<local_scalar_t__>(),
            "assigning variable a3", index_uni(sym2__), index_uni(sym1__));
        }
      }
      out__.write(a3);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> a2;
      a2 = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      stan::math::fill(a2, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          assign(a2, in__.read<local_scalar_t__>(),
            "assigning variable a2", index_uni(sym2__), index_uni(sym1__));
        }
      }
      out__.write(a2);
      std::vector<local_scalar_t__> a1;
      a1 = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        a1[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(a1);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> y8;
      y8 = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>(N, N)));
      stan::math::fill(y8, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              assign(y8, in__.read<local_scalar_t__>(),
                "assigning variable y8", index_uni(sym4__),
                                           index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
            }
          }
        }
      }
      out__.write(y8);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> y7;
      y7 = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N)));
      stan::math::fill(y7, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            assign(y7, in__.read<local_scalar_t__>(),
              "assigning variable y7", index_uni(sym3__), index_uni(sym2__),
                                         index_uni(sym1__));
          }
        }
      }
      out__.write(y7);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> y6;
      y6 = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N)));
      stan::math::fill(y6, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            assign(y6, in__.read<local_scalar_t__>(),
              "assigning variable y6", index_uni(sym3__), index_uni(sym2__),
                                         index_uni(sym1__));
          }
        }
      }
      out__.write(y6);
      std::vector<std::vector<local_scalar_t__>> y5;
      y5 = std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__));
      
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          y5[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write(y5);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> y4;
      y4 = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>(N, N));
      stan::math::fill(y4, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            assign(y4, in__.read<local_scalar_t__>(),
              "assigning variable y4", index_uni(sym3__), index_uni(sym2__),
                                         index_uni(sym1__));
          }
        }
      }
      out__.write(y4);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> y3;
      y3 = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N));
      stan::math::fill(y3, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          assign(y3, in__.read<local_scalar_t__>(),
            "assigning variable y3", index_uni(sym2__), index_uni(sym1__));
        }
      }
      out__.write(y3);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y2;
      y2 = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      stan::math::fill(y2, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          assign(y2, in__.read<local_scalar_t__>(),
            "assigning variable y2", index_uni(sym2__), index_uni(sym1__));
        }
      }
      out__.write(y2);
      std::vector<local_scalar_t__> y1;
      y1 = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        y1[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(y1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"a8", "a7", "a6", "a5", "a4", "a3",
      "a2", "a1", "y8", "y7", "y6", "y5", "y4", "y3", "y2", "y1"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N)
                                                                   ,
                                                                   static_cast<size_t>(N)
                                                                   ,
                                                                   static_cast<size_t>(N)
                                                                   ,
                                                                   static_cast<size_t>(N)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "a8" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "a7" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "a6" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "a5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "a4" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "a3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "a2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "y8" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y7" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y6" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y4" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y1" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "a8" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "a7" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "a6" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "a5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "a4" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "a3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "a2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "y8" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y7" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y6" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y4" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y1" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"a7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"a6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"a5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"a4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"a3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"y4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"a7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"a6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"a5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"a4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"a3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"y4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((((((N * N) * N) * N) + ((N * N) * N)) + ((N * N) * N)) +
                (N * N)) + ((N * N) * N)) + (N * N)) + (N * N)) + N) +
           (((N * N) * N) * N)) + ((N * N) * N)) + ((N * N) * N)) + (N * N))
       + ((N * N) * N)) + (N * N)) + (N * N)) + N);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((((((N * N) * N) * N) + ((N * N) * N)) + ((N * N) * N)) +
                (N * N)) + ((N * N) * N)) + (N * N)) + (N * N)) + N) +
           (((N * N) * N) * N)) + ((N * N) * N)) + ((N * N) * N)) + (N * N))
       + ((N * N) * N)) + (N * N)) + (N * N)) + N);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
    const std::array<std::string, 16> names__ = std::array<std::string, 16>{"a8",
      "a7", "a6", "a5", "a4", "a3", "a2", "a1", "y8", "y7", "y6", "y5", "y4",
      "y3", "y2", "y1"};
    
     std::vector<double> params_r_flat__;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       params_r_flat__.reserve(params_r_flat__.size() + param_vec__.size());
       for (auto&& param_val__ : param_vec__) {
         params_r_flat__.push_back(param_val__);
       }
     }
    vars.resize(params_r_flat__.size());
    transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = reduce_sum_m2_model_namespace::reduce_sum_m2_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return reduce_sum_m2_model_namespace::profiles__;
}

#endif



  $ ../../../../../../install/default/bin/stanc --print-cpp reduce_sum_m3.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace reduce_sum_m3_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 342> locations_array__ = 
{" (found before start of program)",
 " (in 'reduce_sum_m3.stan', line 210, column 2 to column 13)",
 " (in 'reduce_sum_m3.stan', line 211, column 2 to column 18)",
 " (in 'reduce_sum_m3.stan', line 212, column 2 to column 22)",
 " (in 'reduce_sum_m3.stan', line 213, column 2 to column 21)",
 " (in 'reduce_sum_m3.stan', line 214, column 2 to column 16)",
 " (in 'reduce_sum_m3.stan', line 215, column 2 to column 21)",
 " (in 'reduce_sum_m3.stan', line 216, column 2 to column 25)",
 " (in 'reduce_sum_m3.stan', line 217, column 2 to column 24)",
 " (in 'reduce_sum_m3.stan', line 218, column 2 to column 10)",
 " (in 'reduce_sum_m3.stan', line 219, column 2 to column 16)",
 " (in 'reduce_sum_m3.stan', line 220, column 2 to column 20)",
 " (in 'reduce_sum_m3.stan', line 221, column 2 to column 19)",
 " (in 'reduce_sum_m3.stan', line 222, column 2 to column 20)",
 " (in 'reduce_sum_m3.stan', line 260, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 261, column 2 to column 60)",
 " (in 'reduce_sum_m3.stan', line 262, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 263, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 264, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 265, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 266, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 267, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 268, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 269, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 270, column 2 to column 38)",
 " (in 'reduce_sum_m3.stan', line 271, column 2 to column 38)",
 " (in 'reduce_sum_m3.stan', line 272, column 2 to column 37)",
 " (in 'reduce_sum_m3.stan', line 273, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 274, column 2 to column 40)",
 " (in 'reduce_sum_m3.stan', line 275, column 2 to column 40)",
 " (in 'reduce_sum_m3.stan', line 276, column 2 to column 40)",
 " (in 'reduce_sum_m3.stan', line 277, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 278, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 279, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 280, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 281, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 282, column 2 to column 41)",
 " (in 'reduce_sum_m3.stan', line 283, column 2 to column 41)",
 " (in 'reduce_sum_m3.stan', line 284, column 2 to column 41)",
 " (in 'reduce_sum_m3.stan', line 285, column 2 to line 288, column 35)",
 " (in 'reduce_sum_m3.stan', line 226, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 227, column 2 to column 60)",
 " (in 'reduce_sum_m3.stan', line 228, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 229, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 230, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 231, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 232, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 233, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 234, column 2 to column 34)",
 " (in 'reduce_sum_m3.stan', line 235, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 236, column 2 to column 38)",
 " (in 'reduce_sum_m3.stan', line 237, column 2 to column 38)",
 " (in 'reduce_sum_m3.stan', line 238, column 2 to column 37)",
 " (in 'reduce_sum_m3.stan', line 239, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 240, column 2 to column 40)",
 " (in 'reduce_sum_m3.stan', line 241, column 2 to column 40)",
 " (in 'reduce_sum_m3.stan', line 242, column 2 to column 40)",
 " (in 'reduce_sum_m3.stan', line 243, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 244, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 245, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 246, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 247, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 248, column 2 to column 41)",
 " (in 'reduce_sum_m3.stan', line 249, column 2 to column 41)",
 " (in 'reduce_sum_m3.stan', line 250, column 2 to column 41)",
 " (in 'reduce_sum_m3.stan', line 251, column 2 to line 254, column 34)",
 " (in 'reduce_sum_m3.stan', line 256, column 2 to column 16)",
 " (in 'reduce_sum_m3.stan', line 157, column 2 to column 8)",
 " (in 'reduce_sum_m3.stan', line 158, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 158, column 2 to column 14)",
 " (in 'reduce_sum_m3.stan', line 159, column 16 to column 17)",
 " (in 'reduce_sum_m3.stan', line 159, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 159, column 2 to column 19)",
 " (in 'reduce_sum_m3.stan', line 160, column 20 to column 21)",
 " (in 'reduce_sum_m3.stan', line 160, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 160, column 2 to column 23)",
 " (in 'reduce_sum_m3.stan', line 161, column 19 to column 20)",
 " (in 'reduce_sum_m3.stan', line 161, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 161, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 161, column 2 to column 22)",
 " (in 'reduce_sum_m3.stan', line 162, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 162, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 162, column 2 to column 17)",
 " (in 'reduce_sum_m3.stan', line 163, column 16 to column 17)",
 " (in 'reduce_sum_m3.stan', line 163, column 19 to column 20)",
 " (in 'reduce_sum_m3.stan', line 163, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 163, column 2 to column 22)",
 " (in 'reduce_sum_m3.stan', line 164, column 20 to column 21)",
 " (in 'reduce_sum_m3.stan', line 164, column 23 to column 24)",
 " (in 'reduce_sum_m3.stan', line 164, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 164, column 2 to column 26)",
 " (in 'reduce_sum_m3.stan', line 165, column 19 to column 20)",
 " (in 'reduce_sum_m3.stan', line 165, column 22 to column 23)",
 " (in 'reduce_sum_m3.stan', line 165, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 165, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 165, column 2 to column 25)",
 " (in 'reduce_sum_m3.stan', line 166, column 2 to column 11)",
 " (in 'reduce_sum_m3.stan', line 167, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 167, column 2 to column 17)",
 " (in 'reduce_sum_m3.stan', line 168, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 168, column 2 to column 21)",
 " (in 'reduce_sum_m3.stan', line 169, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 169, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 169, column 2 to column 20)",
 " (in 'reduce_sum_m3.stan', line 170, column 2 to column 11)",
 " (in 'reduce_sum_m3.stan', line 171, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 171, column 2 to column 14)",
 " (in 'reduce_sum_m3.stan', line 172, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 172, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 172, column 2 to column 17)",
 " (in 'reduce_sum_m3.stan', line 173, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 173, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 173, column 17 to column 18)",
 " (in 'reduce_sum_m3.stan', line 173, column 2 to column 20)",
 " (in 'reduce_sum_m3.stan', line 174, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 174, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 174, column 18 to column 19)",
 " (in 'reduce_sum_m3.stan', line 174, column 2 to column 21)",
 " (in 'reduce_sum_m3.stan', line 178, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 179, column 2 to column 63)",
 " (in 'reduce_sum_m3.stan', line 180, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 181, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 182, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 183, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 184, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 185, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 186, column 2 to column 36)",
 " (in 'reduce_sum_m3.stan', line 187, column 2 to column 37)",
 " (in 'reduce_sum_m3.stan', line 188, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 189, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 190, column 2 to column 39)",
 " (in 'reduce_sum_m3.stan', line 191, column 2 to column 42)",
 " (in 'reduce_sum_m3.stan', line 192, column 2 to column 43)",
 " (in 'reduce_sum_m3.stan', line 193, column 2 to column 43)",
 " (in 'reduce_sum_m3.stan', line 194, column 2 to column 43)",
 " (in 'reduce_sum_m3.stan', line 195, column 2 to column 42)",
 " (in 'reduce_sum_m3.stan', line 196, column 2 to column 42)",
 " (in 'reduce_sum_m3.stan', line 197, column 2 to column 42)",
 " (in 'reduce_sum_m3.stan', line 198, column 2 to column 42)",
 " (in 'reduce_sum_m3.stan', line 199, column 2 to column 42)",
 " (in 'reduce_sum_m3.stan', line 200, column 2 to column 44)",
 " (in 'reduce_sum_m3.stan', line 201, column 2 to column 44)",
 " (in 'reduce_sum_m3.stan', line 202, column 2 to column 44)",
 " (in 'reduce_sum_m3.stan', line 203, column 2 to line 206, column 36)",
 " (in 'reduce_sum_m3.stan', line 210, column 10 to column 11)",
 " (in 'reduce_sum_m3.stan', line 211, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 211, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 212, column 19 to column 20)",
 " (in 'reduce_sum_m3.stan', line 212, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 213, column 18 to column 19)",
 " (in 'reduce_sum_m3.stan', line 213, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 213, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 214, column 10 to column 11)",
 " (in 'reduce_sum_m3.stan', line 214, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 215, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 215, column 18 to column 19)",
 " (in 'reduce_sum_m3.stan', line 215, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 216, column 19 to column 20)",
 " (in 'reduce_sum_m3.stan', line 216, column 22 to column 23)",
 " (in 'reduce_sum_m3.stan', line 216, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 217, column 18 to column 19)",
 " (in 'reduce_sum_m3.stan', line 217, column 21 to column 22)",
 " (in 'reduce_sum_m3.stan', line 217, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 217, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 219, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 220, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 221, column 9 to column 10)",
 " (in 'reduce_sum_m3.stan', line 221, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 222, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 222, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 222, column 17 to column 18)",
 " (in 'reduce_sum_m3.stan', line 3, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 2, column 46 to line 4, column 3)",
 " (in 'reduce_sum_m3.stan', line 6, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 5, column 47 to line 7, column 3)",
 " (in 'reduce_sum_m3.stan', line 9, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 8, column 48 to line 10, column 3)",
 " (in 'reduce_sum_m3.stan', line 12, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 11, column 52 to line 13, column 3)",
 " (in 'reduce_sum_m3.stan', line 15, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 14, column 48 to line 16, column 3)",
 " (in 'reduce_sum_m3.stan', line 18, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 17, column 47 to line 19, column 3)",
 " (in 'reduce_sum_m3.stan', line 21, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 20, column 49 to line 22, column 3)",
 " (in 'reduce_sum_m3.stan', line 24, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 23, column 53 to line 25, column 3)",
 " (in 'reduce_sum_m3.stan', line 27, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 26, column 49 to line 28, column 3)",
 " (in 'reduce_sum_m3.stan', line 30, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 29, column 45 to line 31, column 3)",
 " (in 'reduce_sum_m3.stan', line 33, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 32, column 47 to line 34, column 3)",
 " (in 'reduce_sum_m3.stan', line 36, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 35, column 48 to line 37, column 3)",
 " (in 'reduce_sum_m3.stan', line 39, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 38, column 49 to line 40, column 3)",
 " (in 'reduce_sum_m3.stan', line 42, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 41, column 54 to line 43, column 3)",
 " (in 'reduce_sum_m3.stan', line 45, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 44, column 56 to line 46, column 3)",
 " (in 'reduce_sum_m3.stan', line 48, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 47, column 60 to line 49, column 3)",
 " (in 'reduce_sum_m3.stan', line 51, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 50, column 56 to line 52, column 3)",
 " (in 'reduce_sum_m3.stan', line 54, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 53, column 56 to line 55, column 3)",
 " (in 'reduce_sum_m3.stan', line 57, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 56, column 58 to line 58, column 3)",
 " (in 'reduce_sum_m3.stan', line 60, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 59, column 62 to line 61, column 3)",
 " (in 'reduce_sum_m3.stan', line 63, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 62, column 58 to line 64, column 3)",
 " (in 'reduce_sum_m3.stan', line 66, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 65, column 57 to line 67, column 3)",
 " (in 'reduce_sum_m3.stan', line 69, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 68, column 60 to line 70, column 3)",
 " (in 'reduce_sum_m3.stan', line 72, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 71, column 64 to line 73, column 3)",
 " (in 'reduce_sum_m3.stan', line 75, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 74, column 60 to line 76, column 3)",
 " (in 'reduce_sum_m3.stan', line 82, column 4 to line 86, column 28)",
 " (in 'reduce_sum_m3.stan', line 81, column 32 to line 87, column 3)",
 " (in 'reduce_sum_m3.stan', line 89, column 4 to column 10)",
 " (in 'reduce_sum_m3.stan', line 90, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 90, column 4 to column 16)",
 " (in 'reduce_sum_m3.stan', line 91, column 18 to column 19)",
 " (in 'reduce_sum_m3.stan', line 91, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 91, column 4 to column 21)",
 " (in 'reduce_sum_m3.stan', line 92, column 22 to column 23)",
 " (in 'reduce_sum_m3.stan', line 92, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 92, column 4 to column 25)",
 " (in 'reduce_sum_m3.stan', line 93, column 21 to column 22)",
 " (in 'reduce_sum_m3.stan', line 93, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 93, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 93, column 4 to column 24)",
 " (in 'reduce_sum_m3.stan', line 94, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 94, column 16 to column 17)",
 " (in 'reduce_sum_m3.stan', line 94, column 4 to column 19)",
 " (in 'reduce_sum_m3.stan', line 95, column 18 to column 19)",
 " (in 'reduce_sum_m3.stan', line 95, column 21 to column 22)",
 " (in 'reduce_sum_m3.stan', line 95, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 95, column 4 to column 24)",
 " (in 'reduce_sum_m3.stan', line 96, column 22 to column 23)",
 " (in 'reduce_sum_m3.stan', line 96, column 25 to column 26)",
 " (in 'reduce_sum_m3.stan', line 96, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 96, column 4 to column 28)",
 " (in 'reduce_sum_m3.stan', line 97, column 21 to column 22)",
 " (in 'reduce_sum_m3.stan', line 97, column 24 to column 25)",
 " (in 'reduce_sum_m3.stan', line 97, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 97, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 97, column 4 to column 27)",
 " (in 'reduce_sum_m3.stan', line 98, column 4 to column 13)",
 " (in 'reduce_sum_m3.stan', line 99, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 99, column 4 to column 19)",
 " (in 'reduce_sum_m3.stan', line 100, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 100, column 4 to column 23)",
 " (in 'reduce_sum_m3.stan', line 101, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 101, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 101, column 4 to column 22)",
 " (in 'reduce_sum_m3.stan', line 102, column 4 to column 13)",
 " (in 'reduce_sum_m3.stan', line 103, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 103, column 4 to column 16)",
 " (in 'reduce_sum_m3.stan', line 104, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 104, column 16 to column 17)",
 " (in 'reduce_sum_m3.stan', line 104, column 4 to column 19)",
 " (in 'reduce_sum_m3.stan', line 105, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 105, column 16 to column 17)",
 " (in 'reduce_sum_m3.stan', line 105, column 19 to column 20)",
 " (in 'reduce_sum_m3.stan', line 105, column 4 to column 22)",
 " (in 'reduce_sum_m3.stan', line 106, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 106, column 17 to column 18)",
 " (in 'reduce_sum_m3.stan', line 106, column 20 to column 21)",
 " (in 'reduce_sum_m3.stan', line 106, column 4 to column 23)",
 " (in 'reduce_sum_m3.stan', line 108, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 108, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 109, column 17 to column 18)",
 " (in 'reduce_sum_m3.stan', line 109, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 109, column 4 to column 20)",
 " (in 'reduce_sum_m3.stan', line 110, column 21 to column 22)",
 " (in 'reduce_sum_m3.stan', line 110, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 110, column 4 to column 24)",
 " (in 'reduce_sum_m3.stan', line 111, column 20 to column 21)",
 " (in 'reduce_sum_m3.stan', line 111, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 111, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 111, column 4 to column 23)",
 " (in 'reduce_sum_m3.stan', line 112, column 12 to column 13)",
 " (in 'reduce_sum_m3.stan', line 112, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 112, column 4 to column 18)",
 " (in 'reduce_sum_m3.stan', line 113, column 17 to column 18)",
 " (in 'reduce_sum_m3.stan', line 113, column 20 to column 21)",
 " (in 'reduce_sum_m3.stan', line 113, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 113, column 4 to column 23)",
 " (in 'reduce_sum_m3.stan', line 114, column 21 to column 22)",
 " (in 'reduce_sum_m3.stan', line 114, column 24 to column 25)",
 " (in 'reduce_sum_m3.stan', line 114, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 114, column 4 to column 27)",
 " (in 'reduce_sum_m3.stan', line 115, column 20 to column 21)",
 " (in 'reduce_sum_m3.stan', line 115, column 23 to column 24)",
 " (in 'reduce_sum_m3.stan', line 115, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 115, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 115, column 4 to column 26)",
 " (in 'reduce_sum_m3.stan', line 116, column 4 to column 12)",
 " (in 'reduce_sum_m3.stan', line 117, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 117, column 4 to column 18)",
 " (in 'reduce_sum_m3.stan', line 118, column 15 to column 16)",
 " (in 'reduce_sum_m3.stan', line 118, column 4 to column 22)",
 " (in 'reduce_sum_m3.stan', line 119, column 11 to column 12)",
 " (in 'reduce_sum_m3.stan', line 119, column 14 to column 15)",
 " (in 'reduce_sum_m3.stan', line 119, column 4 to column 21)",
 " (in 'reduce_sum_m3.stan', line 120, column 13 to column 14)",
 " (in 'reduce_sum_m3.stan', line 120, column 16 to column 17)",
 " (in 'reduce_sum_m3.stan', line 120, column 19 to column 20)",
 " (in 'reduce_sum_m3.stan', line 120, column 4 to column 22)",
 " (in 'reduce_sum_m3.stan', line 122, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 123, column 4 to column 62)",
 " (in 'reduce_sum_m3.stan', line 124, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 125, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 126, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 127, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 128, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 129, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 130, column 4 to column 36)",
 " (in 'reduce_sum_m3.stan', line 131, column 4 to column 38)",
 " (in 'reduce_sum_m3.stan', line 132, column 4 to column 40)",
 " (in 'reduce_sum_m3.stan', line 133, column 4 to column 40)",
 " (in 'reduce_sum_m3.stan', line 134, column 4 to column 39)",
 " (in 'reduce_sum_m3.stan', line 135, column 4 to column 41)",
 " (in 'reduce_sum_m3.stan', line 136, column 4 to column 42)",
 " (in 'reduce_sum_m3.stan', line 137, column 4 to column 42)",
 " (in 'reduce_sum_m3.stan', line 138, column 4 to column 42)",
 " (in 'reduce_sum_m3.stan', line 139, column 4 to column 41)",
 " (in 'reduce_sum_m3.stan', line 140, column 4 to column 41)",
 " (in 'reduce_sum_m3.stan', line 141, column 4 to column 41)",
 " (in 'reduce_sum_m3.stan', line 142, column 4 to column 41)",
 " (in 'reduce_sum_m3.stan', line 143, column 4 to column 41)",
 " (in 'reduce_sum_m3.stan', line 144, column 4 to column 43)",
 " (in 'reduce_sum_m3.stan', line 145, column 4 to column 43)",
 " (in 'reduce_sum_m3.stan', line 146, column 4 to column 43)",
 " (in 'reduce_sum_m3.stan', line 147, column 4 to line 150, column 36)",
 " (in 'reduce_sum_m3.stan', line 152, column 4 to column 15)",
 " (in 'reduce_sum_m3.stan', line 88, column 11 to line 153, column 3)"};
struct f10_rsfunctor__;
struct f11_rsfunctor__;
struct f12_rsfunctor__;
struct f1_rsfunctor__;
struct f1a_rsfunctor__;
struct f2_rsfunctor__;
struct f3_rsfunctor__;
struct f4_rsfunctor__;
struct f5_rsfunctor__;
struct f6_rsfunctor__;
struct f7_rsfunctor__;
struct f8_rsfunctor__;
struct f9_rsfunctor__;
struct g10_rsfunctor__;
struct g11_rsfunctor__;
struct g12_rsfunctor__;
struct g1_rsfunctor__;
struct g2_rsfunctor__;
struct g3_rsfunctor__;
struct g4_rsfunctor__;
struct g5_rsfunctor__;
struct g6_rsfunctor__;
struct g7_rsfunctor__;
struct g8_rsfunctor__;
struct g9_rsfunctor__;
struct s_rsfunctor__;
template <typename T0__>
stan::promote_args_t<T0__>
f1(const std::vector<T0__>& y_slice, const int& start, const int& end,
   std::ostream* pstream__) ;

struct f1_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__) const 
{
return f1(y_slice, start + 1, end + 1, pstream__);
}
};


struct f1_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return f1(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f1a(const std::vector<T0__>& y_slice, const int& start, const int& end,
    std::ostream* pstream__) ;

struct f1a_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__) const 
{
return f1a(y_slice, start + 1, end + 1, pstream__);
}
};


struct f1a_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return f1a(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f2(const std::vector<Eigen::Matrix<T0__, -1, 1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) ;

struct f2_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__) const 
{
return f2(y_slice, start + 1, end + 1, pstream__);
}
};


struct f2_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f2(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f3(const std::vector<Eigen::Matrix<T0__, 1, -1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) ;

struct f3_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, 1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__) const 
{
return f3(y_slice, start + 1, end + 1, pstream__);
}
};


struct f3_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, 1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f3(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f4(const std::vector<Eigen::Matrix<T0__, -1, -1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) ;

struct f4_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__) const 
{
return f4(y_slice, start + 1, end + 1, pstream__);
}
};


struct f4_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<Eigen::Matrix<T0__, -1, -1>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f4(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f5(const std::vector<std::vector<T0__>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) ;

struct f5_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<T0__>>& y_slice, const int& start,
           const int& end, std::ostream* pstream__) const 
{
return f5(y_slice, start + 1, end + 1, pstream__);
}
};


struct f5_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<T0__>>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return f5(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f6(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) ;

struct f6_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__) const 
{
return f6(y_slice, start + 1, end + 1, pstream__);
}
};


struct f6_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f6(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f7(const std::vector<std::vector<Eigen::Matrix<T0__, 1, -1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) ;

struct f7_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, 1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__) const 
{
return f7(y_slice, start + 1, end + 1, pstream__);
}
};


struct f7_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, 1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f7(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f8(const std::vector<std::vector<Eigen::Matrix<T0__, -1, -1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) ;

struct f8_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__) const 
{
return f8(y_slice, start + 1, end + 1, pstream__);
}
};


struct f8_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, -1>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f8(y_slice, start, end, pstream__);
}
};

double
f9(const std::vector<int>& y_slice, const int& start, const int& end,
   std::ostream* pstream__) ;

struct f9_rsfunctor__ {
double
operator()(const std::vector<int>& y_slice, const int& start, const int& end,
           std::ostream* pstream__) const 
{
return f9(y_slice, start + 1, end + 1, pstream__);
}
};


struct f9_functor__ {
double
operator()(const std::vector<int>& y_slice, const int& start, const int& end,
           std::ostream* pstream__)  const 
{
return f9(y_slice, start, end, pstream__);
}
};

double
f10(const std::vector<std::vector<int>>& y_slice, const int& start,
    const int& end, std::ostream* pstream__) ;

struct f10_rsfunctor__ {
double
operator()(const std::vector<std::vector<int>>& y_slice, const int& start,
           const int& end, std::ostream* pstream__) const 
{
return f10(y_slice, start + 1, end + 1, pstream__);
}
};


struct f10_functor__ {
double
operator()(const std::vector<std::vector<int>>& y_slice, const int& start,
           const int& end, std::ostream* pstream__)  const 
{
return f10(y_slice, start, end, pstream__);
}
};

double
f11(const std::vector<std::vector<std::vector<int>>>& y_slice,
    const int& start, const int& end, std::ostream* pstream__) ;

struct f11_rsfunctor__ {
double
operator()(const std::vector<std::vector<std::vector<int>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__) const 
{
return f11(y_slice, start + 1, end + 1, pstream__);
}
};


struct f11_functor__ {
double
operator()(const std::vector<std::vector<std::vector<int>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f11(y_slice, start, end, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f12(const std::vector<std::vector<std::vector<T0__>>>& y_slice,
    const int& start, const int& end, std::ostream* pstream__) ;

struct f12_rsfunctor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<std::vector<T0__>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__) const 
{
return f12(y_slice, start + 1, end + 1, pstream__);
}
};


struct f12_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::vector<std::vector<T0__>>>& y_slice,
           const int& start, const int& end, std::ostream* pstream__)  const 
{
return f12(y_slice, start, end, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g1(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const T3__& a, std::ostream* pstream__) ;

struct g1_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__, const T3__& a) const 
{
return g1(y_slice, start + 1, end + 1, a, pstream__);
}
};


struct g1_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const T3__& a, std::ostream* pstream__)  const 
{
return g1(y_slice, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
g2(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const T3__& a, std::ostream* pstream__) ;

struct g2_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__, const T3__& a) const 
{
return g2(y_slice, start + 1, end + 1, a, pstream__);
}
};


struct g2_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const T3__& a, std::ostream* pstream__)  const 
{
return g2(y_slice, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
g3(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const T3__& a, std::ostream* pstream__) ;

struct g3_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__, const T3__& a) const 
{
return g3(y_slice, start + 1, end + 1, a, pstream__);
}
};


struct g3_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const T3__& a, std::ostream* pstream__)  const 
{
return g3(y_slice, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
g4(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const T3__& a, std::ostream* pstream__) ;

struct g4_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__, const T3__& a) const 
{
return g4(y_slice, start + 1, end + 1, a, pstream__);
}
};


struct g4_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const T3__& a, std::ostream* pstream__)  const 
{
return g4(y_slice, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g5(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<T3__>& a, std::ostream* pstream__) ;

struct g5_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<T3__>& a) const 
{
return g5(y_slice, start + 1, end + 1, a, pstream__);
}
};


struct g5_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const std::vector<T3__>& a,
           std::ostream* pstream__)  const 
{
return g5(y_slice, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g6(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, -1, 1>>& a, std::ostream* pstream__) ;

struct g6_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<Eigen::Matrix<T3__, -1, 1>>& a) const 
{
return g6(y_slice, start + 1, end + 1, a, pstream__);
}
};


struct g6_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const std::vector<Eigen::Matrix<T3__, -1, 1>>& a,
           std::ostream* pstream__)  const 
{
return g6(y_slice, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g7(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, 1, -1>>& a, std::ostream* pstream__) ;

struct g7_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<Eigen::Matrix<T3__, 1, -1>>& a) const 
{
return g7(y_slice, start + 1, end + 1, a, pstream__);
}
};


struct g7_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const std::vector<Eigen::Matrix<T3__, 1, -1>>& a,
           std::ostream* pstream__)  const 
{
return g7(y_slice, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g8(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, -1, -1>>& a, std::ostream* pstream__) ;

struct g8_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<Eigen::Matrix<T3__, -1, -1>>& a) const 
{
return g8(y_slice, start + 1, end + 1, a, pstream__);
}
};


struct g8_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const std::vector<Eigen::Matrix<T3__, -1, -1>>& a,
           std::ostream* pstream__)  const 
{
return g8(y_slice, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g9(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<std::vector<T3__>>& a, std::ostream* pstream__) ;

struct g9_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<std::vector<T3__>>& a) const 
{
return g9(y_slice, start + 1, end + 1, a, pstream__);
}
};


struct g9_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const std::vector<std::vector<T3__>>& a,
           std::ostream* pstream__)  const 
{
return g9(y_slice, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g10(const std::vector<T0__>& y_slice, const int& start, const int& end,
    const std::vector<std::vector<Eigen::Matrix<T3__, -1, 1>>>& a,
    std::ostream* pstream__) ;

struct g10_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, 1>>>& a) const 
{
return g10(y_slice, start + 1, end + 1, a, pstream__);
}
};


struct g10_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, 1>>>& a,
           std::ostream* pstream__)  const 
{
return g10(y_slice, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g11(const std::vector<T0__>& y_slice, const int& start, const int& end,
    const std::vector<std::vector<Eigen::Matrix<T3__, 1, -1>>>& a,
    std::ostream* pstream__) ;

struct g11_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<std::vector<Eigen::Matrix<T3__, 1, -1>>>& a) const 
{
return g11(y_slice, start + 1, end + 1, a, pstream__);
}
};


struct g11_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end,
           const std::vector<std::vector<Eigen::Matrix<T3__, 1, -1>>>& a,
           std::ostream* pstream__)  const 
{
return g11(y_slice, start, end, a, pstream__);
}
};

template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g12(const std::vector<T0__>& y_slice, const int& start, const int& end,
    const std::vector<std::vector<Eigen::Matrix<T3__, -1, -1>>>& a,
    std::ostream* pstream__) ;

struct g12_rsfunctor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, -1>>>& a) const 
{
return g12(y_slice, start + 1, end + 1, a, pstream__);
}
};


struct g12_functor__ {
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end,
           const std::vector<std::vector<Eigen::Matrix<T3__, -1, -1>>>& a,
           std::ostream* pstream__)  const 
{
return g12(y_slice, start, end, a, pstream__);
}
};

template <typename T0__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T9__, typename T10__, typename T11__, typename T12__,
typename T14__, typename T15__, typename T16__, typename T17__,
typename T19__>
stan::promote_args_t<T0__, T4__, stan::value_type_t<T5__>,
stan::value_type_t<T6__>,
stan::value_type_t<T7__>, stan::promote_args_t<T9__, T10__, T11__, T12__,
T14__, stan::promote_args_t<T15__, T16__, T17__,
T19__>>>
s(const std::vector<T0__>& y_slice, const int& start, const int& end,
  const int& a, const T4__& b, const T5__& c, const T6__& d, const T7__& e,
  const std::vector<int>& f, const std::vector<T9__>& g,
  const std::vector<Eigen::Matrix<T10__, -1, 1>>& h,
  const std::vector<Eigen::Matrix<T11__, 1, -1>>& i,
  const std::vector<Eigen::Matrix<T12__, -1, -1>>& j,
  const std::vector<std::vector<int>>& k,
  const std::vector<std::vector<T14__>>& l,
  const std::vector<std::vector<Eigen::Matrix<T15__, -1, 1>>>& m,
  const std::vector<std::vector<Eigen::Matrix<T16__, 1, -1>>>& n,
  const std::vector<std::vector<Eigen::Matrix<T17__, -1, -1>>>& o,
  const std::vector<std::vector<std::vector<int>>>& p,
  const std::vector<std::vector<std::vector<T19__>>>& q,
  std::ostream* pstream__) ;

struct s_rsfunctor__ {
template <typename T0__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T9__, typename T10__, typename T11__, typename T12__,
typename T14__, typename T15__, typename T16__, typename T17__,
typename T19__>
stan::promote_args_t<T0__, T4__, stan::value_type_t<T5__>,
stan::value_type_t<T6__>,
stan::value_type_t<T7__>, stan::promote_args_t<T9__, T10__, T11__, T12__,
T14__, stan::promote_args_t<T15__, T16__, T17__,
T19__>>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, std::ostream* pstream__, const int& a,
           const T4__& b, const T5__& c, const T6__& d, const T7__& e,
           const std::vector<int>& f, const std::vector<T9__>& g,
           const std::vector<Eigen::Matrix<T10__, -1, 1>>& h,
           const std::vector<Eigen::Matrix<T11__, 1, -1>>& i,
           const std::vector<Eigen::Matrix<T12__, -1, -1>>& j,
           const std::vector<std::vector<int>>& k,
           const std::vector<std::vector<T14__>>& l,
           const std::vector<std::vector<Eigen::Matrix<T15__, -1, 1>>>& m,
           const std::vector<std::vector<Eigen::Matrix<T16__, 1, -1>>>& n,
           const std::vector<std::vector<Eigen::Matrix<T17__, -1, -1>>>& o,
           const std::vector<std::vector<std::vector<int>>>& p,
           const std::vector<std::vector<std::vector<T19__>>>& q) const 
{
return s(y_slice, start + 1, end + 1, a, b, c, d, e, f, g, h, i, j, k, l, m,
         n, o, p, q, pstream__);
}
};


struct s_functor__ {
template <typename T0__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T9__, typename T10__, typename T11__, typename T12__,
typename T14__, typename T15__, typename T16__, typename T17__,
typename T19__>
stan::promote_args_t<T0__, T4__, stan::value_type_t<T5__>,
stan::value_type_t<T6__>,
stan::value_type_t<T7__>, stan::promote_args_t<T9__, T10__, T11__, T12__,
T14__, stan::promote_args_t<T15__, T16__, T17__,
T19__>>>
operator()(const std::vector<T0__>& y_slice, const int& start,
           const int& end, const int& a, const T4__& b, const T5__& c,
           const T6__& d, const T7__& e, const std::vector<int>& f,
           const std::vector<T9__>& g,
           const std::vector<Eigen::Matrix<T10__, -1, 1>>& h,
           const std::vector<Eigen::Matrix<T11__, 1, -1>>& i,
           const std::vector<Eigen::Matrix<T12__, -1, -1>>& j,
           const std::vector<std::vector<int>>& k,
           const std::vector<std::vector<T14__>>& l,
           const std::vector<std::vector<Eigen::Matrix<T15__, -1, 1>>>& m,
           const std::vector<std::vector<Eigen::Matrix<T16__, 1, -1>>>& n,
           const std::vector<std::vector<Eigen::Matrix<T17__, -1, -1>>>& o,
           const std::vector<std::vector<std::vector<int>>>& p,
           const std::vector<std::vector<std::vector<T19__>>>& q,
           std::ostream* pstream__)  const 
{
return s(y_slice, start, end, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p,
         q, pstream__);
}
};

double
r(std::ostream* pstream__) ;

struct r_functor__ {
double
operator()(std::ostream* pstream__)  const 
{
return r(pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
f1(const std::vector<T0__>& y_slice, const int& start, const int& end,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 171;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
f1a(const std::vector<T0__>& y_slice, const int& start, const int& end,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 173;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
f2(const std::vector<Eigen::Matrix<T0__, -1, 1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 175;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
f3(const std::vector<Eigen::Matrix<T0__, 1, -1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 177;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
f4(const std::vector<Eigen::Matrix<T0__, -1, -1>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 179;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
f5(const std::vector<std::vector<T0__>>& y_slice, const int& start,
   const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 181;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
f6(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 183;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
f7(const std::vector<std::vector<Eigen::Matrix<T0__, 1, -1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 185;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
f8(const std::vector<std::vector<Eigen::Matrix<T0__, -1, -1>>>& y_slice,
   const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 187;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
double
f9(const std::vector<int>& y_slice, const int& start, const int& end,
   std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 189;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
double
f10(const std::vector<std::vector<int>>& y_slice, const int& start,
    const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 191;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
double
f11(const std::vector<std::vector<std::vector<int>>>& y_slice,
    const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 193;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__>
stan::promote_args_t<T0__>
f12(const std::vector<std::vector<std::vector<T0__>>>& y_slice,
    const int& start, const int& end, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 195;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g1(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const T3__& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 197;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
g2(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const T3__& a_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& a = to_ref(a_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 199;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
g3(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const T3__& a_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& a = to_ref(a_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 201;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
stan::value_type_t<T3__>>
g4(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const T3__& a_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& a = to_ref(a_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 203;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g5(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<T3__>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 205;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g6(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, -1, 1>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 207;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g7(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, 1, -1>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 209;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g8(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<Eigen::Matrix<T3__, -1, -1>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 211;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g9(const std::vector<T0__>& y_slice, const int& start, const int& end,
   const std::vector<std::vector<T3__>>& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 213;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g10(const std::vector<T0__>& y_slice, const int& start, const int& end,
    const std::vector<std::vector<Eigen::Matrix<T3__, -1, 1>>>& a,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 215;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g11(const std::vector<T0__>& y_slice, const int& start, const int& end,
    const std::vector<std::vector<Eigen::Matrix<T3__, 1, -1>>>& a,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 217;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T3__>
stan::promote_args_t<T0__,
T3__>
g12(const std::vector<T0__>& y_slice, const int& start, const int& end,
    const std::vector<std::vector<Eigen::Matrix<T3__, -1, -1>>>& a,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 219;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
template <typename T0__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T9__, typename T10__, typename T11__, typename T12__,
typename T14__, typename T15__, typename T16__, typename T17__,
typename T19__>
stan::promote_args_t<T0__, T4__, stan::value_type_t<T5__>,
stan::value_type_t<T6__>,
stan::value_type_t<T7__>, stan::promote_args_t<T9__, T10__, T11__, T12__,
T14__, stan::promote_args_t<T15__, T16__, T17__,
T19__>>>
s(const std::vector<T0__>& y_slice, const int& start, const int& end,
  const int& a, const T4__& b, const T5__& c_arg__, const T6__& d_arg__,
  const T7__& e_arg__, const std::vector<int>& f, const std::vector<T9__>& g,
  const std::vector<Eigen::Matrix<T10__, -1, 1>>& h,
  const std::vector<Eigen::Matrix<T11__, 1, -1>>& i,
  const std::vector<Eigen::Matrix<T12__, -1, -1>>& j,
  const std::vector<std::vector<int>>& k,
  const std::vector<std::vector<T14__>>& l,
  const std::vector<std::vector<Eigen::Matrix<T15__, -1, 1>>>& m,
  const std::vector<std::vector<Eigen::Matrix<T16__, 1, -1>>>& n,
  const std::vector<std::vector<Eigen::Matrix<T17__, -1, -1>>>& o,
  const std::vector<std::vector<std::vector<int>>>& p,
  const std::vector<std::vector<std::vector<T19__>>>& q,
  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T4__,
          stan::value_type_t<T5__>,
          stan::value_type_t<T6__>,
          stan::value_type_t<T7__>, stan::promote_args_t<T9__,
          T10__,
          T11__,
          T12__,
          T14__, stan::promote_args_t<T15__,
          T16__,
          T17__,
          T19__>>>;
  int current_statement__ = 0; 
  const auto& c = to_ref(c_arg__);
  const auto& d = to_ref(d_arg__);
  const auto& e = to_ref(e_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 221;
    return reduce_sum<s_rsfunctor__>(y_slice, 1, pstream__, a, b, c, d, e, f,
             g, h, i, j, k, l, m, n, o, p, q);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
double
r(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 224;
    validate_non_negative_index("y1d", "N", N);
    std::vector<local_scalar_t__> y1d;
    y1d = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
    
    current_statement__ = 226;
    validate_non_negative_index("y2d", "N", N);
    current_statement__ = 227;
    validate_non_negative_index("y2d", "N", N);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y2d;
    y2d = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
    stan::math::fill(y2d, DUMMY_VAR__);
    
    current_statement__ = 229;
    validate_non_negative_index("y3d", "N", N);
    current_statement__ = 230;
    validate_non_negative_index("y3d", "N", N);
    std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> y3d;
    y3d = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N));
    stan::math::fill(y3d, DUMMY_VAR__);
    
    current_statement__ = 232;
    validate_non_negative_index("y4d", "N", N);
    current_statement__ = 233;
    validate_non_negative_index("y4d", "N", N);
    current_statement__ = 234;
    validate_non_negative_index("y4d", "N", N);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> y4d;
    y4d = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>(N, N));
    stan::math::fill(y4d, DUMMY_VAR__);
    
    current_statement__ = 236;
    validate_non_negative_index("y5d", "N", N);
    current_statement__ = 237;
    validate_non_negative_index("y5d", "N", N);
    std::vector<std::vector<local_scalar_t__>> y5d;
    y5d = std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__));
    
    
    current_statement__ = 239;
    validate_non_negative_index("y6d", "N", N);
    current_statement__ = 240;
    validate_non_negative_index("y6d", "N", N);
    current_statement__ = 241;
    validate_non_negative_index("y6d", "N", N);
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> y6d;
    y6d = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N)));
    stan::math::fill(y6d, DUMMY_VAR__);
    
    current_statement__ = 243;
    validate_non_negative_index("y7d", "N", N);
    current_statement__ = 244;
    validate_non_negative_index("y7d", "N", N);
    current_statement__ = 245;
    validate_non_negative_index("y7d", "N", N);
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> y7d;
    y7d = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N)));
    stan::math::fill(y7d, DUMMY_VAR__);
    
    current_statement__ = 247;
    validate_non_negative_index("y8d", "N", N);
    current_statement__ = 248;
    validate_non_negative_index("y8d", "N", N);
    current_statement__ = 249;
    validate_non_negative_index("y8d", "N", N);
    current_statement__ = 250;
    validate_non_negative_index("y8d", "N", N);
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> y8d;
    y8d = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>(N, N)));
    stan::math::fill(y8d, DUMMY_VAR__);
    
    local_scalar_t__ y9d;
    y9d = DUMMY_VAR__;
    
    current_statement__ = 253;
    validate_non_negative_index("y10d", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> y10d;
    y10d = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(y10d, DUMMY_VAR__);
    
    current_statement__ = 255;
    validate_non_negative_index("y11d", "N", N);
    Eigen::Matrix<local_scalar_t__, 1, -1> y11d;
    y11d = Eigen::Matrix<local_scalar_t__, 1, -1>(N);
    stan::math::fill(y11d, DUMMY_VAR__);
    
    current_statement__ = 257;
    validate_non_negative_index("y12d", "N", N);
    current_statement__ = 258;
    validate_non_negative_index("y12d", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> y12d;
    y12d = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(y12d, DUMMY_VAR__);
    
    int y13d;
    y13d = std::numeric_limits<int>::min();
    
    current_statement__ = 261;
    validate_non_negative_index("y14d", "N", N);
    std::vector<int> y14d;
    y14d = std::vector<int>(N, std::numeric_limits<int>::min());
    
    current_statement__ = 263;
    validate_non_negative_index("y15d", "N", N);
    current_statement__ = 264;
    validate_non_negative_index("y15d", "N", N);
    std::vector<std::vector<int>> y15d;
    y15d = std::vector<std::vector<int>>(N, std::vector<int>(N, std::numeric_limits<int>::min()));
    
    
    current_statement__ = 266;
    validate_non_negative_index("y16d", "N", N);
    current_statement__ = 267;
    validate_non_negative_index("y16d", "N", N);
    current_statement__ = 268;
    validate_non_negative_index("y16d", "N", N);
    std::vector<std::vector<std::vector<int>>> y16d;
    y16d = std::vector<std::vector<std::vector<int>>>(N, std::vector<std::vector<int>>(N, std::vector<int>(N, std::numeric_limits<int>::min())));
    
    
    current_statement__ = 270;
    validate_non_negative_index("y17d", "N", N);
    current_statement__ = 271;
    validate_non_negative_index("y17d", "N", N);
    current_statement__ = 272;
    validate_non_negative_index("y17d", "N", N);
    std::vector<std::vector<std::vector<local_scalar_t__>>> y17d;
    y17d = std::vector<std::vector<std::vector<local_scalar_t__>>>(N, std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__)));
    
    
    current_statement__ = 274;
    validate_non_negative_index("y1", "N", N);
    std::vector<local_scalar_t__> y1;
    y1 = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
    
    current_statement__ = 276;
    validate_non_negative_index("y2", "N", N);
    current_statement__ = 277;
    validate_non_negative_index("y2", "N", N);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y2;
    y2 = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
    stan::math::fill(y2, DUMMY_VAR__);
    
    current_statement__ = 279;
    validate_non_negative_index("y3", "N", N);
    current_statement__ = 280;
    validate_non_negative_index("y3", "N", N);
    std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> y3;
    y3 = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N));
    stan::math::fill(y3, DUMMY_VAR__);
    
    current_statement__ = 282;
    validate_non_negative_index("y4", "N", N);
    current_statement__ = 283;
    validate_non_negative_index("y4", "N", N);
    current_statement__ = 284;
    validate_non_negative_index("y4", "N", N);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> y4;
    y4 = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>(N, N));
    stan::math::fill(y4, DUMMY_VAR__);
    
    current_statement__ = 286;
    validate_non_negative_index("y5", "N", N);
    current_statement__ = 287;
    validate_non_negative_index("y5", "N", N);
    std::vector<std::vector<local_scalar_t__>> y5;
    y5 = std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__));
    
    
    current_statement__ = 289;
    validate_non_negative_index("y6", "N", N);
    current_statement__ = 290;
    validate_non_negative_index("y6", "N", N);
    current_statement__ = 291;
    validate_non_negative_index("y6", "N", N);
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> y6;
    y6 = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N)));
    stan::math::fill(y6, DUMMY_VAR__);
    
    current_statement__ = 293;
    validate_non_negative_index("y7", "N", N);
    current_statement__ = 294;
    validate_non_negative_index("y7", "N", N);
    current_statement__ = 295;
    validate_non_negative_index("y7", "N", N);
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> y7;
    y7 = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N)));
    stan::math::fill(y7, DUMMY_VAR__);
    
    current_statement__ = 297;
    validate_non_negative_index("y8", "N", N);
    current_statement__ = 298;
    validate_non_negative_index("y8", "N", N);
    current_statement__ = 299;
    validate_non_negative_index("y8", "N", N);
    current_statement__ = 300;
    validate_non_negative_index("y8", "N", N);
    std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> y8;
    y8 = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>(N, N)));
    stan::math::fill(y8, DUMMY_VAR__);
    
    local_scalar_t__ y9;
    y9 = DUMMY_VAR__;
    
    current_statement__ = 303;
    validate_non_negative_index("y10", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> y10;
    y10 = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(y10, DUMMY_VAR__);
    
    current_statement__ = 305;
    validate_non_negative_index("y11", "N", N);
    Eigen::Matrix<local_scalar_t__, 1, -1> y11;
    y11 = Eigen::Matrix<local_scalar_t__, 1, -1>(N);
    stan::math::fill(y11, DUMMY_VAR__);
    
    current_statement__ = 307;
    validate_non_negative_index("y12", "N", N);
    current_statement__ = 308;
    validate_non_negative_index("y12", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, -1> y12;
    y12 = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
    stan::math::fill(y12, DUMMY_VAR__);
    
    current_statement__ = 310;
    validate_non_negative_index("y17", "N", N);
    current_statement__ = 311;
    validate_non_negative_index("y17", "N", N);
    current_statement__ = 312;
    validate_non_negative_index("y17", "N", N);
    std::vector<std::vector<std::vector<local_scalar_t__>>> y17;
    y17 = std::vector<std::vector<std::vector<local_scalar_t__>>>(N, std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__)));
    
    
    local_scalar_t__ t1;
    current_statement__ = 314;
    t1 = reduce_sum<f1_rsfunctor__>(y1, 1, pstream__);
    local_scalar_t__ t1a;
    current_statement__ = 315;
    t1a = (reduce_sum<f1_rsfunctor__>(y1, 1, pstream__) +
            reduce_sum<f1a_rsfunctor__>(y1, 1, pstream__));
    local_scalar_t__ t2;
    current_statement__ = 316;
    t2 = reduce_sum<f2_rsfunctor__>(y2, 1, pstream__);
    local_scalar_t__ t3;
    current_statement__ = 317;
    t3 = reduce_sum<f3_rsfunctor__>(y3, 1, pstream__);
    local_scalar_t__ t4;
    current_statement__ = 318;
    t4 = reduce_sum<f4_rsfunctor__>(y4, 1, pstream__);
    local_scalar_t__ t5;
    current_statement__ = 319;
    t5 = reduce_sum<f5_rsfunctor__>(y5, 1, pstream__);
    local_scalar_t__ t6;
    current_statement__ = 320;
    t6 = reduce_sum<f6_rsfunctor__>(y6, 1, pstream__);
    local_scalar_t__ t7;
    current_statement__ = 321;
    t7 = reduce_sum<f7_rsfunctor__>(y7, 1, pstream__);
    local_scalar_t__ t8;
    current_statement__ = 322;
    t8 = reduce_sum<f8_rsfunctor__>(y8, 1, pstream__);
    local_scalar_t__ t9;
    current_statement__ = 323;
    t9 = reduce_sum<f9_rsfunctor__>(y14d, 1, pstream__);
    local_scalar_t__ t10;
    current_statement__ = 324;
    t10 = reduce_sum<f10_rsfunctor__>(y15d, 1, pstream__);
    local_scalar_t__ t11;
    current_statement__ = 325;
    t11 = reduce_sum<f11_rsfunctor__>(y16d, 1, pstream__);
    local_scalar_t__ t12;
    current_statement__ = 326;
    t12 = reduce_sum<f12_rsfunctor__>(y17, 1, pstream__);
    local_scalar_t__ tg1;
    current_statement__ = 327;
    tg1 = reduce_sum<g1_rsfunctor__>(y1, 1, pstream__, y9);
    local_scalar_t__ tg2;
    current_statement__ = 328;
    tg2 = reduce_sum<g2_rsfunctor__>(y1, 1, pstream__, y10);
    local_scalar_t__ tg3;
    current_statement__ = 329;
    tg3 = reduce_sum<g3_rsfunctor__>(y1, 1, pstream__, y11);
    local_scalar_t__ tg4;
    current_statement__ = 330;
    tg4 = reduce_sum<g4_rsfunctor__>(y1, 1, pstream__, y12);
    local_scalar_t__ tg5;
    current_statement__ = 331;
    tg5 = reduce_sum<g5_rsfunctor__>(y1, 1, pstream__, y1);
    local_scalar_t__ tg6;
    current_statement__ = 332;
    tg6 = reduce_sum<g6_rsfunctor__>(y1, 1, pstream__, y2);
    local_scalar_t__ tg7;
    current_statement__ = 333;
    tg7 = reduce_sum<g7_rsfunctor__>(y1, 1, pstream__, y3);
    local_scalar_t__ tg8;
    current_statement__ = 334;
    tg8 = reduce_sum<g8_rsfunctor__>(y1, 1, pstream__, y4);
    local_scalar_t__ tg9;
    current_statement__ = 335;
    tg9 = reduce_sum<g9_rsfunctor__>(y1, 1, pstream__, y5);
    local_scalar_t__ tg10;
    current_statement__ = 336;
    tg10 = reduce_sum<g10_rsfunctor__>(y1, 1, pstream__, y6);
    local_scalar_t__ tg11;
    current_statement__ = 337;
    tg11 = reduce_sum<g11_rsfunctor__>(y1, 1, pstream__, y7);
    local_scalar_t__ tg12;
    current_statement__ = 338;
    tg12 = reduce_sum<g12_rsfunctor__>(y1, 1, pstream__, y8);
    local_scalar_t__ ts;
    current_statement__ = 339;
    ts = reduce_sum<s_rsfunctor__>(y1d, 1, pstream__, y13d, y9, y10, y11,
           y12, y14d, y1, y2, y3, y4, y15d, y5, y6, y7, y8, y16d, y17);
    current_statement__ = 340;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}
class reduce_sum_m3_model final : public model_base_crtp<reduce_sum_m3_model> {

 private:
  int N;
  std::vector<double> y1d;
  std::vector<Eigen::Matrix<double, -1, 1>> y2d;
  std::vector<Eigen::Matrix<double, 1, -1>> y3d;
  std::vector<Eigen::Matrix<double, -1, -1>> y4d;
  std::vector<std::vector<double>> y5d;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> y6d;
  std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> y7d;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> y8d;
  double y9d;
  Eigen::Matrix<double, -1, 1> y10d__;
  Eigen::Matrix<double, 1, -1> y11d__;
  Eigen::Matrix<double, -1, -1> y12d__;
  int y13d;
  std::vector<int> y14d;
  std::vector<std::vector<int>> y15d;
  std::vector<std::vector<std::vector<int>>> y16d;
  std::vector<std::vector<std::vector<double>>> y17d;
  double td1;
  double td1a;
  double td2;
  double td3;
  double td4;
  double td5;
  double td6;
  double td7;
  double td8;
  double td9;
  double td10;
  double td11;
  double td12;
  double tgd1;
  double tgd2;
  double tgd3;
  double tgd4;
  double tgd5;
  double tgd6;
  double tgd7;
  double tgd8;
  double tgd9;
  double tgd10;
  double tgd11;
  double tgd12;
  double tsd; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y10d{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> y11d{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> y12d{nullptr, 0, 0};
 
 public:
  ~reduce_sum_m3_model() { }
  
  inline std::string model_name() const final { return "reduce_sum_m3_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  reduce_sum_m3_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m3_model_namespace::reduce_sum_m3_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = 1;
      current_statement__ = 67;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 67;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 68;
      validate_non_negative_index("y1d", "N", N);
      current_statement__ = 69;
      context__.validate_dims("data initialization","y1d","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y1d = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 69;
      y1d = context__.vals_r("y1d");
      current_statement__ = 70;
      validate_non_negative_index("y2d", "N", N);
      current_statement__ = 71;
      validate_non_negative_index("y2d", "N", N);
      current_statement__ = 72;
      context__.validate_dims("data initialization","y2d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N)});
      y2d = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      
      {
        std::vector<local_scalar_t__> y2d_flat__;
        current_statement__ = 72;
        y2d_flat__ = context__.vals_r("y2d");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 72;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 72;
            assign(y2d, y2d_flat__[(pos__ - 1)],
              "assigning variable y2d", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 72;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 73;
      validate_non_negative_index("y3d", "N", N);
      current_statement__ = 74;
      validate_non_negative_index("y3d", "N", N);
      current_statement__ = 75;
      context__.validate_dims("data initialization","y3d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N)});
      y3d = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>(N));
      
      
      {
        std::vector<local_scalar_t__> y3d_flat__;
        current_statement__ = 75;
        y3d_flat__ = context__.vals_r("y3d");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 75;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 75;
            assign(y3d, y3d_flat__[(pos__ - 1)],
              "assigning variable y3d", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 75;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 76;
      validate_non_negative_index("y4d", "N", N);
      current_statement__ = 77;
      validate_non_negative_index("y4d", "N", N);
      current_statement__ = 78;
      validate_non_negative_index("y4d", "N", N);
      current_statement__ = 79;
      context__.validate_dims("data initialization","y4d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N), static_cast<size_t>(N)});
      y4d = std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>(N, N));
      
      
      {
        std::vector<local_scalar_t__> y4d_flat__;
        current_statement__ = 79;
        y4d_flat__ = context__.vals_r("y4d");
        current_statement__ = 79;
        pos__ = 1;
        current_statement__ = 79;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 79;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 79;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 79;
              assign(y4d, y4d_flat__[(pos__ - 1)],
                "assigning variable y4d", index_uni(sym3__),
                                            index_uni(sym2__),
                                            index_uni(sym1__));
              current_statement__ = 79;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 80;
      validate_non_negative_index("y5d", "N", N);
      current_statement__ = 81;
      validate_non_negative_index("y5d", "N", N);
      current_statement__ = 82;
      context__.validate_dims("data initialization","y5d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N)});
      y5d = std::vector<std::vector<double>>(N, std::vector<double>(N, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> y5d_flat__;
        current_statement__ = 82;
        y5d_flat__ = context__.vals_r("y5d");
        current_statement__ = 82;
        pos__ = 1;
        current_statement__ = 82;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 82;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 82;
            assign(y5d, y5d_flat__[(pos__ - 1)],
              "assigning variable y5d", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 82;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 83;
      validate_non_negative_index("y6d", "N", N);
      current_statement__ = 84;
      validate_non_negative_index("y6d", "N", N);
      current_statement__ = 85;
      validate_non_negative_index("y6d", "N", N);
      current_statement__ = 86;
      context__.validate_dims("data initialization","y6d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N), static_cast<size_t>(N)});
      y6d = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N, std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N)));
      
      
      {
        std::vector<local_scalar_t__> y6d_flat__;
        current_statement__ = 86;
        y6d_flat__ = context__.vals_r("y6d");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 86;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 86;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 86;
              assign(y6d, y6d_flat__[(pos__ - 1)],
                "assigning variable y6d", index_uni(sym3__),
                                            index_uni(sym2__),
                                            index_uni(sym1__));
              current_statement__ = 86;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 87;
      validate_non_negative_index("y7d", "N", N);
      current_statement__ = 88;
      validate_non_negative_index("y7d", "N", N);
      current_statement__ = 89;
      validate_non_negative_index("y7d", "N", N);
      current_statement__ = 90;
      context__.validate_dims("data initialization","y7d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N), static_cast<size_t>(N)});
      y7d = std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(N, std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>(N)));
      
      
      {
        std::vector<local_scalar_t__> y7d_flat__;
        current_statement__ = 90;
        y7d_flat__ = context__.vals_r("y7d");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 90;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 90;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 90;
              assign(y7d, y7d_flat__[(pos__ - 1)],
                "assigning variable y7d", index_uni(sym3__),
                                            index_uni(sym2__),
                                            index_uni(sym1__));
              current_statement__ = 90;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 91;
      validate_non_negative_index("y8d", "N", N);
      current_statement__ = 92;
      validate_non_negative_index("y8d", "N", N);
      current_statement__ = 93;
      validate_non_negative_index("y8d", "N", N);
      current_statement__ = 94;
      validate_non_negative_index("y8d", "N", N);
      current_statement__ = 95;
      context__.validate_dims("data initialization","y8d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N), static_cast<size_t>(N),
            static_cast<size_t>(N)});
      y8d = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(N, std::vector<Eigen::Matrix<double, -1, -1>>(N, Eigen::Matrix<double, -1, -1>(N, N)));
      
      
      {
        std::vector<local_scalar_t__> y8d_flat__;
        current_statement__ = 95;
        y8d_flat__ = context__.vals_r("y8d");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 95;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 95;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 95;
              for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                current_statement__ = 95;
                assign(y8d, y8d_flat__[(pos__ - 1)],
                  "assigning variable y8d", index_uni(sym4__),
                                              index_uni(sym3__),
                                              index_uni(sym2__),
                                              index_uni(sym1__));
                current_statement__ = 95;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 96;
      context__.validate_dims("data initialization","y9d","double",
           std::vector<size_t>{});
      y9d = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 96;
      y9d = context__.vals_r("y9d")[(1 - 1)];
      current_statement__ = 97;
      validate_non_negative_index("y10d", "N", N);
      current_statement__ = 98;
      context__.validate_dims("data initialization","y10d","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y10d__ = Eigen::Matrix<double, -1, 1>(N);
      new (&y10d) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y10d__.data(), N);
      
      {
        std::vector<local_scalar_t__> y10d_flat__;
        current_statement__ = 98;
        y10d_flat__ = context__.vals_r("y10d");
        current_statement__ = 98;
        pos__ = 1;
        current_statement__ = 98;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 98;
          assign(y10d, y10d_flat__[(pos__ - 1)],
            "assigning variable y10d", index_uni(sym1__));
          current_statement__ = 98;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 99;
      validate_non_negative_index("y11d", "N", N);
      current_statement__ = 100;
      context__.validate_dims("data initialization","y11d","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y11d__ = Eigen::Matrix<double, 1, -1>(N);
      new (&y11d) Eigen::Map<Eigen::Matrix<double, 1, -1>>(y11d__.data(), N);
      
      {
        std::vector<local_scalar_t__> y11d_flat__;
        current_statement__ = 100;
        y11d_flat__ = context__.vals_r("y11d");
        current_statement__ = 100;
        pos__ = 1;
        current_statement__ = 100;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 100;
          assign(y11d, y11d_flat__[(pos__ - 1)],
            "assigning variable y11d", index_uni(sym1__));
          current_statement__ = 100;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 101;
      validate_non_negative_index("y12d", "N", N);
      current_statement__ = 102;
      validate_non_negative_index("y12d", "N", N);
      current_statement__ = 103;
      context__.validate_dims("data initialization","y12d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N)});
      y12d__ = Eigen::Matrix<double, -1, -1>(N, N);
      new (&y12d) Eigen::Map<Eigen::Matrix<double, -1, -1>>(y12d__.data(), N, N);
      
      
      {
        std::vector<local_scalar_t__> y12d_flat__;
        current_statement__ = 103;
        y12d_flat__ = context__.vals_r("y12d");
        current_statement__ = 103;
        pos__ = 1;
        current_statement__ = 103;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 103;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 103;
            assign(y12d, y12d_flat__[(pos__ - 1)],
              "assigning variable y12d", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 103;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 104;
      context__.validate_dims("data initialization","y13d","int",
           std::vector<size_t>{});
      y13d = std::numeric_limits<int>::min();
      
      current_statement__ = 104;
      y13d = context__.vals_i("y13d")[(1 - 1)];
      current_statement__ = 105;
      validate_non_negative_index("y14d", "N", N);
      current_statement__ = 106;
      context__.validate_dims("data initialization","y14d","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      y14d = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 106;
      y14d = context__.vals_i("y14d");
      current_statement__ = 107;
      validate_non_negative_index("y15d", "N", N);
      current_statement__ = 108;
      validate_non_negative_index("y15d", "N", N);
      current_statement__ = 109;
      context__.validate_dims("data initialization","y15d","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N)});
      y15d = std::vector<std::vector<int>>(N, std::vector<int>(N, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> y15d_flat__;
        current_statement__ = 109;
        y15d_flat__ = context__.vals_i("y15d");
        current_statement__ = 109;
        pos__ = 1;
        current_statement__ = 109;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 109;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 109;
            assign(y15d, y15d_flat__[(pos__ - 1)],
              "assigning variable y15d", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 109;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 110;
      validate_non_negative_index("y16d", "N", N);
      current_statement__ = 111;
      validate_non_negative_index("y16d", "N", N);
      current_statement__ = 112;
      validate_non_negative_index("y16d", "N", N);
      current_statement__ = 113;
      context__.validate_dims("data initialization","y16d","int",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N), static_cast<size_t>(N)});
      y16d = std::vector<std::vector<std::vector<int>>>(N, std::vector<std::vector<int>>(N, std::vector<int>(N, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> y16d_flat__;
        current_statement__ = 113;
        y16d_flat__ = context__.vals_i("y16d");
        current_statement__ = 113;
        pos__ = 1;
        current_statement__ = 113;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 113;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 113;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 113;
              assign(y16d, y16d_flat__[(pos__ - 1)],
                "assigning variable y16d", index_uni(sym3__),
                                             index_uni(sym2__),
                                             index_uni(sym1__));
              current_statement__ = 113;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 114;
      validate_non_negative_index("y17d", "N", N);
      current_statement__ = 115;
      validate_non_negative_index("y17d", "N", N);
      current_statement__ = 116;
      validate_non_negative_index("y17d", "N", N);
      current_statement__ = 117;
      context__.validate_dims("data initialization","y17d","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N), static_cast<size_t>(N)});
      y17d = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(N, std::vector<double>(N, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> y17d_flat__;
        current_statement__ = 117;
        y17d_flat__ = context__.vals_r("y17d");
        current_statement__ = 117;
        pos__ = 1;
        current_statement__ = 117;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 117;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 117;
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              current_statement__ = 117;
              assign(y17d, y17d_flat__[(pos__ - 1)],
                "assigning variable y17d", index_uni(sym3__),
                                             index_uni(sym2__),
                                             index_uni(sym1__));
              current_statement__ = 117;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 118;
      td1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 118;
      td1 = reduce_sum<f1_rsfunctor__>(y1d, 1, pstream__);
      current_statement__ = 119;
      td1a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 119;
      td1a = (reduce_sum<f1_rsfunctor__>(y1d, 1, pstream__) +
               reduce_sum<f1a_rsfunctor__>(y1d, 1, pstream__));
      current_statement__ = 120;
      td2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 120;
      td2 = reduce_sum<f2_rsfunctor__>(y2d, 1, pstream__);
      current_statement__ = 121;
      td3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 121;
      td3 = reduce_sum<f3_rsfunctor__>(y3d, 1, pstream__);
      current_statement__ = 122;
      td4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 122;
      td4 = reduce_sum<f4_rsfunctor__>(y4d, 1, pstream__);
      current_statement__ = 123;
      td5 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 123;
      td5 = reduce_sum<f5_rsfunctor__>(y5d, 1, pstream__);
      current_statement__ = 124;
      td6 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 124;
      td6 = reduce_sum<f6_rsfunctor__>(y6d, 1, pstream__);
      current_statement__ = 125;
      td7 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 125;
      td7 = reduce_sum<f7_rsfunctor__>(y7d, 1, pstream__);
      current_statement__ = 126;
      td8 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 126;
      td8 = reduce_sum<f8_rsfunctor__>(y8d, 1, pstream__);
      current_statement__ = 127;
      td9 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 127;
      td9 = reduce_sum<f9_rsfunctor__>(y14d, 1, pstream__);
      current_statement__ = 128;
      td10 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 128;
      td10 = reduce_sum<f10_rsfunctor__>(y15d, 1, pstream__);
      current_statement__ = 129;
      td11 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 129;
      td11 = reduce_sum<f11_rsfunctor__>(y16d, 1, pstream__);
      current_statement__ = 130;
      td12 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 130;
      td12 = reduce_sum<f12_rsfunctor__>(y17d, 1, pstream__);
      current_statement__ = 131;
      tgd1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 131;
      tgd1 = reduce_sum<g1_rsfunctor__>(y1d, 1, pstream__, y9d);
      current_statement__ = 132;
      tgd2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 132;
      tgd2 = reduce_sum<g2_rsfunctor__>(y1d, 1, pstream__, y10d);
      current_statement__ = 133;
      tgd3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 133;
      tgd3 = reduce_sum<g3_rsfunctor__>(y1d, 1, pstream__, y11d);
      current_statement__ = 134;
      tgd4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 134;
      tgd4 = reduce_sum<g4_rsfunctor__>(y1d, 1, pstream__, y12d);
      current_statement__ = 135;
      tgd5 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 135;
      tgd5 = reduce_sum<g5_rsfunctor__>(y1d, 1, pstream__, y1d);
      current_statement__ = 136;
      tgd6 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 136;
      tgd6 = reduce_sum<g6_rsfunctor__>(y1d, 1, pstream__, y2d);
      current_statement__ = 137;
      tgd7 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 137;
      tgd7 = reduce_sum<g7_rsfunctor__>(y1d, 1, pstream__, y3d);
      current_statement__ = 138;
      tgd8 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 138;
      tgd8 = reduce_sum<g8_rsfunctor__>(y1d, 1, pstream__, y4d);
      current_statement__ = 139;
      tgd9 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 139;
      tgd9 = reduce_sum<g9_rsfunctor__>(y1d, 1, pstream__, y5d);
      current_statement__ = 140;
      tgd10 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 140;
      tgd10 = reduce_sum<g10_rsfunctor__>(y1d, 1, pstream__, y6d);
      current_statement__ = 141;
      tgd11 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 141;
      tgd11 = reduce_sum<g11_rsfunctor__>(y1d, 1, pstream__, y7d);
      current_statement__ = 142;
      tgd12 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 142;
      tgd12 = reduce_sum<g12_rsfunctor__>(y1d, 1, pstream__, y8d);
      current_statement__ = 143;
      tsd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 143;
      tsd = reduce_sum<s_rsfunctor__>(y1d, 1, pstream__, y13d, y9d, y10d,
              y11d, y12d, y14d, y1d, y2d, y3d, y4d, y15d, y5d, y6d, y7d, y8d,
              y16d, y17d);
      current_statement__ = 144;
      validate_non_negative_index("y1", "N", N);
      current_statement__ = 145;
      validate_non_negative_index("y2", "N", N);
      current_statement__ = 146;
      validate_non_negative_index("y2", "N", N);
      current_statement__ = 147;
      validate_non_negative_index("y3", "N", N);
      current_statement__ = 148;
      validate_non_negative_index("y3", "N", N);
      current_statement__ = 149;
      validate_non_negative_index("y4", "N", N);
      current_statement__ = 150;
      validate_non_negative_index("y4", "N", N);
      current_statement__ = 151;
      validate_non_negative_index("y4", "N", N);
      current_statement__ = 152;
      validate_non_negative_index("y5", "N", N);
      current_statement__ = 153;
      validate_non_negative_index("y5", "N", N);
      current_statement__ = 154;
      validate_non_negative_index("y6", "N", N);
      current_statement__ = 155;
      validate_non_negative_index("y6", "N", N);
      current_statement__ = 156;
      validate_non_negative_index("y6", "N", N);
      current_statement__ = 157;
      validate_non_negative_index("y7", "N", N);
      current_statement__ = 158;
      validate_non_negative_index("y7", "N", N);
      current_statement__ = 159;
      validate_non_negative_index("y7", "N", N);
      current_statement__ = 160;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 161;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 162;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 163;
      validate_non_negative_index("y8", "N", N);
      current_statement__ = 164;
      validate_non_negative_index("y10", "N", N);
      current_statement__ = 165;
      validate_non_negative_index("y11", "N", N);
      current_statement__ = 166;
      validate_non_negative_index("y12", "N", N);
      current_statement__ = 167;
      validate_non_negative_index("y12", "N", N);
      current_statement__ = 168;
      validate_non_negative_index("y17", "N", N);
      current_statement__ = 169;
      validate_non_negative_index("y17", "N", N);
      current_statement__ = 170;
      validate_non_negative_index("y17", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N + (N * N) + (N * N) + (N * N * N) + (N * N)
       + (N * N * N) + (N * N * N) + (N * N * N * N) + 1 + N + N + (N * N)
       + (N * N * N);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m3_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> y1;
      current_statement__ = 1;
      y1 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y2;
      current_statement__ = 2;
      y2 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
             N, N);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> y3;
      current_statement__ = 3;
      y3 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
             N, N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> y4;
      current_statement__ = 4;
      y4 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(
             N, N, N);
      std::vector<std::vector<local_scalar_t__>> y5;
      current_statement__ = 5;
      y5 = in__.template read<std::vector<std::vector<local_scalar_t__>>>(N,
             N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> y6;
      current_statement__ = 6;
      y6 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> y7;
      current_statement__ = 7;
      y7 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> y8;
      current_statement__ = 8;
      y8 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>(
             N, N, N, N);
      local_scalar_t__ y9;
      current_statement__ = 9;
      y9 = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> y10;
      current_statement__ = 10;
      y10 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      Eigen::Matrix<local_scalar_t__, 1, -1> y11;
      current_statement__ = 11;
      y11 = in__.template read<Eigen::Matrix<local_scalar_t__, 1, -1>>(N);
      Eigen::Matrix<local_scalar_t__, -1, -1> y12;
      current_statement__ = 12;
      y12 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, N);
      std::vector<std::vector<std::vector<local_scalar_t__>>> y17;
      current_statement__ = 13;
      y17 = in__.template read<std::vector<std::vector<std::vector<local_scalar_t__>>>>(
              N, N, N);
      {
        local_scalar_t__ t1;
        current_statement__ = 40;
        t1 = reduce_sum<f1_rsfunctor__>(y1, 1, pstream__);
        local_scalar_t__ t1a;
        current_statement__ = 41;
        t1a = (reduce_sum<f1_rsfunctor__>(y1, 1, pstream__) +
                reduce_sum<f1a_rsfunctor__>(y1, 1, pstream__));
        local_scalar_t__ t2;
        current_statement__ = 42;
        t2 = reduce_sum<f2_rsfunctor__>(y2, 1, pstream__);
        local_scalar_t__ t3;
        current_statement__ = 43;
        t3 = reduce_sum<f3_rsfunctor__>(y3, 1, pstream__);
        local_scalar_t__ t4;
        current_statement__ = 44;
        t4 = reduce_sum<f4_rsfunctor__>(y4, 1, pstream__);
        local_scalar_t__ t5;
        current_statement__ = 45;
        t5 = reduce_sum<f5_rsfunctor__>(y5, 1, pstream__);
        local_scalar_t__ t6;
        current_statement__ = 46;
        t6 = reduce_sum<f6_rsfunctor__>(y6, 1, pstream__);
        local_scalar_t__ t7;
        current_statement__ = 47;
        t7 = reduce_sum<f7_rsfunctor__>(y7, 1, pstream__);
        local_scalar_t__ t8;
        current_statement__ = 48;
        t8 = reduce_sum<f8_rsfunctor__>(y8, 1, pstream__);
        local_scalar_t__ t9;
        current_statement__ = 49;
        t9 = reduce_sum<f9_rsfunctor__>(y14d, 1, pstream__);
        local_scalar_t__ t10;
        current_statement__ = 50;
        t10 = reduce_sum<f10_rsfunctor__>(y15d, 1, pstream__);
        local_scalar_t__ t11;
        current_statement__ = 51;
        t11 = reduce_sum<f11_rsfunctor__>(y16d, 1, pstream__);
        local_scalar_t__ t12;
        current_statement__ = 52;
        t12 = reduce_sum<f12_rsfunctor__>(y17, 1, pstream__);
        local_scalar_t__ tg1;
        current_statement__ = 53;
        tg1 = reduce_sum<g1_rsfunctor__>(y1, 1, pstream__, y9);
        local_scalar_t__ tg2;
        current_statement__ = 54;
        tg2 = reduce_sum<g2_rsfunctor__>(y1, 1, pstream__, y10);
        local_scalar_t__ tg3;
        current_statement__ = 55;
        tg3 = reduce_sum<g3_rsfunctor__>(y1, 1, pstream__, y11);
        local_scalar_t__ tg4;
        current_statement__ = 56;
        tg4 = reduce_sum<g4_rsfunctor__>(y1, 1, pstream__, y12);
        local_scalar_t__ tg5;
        current_statement__ = 57;
        tg5 = reduce_sum<g5_rsfunctor__>(y1, 1, pstream__, y1);
        local_scalar_t__ tg6;
        current_statement__ = 58;
        tg6 = reduce_sum<g6_rsfunctor__>(y1, 1, pstream__, y2);
        local_scalar_t__ tg7;
        current_statement__ = 59;
        tg7 = reduce_sum<g7_rsfunctor__>(y1, 1, pstream__, y3);
        local_scalar_t__ tg8;
        current_statement__ = 60;
        tg8 = reduce_sum<g8_rsfunctor__>(y1, 1, pstream__, y4);
        local_scalar_t__ tg9;
        current_statement__ = 61;
        tg9 = reduce_sum<g9_rsfunctor__>(y1, 1, pstream__, y5);
        local_scalar_t__ tg10;
        current_statement__ = 62;
        tg10 = reduce_sum<g10_rsfunctor__>(y1, 1, pstream__, y6);
        local_scalar_t__ tg11;
        current_statement__ = 63;
        tg11 = reduce_sum<g11_rsfunctor__>(y1, 1, pstream__, y7);
        local_scalar_t__ tg12;
        current_statement__ = 64;
        tg12 = reduce_sum<g12_rsfunctor__>(y1, 1, pstream__, y8);
        local_scalar_t__ ts;
        current_statement__ = 65;
        ts = reduce_sum<s_rsfunctor__>(y1d, 1, pstream__, y13d, y9, y10, y11,
               y12, y14d, y1, y2, y3, y4, y15d, y5, y6, y7, y8, y16d, y17);
        local_scalar_t__ tt;
        current_statement__ = 66;
        tt = r(pstream__);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "reduce_sum_m3_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> y1;
      current_statement__ = 1;
      y1 = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<Eigen::Matrix<double, -1, 1>> y2;
      current_statement__ = 2;
      y2 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
             N, N);
      std::vector<Eigen::Matrix<double, 1, -1>> y3;
      current_statement__ = 3;
      y3 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(
             N, N);
      std::vector<Eigen::Matrix<double, -1, -1>> y4;
      current_statement__ = 4;
      y4 = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(
             N, N, N);
      std::vector<std::vector<double>> y5;
      current_statement__ = 5;
      y5 = in__.template read<std::vector<std::vector<local_scalar_t__>>>(N,
             N);
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> y6;
      current_statement__ = 6;
      y6 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<double, 1, -1>>> y7;
      current_statement__ = 7;
      y7 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(
             N, N, N);
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> y8;
      current_statement__ = 8;
      y8 = in__.template read<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>>(
             N, N, N, N);
      double y9;
      current_statement__ = 9;
      y9 = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> y10;
      current_statement__ = 10;
      y10 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      Eigen::Matrix<double, 1, -1> y11;
      current_statement__ = 11;
      y11 = in__.template read<Eigen::Matrix<local_scalar_t__, 1, -1>>(N);
      Eigen::Matrix<double, -1, -1> y12;
      current_statement__ = 12;
      y12 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, N);
      std::vector<std::vector<std::vector<double>>> y17;
      current_statement__ = 13;
      y17 = in__.template read<std::vector<std::vector<std::vector<local_scalar_t__>>>>(
              N, N, N);
      out__.write(y1);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(y2[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(y3[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            out__.write(
              rvalue(y4, "y4",
                index_uni(sym3__), index_uni(sym2__), index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(y5[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            out__.write(y6[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            out__.write(y7[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              out__.write(
                rvalue(y8, "y8",
                  index_uni(sym4__), index_uni(sym3__), index_uni(sym2__),
                    index_uni(sym1__)));
            }
          }
        }
      }
      out__.write(y9);
      out__.write(y10);
      out__.write(y11);
      out__.write(y12);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            out__.write(y17[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double t1;
      current_statement__ = 14;
      t1 = reduce_sum<f1_rsfunctor__>(y1, 1, pstream__);
      double t1a;
      current_statement__ = 15;
      t1a = (reduce_sum<f1_rsfunctor__>(y1, 1, pstream__) +
              reduce_sum<f1a_rsfunctor__>(y1, 1, pstream__));
      double t2;
      current_statement__ = 16;
      t2 = reduce_sum<f2_rsfunctor__>(y2, 1, pstream__);
      double t3;
      current_statement__ = 17;
      t3 = reduce_sum<f3_rsfunctor__>(y3, 1, pstream__);
      double t4;
      current_statement__ = 18;
      t4 = reduce_sum<f4_rsfunctor__>(y4, 1, pstream__);
      double t5;
      current_statement__ = 19;
      t5 = reduce_sum<f5_rsfunctor__>(y5, 1, pstream__);
      double t6;
      current_statement__ = 20;
      t6 = reduce_sum<f6_rsfunctor__>(y6, 1, pstream__);
      double t7;
      current_statement__ = 21;
      t7 = reduce_sum<f7_rsfunctor__>(y7, 1, pstream__);
      double t8;
      current_statement__ = 22;
      t8 = reduce_sum<f8_rsfunctor__>(y8, 1, pstream__);
      double t9;
      current_statement__ = 23;
      t9 = reduce_sum<f9_rsfunctor__>(y14d, 1, pstream__);
      double t10;
      current_statement__ = 24;
      t10 = reduce_sum<f10_rsfunctor__>(y15d, 1, pstream__);
      double t11;
      current_statement__ = 25;
      t11 = reduce_sum<f11_rsfunctor__>(y16d, 1, pstream__);
      double t12;
      current_statement__ = 26;
      t12 = reduce_sum<f12_rsfunctor__>(y17, 1, pstream__);
      double tg1;
      current_statement__ = 27;
      tg1 = reduce_sum<g1_rsfunctor__>(y1, 1, pstream__, y9);
      double tg2;
      current_statement__ = 28;
      tg2 = reduce_sum<g2_rsfunctor__>(y1, 1, pstream__, y10);
      double tg3;
      current_statement__ = 29;
      tg3 = reduce_sum<g3_rsfunctor__>(y1, 1, pstream__, y11);
      double tg4;
      current_statement__ = 30;
      tg4 = reduce_sum<g4_rsfunctor__>(y1, 1, pstream__, y12);
      double tg5;
      current_statement__ = 31;
      tg5 = reduce_sum<g5_rsfunctor__>(y1, 1, pstream__, y1);
      double tg6;
      current_statement__ = 32;
      tg6 = reduce_sum<g6_rsfunctor__>(y1, 1, pstream__, y2);
      double tg7;
      current_statement__ = 33;
      tg7 = reduce_sum<g7_rsfunctor__>(y1, 1, pstream__, y3);
      double tg8;
      current_statement__ = 34;
      tg8 = reduce_sum<g8_rsfunctor__>(y1, 1, pstream__, y4);
      double tg9;
      current_statement__ = 35;
      tg9 = reduce_sum<g9_rsfunctor__>(y1, 1, pstream__, y5);
      double tg10;
      current_statement__ = 36;
      tg10 = reduce_sum<g10_rsfunctor__>(y1, 1, pstream__, y6);
      double tg11;
      current_statement__ = 37;
      tg11 = reduce_sum<g11_rsfunctor__>(y1, 1, pstream__, y7);
      double tg12;
      current_statement__ = 38;
      tg12 = reduce_sum<g12_rsfunctor__>(y1, 1, pstream__, y8);
      double tgs;
      current_statement__ = 39;
      tgs = reduce_sum<s_rsfunctor__>(y1d, 1, pstream__, y13d, y9d, y10d,
              y11d, y12d, y14d, y1d, y2d, y3d, y4d, y15d, y5d, y6d, y7d, y8d,
              y16d, y17);
      out__.write(t1);
      out__.write(t1a);
      out__.write(t2);
      out__.write(t3);
      out__.write(t4);
      out__.write(t5);
      out__.write(t6);
      out__.write(t7);
      out__.write(t8);
      out__.write(t9);
      out__.write(t10);
      out__.write(t11);
      out__.write(t12);
      out__.write(tg1);
      out__.write(tg2);
      out__.write(tg3);
      out__.write(tg4);
      out__.write(tg5);
      out__.write(tg6);
      out__.write(tg7);
      out__.write(tg8);
      out__.write(tg9);
      out__.write(tg10);
      out__.write(tg11);
      out__.write(tg12);
      out__.write(tgs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = 1;
      std::vector<local_scalar_t__> y1;
      y1 = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        y1[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(y1);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y2;
      y2 = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      stan::math::fill(y2, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          assign(y2, in__.read<local_scalar_t__>(),
            "assigning variable y2", index_uni(sym2__), index_uni(sym1__));
        }
      }
      out__.write(y2);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> y3;
      y3 = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N));
      stan::math::fill(y3, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          assign(y3, in__.read<local_scalar_t__>(),
            "assigning variable y3", index_uni(sym2__), index_uni(sym1__));
        }
      }
      out__.write(y3);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> y4;
      y4 = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>(N, N));
      stan::math::fill(y4, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            assign(y4, in__.read<local_scalar_t__>(),
              "assigning variable y4", index_uni(sym3__), index_uni(sym2__),
                                         index_uni(sym1__));
          }
        }
      }
      out__.write(y4);
      std::vector<std::vector<local_scalar_t__>> y5;
      y5 = std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__));
      
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          y5[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write(y5);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> y6;
      y6 = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N)));
      stan::math::fill(y6, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            assign(y6, in__.read<local_scalar_t__>(),
              "assigning variable y6", index_uni(sym3__), index_uni(sym2__),
                                         index_uni(sym1__));
          }
        }
      }
      out__.write(y6);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>> y7;
      y7 = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N)));
      stan::math::fill(y7, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            assign(y7, in__.read<local_scalar_t__>(),
              "assigning variable y7", index_uni(sym3__), index_uni(sym2__),
                                         index_uni(sym1__));
          }
        }
      }
      out__.write(y7);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> y8;
      y8 = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(N, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, Eigen::Matrix<local_scalar_t__, -1, -1>(N, N)));
      stan::math::fill(y8, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
              assign(y8, in__.read<local_scalar_t__>(),
                "assigning variable y8", index_uni(sym4__),
                                           index_uni(sym3__),
                                           index_uni(sym2__),
                                           index_uni(sym1__));
            }
          }
        }
      }
      out__.write(y8);
      local_scalar_t__ y9;
      y9 = in__.read<local_scalar_t__>();
      out__.write(y9);
      Eigen::Matrix<local_scalar_t__, -1, 1> y10;
      y10 = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(y10, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        assign(y10, in__.read<local_scalar_t__>(),
          "assigning variable y10", index_uni(sym1__));
      }
      out__.write(y10);
      Eigen::Matrix<local_scalar_t__, 1, -1> y11;
      y11 = Eigen::Matrix<local_scalar_t__, 1, -1>(N);
      stan::math::fill(y11, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        assign(y11, in__.read<local_scalar_t__>(),
          "assigning variable y11", index_uni(sym1__));
      }
      out__.write(y11);
      Eigen::Matrix<local_scalar_t__, -1, -1> y12;
      y12 = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
      stan::math::fill(y12, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          assign(y12, in__.read<local_scalar_t__>(),
            "assigning variable y12", index_uni(sym2__), index_uni(sym1__));
        }
      }
      out__.write(y12);
      std::vector<std::vector<std::vector<local_scalar_t__>>> y17;
      y17 = std::vector<std::vector<std::vector<local_scalar_t__>>>(N, std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(N, DUMMY_VAR__)));
      
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
            y17[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>(
                                                              );
          }
        }
      }
      out__.write(y17);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"y1", "y2", "y3", "y4", "y5", "y6",
      "y7", "y8", "y9", "y10", "y11", "y12", "y17", "t1", "t1a", "t2", "t3",
      "t4", "t5", "t6", "t7", "t8", "t9", "t10", "t11", "t12", "tg1", "tg2",
      "tg3", "tg4", "tg5", "tg6", "tg7", "tg8", "tg9", "tg10", "tg11",
      "tg12", "tgs"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(N),
                          static_cast<size_t>(N)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y4" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y6" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y7" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "y8" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "y9");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y10" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y11" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y12" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y17" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "t1");
      param_names__.emplace_back(std::string() + "t1a");
      param_names__.emplace_back(std::string() + "t2");
      param_names__.emplace_back(std::string() + "t3");
      param_names__.emplace_back(std::string() + "t4");
      param_names__.emplace_back(std::string() + "t5");
      param_names__.emplace_back(std::string() + "t6");
      param_names__.emplace_back(std::string() + "t7");
      param_names__.emplace_back(std::string() + "t8");
      param_names__.emplace_back(std::string() + "t9");
      param_names__.emplace_back(std::string() + "t10");
      param_names__.emplace_back(std::string() + "t11");
      param_names__.emplace_back(std::string() + "t12");
      param_names__.emplace_back(std::string() + "tg1");
      param_names__.emplace_back(std::string() + "tg2");
      param_names__.emplace_back(std::string() + "tg3");
      param_names__.emplace_back(std::string() + "tg4");
      param_names__.emplace_back(std::string() + "tg5");
      param_names__.emplace_back(std::string() + "tg6");
      param_names__.emplace_back(std::string() + "tg7");
      param_names__.emplace_back(std::string() + "tg8");
      param_names__.emplace_back(std::string() + "tg9");
      param_names__.emplace_back(std::string() + "tg10");
      param_names__.emplace_back(std::string() + "tg11");
      param_names__.emplace_back(std::string() + "tg12");
      param_names__.emplace_back(std::string() + "tgs");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y4" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y5" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y6" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y7" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                for (int sym4__ = 1; sym4__ <= N; ++sym4__) {
                  {
                    param_names__.emplace_back(std::string() + "y8" + '.' + std::to_string(sym4__) + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                  } 
                }
              } 
            }
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "y9");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y10" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y11" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y12" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "y17" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "t1");
      param_names__.emplace_back(std::string() + "t1a");
      param_names__.emplace_back(std::string() + "t2");
      param_names__.emplace_back(std::string() + "t3");
      param_names__.emplace_back(std::string() + "t4");
      param_names__.emplace_back(std::string() + "t5");
      param_names__.emplace_back(std::string() + "t6");
      param_names__.emplace_back(std::string() + "t7");
      param_names__.emplace_back(std::string() + "t8");
      param_names__.emplace_back(std::string() + "t9");
      param_names__.emplace_back(std::string() + "t10");
      param_names__.emplace_back(std::string() + "t11");
      param_names__.emplace_back(std::string() + "t12");
      param_names__.emplace_back(std::string() + "tg1");
      param_names__.emplace_back(std::string() + "tg2");
      param_names__.emplace_back(std::string() + "tg3");
      param_names__.emplace_back(std::string() + "tg4");
      param_names__.emplace_back(std::string() + "tg5");
      param_names__.emplace_back(std::string() + "tg6");
      param_names__.emplace_back(std::string() + "tg7");
      param_names__.emplace_back(std::string() + "tg8");
      param_names__.emplace_back(std::string() + "tg9");
      param_names__.emplace_back(std::string() + "tg10");
      param_names__.emplace_back(std::string() + "tg11");
      param_names__.emplace_back(std::string() + "tg12");
      param_names__.emplace_back(std::string() + "tgs");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"y6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y9\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y10\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"y11\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"y12\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"y17\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"t1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t1a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t3\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t4\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t5\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t6\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t7\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t8\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t9\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t10\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t11\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t12\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg3\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg4\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg5\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg6\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg7\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg8\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg9\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg10\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg11\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg12\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tgs\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"y5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"y6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "}}},\"block\":\"parameters\"},{\"name\":\"y9\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y10\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"y11\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"y12\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"y17\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"t1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t1a\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t3\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t4\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t5\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t6\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t7\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t8\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t9\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t10\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t11\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"t12\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg3\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg4\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg5\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg6\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg7\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg8\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg9\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg10\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg11\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tg12\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tgs\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((N + (N * N)) + (N * N)) + ((N * N) * N)) + (N * N)) +
           ((N * N) * N)) + ((N * N) * N)) + (((N * N) * N) * N)) + 1) + N) +
      N) + (N * N)) + ((N * N) * N));
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  (((((((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) +
                   1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
       + 1) + 1) + 1) + 1);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((N + (N * N)) + (N * N)) + ((N * N) * N)) + (N * N)) +
           ((N * N) * N)) + ((N * N) * N)) + (((N * N) * N) * N)) + 1) + N) +
      N) + (N * N)) + ((N * N) * N));
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  (((((((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) +
                   1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
       + 1) + 1) + 1) + 1);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
    const std::array<std::string, 39> names__ = std::array<std::string, 39>{"y1",
      "y2", "y3", "y4", "y5", "y6", "y7", "y8", "y9", "y10", "y11", "y12",
      "y17", "t1", "t1a", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9",
      "t10", "t11", "t12", "tg1", "tg2", "tg3", "tg4", "tg5", "tg6", "tg7",
      "tg8", "tg9", "tg10", "tg11", "tg12", "tgs"};
    
     std::vector<double> params_r_flat__;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       params_r_flat__.reserve(params_r_flat__.size() + param_vec__.size());
       for (auto&& param_val__ : param_vec__) {
         params_r_flat__.push_back(param_val__);
       }
     }
    vars.resize(params_r_flat__.size());
    transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = reduce_sum_m3_model_namespace::reduce_sum_m3_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return reduce_sum_m3_model_namespace::profiles__;
}

#endif



