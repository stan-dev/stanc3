  $ ../../../../../../install/default/bin/stanc --print-cpp ode_adjoint_test_model.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace ode_adjoint_test_model_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 36> locations_array__ = 
{" (found before start of program)",
 " (in 'ode_adjoint_test_model.stan', line 34, column 2 to column 9)",
 " (in 'ode_adjoint_test_model.stan', line 36, column 2 to column 15)",
 " (in 'ode_adjoint_test_model.stan', line 37, column 2 to column 10)",
 " (in 'ode_adjoint_test_model.stan', line 38, column 2 to column 22)",
 " (in 'ode_adjoint_test_model.stan', line 42, column 2 to column 23)",
 " (in 'ode_adjoint_test_model.stan', line 44, column 2 to line 45, column 105)",
 " (in 'ode_adjoint_test_model.stan', line 47, column 2 to line 49, column 30)",
 " (in 'ode_adjoint_test_model.stan', line 51, column 2 to line 53, column 33)",
 " (in 'ode_adjoint_test_model.stan', line 57, column 2 to column 19)",
 " (in 'ode_adjoint_test_model.stan', line 14, column 2 to column 8)",
 " (in 'ode_adjoint_test_model.stan', line 15, column 2 to column 8)",
 " (in 'ode_adjoint_test_model.stan', line 16, column 2 to column 8)",
 " (in 'ode_adjoint_test_model.stan', line 20, column 2 to column 17)",
 " (in 'ode_adjoint_test_model.stan', line 21, column 9 to column 10)",
 " (in 'ode_adjoint_test_model.stan', line 21, column 2 to column 22)",
 " (in 'ode_adjoint_test_model.stan', line 22, column 2 to column 17)",
 " (in 'ode_adjoint_test_model.stan', line 23, column 9 to column 10)",
 " (in 'ode_adjoint_test_model.stan', line 23, column 2 to column 22)",
 " (in 'ode_adjoint_test_model.stan', line 24, column 2 to column 17)",
 " (in 'ode_adjoint_test_model.stan', line 25, column 2 to column 17)",
 " (in 'ode_adjoint_test_model.stan', line 26, column 2 to column 20)",
 " (in 'ode_adjoint_test_model.stan', line 27, column 2 to column 22)",
 " (in 'ode_adjoint_test_model.stan', line 28, column 2 to column 31)",
 " (in 'ode_adjoint_test_model.stan', line 29, column 2 to column 15)",
 " (in 'ode_adjoint_test_model.stan', line 30, column 2 to column 15)",
 " (in 'ode_adjoint_test_model.stan', line 36, column 9 to column 10)",
 " (in 'ode_adjoint_test_model.stan', line 38, column 8 to column 9)",
 " (in 'ode_adjoint_test_model.stan', line 42, column 8 to column 9)",
 " (in 'ode_adjoint_test_model.stan', line 42, column 18 to column 19)",
 " (in 'ode_adjoint_test_model.stan', line 3, column 4 to column 13)",
 " (in 'ode_adjoint_test_model.stan', line 2, column 35 to line 4, column 3)",
 " (in 'ode_adjoint_test_model.stan', line 6, column 4 to column 13)",
 " (in 'ode_adjoint_test_model.stan', line 5, column 43 to line 7, column 3)",
 " (in 'ode_adjoint_test_model.stan', line 9, column 4 to column 13)",
 " (in 'ode_adjoint_test_model.stan', line 8, column 50 to line 10, column 3)"};


template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
stan::value_type_t<T1__>>, -1, 1>
f_0_arg(const T0__& t, const T1__& z_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>>;
  int current_statement__ = 0; 
  const auto& z = to_ref(z_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 30;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f_0_arg_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& t, const T1__& z, std::ostream* pstream__)  const 
{
return f_0_arg(t, z, pstream__);
}
};


struct f_0_arg_odefunctor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& t, const T1__& z, std::ostream* pstream__)  const 
{
return f_0_arg(t, z, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
T2__>, -1, 1>
f_1_arg(const T0__& t, const T1__& z_arg__, const T2__& a,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& z = to_ref(z_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 32;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f_1_arg_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& t, const T1__& z, const T2__& a,
           std::ostream* pstream__)  const 
{
return f_1_arg(t, z, a, pstream__);
}
};


struct f_1_arg_odefunctor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& t, const T1__& z, std::ostream* pstream__,
           const T2__& a)  const 
{
return f_1_arg(t, z, a, pstream__);
}
};

template <typename T0__, typename T1__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
T3__>, -1, 1>
f_2_arg(const T0__& t, const T1__& z_arg__, const int& b, const T3__& a,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          T3__>;
  int current_statement__ = 0; 
  const auto& z = to_ref(z_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 34;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct f_2_arg_functor__ {
template <typename T0__, typename T1__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
T3__>, -1, 1>
operator()(const T0__& t, const T1__& z, const int& b, const T3__& a,
           std::ostream* pstream__)  const 
{
return f_2_arg(t, z, b, a, pstream__);
}
};


struct f_2_arg_odefunctor__ {
template <typename T0__, typename T1__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
T3__>, -1, 1>
operator()(const T0__& t, const T1__& z, std::ostream* pstream__,
           const int& b, const T3__& a)  const 
{
return f_2_arg(t, z, b, a, pstream__);
}
};

class ode_adjoint_test_model_model final : public model_base_crtp<ode_adjoint_test_model_model> {

 private:
  int N;
  int M;
  int i;
  double rel_tol_f;
  Eigen::Matrix<double, -1, 1> abs_tol_f__;
  double rel_tol_b;
  Eigen::Matrix<double, -1, 1> abs_tol_b__;
  double rel_tol_q;
  double abs_tol_q;
  int max_num_steps;
  int num_checkpoints;
  int interpolation_polynomial;
  int solver_f;
  int solver_b; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> abs_tol_f{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> abs_tol_b{nullptr, 0};
 
 public:
  ~ode_adjoint_test_model_model() { }
  
  inline std::string model_name() const final { return "ode_adjoint_test_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }
  
  
  ode_adjoint_test_model_model(stan::io::var_context& context__,
                               unsigned int random_seed__ = 0,
                               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "ode_adjoint_test_model_model_namespace::ode_adjoint_test_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = 1;
      current_statement__ = 10;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 10;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 11;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 11;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 12;
      context__.validate_dims("data initialization","i","int",
           std::vector<size_t>{});
      i = std::numeric_limits<int>::min();
      
      current_statement__ = 12;
      i = context__.vals_i("i")[(1 - 1)];
      current_statement__ = 13;
      rel_tol_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      validate_non_negative_index("abs_tol_f", "N", N);
      current_statement__ = 15;
      abs_tol_f__ = Eigen::Matrix<double, -1, 1>(N);
      new (&abs_tol_f) Eigen::Map<Eigen::Matrix<double, -1, 1>>(abs_tol_f__.data(), N);
      stan::math::fill(abs_tol_f, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 16;
      rel_tol_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      validate_non_negative_index("abs_tol_b", "N", N);
      current_statement__ = 18;
      abs_tol_b__ = Eigen::Matrix<double, -1, 1>(N);
      new (&abs_tol_b) Eigen::Map<Eigen::Matrix<double, -1, 1>>(abs_tol_b__.data(), N);
      stan::math::fill(abs_tol_b, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 19;
      rel_tol_q = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      abs_tol_q = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      max_num_steps = std::numeric_limits<int>::min();
      
      current_statement__ = 22;
      num_checkpoints = std::numeric_limits<int>::min();
      
      current_statement__ = 23;
      interpolation_polynomial = std::numeric_limits<int>::min();
      
      current_statement__ = 24;
      solver_f = std::numeric_limits<int>::min();
      
      current_statement__ = 25;
      solver_b = std::numeric_limits<int>::min();
      
      current_statement__ = 26;
      validate_non_negative_index("y0", "N", N);
      current_statement__ = 27;
      validate_non_negative_index("times", "N", N);
      current_statement__ = 28;
      validate_non_negative_index("z", "M", M);
      current_statement__ = 29;
      validate_non_negative_index("z", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + N + 1 + N;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "ode_adjoint_test_model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ y;
      current_statement__ = 1;
      y = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> y0;
      current_statement__ = 2;
      y0 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      local_scalar_t__ t0;
      current_statement__ = 3;
      t0 = in__.template read<local_scalar_t__>();
      std::vector<local_scalar_t__> times;
      current_statement__ = 4;
      times = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> z;
      current_statement__ = 6;
      assign(z,
        ode_adjoint_tol_ctl(f_0_arg_odefunctor__(), y0, t0, times, rel_tol_f,
          abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q, abs_tol_q,
          max_num_steps, num_checkpoints, interpolation_polynomial, solver_f,
          solver_b, pstream__), "assigning variable z");
      current_statement__ = 7;
      assign(z,
        ode_adjoint_tol_ctl(f_1_arg_odefunctor__(), y0, t0, times, rel_tol_f,
          abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q, abs_tol_q,
          max_num_steps, num_checkpoints, interpolation_polynomial, solver_f,
          solver_b, pstream__, y), "assigning variable z");
      current_statement__ = 8;
      assign(z,
        ode_adjoint_tol_ctl(f_2_arg_odefunctor__(), y0, t0, times, rel_tol_f,
          abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q, abs_tol_q,
          max_num_steps, num_checkpoints, interpolation_polynomial, solver_f,
          solver_b, pstream__, i, y), "assigning variable z");
      {
        current_statement__ = 9;
        lp_accum__.add(normal_lpdf<propto__>(y, 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "ode_adjoint_test_model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double y;
      current_statement__ = 1;
      y = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> y0;
      current_statement__ = 2;
      y0 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      double t0;
      current_statement__ = 3;
      t0 = in__.template read<local_scalar_t__>();
      std::vector<double> times;
      current_statement__ = 4;
      times = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<Eigen::Matrix<double, -1, 1>> z;
      z = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      out__.write(y);
      out__.write(y0);
      out__.write(t0);
      out__.write(times);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 6;
      assign(z,
        ode_adjoint_tol_ctl(f_0_arg_odefunctor__(), y0, t0, times, rel_tol_f,
          abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q, abs_tol_q,
          max_num_steps, num_checkpoints, interpolation_polynomial, solver_f,
          solver_b, pstream__), "assigning variable z");
      current_statement__ = 7;
      assign(z,
        ode_adjoint_tol_ctl(f_1_arg_odefunctor__(), y0, t0, times, rel_tol_f,
          abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q, abs_tol_q,
          max_num_steps, num_checkpoints, interpolation_polynomial, solver_f,
          solver_b, pstream__, y), "assigning variable z");
      current_statement__ = 8;
      assign(z,
        ode_adjoint_tol_ctl(f_2_arg_odefunctor__(), y0, t0, times, rel_tol_f,
          abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q, abs_tol_q,
          max_num_steps, num_checkpoints, interpolation_polynomial, solver_f,
          solver_b, pstream__, i, y), "assigning variable z");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(z[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = 1;
      local_scalar_t__ y;
      y = in__.read<local_scalar_t__>();
      out__.write(y);
      Eigen::Matrix<local_scalar_t__, -1, 1> y0;
      y0 = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(y0, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        assign(y0, in__.read<local_scalar_t__>(),
          "assigning variable y0", index_uni(sym1__));
      }
      out__.write(y0);
      local_scalar_t__ t0;
      t0 = in__.read<local_scalar_t__>();
      out__.write(t0);
      std::vector<local_scalar_t__> times;
      times = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        times[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(times);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"y", "y0", "t0", "times", "z"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "y");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y0" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "t0");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "times" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "y");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y0" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "t0");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "times" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"t0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"times\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"t0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"times\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((1 + N) + 1) + N);
      const size_t num_transformed = (M * N);
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((1 + N) + 1) + N);
      const size_t num_transformed = (M * N);
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
    const std::array<std::string, 5> names__ = std::array<std::string, 5>{"y",
      "y0", "t0", "times", "z"};
    
     std::vector<double> params_r_flat__;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       params_r_flat__.reserve(params_r_flat__.size() + param_vec__.size());
       for (auto&& param_val__ : param_vec__) {
         params_r_flat__.push_back(param_val__);
       }
     }
    vars.resize(params_r_flat__.size());
    transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}

using stan_model = ode_adjoint_test_model_model_namespace::ode_adjoint_test_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return ode_adjoint_test_model_model_namespace::profiles__;
}

#endif



