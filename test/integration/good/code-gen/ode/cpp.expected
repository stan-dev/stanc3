  $ ../../../../../../install/default/bin/stanc --print-cpp ode_adjoint_test_model.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace ode_adjoint_test_model_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 36> locations_array__ =
  {" (found before start of program)",
  " (in 'ode_adjoint_test_model.stan', line 34, column 2 to column 9)",
  " (in 'ode_adjoint_test_model.stan', line 36, column 2 to column 15)",
  " (in 'ode_adjoint_test_model.stan', line 37, column 2 to column 10)",
  " (in 'ode_adjoint_test_model.stan', line 38, column 2 to column 22)",
  " (in 'ode_adjoint_test_model.stan', line 42, column 2 to column 23)",
  " (in 'ode_adjoint_test_model.stan', line 44, column 2 to line 45, column 105)",
  " (in 'ode_adjoint_test_model.stan', line 47, column 2 to line 49, column 30)",
  " (in 'ode_adjoint_test_model.stan', line 51, column 2 to line 53, column 33)",
  " (in 'ode_adjoint_test_model.stan', line 57, column 2 to column 19)",
  " (in 'ode_adjoint_test_model.stan', line 14, column 2 to column 8)",
  " (in 'ode_adjoint_test_model.stan', line 15, column 2 to column 8)",
  " (in 'ode_adjoint_test_model.stan', line 16, column 2 to column 8)",
  " (in 'ode_adjoint_test_model.stan', line 20, column 2 to column 17)",
  " (in 'ode_adjoint_test_model.stan', line 21, column 9 to column 10)",
  " (in 'ode_adjoint_test_model.stan', line 21, column 2 to column 22)",
  " (in 'ode_adjoint_test_model.stan', line 22, column 2 to column 17)",
  " (in 'ode_adjoint_test_model.stan', line 23, column 9 to column 10)",
  " (in 'ode_adjoint_test_model.stan', line 23, column 2 to column 22)",
  " (in 'ode_adjoint_test_model.stan', line 24, column 2 to column 17)",
  " (in 'ode_adjoint_test_model.stan', line 25, column 2 to column 17)",
  " (in 'ode_adjoint_test_model.stan', line 26, column 2 to column 20)",
  " (in 'ode_adjoint_test_model.stan', line 27, column 2 to column 22)",
  " (in 'ode_adjoint_test_model.stan', line 28, column 2 to column 31)",
  " (in 'ode_adjoint_test_model.stan', line 29, column 2 to column 15)",
  " (in 'ode_adjoint_test_model.stan', line 30, column 2 to column 15)",
  " (in 'ode_adjoint_test_model.stan', line 36, column 9 to column 10)",
  " (in 'ode_adjoint_test_model.stan', line 38, column 8 to column 9)",
  " (in 'ode_adjoint_test_model.stan', line 42, column 8 to column 9)",
  " (in 'ode_adjoint_test_model.stan', line 42, column 18 to column 19)",
  " (in 'ode_adjoint_test_model.stan', line 3, column 4 to column 13)",
  " (in 'ode_adjoint_test_model.stan', line 2, column 35 to line 4, column 3)",
  " (in 'ode_adjoint_test_model.stan', line 6, column 4 to column 13)",
  " (in 'ode_adjoint_test_model.stan', line 5, column 43 to line 7, column 3)",
  " (in 'ode_adjoint_test_model.stan', line 9, column 4 to column 13)",
  " (in 'ode_adjoint_test_model.stan', line 8, column 50 to line 10, column 3)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
f_0_arg(const T0__& t, const T1__& z_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__>,-1,1>
f_1_arg(const T0__& t, const T1__& z_arg__, const T2__& a, std::ostream*
        pstream__);
template <typename T0__, typename T1__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T3__>,-1,1>
f_2_arg(const T0__& t, const T1__& z_arg__, const int& b, const T3__& a,
        std::ostream* pstream__);
struct f_1_arg_variadic2_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__>,-1,1>
  operator()(const T0__& t, const T1__& z, std::ostream* pstream__,
             const T2__& a) const {
    return f_1_arg(t, z, a, pstream__);
  }
};
struct f_2_arg_variadic2_functor__ {
  template <typename T0__, typename T1__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T3__>,-1,1>
  operator()(const T0__& t, const T1__& z, std::ostream* pstream__,
             const int& b, const T3__& a) const {
    return f_2_arg(t, z, b, a, pstream__);
  }
};
struct f_0_arg_variadic2_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
  operator()(const T0__& t, const T1__& z, std::ostream* pstream__) const {
    return f_0_arg(t, z, pstream__);
  }
};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
f_0_arg(const T0__& t, const T1__& z_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& z = stan::math::to_ref(z_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 30;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__>,-1,1>
f_1_arg(const T0__& t, const T1__& z_arg__, const T2__& a, std::ostream*
        pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>, T2__>;
  int current_statement__ = 0;
  const auto& z = stan::math::to_ref(z_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 32;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T3__>,-1,1>
f_2_arg(const T0__& t, const T1__& z_arg__, const int& b, const T3__& a,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>, T3__>;
  int current_statement__ = 0;
  const auto& z = stan::math::to_ref(z_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 34;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class ode_adjoint_test_model_model final : public model_base_crtp<ode_adjoint_test_model_model> {
 private:
  int N;
  int M;
  int i;
  double rel_tol_f;
  Eigen::Matrix<double,-1,1> abs_tol_f_data__;
  double rel_tol_b;
  Eigen::Matrix<double,-1,1> abs_tol_b_data__;
  double rel_tol_q;
  double abs_tol_q;
  int max_num_steps;
  int num_checkpoints;
  int interpolation_polynomial;
  int solver_f;
  int solver_b;
  Eigen::Map<Eigen::Matrix<double,-1,1>> abs_tol_f{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> abs_tol_b{nullptr, 0};
 public:
  ~ode_adjoint_test_model_model() {}
  ode_adjoint_test_model_model(stan::io::var_context& context__, unsigned int
                               random_seed__ = 0, std::ostream*
                               pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "ode_adjoint_test_model_model_namespace::ode_adjoint_test_model_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 10;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 10;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 11;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 11;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 12;
      context__.validate_dims("data initialization", "i", "int",
        std::vector<size_t>{});
      i = std::numeric_limits<int>::min();
      current_statement__ = 12;
      i = context__.vals_i("i")[(1 - 1)];
      current_statement__ = 13;
      rel_tol_f = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 14;
      stan::math::validate_non_negative_index("abs_tol_f", "N", N);
      current_statement__ = 15;
      abs_tol_f_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                           std::numeric_limits<double>::quiet_NaN());
      new (&abs_tol_f)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(abs_tol_f_data__.data(), N);
      current_statement__ = 16;
      rel_tol_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 17;
      stan::math::validate_non_negative_index("abs_tol_b", "N", N);
      current_statement__ = 18;
      abs_tol_b_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                           std::numeric_limits<double>::quiet_NaN());
      new (&abs_tol_b)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(abs_tol_b_data__.data(), N);
      current_statement__ = 19;
      rel_tol_q = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 20;
      abs_tol_q = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 21;
      max_num_steps = std::numeric_limits<int>::min();
      current_statement__ = 22;
      num_checkpoints = std::numeric_limits<int>::min();
      current_statement__ = 23;
      interpolation_polynomial = std::numeric_limits<int>::min();
      current_statement__ = 24;
      solver_f = std::numeric_limits<int>::min();
      current_statement__ = 25;
      solver_b = std::numeric_limits<int>::min();
      current_statement__ = 26;
      stan::math::validate_non_negative_index("y0", "N", N);
      current_statement__ = 27;
      stan::math::validate_non_negative_index("times", "N", N);
      current_statement__ = 28;
      stan::math::validate_non_negative_index("z", "M", M);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("z", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + N + 1 + N;
  }
  inline std::string model_name() const final {
    return "ode_adjoint_test_model_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "ode_adjoint_test_model_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ y = DUMMY_VAR__;
      current_statement__ = 1;
      y = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> y0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 2;
      y0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      local_scalar_t__ t0 = DUMMY_VAR__;
      current_statement__ = 3;
      t0 = in__.template read<local_scalar_t__>();
      std::vector<local_scalar_t__> times =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 4;
      times = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 6;
      stan::model::assign(z,
        stan::math::ode_adjoint_tol_ctl(f_0_arg_variadic2_functor__(), y0,
          t0, times, rel_tol_f, abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q,
          abs_tol_q, max_num_steps, num_checkpoints,
          interpolation_polynomial, solver_f, solver_b, pstream__),
        "assigning variable z");
      current_statement__ = 7;
      stan::model::assign(z,
        stan::math::ode_adjoint_tol_ctl(f_1_arg_variadic2_functor__(), y0,
          t0, times, rel_tol_f, abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q,
          abs_tol_q, max_num_steps, num_checkpoints,
          interpolation_polynomial, solver_f, solver_b, pstream__, y),
        "assigning variable z");
      current_statement__ = 8;
      stan::model::assign(z,
        stan::math::ode_adjoint_tol_ctl(f_2_arg_variadic2_functor__(), y0,
          t0, times, rel_tol_f, abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q,
          abs_tol_q, max_num_steps, num_checkpoints,
          interpolation_polynomial, solver_f, solver_b, pstream__, i, y),
        "assigning variable z");
      {
        current_statement__ = 9;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y, 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "ode_adjoint_test_model_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ y = DUMMY_VAR__;
      current_statement__ = 1;
      y = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> y0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 2;
      y0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      local_scalar_t__ t0 = DUMMY_VAR__;
      current_statement__ = 3;
      t0 = in__.template read<local_scalar_t__>();
      std::vector<local_scalar_t__> times =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 4;
      times = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__));
      current_statement__ = 6;
      stan::model::assign(z,
        stan::math::ode_adjoint_tol_ctl(f_0_arg_variadic2_functor__(), y0,
          t0, times, rel_tol_f, abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q,
          abs_tol_q, max_num_steps, num_checkpoints,
          interpolation_polynomial, solver_f, solver_b, pstream__),
        "assigning variable z");
      current_statement__ = 7;
      stan::model::assign(z,
        stan::math::ode_adjoint_tol_ctl(f_1_arg_variadic2_functor__(), y0,
          t0, times, rel_tol_f, abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q,
          abs_tol_q, max_num_steps, num_checkpoints,
          interpolation_polynomial, solver_f, solver_b, pstream__, y),
        "assigning variable z");
      current_statement__ = 8;
      stan::model::assign(z,
        stan::math::ode_adjoint_tol_ctl(f_2_arg_variadic2_functor__(), y0,
          t0, times, rel_tol_f, abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q,
          abs_tol_q, max_num_steps, num_checkpoints,
          interpolation_polynomial, solver_f, solver_b, pstream__, i, y),
        "assigning variable z");
      {
        current_statement__ = 9;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y, 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "ode_adjoint_test_model_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double y = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      y = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> y0 =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      y0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      double t0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      t0 = in__.template read<local_scalar_t__>();
      std::vector<double> times =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      times = in__.template read<std::vector<local_scalar_t__>>(N);
      std::vector<Eigen::Matrix<double,-1,1>> z =
        std::vector<Eigen::Matrix<double,-1,1>>(M,
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(y);
      out__.write(y0);
      out__.write(t0);
      out__.write(times);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 6;
      stan::model::assign(z,
        stan::math::ode_adjoint_tol_ctl(f_0_arg_variadic2_functor__(), y0,
          t0, times, rel_tol_f, abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q,
          abs_tol_q, max_num_steps, num_checkpoints,
          interpolation_polynomial, solver_f, solver_b, pstream__),
        "assigning variable z");
      current_statement__ = 7;
      stan::model::assign(z,
        stan::math::ode_adjoint_tol_ctl(f_1_arg_variadic2_functor__(), y0,
          t0, times, rel_tol_f, abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q,
          abs_tol_q, max_num_steps, num_checkpoints,
          interpolation_polynomial, solver_f, solver_b, pstream__, y),
        "assigning variable z");
      current_statement__ = 8;
      stan::model::assign(z,
        stan::math::ode_adjoint_tol_ctl(f_2_arg_variadic2_functor__(), y0,
          t0, times, rel_tol_f, abs_tol_f, rel_tol_b, abs_tol_b, rel_tol_q,
          abs_tol_q, max_num_steps, num_checkpoints,
          interpolation_polynomial, solver_f, solver_b, pstream__, i, y),
        "assigning variable z");
      if (emit_transformed_parameters__) {
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(z[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ y = DUMMY_VAR__;
      current_statement__ = 1;
      y = in__.read<local_scalar_t__>();
      out__.write(y);
      Eigen::Matrix<local_scalar_t__,-1,1> y0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(y0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable y0");
      out__.write(y0);
      local_scalar_t__ t0 = DUMMY_VAR__;
      current_statement__ = 3;
      t0 = in__.read<local_scalar_t__>();
      out__.write(t0);
      std::vector<local_scalar_t__> times =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(times, in__.read<std::vector<local_scalar_t__>>(N),
        "assigning variable times");
      out__.write(times);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "y", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "y0", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "t0", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "times", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ y = DUMMY_VAR__;
      current_statement__ = 1;
      y = context__.vals_r("y")[(1 - 1)];
      out__.write(y);
      Eigen::Matrix<local_scalar_t__,-1,1> y0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> y0_flat__;
        current_statement__ = 2;
        y0_flat__ = context__.vals_r("y0");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(y0, y0_flat__[(pos__ - 1)],
            "assigning variable y0", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(y0);
      local_scalar_t__ t0 = DUMMY_VAR__;
      current_statement__ = 3;
      t0 = context__.vals_r("t0")[(1 - 1)];
      out__.write(t0);
      std::vector<local_scalar_t__> times =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 4;
      times = context__.vals_r("times");
      out__.write(times);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"y", "y0", "t0", "times"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"z"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "y");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "y0" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "t0");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "times" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "z" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "y");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "y0" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "t0");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "times" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "z" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"t0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"times\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"t0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"times\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + N) + 1) + N);
    const size_t num_transformed = emit_transformed_parameters * ((M * N));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + N) + 1) + N);
    const size_t num_transformed = emit_transformed_parameters * ((M * N));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = ode_adjoint_test_model_model_namespace::ode_adjoint_test_model_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return ode_adjoint_test_model_model_namespace::profiles__;
}
#endif
  $ ../../../../../../install/default/bin/stanc --print-cpp overloaded-ode.stan
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace overloaded_ode_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 55> locations_array__ =
  {" (found before start of program)",
  " (in 'overloaded-ode.stan', line 54, column 2 to column 21)",
  " (in 'overloaded-ode.stan', line 55, column 2 to column 22)",
  " (in 'overloaded-ode.stan', line 56, column 2 to column 19)",
  " (in 'overloaded-ode.stan', line 57, column 2 to column 22)",
  " (in 'overloaded-ode.stan', line 60, column 2 to line 62, column 67)",
  " (in 'overloaded-ode.stan', line 64, column 2 to line 66, column 74)",
  " (in 'overloaded-ode.stan', line 69, column 9 to column 12)",
  " (in 'overloaded-ode.stan', line 69, column 2 to column 21)",
  " (in 'overloaded-ode.stan', line 70, column 2 to column 30)",
  " (in 'overloaded-ode.stan', line 72, column 4 to column 38)",
  " (in 'overloaded-ode.stan', line 71, column 21 to line 73, column 3)",
  " (in 'overloaded-ode.stan', line 71, column 2 to line 73, column 3)",
  " (in 'overloaded-ode.stan', line 75, column 2 to column 24)",
  " (in 'overloaded-ode.stan', line 76, column 2 to column 23)",
  " (in 'overloaded-ode.stan', line 77, column 2 to column 21)",
  " (in 'overloaded-ode.stan', line 78, column 2 to column 23)",
  " (in 'overloaded-ode.stan', line 80, column 2 to column 25)",
  " (in 'overloaded-ode.stan', line 81, column 2 to column 38)",
  " (in 'overloaded-ode.stan', line 83, column 9 to column 12)",
  " (in 'overloaded-ode.stan', line 83, column 2 to column 22)",
  " (in 'overloaded-ode.stan', line 84, column 2 to column 32)",
  " (in 'overloaded-ode.stan', line 86, column 4 to column 41)",
  " (in 'overloaded-ode.stan', line 85, column 21 to line 87, column 3)",
  " (in 'overloaded-ode.stan', line 85, column 2 to line 87, column 3)",
  " (in 'overloaded-ode.stan', line 89, column 2 to column 26)",
  " (in 'overloaded-ode.stan', line 90, column 2 to column 39)",
  " (in 'overloaded-ode.stan', line 42, column 2 to column 19)",
  " (in 'overloaded-ode.stan', line 43, column 8 to column 11)",
  " (in 'overloaded-ode.stan', line 43, column 2 to column 20)",
  " (in 'overloaded-ode.stan', line 44, column 2 to column 15)",
  " (in 'overloaded-ode.stan', line 45, column 8 to column 11)",
  " (in 'overloaded-ode.stan', line 45, column 2 to column 22)",
  " (in 'overloaded-ode.stan', line 46, column 8 to column 11)",
  " (in 'overloaded-ode.stan', line 46, column 2 to column 20)",
  " (in 'overloaded-ode.stan', line 49, column 2 to column 14)",
  " (in 'overloaded-ode.stan', line 50, column 2 to column 32)",
  " (in 'overloaded-ode.stan', line 51, column 2 to column 18)",
  " (in 'overloaded-ode.stan', line 60, column 8 to column 11)",
  " (in 'overloaded-ode.stan', line 64, column 8 to column 11)",
  " (in 'overloaded-ode.stan', line 12, column 4 to column 19)",
  " (in 'overloaded-ode.stan', line 14, column 4 to column 51)",
  " (in 'overloaded-ode.stan', line 15, column 4 to column 65)",
  " (in 'overloaded-ode.stan', line 16, column 4 to column 27)",
  " (in 'overloaded-ode.stan', line 17, column 4 to column 39)",
  " (in 'overloaded-ode.stan', line 19, column 4 to column 16)",
  " (in 'overloaded-ode.stan', line 10, column 32 to line 20, column 3)",
  " (in 'overloaded-ode.stan', line 30, column 4 to column 19)",
  " (in 'overloaded-ode.stan', line 32, column 4 to column 18)",
  " (in 'overloaded-ode.stan', line 33, column 4 to column 51)",
  " (in 'overloaded-ode.stan', line 34, column 4 to column 65)",
  " (in 'overloaded-ode.stan', line 35, column 4 to column 27)",
  " (in 'overloaded-ode.stan', line 36, column 4 to column 39)",
  " (in 'overloaded-ode.stan', line 38, column 4 to column 16)",
  " (in 'overloaded-ode.stan', line 29, column 22 to line 39, column 3)"};
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__,
                T4__, stan::promote_args_t<T5__, T6__>>,-1,1>
simple_SIR(const T0__& t, const T1__& y_arg__, const T2__& beta, const T3__&
           kappa, const T4__& gamma, const T5__& xi, const T6__& delta,
           std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__,
                T4__, stan::promote_args_t<T5__, T6__>>,-1,1>
simple_SIR(const T0__& t, const T1__& y_arg__, const T2__& beta, const T3__&
           kappa, const T4__& gamma, const T5__& xi, const T6__& delta,
           const int& unused, std::ostream* pstream__);
struct simple_SIR_variadic2_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T4__>,
                                stan::is_stan_scalar<T5__>,
                                stan::is_stan_scalar<T6__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__,
                  T3__, T4__, stan::promote_args_t<T5__, T6__>>,-1,1>
  operator()(const T0__& t, const T1__& y, std::ostream* pstream__,
             const T2__& beta, const T3__& kappa, const T4__& gamma,
             const T5__& xi, const T6__& delta) const {
    return simple_SIR(t, y, beta, kappa, gamma, xi, delta, pstream__);
  }
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T4__>,
                                stan::is_stan_scalar<T5__>,
                                stan::is_stan_scalar<T6__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__,
                  T3__, T4__, stan::promote_args_t<T5__, T6__>>,-1,1>
  operator()(const T0__& t, const T1__& y, std::ostream* pstream__,
             const T2__& beta, const T3__& kappa, const T4__& gamma,
             const T5__& xi, const T6__& delta, const int& unused) const {
    return simple_SIR(t, y, beta, kappa, gamma, xi, delta, unused, pstream__);
  }
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__,
                T4__, stan::promote_args_t<T5__, T6__>>,-1,1>
simple_SIR(const T0__& t, const T1__& y_arg__, const T2__& beta, const T3__&
           kappa, const T4__& gamma, const T5__& xi, const T6__& delta,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>, T2__, T3__, T4__,
                             stan::promote_args_t<T5__, T6__>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    Eigen::Matrix<local_scalar_t__,-1,1> dydt =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__);
    current_statement__ = 41;
    stan::model::assign(dydt, (((-(beta) *
      stan::model::rvalue(y, "y", stan::model::index_uni(4))) /
      (stan::model::rvalue(y, "y", stan::model::index_uni(4)) + kappa)) *
      stan::model::rvalue(y, "y", stan::model::index_uni(1))),
      "assigning variable dydt", stan::model::index_uni(1));
    current_statement__ = 42;
    stan::model::assign(dydt, ((((beta *
      stan::model::rvalue(y, "y", stan::model::index_uni(4))) /
      (stan::model::rvalue(y, "y", stan::model::index_uni(4)) + kappa)) *
      stan::model::rvalue(y, "y", stan::model::index_uni(1))) - (gamma *
      stan::model::rvalue(y, "y", stan::model::index_uni(2)))),
      "assigning variable dydt", stan::model::index_uni(2));
    current_statement__ = 43;
    stan::model::assign(dydt, (gamma *
      stan::model::rvalue(y, "y", stan::model::index_uni(2))),
      "assigning variable dydt", stan::model::index_uni(3));
    current_statement__ = 44;
    stan::model::assign(dydt, ((xi *
      stan::model::rvalue(y, "y", stan::model::index_uni(2))) - (delta *
      stan::model::rvalue(y, "y", stan::model::index_uni(4)))),
      "assigning variable dydt", stan::model::index_uni(4));
    current_statement__ = 45;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, T2__, T3__,
                T4__, stan::promote_args_t<T5__, T6__>>,-1,1>
simple_SIR(const T0__& t, const T1__& y_arg__, const T2__& beta, const T3__&
           kappa, const T4__& gamma, const T5__& xi, const T6__& delta,
           const int& unused, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>, T2__, T3__, T4__,
                             stan::promote_args_t<T5__, T6__>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    Eigen::Matrix<local_scalar_t__,-1,1> dydt =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__);
    current_statement__ = 48;
    if (pstream__) {
      stan::math::stan_print(pstream__, unused);
      *(pstream__) << std::endl;
    }
    current_statement__ = 49;
    stan::model::assign(dydt, (((-(beta) *
      stan::model::rvalue(y, "y", stan::model::index_uni(4))) /
      (stan::model::rvalue(y, "y", stan::model::index_uni(4)) + kappa)) *
      stan::model::rvalue(y, "y", stan::model::index_uni(1))),
      "assigning variable dydt", stan::model::index_uni(1));
    current_statement__ = 50;
    stan::model::assign(dydt, ((((beta *
      stan::model::rvalue(y, "y", stan::model::index_uni(4))) /
      (stan::model::rvalue(y, "y", stan::model::index_uni(4)) + kappa)) *
      stan::model::rvalue(y, "y", stan::model::index_uni(1))) - (gamma *
      stan::model::rvalue(y, "y", stan::model::index_uni(2)))),
      "assigning variable dydt", stan::model::index_uni(2));
    current_statement__ = 51;
    stan::model::assign(dydt, (gamma *
      stan::model::rvalue(y, "y", stan::model::index_uni(2))),
      "assigning variable dydt", stan::model::index_uni(3));
    current_statement__ = 52;
    stan::model::assign(dydt, ((xi *
      stan::model::rvalue(y, "y", stan::model::index_uni(2))) - (delta *
      stan::model::rvalue(y, "y", stan::model::index_uni(4)))),
      "assigning variable dydt", stan::model::index_uni(4));
    current_statement__ = 53;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class overloaded_ode_model final : public model_base_crtp<overloaded_ode_model> {
 private:
  int N_t;
  std::vector<double> t;
  Eigen::Matrix<double,-1,1> y0_data__;
  std::vector<int> stoi;
  std::vector<double> B;
  double t0;
  double kappa;
  int unused;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y0{nullptr, 0};
 public:
  ~overloaded_ode_model() {}
  overloaded_ode_model(stan::io::var_context& context__, unsigned int
                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "overloaded_ode_model_namespace::overloaded_ode_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 27;
      context__.validate_dims("data initialization", "N_t", "int",
        std::vector<size_t>{});
      N_t = std::numeric_limits<int>::min();
      current_statement__ = 27;
      N_t = context__.vals_i("N_t")[(1 - 1)];
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "N_t", N_t, 0);
      current_statement__ = 28;
      stan::math::validate_non_negative_index("t", "N_t", N_t);
      current_statement__ = 29;
      context__.validate_dims("data initialization", "t", "double",
        std::vector<size_t>{static_cast<size_t>(N_t)});
      t = std::vector<double>(N_t, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 29;
      t = context__.vals_r("t");
      current_statement__ = 30;
      context__.validate_dims("data initialization", "y0", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      y0_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                    std::numeric_limits<double>::quiet_NaN());
      new (&y0) Eigen::Map<Eigen::Matrix<double,-1,1>>(y0_data__.data(), 4);
      {
        std::vector<local_scalar_t__> y0_flat__;
        current_statement__ = 30;
        y0_flat__ = context__.vals_r("y0");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(y0, y0_flat__[(pos__ - 1)],
            "assigning variable y0", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 31;
      stan::math::validate_non_negative_index("stoi", "N_t", N_t);
      current_statement__ = 32;
      context__.validate_dims("data initialization", "stoi", "int",
        std::vector<size_t>{static_cast<size_t>(N_t)});
      stoi = std::vector<int>(N_t, std::numeric_limits<int>::min());
      current_statement__ = 32;
      stoi = context__.vals_i("stoi");
      current_statement__ = 33;
      stan::math::validate_non_negative_index("B", "N_t", N_t);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "B", "double",
        std::vector<size_t>{static_cast<size_t>(N_t)});
      B = std::vector<double>(N_t, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 34;
      B = context__.vals_r("B");
      current_statement__ = 35;
      t0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 35;
      t0 = 0;
      current_statement__ = 36;
      kappa = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 36;
      kappa = 1000000;
      current_statement__ = 37;
      unused = std::numeric_limits<int>::min();
      current_statement__ = 37;
      unused = 34;
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "kappa", kappa, 0);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("y", "N_t", N_t);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("y2", "N_t", N_t);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "overloaded_ode_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%",
             "stancflags = --print-cpp"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "overloaded_ode_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 1;
      beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ gamma = DUMMY_VAR__;
      current_statement__ = 2;
      gamma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ xi = DUMMY_VAR__;
      current_statement__ = 3;
      xi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ delta = DUMMY_VAR__;
      current_statement__ = 4;
      delta = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> y =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_t,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__));
      current_statement__ = 5;
      stan::model::assign(y,
        stan::math::ode_rk45_tol(simple_SIR_variadic2_functor__(), y0, t0, t,
          1e-6, 1e-6, 1000, pstream__, beta, kappa, gamma, xi, delta),
        "assigning variable y");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> y2 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_t,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__));
      current_statement__ = 6;
      stan::model::assign(y2,
        stan::math::ode_rk45_tol(simple_SIR_variadic2_functor__(), y0, t0, t,
          1e-6, 1e-6, 1000, pstream__, beta, kappa, gamma, xi, delta, unused),
        "assigning variable y2");
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "y2", y2, 0);
      {
        current_statement__ = 7;
        stan::math::validate_non_negative_index("y_diff", "N_t", N_t);
        Eigen::Matrix<local_scalar_t__,-1,1> y_diff =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_t, DUMMY_VAR__);
        current_statement__ = 9;
        stan::model::assign(y_diff,
          (stan::model::rvalue(y0, "y0", stan::model::index_uni(1)) -
          stan::model::rvalue(y, "y", stan::model::index_uni(1),
            stan::model::index_uni(1))), "assigning variable y_diff",
          stan::model::index_uni(1));
        current_statement__ = 12;
        for (int n = 2; n <= N_t; ++n) {
          current_statement__ = 10;
          stan::model::assign(y_diff,
            (stan::model::rvalue(y, "y", stan::model::index_uni((n - 1)),
               stan::model::index_uni(1)) -
            stan::model::rvalue(y, "y", stan::model::index_uni(n),
              stan::model::index_uni(1))), "assigning variable y_diff",
            stan::model::index_uni(n));
        }
        current_statement__ = 13;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(beta, 0, 2.5));
        current_statement__ = 14;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(gamma, 0, 1));
        current_statement__ = 15;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(xi, 0, 25));
        current_statement__ = 16;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(delta, 0, 1));
        current_statement__ = 17;
        lp_accum__.add(stan::math::poisson_lpmf<propto__>(stoi, y_diff));
        current_statement__ = 18;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(B,
                         stan::math::log(
                           stan::model::rvalue(y, "y",
                             stan::model::index_omni(),
                             stan::model::index_uni(4))), 0.15));
        current_statement__ = 19;
        stan::math::validate_non_negative_index("y2_diff", "N_t", N_t);
        Eigen::Matrix<local_scalar_t__,-1,1> y2_diff =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_t, DUMMY_VAR__);
        current_statement__ = 21;
        stan::model::assign(y2_diff,
          (stan::model::rvalue(y0, "y0", stan::model::index_uni(1)) -
          stan::model::rvalue(y2, "y2", stan::model::index_uni(1),
            stan::model::index_uni(1))), "assigning variable y2_diff",
          stan::model::index_uni(1));
        current_statement__ = 24;
        for (int n = 2; n <= N_t; ++n) {
          current_statement__ = 22;
          stan::model::assign(y2_diff,
            (stan::model::rvalue(y2, "y2", stan::model::index_uni((n - 1)),
               stan::model::index_uni(1)) -
            stan::model::rvalue(y2, "y2", stan::model::index_uni(n),
              stan::model::index_uni(1))), "assigning variable y2_diff",
            stan::model::index_uni(n));
        }
        current_statement__ = 25;
        lp_accum__.add(stan::math::poisson_lpmf<propto__>(stoi, y2_diff));
        current_statement__ = 26;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(B,
                         stan::math::log(
                           stan::model::rvalue(y2, "y2",
                             stan::model::index_omni(),
                             stan::model::index_uni(4))), 0.15));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "overloaded_ode_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 1;
      beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ gamma = DUMMY_VAR__;
      current_statement__ = 2;
      gamma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ xi = DUMMY_VAR__;
      current_statement__ = 3;
      xi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ delta = DUMMY_VAR__;
      current_statement__ = 4;
      delta = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> y =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_t,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__));
      current_statement__ = 5;
      stan::model::assign(y,
        stan::math::ode_rk45_tol(simple_SIR_variadic2_functor__(), y0, t0, t,
          1e-6, 1e-6, 1000, pstream__, beta, kappa, gamma, xi, delta),
        "assigning variable y");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> y2 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_t,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(4, DUMMY_VAR__));
      current_statement__ = 6;
      stan::model::assign(y2,
        stan::math::ode_rk45_tol(simple_SIR_variadic2_functor__(), y0, t0, t,
          1e-6, 1e-6, 1000, pstream__, beta, kappa, gamma, xi, delta, unused),
        "assigning variable y2");
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "y2", y2, 0);
      {
        current_statement__ = 7;
        stan::math::validate_non_negative_index("y_diff", "N_t", N_t);
        Eigen::Matrix<local_scalar_t__,-1,1> y_diff =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_t, DUMMY_VAR__);
        current_statement__ = 9;
        stan::model::assign(y_diff,
          (stan::model::rvalue(y0, "y0", stan::model::index_uni(1)) -
          stan::model::rvalue(y, "y", stan::model::index_uni(1),
            stan::model::index_uni(1))), "assigning variable y_diff",
          stan::model::index_uni(1));
        current_statement__ = 12;
        for (int n = 2; n <= N_t; ++n) {
          current_statement__ = 10;
          stan::model::assign(y_diff,
            (stan::model::rvalue(y, "y", stan::model::index_uni((n - 1)),
               stan::model::index_uni(1)) -
            stan::model::rvalue(y, "y", stan::model::index_uni(n),
              stan::model::index_uni(1))), "assigning variable y_diff",
            stan::model::index_uni(n));
        }
        current_statement__ = 13;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(beta, 0, 2.5));
        current_statement__ = 14;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(gamma, 0, 1));
        current_statement__ = 15;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(xi, 0, 25));
        current_statement__ = 16;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(delta, 0, 1));
        current_statement__ = 17;
        lp_accum__.add(stan::math::poisson_lpmf<propto__>(stoi, y_diff));
        current_statement__ = 18;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(B,
                         stan::math::log(
                           stan::model::rvalue(y, "y",
                             stan::model::index_omni(),
                             stan::model::index_uni(4))), 0.15));
        current_statement__ = 19;
        stan::math::validate_non_negative_index("y2_diff", "N_t", N_t);
        Eigen::Matrix<local_scalar_t__,-1,1> y2_diff =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_t, DUMMY_VAR__);
        current_statement__ = 21;
        stan::model::assign(y2_diff,
          (stan::model::rvalue(y0, "y0", stan::model::index_uni(1)) -
          stan::model::rvalue(y2, "y2", stan::model::index_uni(1),
            stan::model::index_uni(1))), "assigning variable y2_diff",
          stan::model::index_uni(1));
        current_statement__ = 24;
        for (int n = 2; n <= N_t; ++n) {
          current_statement__ = 22;
          stan::model::assign(y2_diff,
            (stan::model::rvalue(y2, "y2", stan::model::index_uni((n - 1)),
               stan::model::index_uni(1)) -
            stan::model::rvalue(y2, "y2", stan::model::index_uni(n),
              stan::model::index_uni(1))), "assigning variable y2_diff",
            stan::model::index_uni(n));
        }
        current_statement__ = 25;
        lp_accum__.add(stan::math::poisson_lpmf<propto__>(stoi, y2_diff));
        current_statement__ = 26;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(B,
                         stan::math::log(
                           stan::model::rvalue(y2, "y2",
                             stan::model::index_omni(),
                             stan::model::index_uni(4))), 0.15));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "overloaded_ode_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double gamma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      gamma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double xi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      xi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      double delta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      delta = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      std::vector<Eigen::Matrix<double,-1,1>> y =
        std::vector<Eigen::Matrix<double,-1,1>>(N_t,
          Eigen::Matrix<double,-1,1>::Constant(4,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> y2 =
        std::vector<Eigen::Matrix<double,-1,1>>(N_t,
          Eigen::Matrix<double,-1,1>::Constant(4,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(beta);
      out__.write(gamma);
      out__.write(xi);
      out__.write(delta);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 5;
      stan::model::assign(y,
        stan::math::ode_rk45_tol(simple_SIR_variadic2_functor__(), y0, t0, t,
          1e-6, 1e-6, 1000, pstream__, beta, kappa, gamma, xi, delta),
        "assigning variable y");
      current_statement__ = 6;
      stan::model::assign(y2,
        stan::math::ode_rk45_tol(simple_SIR_variadic2_functor__(), y0, t0, t,
          1e-6, 1e-6, 1000, pstream__, beta, kappa, gamma, xi, delta, unused),
        "assigning variable y2");
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "y2", y2, 0);
      if (emit_transformed_parameters__) {
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
            out__.write(y[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
            out__.write(y2[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 1;
      beta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, beta);
      local_scalar_t__ gamma = DUMMY_VAR__;
      current_statement__ = 2;
      gamma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, gamma);
      local_scalar_t__ xi = DUMMY_VAR__;
      current_statement__ = 3;
      xi = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, xi);
      local_scalar_t__ delta = DUMMY_VAR__;
      current_statement__ = 4;
      delta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, delta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "xi", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "delta", "double",
        std::vector<size_t>{});
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 1;
      beta = context__.vals_r("beta")[(1 - 1)];
      out__.write_free_lb(0, beta);
      local_scalar_t__ gamma = DUMMY_VAR__;
      current_statement__ = 2;
      gamma = context__.vals_r("gamma")[(1 - 1)];
      out__.write_free_lb(0, gamma);
      local_scalar_t__ xi = DUMMY_VAR__;
      current_statement__ = 3;
      xi = context__.vals_r("xi")[(1 - 1)];
      out__.write_free_lb(0, xi);
      local_scalar_t__ delta = DUMMY_VAR__;
      current_statement__ = 4;
      delta = context__.vals_r("delta")[(1 - 1)];
      out__.write_free_lb(0, delta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "gamma", "xi", "delta"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"y", "y2"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_t),
               static_cast<size_t>(4)},
             std::vector<size_t>{static_cast<size_t>(N_t),
               static_cast<size_t>(4)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "gamma");
    param_names__.emplace_back(std::string() + "xi");
    param_names__.emplace_back(std::string() + "delta");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
          param_names__.emplace_back(std::string() + "y" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
          param_names__.emplace_back(std::string() + "y2" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "gamma");
    param_names__.emplace_back(std::string() + "xi");
    param_names__.emplace_back(std::string() + "delta");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
          param_names__.emplace_back(std::string() + "y" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
          param_names__.emplace_back(std::string() + "y2" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_t) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_t) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_t) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_t) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(4) + "}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((N_t * 4)
      + (N_t * 4)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((N_t * 4)
      + (N_t * 4)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = overloaded_ode_model_namespace::overloaded_ode_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return overloaded_ode_model_namespace::profiles__;
}
#endif
