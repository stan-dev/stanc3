  $ ../../../../../install/default/bin/stanc --auto-format array_overloaded.stan
functions {
  real bar(array[] real xs) {
    return 1.0;
  }
  
  real bar(array[] complex xs) {
    return 2.0;
  }
}
model {
  print(bar({1, 2}));
  print(bar({2.3, 3}));
}

  $ ../../../../../install/default/bin/stanc --auto-format array_promotion.stan
functions {
  void printer(array[] real x) {
    print(x);
  }
  
  void data_printer(data array[] real x) {
    print(x[0]);
  }
  real nested(array[,] complex zs) {
    return num_elements(zs);
  }
}
data {
  int N;
  array[N] int xs;
}
parameters {
  real r;
}
transformed parameters {
  array[2, 2] real zs = {{2, 3}, {7, 0.5}};
  array[2] complex z1 = {1, 3};
  array[2] complex z2 = {1, 3.5};
  array[2] complex z3 = {1, 3.5i};
  z3 = {3.5i, r};
}
model {
  array[3] int d = {1, 2, 3};
  printer(d);
  data_printer(xs);
  printer(xs);
  print(nested({d, d}));
  print(nested(zs));
}

  $ ../../../../../install/default/bin/stanc --auto-format complex_functions.stan
functions {
  void promote_complex_array(array[] complex zs) {
    print(zs[0]);
  }
  
  real sum_weird(complex_matrix zs) {
    return sum(get_real(zs)) + sum(get_imag(zs));
  }
}
generated quantities {
  real x = norm(1);
  x = norm(1.5);
  x = norm(3i);
  
  real y = abs(4 + 3i);
  y = arg(4 + 1i);
  y = arg(2.5);
  y = arg(1);
  
  complex z;
  z = conj(4.1 + 7i);
  z = conj(4.1);
  z = conj(0);
  
  z = proj(4.1 + 7i);
  z = proj(4.1);
  z = proj(0);
  
  z = polar(1.5, 0.5);
  z = polar(2, 3);
  
  array[3] int xs = {1, 2, 3};
  promote_complex_array(xs);
  
  matrix[2, 2] A = [[1, 2], [3, 4]];
  real answer = sum_weird(A);
}

  $ ../../../../../install/default/bin/stanc --auto-format newton_x_r_type.stan
functions {
  vector algebra_system(vector y, vector theta, array[] real x_r,
                        array[] int x_i) {
    vector[2] f_y;
    f_y[1] = y[1] - theta[1];
    f_y[2] = y[2] - theta[2];
    return f_y;
  }
}
data {
  
}
transformed data {
  vector[2] y;
  array[0] int x_r;
  array[0] int x_i;
}
parameters {
  vector[2] theta_p;
  real dummy_parameter;
}
transformed parameters {
  vector[2] y_s_p;
  y_s_p = algebra_solver_newton(algebra_system, y, theta_p, x_r, x_i);
}
model {
  dummy_parameter ~ normal(0, 1);
}

  $ ../../../../../install/default/bin/stanc --auto-format newton_x_r_type_control.stan
functions {
  vector algebra_system(vector y, vector theta, array[] real x_r,
                        array[] int x_i) {
    vector[2] f_y;
    f_y[1] = y[1] - theta[1];
    f_y[2] = y[2] - theta[2];
    return f_y;
  }
}
data {
  
}
transformed data {
  vector[2] y;
  array[0] int x_r;
  array[0] int x_i;
}
parameters {
  vector[2] theta_p;
  real dummy_parameter;
}
transformed parameters {
  vector[2] y_s_p;
  y_s_p = algebra_solver_newton(algebra_system, y, theta_p, x_r, x_i, 0.01,
                                0.01, 10);
}
model {
  dummy_parameter ~ normal(0, 1);
}

  $ ../../../../../install/default/bin/stanc --auto-format propto.stan
model {
  target += normal_lupdf(1 | {0}, 1);
}

  $ ../../../../../install/default/bin/stanc --auto-format x_r_type.stan
functions {
  vector algebra_system(vector y, vector theta, array[] real x_r,
                        array[] int x_i) {
    vector[2] f_y;
    f_y[1] = y[1] - theta[1];
    f_y[2] = y[2] - theta[2];
    return f_y;
  }
}
data {
  
}
transformed data {
  vector[2] y;
  array[0] int x_r;
  array[0] int x_i;
}
parameters {
  vector[2] theta_p;
  real dummy_parameter;
}
transformed parameters {
  vector[2] y_s_p;
  y_s_p = algebra_solver(algebra_system, y, theta_p, x_r, x_i);
}
model {
  dummy_parameter ~ normal(0, 1);
}

  $ ../../../../../install/default/bin/stanc --auto-format x_r_type_control.stan
functions {
  vector algebra_system(vector y, vector theta, array[] real x_r,
                        array[] int x_i) {
    vector[2] f_y;
    f_y[1] = y[1] - theta[1];
    f_y[2] = y[2] - theta[2];
    return f_y;
  }
}
data {
  
}
transformed data {
  vector[2] y;
  array[0] int x_r;
  array[0] int x_i;
}
parameters {
  vector[2] theta_p;
  real dummy_parameter;
}
transformed parameters {
  vector[2] y_s_p;
  y_s_p = algebra_solver(algebra_system, y, theta_p, x_r, x_i, 0.01, 0.01,
                         10);
}
model {
  dummy_parameter ~ normal(0, 1);
}

