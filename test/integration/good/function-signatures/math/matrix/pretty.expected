  $ ../../../../../../../install/default/bin/stanc --auto-format Phi.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = Phi(d_matrix);
  transformed_data_vector = Phi(d_vector);
  transformed_data_row_vector = Phi(d_row_vector);
  trans_x3y = Phi(x3y);
  trans_x4y = Phi(x4y);
  trans_x5y = Phi(x5y);
  trans_x2z = Phi(x1z);
  trans_x2z = Phi(x2z);
  trans_x3z = Phi(x3z);
  trans_x4z = Phi(x4z);
  trans_x5z = Phi(x5z);
  trans_x2w = Phi(x1w);
  trans_x2w = Phi(x2w);
  trans_x3w = Phi(x3w);
  trans_x4w = Phi(x4w);
  trans_x5w = Phi(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = Phi(d_matrix);
  transformed_param_vector = Phi(d_vector);
  transformed_param_row_vector = Phi(d_row_vector);
  transformed_param_matrix = Phi(p_matrix);
  transformed_param_vector = Phi(p_vector);
  transformed_param_row_vector = Phi(p_row_vector);
  trans_p_x3y = Phi(p_x3y);
  trans_p_x4y = Phi(p_x4y);
  trans_p_x5y = Phi(p_x5y);
  trans_p_x2z = Phi(p_x2z);
  trans_p_x3z = Phi(p_x3z);
  trans_p_x4z = Phi(p_x4z);
  trans_p_x5z = Phi(p_x5z);
  trans_p_x2w = Phi(p_x2w);
  trans_p_x3w = Phi(p_x3w);
  trans_p_x4w = Phi(p_x4w);
  trans_p_x5w = Phi(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format Phi_approx.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = Phi_approx(d_matrix);
  transformed_data_vector = Phi_approx(d_vector);
  transformed_data_row_vector = Phi_approx(d_row_vector);
  trans_x3y = Phi_approx(x3y);
  trans_x4y = Phi_approx(x4y);
  trans_x5y = Phi_approx(x5y);
  trans_x2z = Phi_approx(x1z);
  trans_x2z = Phi_approx(x2z);
  trans_x3z = Phi_approx(x3z);
  trans_x4z = Phi_approx(x4z);
  trans_x5z = Phi_approx(x5z);
  trans_x2w = Phi_approx(x1w);
  trans_x2w = Phi_approx(x2w);
  trans_x3w = Phi_approx(x3w);
  trans_x4w = Phi_approx(x4w);
  trans_x5w = Phi_approx(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = Phi_approx(d_matrix);
  transformed_param_vector = Phi_approx(d_vector);
  transformed_param_row_vector = Phi_approx(d_row_vector);
  transformed_param_matrix = Phi_approx(p_matrix);
  transformed_param_vector = Phi_approx(p_vector);
  transformed_param_row_vector = Phi_approx(p_row_vector);
  trans_p_x3y = Phi_approx(p_x3y);
  trans_p_x4y = Phi_approx(p_x4y);
  trans_p_x5y = Phi_approx(p_x5y);
  trans_p_x2z = Phi_approx(p_x2z);
  trans_p_x3z = Phi_approx(p_x3z);
  trans_p_x4z = Phi_approx(p_x4z);
  trans_p_x5z = Phi_approx(p_x5z);
  trans_p_x2w = Phi_approx(p_x2w);
  trans_p_x3w = Phi_approx(p_x3w);
  trans_p_x4w = Phi_approx(p_x4w);
  trans_p_x5w = Phi_approx(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format acos.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = acos(d_matrix);
  transformed_data_vector = acos(d_vector);
  transformed_data_row_vector = acos(d_row_vector);
  trans_x3y = acos(x3y);
  trans_x4y = acos(x4y);
  trans_x5y = acos(x5y);
  trans_x2z = acos(x1z);
  trans_x2z = acos(x2z);
  trans_x3z = acos(x3z);
  trans_x4z = acos(x4z);
  trans_x5z = acos(x5z);
  trans_x2w = acos(x1w);
  trans_x2w = acos(x2w);
  trans_x3w = acos(x3w);
  trans_x4w = acos(x4w);
  trans_x5w = acos(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = acos(d_matrix);
  transformed_param_vector = acos(d_vector);
  transformed_param_row_vector = acos(d_row_vector);
  transformed_param_matrix = acos(p_matrix);
  transformed_param_vector = acos(p_vector);
  transformed_param_row_vector = acos(p_row_vector);
  trans_p_x3y = acos(p_x3y);
  trans_p_x4y = acos(p_x4y);
  trans_p_x5y = acos(p_x5y);
  trans_p_x2z = acos(p_x2z);
  trans_p_x3z = acos(p_x3z);
  trans_p_x4z = acos(p_x4z);
  trans_p_x5z = acos(p_x5z);
  trans_p_x2w = acos(p_x2w);
  trans_p_x3w = acos(p_x3w);
  trans_p_x4w = acos(p_x4w);
  trans_p_x5w = acos(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format acosh.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = acosh(d_matrix);
  transformed_data_vector = acosh(d_vector);
  transformed_data_row_vector = acosh(d_row_vector);
  trans_x3y = acosh(x3y);
  trans_x4y = acosh(x4y);
  trans_x5y = acosh(x5y);
  trans_x2z = acosh(x1z);
  trans_x2z = acosh(x2z);
  trans_x3z = acosh(x3z);
  trans_x4z = acosh(x4z);
  trans_x5z = acosh(x5z);
  trans_x2w = acosh(x1w);
  trans_x2w = acosh(x2w);
  trans_x3w = acosh(x3w);
  trans_x4w = acosh(x4w);
  trans_x5w = acosh(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = acosh(d_matrix);
  transformed_param_vector = acosh(d_vector);
  transformed_param_row_vector = acosh(d_row_vector);
  transformed_param_matrix = acosh(p_matrix);
  transformed_param_vector = acosh(p_vector);
  transformed_param_row_vector = acosh(p_row_vector);
  trans_p_x3y = acosh(p_x3y);
  trans_p_x4y = acosh(p_x4y);
  trans_p_x5y = acosh(p_x5y);
  trans_p_x2z = acosh(p_x2z);
  trans_p_x3z = acosh(p_x3z);
  trans_p_x4z = acosh(p_x4z);
  trans_p_x5z = acosh(p_x5z);
  trans_p_x2w = acosh(p_x2w);
  trans_p_x3w = acosh(p_x3w);
  trans_p_x4w = acosh(p_x4w);
  trans_p_x5w = acosh(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format add_diag.stan
functions {

}
data {
  int<lower=1> N;
  matrix[N, N] K;
  row_vector[N] row_vec;
  vector[N] vec;
  int scalar;
}
transformed data {
  matrix[N, N] K1;
  matrix[N, N] K2;
  matrix[N, N] K3;
  K1 = add_diag(K, row_vec);
  K2 = add_diag(K, vec);
  K3 = add_diag(K, scalar);
}
parameters {
  matrix[N, N] Kp;
  row_vector[N] row_vec_p;
  vector[N] vec_p;
  real scalar_p;
}
model {
  matrix[N, N] K4 = add_diag(Kp, row_vec_p);
  matrix[N, N] K5 = add_diag(Kp, vec_p);
  matrix[N, N] K6 = add_diag(Kp, scalar_p);
  matrix[N, N] K7 = add_diag(K, row_vec_p);
  matrix[N, N] K8 = add_diag(K, vec_p);
  matrix[N, N] K9 = add_diag(K, scalar_p);
  matrix[N, N] K10 = add_diag(Kp, row_vec);
  matrix[N, N] K11 = add_diag(Kp, vec);
  matrix[N, N] K12 = add_diag(Kp, scalar);
}
generated quantities {

}

  $ ../../../../../../../install/default/bin/stanc --auto-format append_array.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix_array[d_int];
  vector[d_int] d_vector_array[d_int];
  row_vector[d_int] d_row_vector_array[d_int];
  int d_int_2d_array[d_int, d_int];
  real d_real_2d_array[d_int, d_int];
  matrix[d_int, d_int] d_matrix_2d_array[d_int, d_int];
  vector[d_int] d_vector_2d_array[d_int, d_int];
  row_vector[d_int] d_row_vector_2d_array[d_int, d_int];
  int d_int_3d_array[d_int, d_int, d_int];
  real d_real_3d_array[d_int, d_int, d_int];
  matrix[d_int, d_int] d_matrix_3d_array[d_int, d_int, d_int];
  vector[d_int] d_vector_3d_array[d_int, d_int, d_int];
  row_vector[d_int] d_row_vector_3d_array[d_int, d_int, d_int];
}
transformed data {
  int transformed_data_int_array[d_int];
  int transformed_data_int_array2[2 * d_int];
  real transformed_data_real_array[d_int];
  real transformed_data_real_array2[2 * d_int];
  matrix[d_int, d_int] transformed_data_matrix_array[d_int];
  matrix[d_int, d_int] transformed_data_matrix_array2[2 * d_int];
  vector[d_int] transformed_data_vector_array[d_int];
  vector[d_int] transformed_data_vector_array2[2 * d_int];
  row_vector[d_int] transformed_data_row_vector_array[d_int];
  row_vector[d_int] transformed_data_row_vector_array2[2 * d_int];
  int transformed_data_int_2d_array[d_int, d_int];
  int transformed_data_int_2d_array2[2 * d_int, d_int];
  real transformed_data_real_2d_array[d_int, d_int];
  real transformed_data_real_2d_array2[2 * d_int, d_int];
  matrix[d_int, d_int] transformed_data_matrix_2d_array[d_int, d_int];
  matrix[d_int, d_int] transformed_data_matrix_2d_array2[2 * d_int, d_int];
  vector[d_int] transformed_data_vector_2d_array[d_int, d_int];
  vector[d_int] transformed_data_vector_2d_array2[2 * d_int, d_int];
  row_vector[d_int] transformed_data_row_vector_2d_array[d_int, d_int];
  row_vector[d_int] transformed_data_row_vector_2d_array2[2 * d_int, d_int];
  int transformed_data_int_3d_array[d_int, d_int, d_int];
  int transformed_data_int_3d_array2[2 * d_int, d_int, d_int];
  real transformed_data_real_3d_array[d_int, d_int, d_int];
  real transformed_data_real_3d_array2[2 * d_int, d_int, d_int];
  matrix[d_int, d_int] transformed_data_matrix_3d_array[d_int, d_int, d_int];
  matrix[d_int, d_int] transformed_data_matrix_3d_array2[2 * d_int, d_int,
                                                         d_int];
  vector[d_int] transformed_data_vector_3d_array[d_int, d_int, d_int];
  vector[d_int] transformed_data_vector_3d_array2[2 * d_int, d_int, d_int];
  row_vector[d_int] transformed_data_row_vector_3d_array[d_int, d_int, d_int];
  row_vector[d_int] transformed_data_row_vector_3d_array2[2 * d_int, d_int,
                                                          d_int];
  transformed_data_int_array2 = append_array(d_int_array, d_int_array);
  transformed_data_int_array2 = append_array(d_int_array,
                                             transformed_data_int_array);
  transformed_data_int_array2 = append_array(transformed_data_int_array,
                                             d_int_array);
  transformed_data_real_array2 = append_array(d_real_array, d_real_array);
  transformed_data_real_array2 = append_array(d_real_array,
                                              transformed_data_real_array);
  transformed_data_real_array2 = append_array(transformed_data_real_array,
                                              d_real_array);
  transformed_data_matrix_array2 = append_array(d_matrix_array,
                                                d_matrix_array);
  transformed_data_matrix_array2 = append_array(d_matrix_array,
                                                transformed_data_matrix_array);
  transformed_data_matrix_array2 = append_array(transformed_data_matrix_array,
                                                d_matrix_array);
  transformed_data_vector_array2 = append_array(d_vector_array,
                                                d_vector_array);
  transformed_data_vector_array2 = append_array(d_vector_array,
                                                transformed_data_vector_array);
  transformed_data_vector_array2 = append_array(transformed_data_vector_array,
                                                d_vector_array);
  transformed_data_row_vector_array2 = append_array(d_row_vector_array,
                                                    d_row_vector_array);
  transformed_data_row_vector_array2 = append_array(d_row_vector_array,
                                                    transformed_data_row_vector_array);
  transformed_data_row_vector_array2 = append_array(transformed_data_row_vector_array,
                                                    d_row_vector_array);
  transformed_data_int_2d_array2 = append_array(d_int_2d_array,
                                                d_int_2d_array);
  transformed_data_int_2d_array2 = append_array(d_int_2d_array,
                                                transformed_data_int_2d_array);
  transformed_data_int_2d_array2 = append_array(transformed_data_int_2d_array,
                                                d_int_2d_array);
  transformed_data_real_2d_array2 = append_array(d_real_2d_array,
                                                 d_real_2d_array);
  transformed_data_real_2d_array2 = append_array(d_real_2d_array,
                                                 transformed_data_real_2d_array);
  transformed_data_real_2d_array2 = append_array(transformed_data_real_2d_array,
                                                 d_real_2d_array);
  transformed_data_matrix_2d_array2 = append_array(d_matrix_2d_array,
                                                   d_matrix_2d_array);
  transformed_data_matrix_2d_array2 = append_array(d_matrix_2d_array,
                                                   transformed_data_matrix_2d_array);
  transformed_data_matrix_2d_array2 = append_array(transformed_data_matrix_2d_array,
                                                   d_matrix_2d_array);
  transformed_data_vector_2d_array2 = append_array(d_vector_2d_array,
                                                   d_vector_2d_array);
  transformed_data_vector_2d_array2 = append_array(d_vector_2d_array,
                                                   transformed_data_vector_2d_array);
  transformed_data_vector_2d_array2 = append_array(transformed_data_vector_2d_array,
                                                   d_vector_2d_array);
  transformed_data_row_vector_2d_array2 = append_array(d_row_vector_2d_array,
                                                       d_row_vector_2d_array);
  transformed_data_row_vector_2d_array2 = append_array(d_row_vector_2d_array,
                                                       transformed_data_row_vector_2d_array);
  transformed_data_row_vector_2d_array2 = append_array(transformed_data_row_vector_2d_array,
                                                       d_row_vector_2d_array);
  transformed_data_int_3d_array2 = append_array(d_int_3d_array,
                                                d_int_3d_array);
  transformed_data_int_3d_array2 = append_array(d_int_3d_array,
                                                transformed_data_int_3d_array);
  transformed_data_int_3d_array2 = append_array(transformed_data_int_3d_array,
                                                d_int_3d_array);
  transformed_data_real_3d_array2 = append_array(d_real_3d_array,
                                                 d_real_3d_array);
  transformed_data_real_3d_array2 = append_array(d_real_3d_array,
                                                 transformed_data_real_3d_array);
  transformed_data_real_3d_array2 = append_array(transformed_data_real_3d_array,
                                                 d_real_3d_array);
  transformed_data_matrix_3d_array2 = append_array(d_matrix_3d_array,
                                                   d_matrix_3d_array);
  transformed_data_matrix_3d_array2 = append_array(d_matrix_3d_array,
                                                   transformed_data_matrix_3d_array);
  transformed_data_matrix_3d_array2 = append_array(transformed_data_matrix_3d_array,
                                                   d_matrix_3d_array);
  transformed_data_vector_3d_array2 = append_array(d_vector_3d_array,
                                                   d_vector_3d_array);
  transformed_data_vector_3d_array2 = append_array(d_vector_3d_array,
                                                   transformed_data_vector_3d_array);
  transformed_data_vector_3d_array2 = append_array(transformed_data_vector_3d_array,
                                                   d_vector_3d_array);
  transformed_data_row_vector_3d_array2 = append_array(d_row_vector_3d_array,
                                                       d_row_vector_3d_array);
  transformed_data_row_vector_3d_array2 = append_array(d_row_vector_3d_array,
                                                       transformed_data_row_vector_3d_array);
  transformed_data_row_vector_3d_array2 = append_array(transformed_data_row_vector_3d_array,
                                                       d_row_vector_3d_array);
}
parameters {
  real p_real;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix_array[d_int];
  vector[d_int] p_vector_array[d_int];
  row_vector[d_int] p_row_vector_array[d_int];
  real p_real_2d_array[d_int, d_int];
  matrix[d_int, d_int] p_matrix_2d_array[d_int, d_int];
  vector[d_int] p_vector_2d_array[d_int, d_int];
  row_vector[d_int] p_row_vector_2d_array[d_int, d_int];
  real p_real_3d_array[d_int, d_int, d_int];
  matrix[d_int, d_int] p_matrix_3d_array[d_int, d_int, d_int];
  vector[d_int] p_vector_3d_array[d_int, d_int, d_int];
  row_vector[d_int] p_row_vector_3d_array[d_int, d_int, d_int];
}
transformed parameters {
  real transformed_param_real_array[d_int];
  real transformed_param_real_array2[2 * d_int];
  matrix[d_int, d_int] transformed_param_matrix_array[d_int];
  matrix[d_int, d_int] transformed_param_matrix_array2[2 * d_int];
  vector[d_int] transformed_param_vector_array[d_int];
  vector[d_int] transformed_param_vector_array2[2 * d_int];
  row_vector[d_int] transformed_param_row_vector_array[d_int];
  row_vector[d_int] transformed_param_row_vector_array2[2 * d_int];
  real transformed_param_real_2d_array[d_int, d_int];
  real transformed_param_real_2d_array2[2 * d_int, d_int];
  matrix[d_int, d_int] transformed_param_matrix_2d_array[d_int, d_int];
  matrix[d_int, d_int] transformed_param_matrix_2d_array2[2 * d_int, d_int];
  vector[d_int] transformed_param_vector_2d_array[d_int, d_int];
  vector[d_int] transformed_param_vector_2d_array2[2 * d_int, d_int];
  row_vector[d_int] transformed_param_row_vector_2d_array[d_int, d_int];
  row_vector[d_int] transformed_param_row_vector_2d_array2[2 * d_int, d_int];
  real transformed_param_real_3d_array[d_int, d_int, d_int];
  real transformed_param_real_3d_array2[2 * d_int, d_int, d_int];
  matrix[d_int, d_int] transformed_param_matrix_3d_array[d_int, d_int, d_int];
  matrix[d_int, d_int] transformed_param_matrix_3d_array2[2 * d_int, d_int,
                                                          d_int];
  vector[d_int] transformed_param_vector_3d_array[d_int, d_int, d_int];
  vector[d_int] transformed_param_vector_3d_array2[2 * d_int, d_int, d_int];
  row_vector[d_int] transformed_param_row_vector_3d_array[d_int, d_int,
                                                          d_int];
  row_vector[d_int] transformed_param_row_vector_3d_array2[2 * d_int, d_int,
                                                           d_int];
  transformed_param_real_array2 = append_array(p_real_array, p_real_array);
  transformed_param_real_array2 = append_array(p_real_array, d_real_array);
  transformed_param_real_array2 = append_array(transformed_param_real_array,
                                               p_real_array);
  transformed_param_real_array2 = append_array(transformed_data_real_array,
                                               p_real_array);
  transformed_param_real_array2 = append_array(d_real_array, p_real_array);
  transformed_param_real_array2 = append_array(p_real_array,
                                               transformed_param_real_array);
  transformed_param_real_array2 = append_array(p_real_array,
                                               transformed_data_real_array);
  transformed_param_matrix_array2 = append_array(p_matrix_array,
                                                 p_matrix_array);
  transformed_param_matrix_array2 = append_array(p_matrix_array,
                                                 d_matrix_array);
  transformed_param_matrix_array2 = append_array(p_matrix_array,
                                                 transformed_param_matrix_array);
  transformed_param_matrix_array2 = append_array(p_matrix_array,
                                                 transformed_data_matrix_array);
  transformed_param_matrix_array2 = append_array(d_matrix_array,
                                                 p_matrix_array);
  transformed_param_matrix_array2 = append_array(transformed_param_matrix_array,
                                                 p_matrix_array);
  transformed_param_matrix_array2 = append_array(transformed_data_matrix_array,
                                                 p_matrix_array);
  transformed_param_vector_array2 = append_array(p_vector_array,
                                                 p_vector_array);
  transformed_param_vector_array2 = append_array(p_vector_array,
                                                 d_vector_array);
  transformed_param_vector_array2 = append_array(p_vector_array,
                                                 transformed_param_vector_array);
  transformed_param_vector_array2 = append_array(p_vector_array,
                                                 transformed_data_vector_array);
  transformed_param_vector_array2 = append_array(d_vector_array,
                                                 p_vector_array);
  transformed_param_vector_array2 = append_array(transformed_param_vector_array,
                                                 p_vector_array);
  transformed_param_vector_array2 = append_array(transformed_data_vector_array,
                                                 p_vector_array);
  transformed_param_row_vector_array2 = append_array(p_row_vector_array,
                                                     p_row_vector_array);
  transformed_param_row_vector_array2 = append_array(p_row_vector_array,
                                                     d_row_vector_array);
  transformed_param_row_vector_array2 = append_array(p_row_vector_array,
                                                     transformed_param_row_vector_array);
  transformed_param_row_vector_array2 = append_array(p_row_vector_array,
                                                     transformed_data_row_vector_array);
  transformed_param_row_vector_array2 = append_array(d_row_vector_array,
                                                     p_row_vector_array);
  transformed_param_row_vector_array2 = append_array(transformed_param_row_vector_array,
                                                     p_row_vector_array);
  transformed_param_row_vector_array2 = append_array(transformed_data_row_vector_array,
                                                     p_row_vector_array);
  transformed_param_real_2d_array2 = append_array(p_real_2d_array,
                                                  p_real_2d_array);
  transformed_param_real_2d_array2 = append_array(p_real_2d_array,
                                                  d_real_2d_array);
  transformed_param_real_2d_array2 = append_array(transformed_param_real_2d_array,
                                                  p_real_2d_array);
  transformed_param_real_2d_array2 = append_array(transformed_data_real_2d_array,
                                                  p_real_2d_array);
  transformed_param_real_2d_array2 = append_array(d_real_2d_array,
                                                  p_real_2d_array);
  transformed_param_real_2d_array2 = append_array(p_real_2d_array,
                                                  transformed_param_real_2d_array);
  transformed_param_real_2d_array2 = append_array(p_real_2d_array,
                                                  transformed_data_real_2d_array);
  transformed_param_matrix_2d_array2 = append_array(p_matrix_2d_array,
                                                    p_matrix_2d_array);
  transformed_param_matrix_2d_array2 = append_array(p_matrix_2d_array,
                                                    d_matrix_2d_array);
  transformed_param_matrix_2d_array2 = append_array(p_matrix_2d_array,
                                                    transformed_param_matrix_2d_array);
  transformed_param_matrix_2d_array2 = append_array(p_matrix_2d_array,
                                                    transformed_data_matrix_2d_array);
  transformed_param_matrix_2d_array2 = append_array(d_matrix_2d_array,
                                                    p_matrix_2d_array);
  transformed_param_matrix_2d_array2 = append_array(transformed_param_matrix_2d_array,
                                                    p_matrix_2d_array);
  transformed_param_matrix_2d_array2 = append_array(transformed_data_matrix_2d_array,
                                                    p_matrix_2d_array);
  transformed_param_vector_2d_array2 = append_array(p_vector_2d_array,
                                                    p_vector_2d_array);
  transformed_param_vector_2d_array2 = append_array(p_vector_2d_array,
                                                    d_vector_2d_array);
  transformed_param_vector_2d_array2 = append_array(p_vector_2d_array,
                                                    transformed_param_vector_2d_array);
  transformed_param_vector_2d_array2 = append_array(p_vector_2d_array,
                                                    transformed_data_vector_2d_array);
  transformed_param_vector_2d_array2 = append_array(d_vector_2d_array,
                                                    p_vector_2d_array);
  transformed_param_vector_2d_array2 = append_array(transformed_param_vector_2d_array,
                                                    p_vector_2d_array);
  transformed_param_vector_2d_array2 = append_array(transformed_data_vector_2d_array,
                                                    p_vector_2d_array);
  transformed_param_row_vector_2d_array2 = append_array(p_row_vector_2d_array,
                                                        p_row_vector_2d_array);
  transformed_param_row_vector_2d_array2 = append_array(p_row_vector_2d_array,
                                                        d_row_vector_2d_array);
  transformed_param_row_vector_2d_array2 = append_array(p_row_vector_2d_array,
                                                        transformed_param_row_vector_2d_array);
  transformed_param_row_vector_2d_array2 = append_array(p_row_vector_2d_array,
                                                        transformed_data_row_vector_2d_array);
  transformed_param_row_vector_2d_array2 = append_array(d_row_vector_2d_array,
                                                        p_row_vector_2d_array);
  transformed_param_row_vector_2d_array2 = append_array(transformed_param_row_vector_2d_array,
                                                        p_row_vector_2d_array);
  transformed_param_row_vector_2d_array2 = append_array(transformed_data_row_vector_2d_array,
                                                        p_row_vector_2d_array);
  transformed_param_real_3d_array2 = append_array(p_real_3d_array,
                                                  p_real_3d_array);
  transformed_param_real_3d_array2 = append_array(p_real_3d_array,
                                                  d_real_3d_array);
  transformed_param_real_3d_array2 = append_array(transformed_param_real_3d_array,
                                                  p_real_3d_array);
  transformed_param_real_3d_array2 = append_array(transformed_data_real_3d_array,
                                                  p_real_3d_array);
  transformed_param_real_3d_array2 = append_array(d_real_3d_array,
                                                  p_real_3d_array);
  transformed_param_real_3d_array2 = append_array(p_real_3d_array,
                                                  transformed_param_real_3d_array);
  transformed_param_real_3d_array2 = append_array(p_real_3d_array,
                                                  transformed_data_real_3d_array);
  transformed_param_matrix_3d_array2 = append_array(p_matrix_3d_array,
                                                    p_matrix_3d_array);
  transformed_param_matrix_3d_array2 = append_array(p_matrix_3d_array,
                                                    d_matrix_3d_array);
  transformed_param_matrix_3d_array2 = append_array(p_matrix_3d_array,
                                                    transformed_param_matrix_3d_array);
  transformed_param_matrix_3d_array2 = append_array(p_matrix_3d_array,
                                                    transformed_data_matrix_3d_array);
  transformed_param_matrix_3d_array2 = append_array(d_matrix_3d_array,
                                                    p_matrix_3d_array);
  transformed_param_matrix_3d_array2 = append_array(transformed_param_matrix_3d_array,
                                                    p_matrix_3d_array);
  transformed_param_matrix_3d_array2 = append_array(transformed_data_matrix_3d_array,
                                                    p_matrix_3d_array);
  transformed_param_vector_3d_array2 = append_array(p_vector_3d_array,
                                                    p_vector_3d_array);
  transformed_param_vector_3d_array2 = append_array(p_vector_3d_array,
                                                    d_vector_3d_array);
  transformed_param_vector_3d_array2 = append_array(p_vector_3d_array,
                                                    transformed_param_vector_3d_array);
  transformed_param_vector_3d_array2 = append_array(p_vector_3d_array,
                                                    transformed_data_vector_3d_array);
  transformed_param_vector_3d_array2 = append_array(d_vector_3d_array,
                                                    p_vector_3d_array);
  transformed_param_vector_3d_array2 = append_array(transformed_param_vector_3d_array,
                                                    p_vector_3d_array);
  transformed_param_vector_3d_array2 = append_array(transformed_data_vector_3d_array,
                                                    p_vector_3d_array);
  transformed_param_row_vector_3d_array2 = append_array(p_row_vector_3d_array,
                                                        p_row_vector_3d_array);
  transformed_param_row_vector_3d_array2 = append_array(p_row_vector_3d_array,
                                                        d_row_vector_3d_array);
  transformed_param_row_vector_3d_array2 = append_array(p_row_vector_3d_array,
                                                        transformed_param_row_vector_3d_array);
  transformed_param_row_vector_3d_array2 = append_array(p_row_vector_3d_array,
                                                        transformed_data_row_vector_3d_array);
  transformed_param_row_vector_3d_array2 = append_array(d_row_vector_3d_array,
                                                        p_row_vector_3d_array);
  transformed_param_row_vector_3d_array2 = append_array(transformed_param_row_vector_3d_array,
                                                        p_row_vector_3d_array);
  transformed_param_row_vector_3d_array2 = append_array(transformed_data_row_vector_3d_array,
                                                        p_row_vector_3d_array);
}
model {
  p_real ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format append_col.stan
data {
  int d_int;
  real d_real;
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_matrix = append_col(d_matrix, d_matrix);
  transformed_data_matrix = append_col(d_vector, d_matrix);
  transformed_data_matrix = append_col(d_matrix, d_vector);
  transformed_data_matrix = append_col(d_vector, d_vector);
  transformed_data_row_vector = append_col(d_row_vector, d_row_vector);
  transformed_data_row_vector = append_col(d_real, d_row_vector);
  transformed_data_row_vector = append_col(d_row_vector, d_real);
}
parameters {
  real p_real;
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_matrix = append_col(p_matrix, d_matrix);
  transformed_param_matrix = append_col(d_matrix, p_matrix);
  transformed_param_matrix = append_col(p_matrix, p_matrix);
  transformed_param_matrix = append_col(d_matrix, d_matrix);
  transformed_param_matrix = append_col(p_vector, d_matrix);
  transformed_param_matrix = append_col(d_vector, p_matrix);
  transformed_param_matrix = append_col(p_vector, p_matrix);
  transformed_param_matrix = append_col(d_vector, d_matrix);
  transformed_param_matrix = append_col(p_matrix, d_vector);
  transformed_param_matrix = append_col(d_matrix, p_vector);
  transformed_param_matrix = append_col(p_matrix, p_vector);
  transformed_param_matrix = append_col(d_matrix, d_vector);
  transformed_param_matrix = append_col(p_vector, d_vector);
  transformed_param_matrix = append_col(d_vector, p_vector);
  transformed_param_matrix = append_col(p_vector, p_vector);
  transformed_param_matrix = append_col(d_vector, d_vector);
  transformed_param_row_vector = append_col(p_row_vector, d_row_vector);
  transformed_param_row_vector = append_col(d_row_vector, p_row_vector);
  transformed_param_row_vector = append_col(p_row_vector, p_row_vector);
  transformed_param_row_vector = append_col(d_row_vector, d_row_vector);
  transformed_param_row_vector = append_col(p_real, d_row_vector);
  transformed_param_row_vector = append_col(d_real, p_row_vector);
  transformed_param_row_vector = append_col(p_real, p_row_vector);
  transformed_param_row_vector = append_col(d_real, d_row_vector);
  transformed_param_row_vector = append_col(p_row_vector, d_real);
  transformed_param_row_vector = append_col(d_row_vector, p_real);
  transformed_param_row_vector = append_col(p_row_vector, p_real);
  transformed_param_row_vector = append_col(d_row_vector, d_real);
}
model {
  p_real ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format append_row.stan
data {
  int d_int;
  real d_real;
  matrix[d_int, d_int] d_matrix;
  row_vector[d_int] d_row_vector;
  vector[d_int] d_vector;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  transformed_data_matrix = append_row(d_matrix, d_matrix);
  transformed_data_matrix = append_row(d_row_vector, d_matrix);
  transformed_data_matrix = append_row(d_matrix, d_row_vector);
  transformed_data_matrix = append_row(d_row_vector, d_row_vector);
  transformed_data_vector = append_row(d_vector, d_vector);
  transformed_data_vector = append_row(d_real, d_vector);
  transformed_data_vector = append_row(d_vector, d_real);
}
parameters {
  real p_real;
  matrix[d_int, d_int] p_matrix;
  row_vector[d_int] p_row_vector;
  vector[d_int] p_vector;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  transformed_param_matrix = append_row(p_matrix, d_matrix);
  transformed_param_matrix = append_row(d_matrix, p_matrix);
  transformed_param_matrix = append_row(p_matrix, p_matrix);
  transformed_param_matrix = append_row(d_matrix, d_matrix);
  transformed_param_matrix = append_row(p_row_vector, d_matrix);
  transformed_param_matrix = append_row(d_row_vector, p_matrix);
  transformed_param_matrix = append_row(p_row_vector, p_matrix);
  transformed_param_matrix = append_row(d_row_vector, d_matrix);
  transformed_param_matrix = append_row(p_matrix, d_row_vector);
  transformed_param_matrix = append_row(d_matrix, p_row_vector);
  transformed_param_matrix = append_row(p_matrix, p_row_vector);
  transformed_param_matrix = append_row(d_matrix, d_row_vector);
  transformed_param_matrix = append_row(p_row_vector, d_row_vector);
  transformed_param_matrix = append_row(d_row_vector, p_row_vector);
  transformed_param_matrix = append_row(p_row_vector, p_row_vector);
  transformed_param_matrix = append_row(d_row_vector, d_row_vector);
  transformed_param_vector = append_row(p_vector, d_vector);
  transformed_param_vector = append_row(d_vector, p_vector);
  transformed_param_vector = append_row(p_vector, p_vector);
  transformed_param_vector = append_row(d_vector, d_vector);
  transformed_param_vector = append_row(p_real, d_vector);
  transformed_param_vector = append_row(d_real, p_vector);
  transformed_param_vector = append_row(p_real, p_vector);
  transformed_param_vector = append_row(d_real, d_vector);
  transformed_param_vector = append_row(p_vector, p_real);
  transformed_param_vector = append_row(d_vector, p_real);
  transformed_param_vector = append_row(p_vector, d_real);
  transformed_param_vector = append_row(d_vector, d_real);
}
model {
  p_real ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format asin.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = asin(d_matrix);
  transformed_data_vector = asin(d_vector);
  transformed_data_row_vector = asin(d_row_vector);
  trans_x3y = asin(x3y);
  trans_x4y = asin(x4y);
  trans_x5y = asin(x5y);
  trans_x2z = asin(x1z);
  trans_x2z = asin(x2z);
  trans_x3z = asin(x3z);
  trans_x4z = asin(x4z);
  trans_x5z = asin(x5z);
  trans_x2w = asin(x1w);
  trans_x2w = asin(x2w);
  trans_x3w = asin(x3w);
  trans_x4w = asin(x4w);
  trans_x5w = asin(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = asin(d_matrix);
  transformed_param_vector = asin(d_vector);
  transformed_param_row_vector = asin(d_row_vector);
  transformed_param_matrix = asin(p_matrix);
  transformed_param_vector = asin(p_vector);
  transformed_param_row_vector = asin(p_row_vector);
  trans_p_x3y = asin(p_x3y);
  trans_p_x4y = asin(p_x4y);
  trans_p_x5y = asin(p_x5y);
  trans_p_x2z = asin(p_x2z);
  trans_p_x3z = asin(p_x3z);
  trans_p_x4z = asin(p_x4z);
  trans_p_x5z = asin(p_x5z);
  trans_p_x2w = asin(p_x2w);
  trans_p_x3w = asin(p_x3w);
  trans_p_x4w = asin(p_x4w);
  trans_p_x5w = asin(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format asinh.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = asinh(d_matrix);
  transformed_data_vector = asinh(d_vector);
  transformed_data_row_vector = asinh(d_row_vector);
  trans_x3y = asinh(x3y);
  trans_x4y = asinh(x4y);
  trans_x5y = asinh(x5y);
  trans_x2z = asinh(x1z);
  trans_x2z = asinh(x2z);
  trans_x3z = asinh(x3z);
  trans_x4z = asinh(x4z);
  trans_x5z = asinh(x5z);
  trans_x2w = asinh(x1w);
  trans_x2w = asinh(x2w);
  trans_x3w = asinh(x3w);
  trans_x4w = asinh(x4w);
  trans_x5w = asinh(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = asinh(d_matrix);
  transformed_param_vector = asinh(d_vector);
  transformed_param_row_vector = asinh(d_row_vector);
  transformed_param_matrix = asinh(p_matrix);
  transformed_param_vector = asinh(p_vector);
  transformed_param_row_vector = asinh(p_row_vector);
  trans_p_x3y = asinh(p_x3y);
  trans_p_x4y = asinh(p_x4y);
  trans_p_x5y = asinh(p_x5y);
  trans_p_x2z = asinh(p_x2z);
  trans_p_x3z = asinh(p_x3z);
  trans_p_x4z = asinh(p_x4z);
  trans_p_x5z = asinh(p_x5z);
  trans_p_x2w = asinh(p_x2w);
  trans_p_x3w = asinh(p_x3w);
  trans_p_x4w = asinh(p_x4w);
  trans_p_x5w = asinh(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format atan.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = atan(d_matrix);
  transformed_data_vector = atan(d_vector);
  transformed_data_row_vector = atan(d_row_vector);
  trans_x3y = atan(x3y);
  trans_x4y = atan(x4y);
  trans_x5y = atan(x5y);
  trans_x2z = atan(x1z);
  trans_x2z = atan(x2z);
  trans_x3z = atan(x3z);
  trans_x4z = atan(x4z);
  trans_x5z = atan(x5z);
  trans_x2w = atan(x1w);
  trans_x2w = atan(x2w);
  trans_x3w = atan(x3w);
  trans_x4w = atan(x4w);
  trans_x5w = atan(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = atan(d_matrix);
  transformed_param_vector = atan(d_vector);
  transformed_param_row_vector = atan(d_row_vector);
  transformed_param_matrix = atan(p_matrix);
  transformed_param_vector = atan(p_vector);
  transformed_param_row_vector = atan(p_row_vector);
  trans_p_x3y = atan(p_x3y);
  trans_p_x4y = atan(p_x4y);
  trans_p_x5y = atan(p_x5y);
  trans_p_x2z = atan(p_x2z);
  trans_p_x3z = atan(p_x3z);
  trans_p_x4z = atan(p_x4z);
  trans_p_x5z = atan(p_x5z);
  trans_p_x2w = atan(p_x2w);
  trans_p_x3w = atan(p_x3w);
  trans_p_x4w = atan(p_x4w);
  trans_p_x5w = atan(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format atanh.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = atanh(d_matrix);
  transformed_data_vector = atanh(d_vector);
  transformed_data_row_vector = atanh(d_row_vector);
  trans_x3y = atanh(x3y);
  trans_x4y = atanh(x4y);
  trans_x5y = atanh(x5y);
  trans_x2z = atanh(x1z);
  trans_x2z = atanh(x2z);
  trans_x3z = atanh(x3z);
  trans_x4z = atanh(x4z);
  trans_x5z = atanh(x5z);
  trans_x2w = atanh(x1w);
  trans_x2w = atanh(x2w);
  trans_x3w = atanh(x3w);
  trans_x4w = atanh(x4w);
  trans_x5w = atanh(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = atanh(d_matrix);
  transformed_param_vector = atanh(d_vector);
  transformed_param_row_vector = atanh(d_row_vector);
  transformed_param_matrix = atanh(p_matrix);
  transformed_param_vector = atanh(p_vector);
  transformed_param_row_vector = atanh(p_row_vector);
  trans_p_x3y = atanh(p_x3y);
  trans_p_x4y = atanh(p_x4y);
  trans_p_x5y = atanh(p_x5y);
  trans_p_x2z = atanh(p_x2z);
  trans_p_x3z = atanh(p_x3z);
  trans_p_x4z = atanh(p_x4z);
  trans_p_x5z = atanh(p_x5z);
  trans_p_x2w = atanh(p_x2w);
  trans_p_x3w = atanh(p_x3w);
  trans_p_x4w = atanh(p_x4w);
  trans_p_x5w = atanh(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format block.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = block(d_matrix, d_int, d_int, d_int, d_int);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = block(d_matrix, d_int, d_int, d_int, d_int);
  transformed_param_matrix = block(p_matrix, d_int, d_int, d_int, d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format broadcast_infix_operators.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  real d_real;
}
transformed data {
  real transformed_data_real;
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_vector = d_vector + d_real;
  transformed_data_vector = d_real + d_vector;
  transformed_data_row_vector = d_row_vector + d_real;
  transformed_data_row_vector = d_real + d_row_vector;
  transformed_data_matrix = d_matrix + d_real;
  transformed_data_matrix = d_real + d_matrix;
  transformed_data_vector = d_vector - d_real;
  transformed_data_vector = d_real - d_vector;
  transformed_data_row_vector = d_row_vector - d_real;
  transformed_data_row_vector = d_real - d_row_vector;
  transformed_data_matrix = d_matrix - d_real;
  transformed_data_matrix = d_real - d_matrix;
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_vector = d_vector + d_real;
  transformed_param_vector = d_real + d_vector;
  transformed_param_row_vector = d_row_vector + d_real;
  transformed_param_row_vector = d_real + d_row_vector;
  transformed_param_matrix = d_matrix + d_real;
  transformed_param_matrix = d_real + d_matrix;
  transformed_param_vector = d_vector - d_real;
  transformed_param_vector = d_real - d_vector;
  transformed_param_row_vector = d_row_vector - d_real;
  transformed_param_row_vector = d_real - d_row_vector;
  transformed_param_matrix = d_matrix - d_real;
  transformed_param_matrix = d_real - d_matrix;
  transformed_param_vector = p_vector + d_real;
  transformed_param_vector = p_real + d_vector;
  transformed_param_row_vector = p_row_vector + d_real;
  transformed_param_row_vector = p_real + d_row_vector;
  transformed_param_matrix = p_matrix + d_real;
  transformed_param_matrix = p_real + d_matrix;
  transformed_param_vector = p_vector - d_real;
  transformed_param_vector = p_real - d_vector;
  transformed_param_row_vector = p_row_vector - d_real;
  transformed_param_row_vector = p_real - d_row_vector;
  transformed_param_matrix = p_matrix - d_real;
  transformed_param_matrix = p_real - d_matrix;
  transformed_param_vector = d_vector + p_real;
  transformed_param_vector = d_real + p_vector;
  transformed_param_row_vector = d_row_vector + p_real;
  transformed_param_row_vector = d_real + p_row_vector;
  transformed_param_matrix = d_matrix + p_real;
  transformed_param_matrix = d_real + p_matrix;
  transformed_param_vector = d_vector - p_real;
  transformed_param_vector = d_real - p_vector;
  transformed_param_row_vector = d_row_vector - p_real;
  transformed_param_row_vector = d_real - p_row_vector;
  transformed_param_matrix = d_matrix - p_real;
  transformed_param_matrix = d_real - p_matrix;
  transformed_param_vector = p_vector + p_real;
  transformed_param_vector = p_real + p_vector;
  transformed_param_row_vector = p_row_vector + p_real;
  transformed_param_row_vector = p_real + p_row_vector;
  transformed_param_matrix = p_matrix + p_real;
  transformed_param_matrix = p_real + p_matrix;
  transformed_param_vector = p_vector - p_real;
  transformed_param_vector = p_real - p_vector;
  transformed_param_row_vector = p_row_vector - p_real;
  transformed_param_row_vector = p_real - p_row_vector;
  transformed_param_matrix = p_matrix - p_real;
  transformed_param_matrix = p_real - p_matrix;
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format cbrt.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = cbrt(d_matrix);
  transformed_data_vector = cbrt(d_vector);
  transformed_data_row_vector = cbrt(d_row_vector);
  trans_x3y = cbrt(x3y);
  trans_x4y = cbrt(x4y);
  trans_x5y = cbrt(x5y);
  trans_x2z = cbrt(x1z);
  trans_x2z = cbrt(x2z);
  trans_x3z = cbrt(x3z);
  trans_x4z = cbrt(x4z);
  trans_x5z = cbrt(x5z);
  trans_x2w = cbrt(x1w);
  trans_x2w = cbrt(x2w);
  trans_x3w = cbrt(x3w);
  trans_x4w = cbrt(x4w);
  trans_x5w = cbrt(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = cbrt(d_matrix);
  transformed_param_vector = cbrt(d_vector);
  transformed_param_row_vector = cbrt(d_row_vector);
  transformed_param_matrix = cbrt(p_matrix);
  transformed_param_vector = cbrt(p_vector);
  transformed_param_row_vector = cbrt(p_row_vector);
  trans_p_x3y = cbrt(p_x3y);
  trans_p_x4y = cbrt(p_x4y);
  trans_p_x5y = cbrt(p_x5y);
  trans_p_x2z = cbrt(p_x2z);
  trans_p_x3z = cbrt(p_x3z);
  trans_p_x4z = cbrt(p_x4z);
  trans_p_x5z = cbrt(p_x5z);
  trans_p_x2w = cbrt(p_x2w);
  trans_p_x3w = cbrt(p_x3w);
  trans_p_x4w = cbrt(p_x4w);
  trans_p_x5w = cbrt(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format ceil.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = ceil(d_matrix);
  transformed_data_vector = ceil(d_vector);
  transformed_data_row_vector = ceil(d_row_vector);
  trans_x3y = ceil(x3y);
  trans_x4y = ceil(x4y);
  trans_x5y = ceil(x5y);
  trans_x2z = ceil(x1z);
  trans_x2z = ceil(x2z);
  trans_x3z = ceil(x3z);
  trans_x4z = ceil(x4z);
  trans_x5z = ceil(x5z);
  trans_x2w = ceil(x1w);
  trans_x2w = ceil(x2w);
  trans_x3w = ceil(x3w);
  trans_x4w = ceil(x4w);
  trans_x5w = ceil(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = ceil(d_matrix);
  transformed_param_vector = ceil(d_vector);
  transformed_param_row_vector = ceil(d_row_vector);
  transformed_param_matrix = ceil(p_matrix);
  transformed_param_vector = ceil(p_vector);
  transformed_param_row_vector = ceil(p_row_vector);
  trans_p_x3y = ceil(p_x3y);
  trans_p_x4y = ceil(p_x4y);
  trans_p_x5y = ceil(p_x5y);
  trans_p_x2z = ceil(p_x2z);
  trans_p_x3z = ceil(p_x3z);
  trans_p_x4z = ceil(p_x4z);
  trans_p_x5z = ceil(p_x5z);
  trans_p_x2w = ceil(p_x2w);
  trans_p_x3w = ceil(p_x3w);
  trans_p_x4w = ceil(p_x4w);
  trans_p_x5w = ceil(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format cholesky_decompose.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = cholesky_decompose(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = cholesky_decompose(d_matrix);
  transformed_param_matrix = cholesky_decompose(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format col.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  vector[d_int] transformed_data_vector;
  transformed_data_vector = col(d_matrix, d_int);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  transformed_param_vector = col(d_matrix, d_int);
  transformed_param_vector = col(p_matrix, d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format cols.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_int = cols(d_vector);
  transformed_data_int = cols(d_row_vector);
  transformed_data_int = cols(d_matrix);
  transformed_data_real = cols(d_vector);
  transformed_data_real = cols(d_row_vector);
  transformed_data_real = cols(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = cols(d_vector);
  transformed_param_real = cols(d_row_vector);
  transformed_param_real = cols(d_matrix);
  transformed_param_real = cols(p_vector);
  transformed_param_real = cols(p_row_vector);
  transformed_param_real = cols(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format columns_dot_product.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_row_vector = columns_dot_product(d_vector, d_vector);
  transformed_data_row_vector = columns_dot_product(d_row_vector,
                                                    d_row_vector);
  transformed_data_row_vector = columns_dot_product(d_matrix, d_matrix);
}
parameters {
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  real y_p;
}
transformed parameters {
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_row_vector = columns_dot_product(d_vector, d_vector);
  transformed_param_row_vector = columns_dot_product(d_row_vector,
                                                     d_row_vector);
  transformed_param_row_vector = columns_dot_product(d_matrix, d_matrix);
  transformed_param_row_vector = columns_dot_product(p_vector, d_vector);
  transformed_param_row_vector = columns_dot_product(p_row_vector,
                                                     d_row_vector);
  transformed_param_row_vector = columns_dot_product(p_matrix, d_matrix);
  transformed_param_row_vector = columns_dot_product(d_vector, p_vector);
  transformed_param_row_vector = columns_dot_product(d_row_vector,
                                                     p_row_vector);
  transformed_param_row_vector = columns_dot_product(d_matrix, p_matrix);
  transformed_param_row_vector = columns_dot_product(p_vector, p_vector);
  transformed_param_row_vector = columns_dot_product(p_row_vector,
                                                     p_row_vector);
  transformed_param_row_vector = columns_dot_product(p_matrix, p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format columns_dot_self.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_row_vector = columns_dot_self(d_vector);
  transformed_data_row_vector = columns_dot_self(d_row_vector);
  transformed_data_row_vector = columns_dot_self(d_matrix);
}
parameters {
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  real y_p;
}
transformed parameters {
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_row_vector = columns_dot_self(d_vector);
  transformed_param_row_vector = columns_dot_self(d_row_vector);
  transformed_param_row_vector = columns_dot_self(d_matrix);
  transformed_param_row_vector = columns_dot_self(p_vector);
  transformed_param_row_vector = columns_dot_self(p_row_vector);
  transformed_param_row_vector = columns_dot_self(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format container_construction_utilities.stan
data {
  int d_int;
  real d_real;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  int transformed_int_array[d_int];
  real transformed_data_real_array[d_int];
  row_vector[d_int] transformed_data_row_vector;
  vector[d_int] transformed_data_vector;
  transformed_data_matrix = identity_matrix(d_int);
  transformed_data_real_array = linspaced_array(d_int, d_real, d_real);
  transformed_data_row_vector = linspaced_row_vector(d_int, d_real, d_real);
  transformed_data_vector = linspaced_vector(d_int, d_real, d_real);
  transformed_int_array = one_hot_int_array(d_int, d_int);
  transformed_data_real_array = one_hot_array(d_int, d_int);
  transformed_data_row_vector = one_hot_row_vector(d_int, d_int);
  transformed_data_vector = one_hot_vector(d_int, d_int);
  transformed_int_array = ones_int_array(d_int);
  transformed_data_real_array = ones_array(d_int);
  transformed_data_row_vector = ones_row_vector(d_int);
  transformed_data_vector = ones_vector(d_int);
  transformed_data_vector = uniform_simplex(d_int);
  transformed_int_array = zeros_int_array(d_int);
  transformed_data_real_array = zeros_array(d_int);
  transformed_data_row_vector = zeros_row_vector(d_int);
  transformed_data_vector = zeros_vector(d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  matrix[d_int, d_int] transformed_parameters_matrix;
  real transformed_parameters_real_array[d_int];
  row_vector[d_int] transformed_parameters_row_vector;
  vector[d_int] transformed_parameters_vector;
  transformed_parameters_matrix = identity_matrix(d_int);
  transformed_parameters_real_array = linspaced_array(d_int, d_real, d_real);
  transformed_parameters_real_array = linspaced_array(d_int, p_real, d_real);
  transformed_parameters_real_array = linspaced_array(d_int, d_real, p_real);
  transformed_parameters_real_array = linspaced_array(d_int, p_real, p_real);
  transformed_parameters_row_vector = linspaced_row_vector(d_int, d_real,
                                                           d_real);
  transformed_parameters_row_vector = linspaced_row_vector(d_int, p_real,
                                                           d_real);
  transformed_parameters_row_vector = linspaced_row_vector(d_int, d_real,
                                                           p_real);
  transformed_parameters_row_vector = linspaced_row_vector(d_int, p_real,
                                                           p_real);
  transformed_parameters_vector = linspaced_vector(d_int, d_real, d_real);
  transformed_parameters_vector = linspaced_vector(d_int, p_real, d_real);
  transformed_parameters_vector = linspaced_vector(d_int, d_real, p_real);
  transformed_parameters_vector = linspaced_vector(d_int, p_real, p_real);
  transformed_parameters_real_array = one_hot_array(d_int, d_int);
  transformed_parameters_row_vector = one_hot_row_vector(d_int, d_int);
  transformed_parameters_vector = one_hot_vector(d_int, d_int);
  transformed_parameters_real_array = ones_array(d_int);
  transformed_parameters_row_vector = ones_row_vector(d_int);
  transformed_parameters_vector = ones_vector(d_int);
  transformed_parameters_vector = uniform_simplex(d_int);
  transformed_parameters_real_array = zeros_array(d_int);
  transformed_parameters_row_vector = zeros_row_vector(d_int);
  transformed_parameters_vector = zeros_vector(d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format cos.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = cos(d_matrix);
  transformed_data_vector = cos(d_vector);
  transformed_data_row_vector = cos(d_row_vector);
  trans_x3y = cos(x3y);
  trans_x4y = cos(x4y);
  trans_x5y = cos(x5y);
  trans_x2z = cos(x1z);
  trans_x2z = cos(x2z);
  trans_x3z = cos(x3z);
  trans_x4z = cos(x4z);
  trans_x5z = cos(x5z);
  trans_x2w = cos(x1w);
  trans_x2w = cos(x2w);
  trans_x3w = cos(x3w);
  trans_x4w = cos(x4w);
  trans_x5w = cos(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = cos(d_matrix);
  transformed_param_vector = cos(d_vector);
  transformed_param_row_vector = cos(d_row_vector);
  transformed_param_matrix = cos(p_matrix);
  transformed_param_vector = cos(p_vector);
  transformed_param_row_vector = cos(p_row_vector);
  trans_p_x3y = cos(p_x3y);
  trans_p_x4y = cos(p_x4y);
  trans_p_x5y = cos(p_x5y);
  trans_p_x2z = cos(p_x2z);
  trans_p_x3z = cos(p_x3z);
  trans_p_x4z = cos(p_x4z);
  trans_p_x5z = cos(p_x5z);
  trans_p_x2w = cos(p_x2w);
  trans_p_x3w = cos(p_x3w);
  trans_p_x4w = cos(p_x4w);
  trans_p_x5w = cos(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format cosh.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = cosh(d_matrix);
  transformed_data_vector = cosh(d_vector);
  transformed_data_row_vector = cosh(d_row_vector);
  trans_x3y = cosh(x3y);
  trans_x4y = cosh(x4y);
  trans_x5y = cosh(x5y);
  trans_x2z = cosh(x1z);
  trans_x2z = cosh(x2z);
  trans_x3z = cosh(x3z);
  trans_x4z = cosh(x4z);
  trans_x5z = cosh(x5z);
  trans_x2w = cosh(x1w);
  trans_x2w = cosh(x2w);
  trans_x3w = cosh(x3w);
  trans_x4w = cosh(x4w);
  trans_x5w = cosh(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = cosh(d_matrix);
  transformed_param_vector = cosh(d_vector);
  transformed_param_row_vector = cosh(d_row_vector);
  transformed_param_matrix = cosh(p_matrix);
  transformed_param_vector = cosh(p_vector);
  transformed_param_row_vector = cosh(p_row_vector);
  trans_p_x3y = cosh(p_x3y);
  trans_p_x4y = cosh(p_x4y);
  trans_p_x5y = cosh(p_x5y);
  trans_p_x2z = cosh(p_x2z);
  trans_p_x3z = cosh(p_x3z);
  trans_p_x4z = cosh(p_x4z);
  trans_p_x5z = cosh(p_x5z);
  trans_p_x2w = cosh(p_x2w);
  trans_p_x3w = cosh(p_x3w);
  trans_p_x4w = cosh(p_x4w);
  trans_p_x5w = cosh(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format cov_exp_quad.stan
data {
  int d_int_1;
  int d_int_2;
  int K;
  real d_sigma;
  real d_len;
  real d_arr_1[d_int_1];
  real d_arr_2[d_int_2];
  vector[K] d_vec_1[d_int_1];
  vector[K] d_vec_2[d_int_2];
  row_vector[K] d_rvec_1[d_int_1];
  row_vector[K] d_rvec_2[d_int_2];
}
transformed data {
  matrix[d_int_1, d_int_1] transformed_data_matrix;
  transformed_data_matrix = cov_exp_quad(d_arr_1, d_sigma, d_len);
  transformed_data_matrix = cov_exp_quad(d_arr_1, d_arr_2, d_sigma, d_len);
  transformed_data_matrix = cov_exp_quad(d_vec_1, d_sigma, d_len);
  transformed_data_matrix = cov_exp_quad(d_vec_1, d_vec_2, d_sigma, d_len);
  transformed_data_matrix = cov_exp_quad(d_rvec_1, d_sigma, d_len);
  transformed_data_matrix = cov_exp_quad(d_rvec_1, d_rvec_2, d_sigma, d_len);
}
parameters {
  real y_p;
  real p_sigma;
  real p_len;
  real p_arr_1[d_int_1];
  real p_arr_2[d_int_2];
  vector[K] p_vec_1[d_int_1];
  vector[K] p_vec_2[d_int_2];
  row_vector[K] p_rvec_1[d_int_1];
  row_vector[K] p_rvec_2[d_int_2];
}
transformed parameters {
  matrix[d_int_1, d_int_1] transformed_param_matrix;
  transformed_param_matrix = cov_exp_quad(p_arr_1, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_arr_1, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_arr_1, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_arr_1, d_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_arr_1, p_arr_2, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_arr_1, p_arr_2, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_arr_1, p_arr_2, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_arr_1, p_arr_2, d_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_arr_1, d_arr_2, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_arr_1, d_arr_2, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_arr_1, d_arr_2, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_arr_1, d_arr_2, d_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(d_arr_1, d_arr_2, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(d_arr_1, d_arr_2, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(d_arr_1, d_arr_2, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(d_arr_1, d_arr_2, d_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(d_arr_1, p_arr_2, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(d_arr_1, p_arr_2, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(d_arr_1, p_arr_2, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(d_arr_1, p_arr_2, d_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_vec_1, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_vec_1, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_vec_1, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_vec_1, d_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_vec_1, p_vec_2, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_vec_1, p_vec_2, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_vec_1, p_vec_2, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_vec_1, p_vec_2, d_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_vec_1, d_vec_2, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_vec_1, d_vec_2, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_vec_1, d_vec_2, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_vec_1, d_vec_2, d_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(d_vec_1, d_vec_2, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(d_vec_1, d_vec_2, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(d_vec_1, d_vec_2, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(d_vec_1, p_vec_2, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(d_vec_1, p_vec_2, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(d_vec_1, p_vec_2, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(d_vec_1, p_vec_2, d_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_rvec_1, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_rvec_1, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_rvec_1, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_rvec_1, d_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_rvec_1, p_rvec_2, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_rvec_1, p_rvec_2, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_rvec_1, p_rvec_2, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_rvec_1, p_rvec_2, d_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_rvec_1, d_rvec_2, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_rvec_1, d_rvec_2, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(p_rvec_1, d_rvec_2, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(p_rvec_1, d_rvec_2, d_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(d_rvec_1, d_rvec_2, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(d_rvec_1, d_rvec_2, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(d_rvec_1, d_rvec_2, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(d_rvec_1, p_rvec_2, p_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(d_rvec_1, p_rvec_2, d_sigma, p_len);
  transformed_param_matrix = cov_exp_quad(d_rvec_1, p_rvec_2, p_sigma, d_len);
  transformed_param_matrix = cov_exp_quad(d_rvec_1, p_rvec_2, d_sigma, d_len);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format crossprod.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = crossprod(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = crossprod(d_matrix);
  transformed_param_matrix = crossprod(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format csr_extract_u.stan
data {
  matrix[3, 4] a_d;
}
transformed data {
  int u[5];
  u = csr_extract_u(a_d);
}
parameters {
  real y;
  matrix[3, 4] a_p;
}
transformed parameters {
  real v;
  {
    int u_p[5];
    u_p = csr_extract_u(a_d);
    u_p = csr_extract_u(a_p);
    v = 3;
  }
}
model {
  y ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format csr_extract_v.stan
data {
  matrix[3, 4] a_d;
}
transformed data {
  int v_d[5];
  v_d = csr_extract_v(a_d);
}
parameters {
  real y_p;
  matrix[3, 4] a_p;
}
transformed parameters {
  real v;
  {
    int v_p[5];
    v_p = csr_extract_v(a_d);
    v_p = csr_extract_v(a_p);
    v = 3;
  }
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format csr_extract_w.stan
data {
  matrix[3, 4] a_d;
}
transformed data {
  vector[3] w_d;
  w_d = csr_extract_w(a_d);
}
parameters {
  real y;
  matrix[3, 4] a_p;
}
transformed parameters {
  vector[3] w_p;
  w_p = csr_extract_w(a_d);
  w_p = csr_extract_w(a_p);
}
model {
  y ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format csr_matrix_times_vector.stan
data {
  int m;
  int n;
  int v[3];
  int u[3];
  vector[3] w_d;
  vector[3] b_d;
}
transformed data {
  vector[3] ab_d;
  ab_d = csr_matrix_times_vector(m, n, w_d, v, u, b_d);
}
parameters {
  real y_p;
  vector[3] w_p;
  vector[3] b_p;
}
transformed parameters {
  vector[3] ab_p;
  ab_p = csr_matrix_times_vector(m, n, w_d, v, u, b_d);
  ab_p = csr_matrix_times_vector(m, n, w_d, v, u, b_p);
  ab_p = csr_matrix_times_vector(m, n, w_p, v, u, b_d);
  ab_p = csr_matrix_times_vector(m, n, w_p, v, u, b_p);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format csr_to_dense_matrix.stan
transformed data {
  matrix[3, 4] a_td;
  vector[5] w_d;
  int v[6];
  int u[7];
  a_td = csr_to_dense_matrix(3, 4, w_d, v, u);
}
parameters {
  real y_p;
  vector[5] w_p;
}
transformed parameters {
  matrix[3, 4] a_tp;
  a_tp = csr_to_dense_matrix(3, 4, w_d, v, u);
  a_tp = csr_to_dense_matrix(3, 4, w_p, v, u);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format cumulative_sum.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  real transformed_data_real_array[d_int];
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_real_array = cumulative_sum(d_real_array);
  transformed_data_vector = cumulative_sum(d_vector);
  transformed_data_row_vector = cumulative_sum(d_row_vector);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real_array[d_int];
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_real_array = cumulative_sum(d_real_array);
  transformed_param_vector = cumulative_sum(d_vector);
  transformed_param_row_vector = cumulative_sum(d_row_vector);
  transformed_param_real_array = cumulative_sum(p_real_array);
  transformed_param_vector = cumulative_sum(p_vector);
  transformed_param_row_vector = cumulative_sum(p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format determinant.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = determinant(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = determinant(d_matrix);
  transformed_param_real = determinant(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format diag_matrix.stan
data {
  int d_int;
  vector[d_int] d_vector;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = diag_matrix(d_vector);
}
parameters {
  real y_p;
  vector[d_int] p_vector;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = diag_matrix(d_vector);
  transformed_param_matrix = diag_matrix(p_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format diag_post_multiply.stan
data {
  int d_int;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = diag_post_multiply(d_matrix, d_vector);
  transformed_data_matrix = diag_post_multiply(d_matrix, d_row_vector);
}
parameters {
  real y_p;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = diag_post_multiply(d_matrix, d_vector);
  transformed_param_matrix = diag_post_multiply(d_matrix, d_row_vector);
  transformed_param_matrix = diag_post_multiply(p_matrix, d_vector);
  transformed_param_matrix = diag_post_multiply(p_matrix, d_row_vector);
  transformed_param_matrix = diag_post_multiply(d_matrix, p_vector);
  transformed_param_matrix = diag_post_multiply(d_matrix, p_row_vector);
  transformed_param_matrix = diag_post_multiply(p_matrix, p_vector);
  transformed_param_matrix = diag_post_multiply(p_matrix, p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format diag_pre_multiply.stan
data {
  int d_int;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = diag_pre_multiply(d_vector, d_matrix);
  transformed_data_matrix = diag_pre_multiply(d_row_vector, d_matrix);
}
parameters {
  real y_p;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = diag_pre_multiply(d_vector, d_matrix);
  transformed_param_matrix = diag_pre_multiply(d_row_vector, d_matrix);
  transformed_param_matrix = diag_pre_multiply(p_vector, d_matrix);
  transformed_param_matrix = diag_pre_multiply(p_row_vector, d_matrix);
  transformed_param_matrix = diag_pre_multiply(d_vector, p_matrix);
  transformed_param_matrix = diag_pre_multiply(d_row_vector, p_matrix);
  transformed_param_matrix = diag_pre_multiply(p_vector, p_matrix);
  transformed_param_matrix = diag_pre_multiply(p_row_vector, p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format diagonal.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  vector[d_int] transformed_data_vector;
  transformed_data_vector = diagonal(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  transformed_param_vector = diagonal(d_matrix);
  transformed_param_vector = diagonal(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format digamma.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = digamma(d_matrix);
  transformed_data_vector = digamma(d_vector);
  transformed_data_row_vector = digamma(d_row_vector);
  trans_x3y = digamma(x3y);
  trans_x4y = digamma(x4y);
  trans_x5y = digamma(x5y);
  trans_x2z = digamma(x1z);
  trans_x2z = digamma(x2z);
  trans_x3z = digamma(x3z);
  trans_x4z = digamma(x4z);
  trans_x5z = digamma(x5z);
  trans_x2w = digamma(x1w);
  trans_x2w = digamma(x2w);
  trans_x3w = digamma(x3w);
  trans_x4w = digamma(x4w);
  trans_x5w = digamma(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = digamma(d_matrix);
  transformed_param_vector = digamma(d_vector);
  transformed_param_row_vector = digamma(d_row_vector);
  transformed_param_matrix = digamma(p_matrix);
  transformed_param_vector = digamma(p_vector);
  transformed_param_row_vector = digamma(p_row_vector);
  trans_p_x3y = digamma(p_x3y);
  trans_p_x4y = digamma(p_x4y);
  trans_p_x5y = digamma(p_x5y);
  trans_p_x2z = digamma(p_x2z);
  trans_p_x3z = digamma(p_x3z);
  trans_p_x4z = digamma(p_x4z);
  trans_p_x5z = digamma(p_x5z);
  trans_p_x2w = digamma(p_x2w);
  trans_p_x3w = digamma(p_x3w);
  trans_p_x4w = digamma(p_x4w);
  trans_p_x5w = digamma(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format dims.stan
data {
  int x1x;
  real x2x;
  vector[2] x3x;
  row_vector[2] x4x;
  matrix[2, 3] x5x;
  int x1y[3];
  real x2y[3];
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  int val0[0];
  int val1[1];
  int val2[2];
  int val3[3];
  int val4[4];
  int val5[5];
  int val6[6];
  int val7[7];
  int val8[8];
  int val9[9];
  int val10[10];
  val0 = dims(x1x);
  val0 = dims(x2x);
  val1 = dims(x3x);
  val1 = dims(x4x);
  val2 = dims(x5x);
  val1 = dims(x1y);
  val1 = dims(x2y);
  val2 = dims(x3y);
  val2 = dims(x4y);
  val3 = dims(x5y);
  val2 = dims(x1z);
  val2 = dims(x2z);
  val3 = dims(x3z);
  val3 = dims(x4z);
  val4 = dims(x5z);
  val3 = dims(x1w);
  val3 = dims(x2w);
  val4 = dims(x3w);
  val4 = dims(x4w);
  val5 = dims(x5w);
}
parameters {
  real y;
  real p_x1x;
  real p_x2x;
  vector[2] p_x3x;
  row_vector[2] p_x4x;
  matrix[2, 3] p_x5x;
  real p_x1y[3];
  real p_x2y[3];
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x1z[3, 4];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x1w[3, 4, 5];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  real p_val0[0];
  real p_val1[1];
  real p_val2[2];
  real p_val3[3];
  real p_val4[4];
  real p_val5[5];
  real p_val6[6];
  real p_val7[7];
  real p_val8[8];
  real p_val9[9];
  real p_val10[10];
  p_val0 = dims(x1x);
  p_val0 = dims(x2x);
  p_val1 = dims(x3x);
  p_val1 = dims(x4x);
  p_val2 = dims(x5x);
  p_val1 = dims(x1y);
  p_val1 = dims(x2y);
  p_val2 = dims(x3y);
  p_val2 = dims(x4y);
  p_val3 = dims(x5y);
  p_val2 = dims(x1z);
  p_val2 = dims(x2z);
  p_val3 = dims(x3z);
  p_val3 = dims(x4z);
  p_val4 = dims(x5z);
  p_val3 = dims(x1w);
  p_val3 = dims(x2w);
  p_val4 = dims(x3w);
  p_val4 = dims(x4w);
  p_val5 = dims(x5w);
  p_val0 = dims(p_x1x);
  p_val0 = dims(p_x2x);
  p_val1 = dims(p_x3x);
  p_val1 = dims(p_x4x);
  p_val2 = dims(p_x5x);
  p_val1 = dims(p_x1y);
  p_val1 = dims(p_x2y);
  p_val2 = dims(p_x3y);
  p_val2 = dims(p_x4y);
  p_val3 = dims(p_x5y);
  p_val2 = dims(p_x1z);
  p_val2 = dims(p_x2z);
  p_val3 = dims(p_x3z);
  p_val3 = dims(p_x4z);
  p_val4 = dims(p_x5z);
  p_val3 = dims(p_x1w);
  p_val3 = dims(p_x2w);
  p_val4 = dims(p_x3w);
  p_val4 = dims(p_x4w);
  p_val5 = dims(p_x5w);
}
model {
  y ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format distance.stan
data {
  int d_int;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = distance(d_vector, d_vector);
  transformed_data_real = distance(d_vector, d_row_vector);
  transformed_data_real = distance(d_row_vector, d_vector);
  transformed_data_real = distance(d_row_vector, d_row_vector);
}
parameters {
  real y_p;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = distance(d_vector, d_vector);
  transformed_param_real = distance(d_vector, d_row_vector);
  transformed_param_real = distance(d_row_vector, d_vector);
  transformed_param_real = distance(d_row_vector, d_row_vector);
  transformed_param_real = distance(p_vector, d_vector);
  transformed_param_real = distance(p_vector, d_row_vector);
  transformed_param_real = distance(p_row_vector, d_vector);
  transformed_param_real = distance(p_row_vector, d_row_vector);
  transformed_param_real = distance(d_vector, p_vector);
  transformed_param_real = distance(d_vector, p_row_vector);
  transformed_param_real = distance(d_row_vector, p_vector);
  transformed_param_real = distance(d_row_vector, p_row_vector);
  transformed_param_real = distance(p_vector, p_vector);
  transformed_param_real = distance(p_vector, p_row_vector);
  transformed_param_real = distance(p_row_vector, p_vector);
  transformed_param_real = distance(p_row_vector, p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format dot_product.stan
data {
  int d_int;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = dot_product(d_vector, d_vector);
  transformed_data_real = dot_product(d_vector, d_row_vector);
  transformed_data_real = dot_product(d_row_vector, d_vector);
  transformed_data_real = dot_product(d_row_vector, d_row_vector);
}
parameters {
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = dot_product(d_vector, d_vector);
  transformed_param_real = dot_product(d_vector, d_row_vector);
  transformed_param_real = dot_product(d_row_vector, d_vector);
  transformed_param_real = dot_product(d_row_vector, d_row_vector);
  transformed_param_real = dot_product(d_vector, p_vector);
  transformed_param_real = dot_product(d_vector, p_row_vector);
  transformed_param_real = dot_product(d_row_vector, p_vector);
  transformed_param_real = dot_product(d_row_vector, p_row_vector);
  transformed_param_real = dot_product(p_vector, d_vector);
  transformed_param_real = dot_product(p_vector, d_row_vector);
  transformed_param_real = dot_product(p_row_vector, d_vector);
  transformed_param_real = dot_product(p_row_vector, d_row_vector);
  transformed_param_real = dot_product(p_vector, p_vector);
  transformed_param_real = dot_product(p_vector, p_row_vector);
  transformed_param_real = dot_product(p_row_vector, p_vector);
  transformed_param_real = dot_product(p_row_vector, p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format dot_self.stan
data {
  int d_int;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = dot_self(d_vector);
  transformed_data_real = dot_self(d_row_vector);
}
parameters {
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = dot_self(d_vector);
  transformed_param_real = dot_self(d_row_vector);
  transformed_param_real = dot_self(p_vector);
  transformed_param_real = dot_self(p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format eigenvalues_sym.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  vector[d_int] transformed_data_vector;
  transformed_data_vector = eigenvalues_sym(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  transformed_param_vector = eigenvalues_sym(d_matrix);
  transformed_param_vector = eigenvalues_sym(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format eigenvectors_sym.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = eigenvectors_sym(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = eigenvectors_sym(d_matrix);
  transformed_param_matrix = eigenvectors_sym(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format elementwise_products.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  real d_real;
}
transformed data {
  real transformed_data_real;
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_vector = d_vector .* d_vector;
  transformed_data_row_vector = d_row_vector .* d_row_vector;
  transformed_data_matrix = d_matrix .* d_matrix;
  transformed_data_vector = d_vector ./ d_vector;
  transformed_data_row_vector = d_row_vector ./ d_row_vector;
  transformed_data_matrix = d_matrix ./ d_matrix;
  transformed_data_vector = d_vector ./ d_real;
  transformed_data_row_vector = d_row_vector ./ d_real;
  transformed_data_matrix = d_matrix ./ d_real;
  transformed_data_vector = d_real ./ d_vector;
  transformed_data_row_vector = d_real ./ d_row_vector;
  transformed_data_matrix = d_real ./ d_matrix;
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_vector = d_vector .* d_vector;
  transformed_param_row_vector = d_row_vector .* d_row_vector;
  transformed_param_matrix = d_matrix .* d_matrix;
  transformed_param_vector = d_vector ./ d_vector;
  transformed_param_row_vector = d_row_vector ./ d_row_vector;
  transformed_param_matrix = d_matrix ./ d_matrix;
  transformed_param_vector = d_vector ./ d_real;
  transformed_param_row_vector = d_row_vector ./ d_real;
  transformed_param_matrix = d_matrix ./ d_real;
  transformed_param_vector = d_real ./ d_vector;
  transformed_param_row_vector = d_real ./ d_row_vector;
  transformed_param_matrix = d_real ./ d_matrix;
  transformed_param_vector = p_vector .* d_vector;
  transformed_param_row_vector = p_row_vector .* d_row_vector;
  transformed_param_matrix = p_matrix .* d_matrix;
  transformed_param_vector = p_vector ./ d_vector;
  transformed_param_row_vector = p_row_vector ./ d_row_vector;
  transformed_param_matrix = p_matrix ./ d_matrix;
  transformed_param_vector = p_vector ./ d_real;
  transformed_param_row_vector = p_row_vector ./ d_real;
  transformed_param_matrix = p_matrix ./ d_real;
  transformed_param_vector = p_real ./ d_vector;
  transformed_param_row_vector = p_real ./ d_row_vector;
  transformed_param_matrix = p_real ./ d_matrix;
  transformed_param_vector = d_vector .* p_vector;
  transformed_param_row_vector = d_row_vector .* p_row_vector;
  transformed_param_matrix = d_matrix .* p_matrix;
  transformed_param_vector = d_vector ./ p_vector;
  transformed_param_row_vector = d_row_vector ./ p_row_vector;
  transformed_param_matrix = d_matrix ./ p_matrix;
  transformed_param_vector = d_vector ./ p_real;
  transformed_param_row_vector = d_row_vector ./ p_real;
  transformed_param_matrix = d_matrix ./ p_real;
  transformed_param_vector = d_real ./ p_vector;
  transformed_param_row_vector = d_real ./ p_row_vector;
  transformed_param_matrix = d_real ./ p_matrix;
  transformed_param_vector = p_vector .* p_vector;
  transformed_param_row_vector = p_row_vector .* p_row_vector;
  transformed_param_matrix = p_matrix .* p_matrix;
  transformed_param_vector = p_vector ./ p_vector;
  transformed_param_row_vector = p_row_vector ./ p_row_vector;
  transformed_param_matrix = p_matrix ./ p_matrix;
  transformed_param_vector = p_vector ./ p_real;
  transformed_param_row_vector = p_row_vector ./ p_real;
  transformed_param_matrix = p_matrix ./ p_real;
  transformed_param_vector = p_real ./ p_vector;
  transformed_param_row_vector = p_real ./ p_row_vector;
  transformed_param_matrix = p_real ./ p_matrix;
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format erf.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = erf(d_matrix);
  transformed_data_vector = erf(d_vector);
  transformed_data_row_vector = erf(d_row_vector);
  trans_x3y = erf(x3y);
  trans_x4y = erf(x4y);
  trans_x5y = erf(x5y);
  trans_x2z = erf(x1z);
  trans_x2z = erf(x2z);
  trans_x3z = erf(x3z);
  trans_x4z = erf(x4z);
  trans_x5z = erf(x5z);
  trans_x2w = erf(x1w);
  trans_x2w = erf(x2w);
  trans_x3w = erf(x3w);
  trans_x4w = erf(x4w);
  trans_x5w = erf(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = erf(d_matrix);
  transformed_param_vector = erf(d_vector);
  transformed_param_row_vector = erf(d_row_vector);
  transformed_param_matrix = erf(p_matrix);
  transformed_param_vector = erf(p_vector);
  transformed_param_row_vector = erf(p_row_vector);
  trans_p_x3y = erf(p_x3y);
  trans_p_x4y = erf(p_x4y);
  trans_p_x5y = erf(p_x5y);
  trans_p_x2z = erf(p_x2z);
  trans_p_x3z = erf(p_x3z);
  trans_p_x4z = erf(p_x4z);
  trans_p_x5z = erf(p_x5z);
  trans_p_x2w = erf(p_x2w);
  trans_p_x3w = erf(p_x3w);
  trans_p_x4w = erf(p_x4w);
  trans_p_x5w = erf(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format erfc.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = erfc(d_matrix);
  transformed_data_vector = erfc(d_vector);
  transformed_data_row_vector = erfc(d_row_vector);
  trans_x3y = erfc(x3y);
  trans_x4y = erfc(x4y);
  trans_x5y = erfc(x5y);
  trans_x2z = erfc(x1z);
  trans_x2z = erfc(x2z);
  trans_x3z = erfc(x3z);
  trans_x4z = erfc(x4z);
  trans_x5z = erfc(x5z);
  trans_x2w = erfc(x1w);
  trans_x2w = erfc(x2w);
  trans_x3w = erfc(x3w);
  trans_x4w = erfc(x4w);
  trans_x5w = erfc(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = erfc(d_matrix);
  transformed_param_vector = erfc(d_vector);
  transformed_param_row_vector = erfc(d_row_vector);
  transformed_param_matrix = erfc(p_matrix);
  transformed_param_vector = erfc(p_vector);
  transformed_param_row_vector = erfc(p_row_vector);
  trans_p_x3y = erfc(p_x3y);
  trans_p_x4y = erfc(p_x4y);
  trans_p_x5y = erfc(p_x5y);
  trans_p_x2z = erfc(p_x2z);
  trans_p_x3z = erfc(p_x3z);
  trans_p_x4z = erfc(p_x4z);
  trans_p_x5z = erfc(p_x5z);
  trans_p_x2w = erfc(p_x2w);
  trans_p_x3w = erfc(p_x3w);
  trans_p_x4w = erfc(p_x4w);
  trans_p_x5w = erfc(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format exp.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = exp(d_matrix);
  transformed_data_vector = exp(d_vector);
  transformed_data_row_vector = exp(d_row_vector);
  trans_x3y = exp(x3y);
  trans_x4y = exp(x4y);
  trans_x5y = exp(x5y);
  trans_x2z = exp(x1z);
  trans_x2z = exp(x2z);
  trans_x3z = exp(x3z);
  trans_x4z = exp(x4z);
  trans_x5z = exp(x5z);
  trans_x2w = exp(x1w);
  trans_x2w = exp(x2w);
  trans_x3w = exp(x3w);
  trans_x4w = exp(x4w);
  trans_x5w = exp(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = exp(d_matrix);
  transformed_param_vector = exp(d_vector);
  transformed_param_row_vector = exp(d_row_vector);
  transformed_param_matrix = exp(p_matrix);
  transformed_param_vector = exp(p_vector);
  transformed_param_row_vector = exp(p_row_vector);
  trans_p_x3y = exp(p_x3y);
  trans_p_x4y = exp(p_x4y);
  trans_p_x5y = exp(p_x5y);
  trans_p_x2z = exp(p_x2z);
  trans_p_x3z = exp(p_x3z);
  trans_p_x4z = exp(p_x4z);
  trans_p_x5z = exp(p_x5z);
  trans_p_x2w = exp(p_x2w);
  trans_p_x3w = exp(p_x3w);
  trans_p_x4w = exp(p_x4w);
  trans_p_x5w = exp(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format exp2.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = exp2(d_matrix);
  transformed_data_vector = exp2(d_vector);
  transformed_data_row_vector = exp2(d_row_vector);
  trans_x3y = exp2(x3y);
  trans_x4y = exp2(x4y);
  trans_x5y = exp2(x5y);
  trans_x2z = exp2(x1z);
  trans_x2z = exp2(x2z);
  trans_x3z = exp2(x3z);
  trans_x4z = exp2(x4z);
  trans_x5z = exp2(x5z);
  trans_x2w = exp2(x1w);
  trans_x2w = exp2(x2w);
  trans_x3w = exp2(x3w);
  trans_x4w = exp2(x4w);
  trans_x5w = exp2(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = exp2(d_matrix);
  transformed_param_vector = exp2(d_vector);
  transformed_param_row_vector = exp2(d_row_vector);
  transformed_param_matrix = exp2(p_matrix);
  transformed_param_vector = exp2(p_vector);
  transformed_param_row_vector = exp2(p_row_vector);
  trans_p_x3y = exp2(p_x3y);
  trans_p_x4y = exp2(p_x4y);
  trans_p_x5y = exp2(p_x5y);
  trans_p_x2z = exp2(p_x2z);
  trans_p_x3z = exp2(p_x3z);
  trans_p_x4z = exp2(p_x4z);
  trans_p_x5z = exp2(p_x5z);
  trans_p_x2w = exp2(p_x2w);
  trans_p_x3w = exp2(p_x3w);
  trans_p_x4w = exp2(p_x4w);
  trans_p_x5w = exp2(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format expm1.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = expm1(d_matrix);
  transformed_data_vector = expm1(d_vector);
  transformed_data_row_vector = expm1(d_row_vector);
  trans_x3y = expm1(x3y);
  trans_x4y = expm1(x4y);
  trans_x5y = expm1(x5y);
  trans_x2z = expm1(x1z);
  trans_x2z = expm1(x2z);
  trans_x3z = expm1(x3z);
  trans_x4z = expm1(x4z);
  trans_x5z = expm1(x5z);
  trans_x2w = expm1(x1w);
  trans_x2w = expm1(x2w);
  trans_x3w = expm1(x3w);
  trans_x4w = expm1(x4w);
  trans_x5w = expm1(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = expm1(d_matrix);
  transformed_param_vector = expm1(d_vector);
  transformed_param_row_vector = expm1(d_row_vector);
  transformed_param_matrix = expm1(p_matrix);
  transformed_param_vector = expm1(p_vector);
  transformed_param_row_vector = expm1(p_row_vector);
  trans_p_x3y = expm1(p_x3y);
  trans_p_x4y = expm1(p_x4y);
  trans_p_x5y = expm1(p_x5y);
  trans_p_x2z = expm1(p_x2z);
  trans_p_x3z = expm1(p_x3z);
  trans_p_x4z = expm1(p_x4z);
  trans_p_x5z = expm1(p_x5z);
  trans_p_x2w = expm1(p_x2w);
  trans_p_x3w = expm1(p_x3w);
  trans_p_x4w = expm1(p_x4w);
  trans_p_x5w = expm1(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format fabs.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = fabs(d_matrix);
  transformed_data_vector = fabs(d_vector);
  transformed_data_row_vector = fabs(d_row_vector);
  trans_x3y = fabs(x3y);
  trans_x4y = fabs(x4y);
  trans_x5y = fabs(x5y);
  trans_x2z = fabs(x1z);
  trans_x2z = fabs(x2z);
  trans_x3z = fabs(x3z);
  trans_x4z = fabs(x4z);
  trans_x5z = fabs(x5z);
  trans_x2w = fabs(x1w);
  trans_x2w = fabs(x2w);
  trans_x3w = fabs(x3w);
  trans_x4w = fabs(x4w);
  trans_x5w = fabs(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = fabs(d_matrix);
  transformed_param_vector = fabs(d_vector);
  transformed_param_row_vector = fabs(d_row_vector);
  transformed_param_matrix = fabs(p_matrix);
  transformed_param_vector = fabs(p_vector);
  transformed_param_row_vector = fabs(p_row_vector);
  trans_p_x3y = fabs(p_x3y);
  trans_p_x4y = fabs(p_x4y);
  trans_p_x5y = fabs(p_x5y);
  trans_p_x2z = fabs(p_x2z);
  trans_p_x3z = fabs(p_x3z);
  trans_p_x4z = fabs(p_x4z);
  trans_p_x5z = fabs(p_x5z);
  trans_p_x2w = fabs(p_x2w);
  trans_p_x3w = fabs(p_x3w);
  trans_p_x4w = fabs(p_x4w);
  trans_p_x5w = fabs(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format floor.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = floor(d_matrix);
  transformed_data_vector = floor(d_vector);
  transformed_data_row_vector = floor(d_row_vector);
  trans_x3y = floor(x3y);
  trans_x4y = floor(x4y);
  trans_x5y = floor(x5y);
  trans_x2z = floor(x1z);
  trans_x2z = floor(x2z);
  trans_x3z = floor(x3z);
  trans_x4z = floor(x4z);
  trans_x5z = floor(x5z);
  trans_x2w = floor(x1w);
  trans_x2w = floor(x2w);
  trans_x3w = floor(x3w);
  trans_x4w = floor(x4w);
  trans_x5w = floor(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = floor(d_matrix);
  transformed_param_vector = floor(d_vector);
  transformed_param_row_vector = floor(d_row_vector);
  transformed_param_matrix = floor(p_matrix);
  transformed_param_vector = floor(p_vector);
  transformed_param_row_vector = floor(p_row_vector);
  trans_p_x3y = floor(p_x3y);
  trans_p_x4y = floor(p_x4y);
  trans_p_x5y = floor(p_x5y);
  trans_p_x2z = floor(p_x2z);
  trans_p_x3z = floor(p_x3z);
  trans_p_x4z = floor(p_x4z);
  trans_p_x5z = floor(p_x5z);
  trans_p_x2w = floor(p_x2w);
  trans_p_x3w = floor(p_x3w);
  trans_p_x4w = floor(p_x4w);
  trans_p_x5w = floor(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format gp_regression.stan
functions {

}
data {
  int<lower=1> D;
  int<lower=1> N;
  vector[D] x1[N];
  vector[N] y;
  real x[N];
  int<lower=1> N_pred;
  vector[D] x1_pred[N_pred];
}
transformed data {
  vector[N] mu;
  mu = rep_vector(0, N);
}
parameters {
  real<lower=0> magnitude;
  real<lower=0> length_scale;
  real<lower=0> length_scale_ard[D];
  real<lower=0> sig;
  real<lower=0> sigma;
}
transformed parameters {
  matrix[N, N] L_K;
  {
    matrix[N, N] K = gp_dot_prod_cov(x, sig);
    matrix[N, N] K2 = gp_dot_prod_cov(x1, sig);
    matrix[N, N] K3 = gp_dot_prod_cov(x, x, sig);
    matrix[N, N] K4 = gp_dot_prod_cov(x1, x1, sig);
    matrix[N, N] K5 = gp_exp_quad_cov(x, magnitude, length_scale);
    matrix[N, N] K6 = gp_exp_quad_cov(x1, magnitude, length_scale);
    matrix[N, N] K7 = gp_exp_quad_cov(x, x, magnitude, length_scale);
    matrix[N, N] K8 = gp_exp_quad_cov(x1, x1, magnitude, length_scale);
    matrix[N, N] K17 = gp_exp_quad_cov(x1, magnitude, length_scale_ard);
    matrix[N, N] K18 = gp_exp_quad_cov(x1, x1, magnitude, length_scale_ard);
    matrix[N, N] K9 = gp_matern32_cov(x, magnitude, length_scale);
    matrix[N, N] K10 = gp_matern32_cov(x1, magnitude, length_scale);
    matrix[N, N] K11 = gp_matern32_cov(x, x, magnitude, length_scale);
    matrix[N, N] K12 = gp_matern32_cov(x1, x1, magnitude, length_scale);
    matrix[N, N] K19 = gp_matern32_cov(x1, magnitude, length_scale_ard);
    matrix[N, N] K20 = gp_matern32_cov(x1, x1, magnitude, length_scale_ard);
    matrix[N, N] K13 = gp_matern52_cov(x, magnitude, length_scale);
    matrix[N, N] K14 = gp_matern52_cov(x1, magnitude, length_scale);
    matrix[N, N] K15 = gp_matern52_cov(x, x, magnitude, length_scale);
    matrix[N, N] K16 = gp_matern52_cov(x1, x1, magnitude, length_scale);
    matrix[N, N] K21 = gp_matern52_cov(x1, magnitude, length_scale_ard);
    matrix[N, N] K22 = gp_matern52_cov(x1, x1, magnitude, length_scale_ard);
    matrix[N, N] K23 = gp_exponential_cov(x, magnitude, length_scale);
    matrix[N, N] K24 = gp_exponential_cov(x1, magnitude, length_scale);
    matrix[N, N] K55 = gp_exponential_cov(x, x, magnitude, length_scale);
    matrix[N, N] K26 = gp_exponential_cov(x1, x1, magnitude, length_scale);
    matrix[N, N] K27 = gp_exponential_cov(x1, magnitude, length_scale_ard);
    matrix[N, N] K28 = gp_exponential_cov(x1, x1, magnitude,
                                          length_scale_ard);
    matrix[N, N] K29 = gp_periodic_cov(x, magnitude, length_scale, 1234);
    matrix[N, N] K30 = gp_periodic_cov(x, x, magnitude, length_scale, 1234);
    matrix[N, N] K31 = gp_periodic_cov(x1, magnitude, length_scale, 121);
    matrix[N, N] K32 = gp_periodic_cov(x1, x1, magnitude, length_scale, 121);
  }
}
model {

}
generated quantities {

}

  $ ../../../../../../../install/default/bin/stanc --auto-format head.stan
data {
  int d_int;
  int d_int_array[d_int];
  int d_int_array_2[d_int, d_int];
  int d_int_array_3[d_int, d_int, d_int];
  real d_real_array[d_int];
  real d_real_array_2[d_int, d_int];
  real d_real_array_3[d_int, d_int, d_int];
  matrix[d_int, d_int] d_matrix_array[d_int];
  matrix[d_int, d_int] d_matrix_array_2[d_int, d_int];
  matrix[d_int, d_int] d_matrix_array_3[d_int, d_int, d_int];
  vector[d_int] d_vector;
  vector[d_int] d_vector_array[d_int];
  vector[d_int] d_vector_array_2[d_int, d_int];
  vector[d_int] d_vector_array_3[d_int, d_int, d_int];
  row_vector[d_int] d_row_vector;
  row_vector[d_int] d_row_vector_array[d_int];
  row_vector[d_int] d_row_vector_array_2[d_int, d_int];
  row_vector[d_int] d_row_vector_array_3[d_int, d_int, d_int];
}
transformed data {
  int transformed_data_int_array[d_int];
  int transformed_data_int_array_2[d_int, d_int];
  int transformed_data_int_array_3[d_int, d_int, d_int];
  real transformed_data_real_array[d_int];
  real transformed_data_real_array_2[d_int, d_int];
  real transformed_data_real_array_3[d_int, d_int, d_int];
  matrix[d_int, d_int] transformed_data_matrix_array[d_int];
  matrix[d_int, d_int] transformed_data_matrix_array_2[d_int, d_int];
  matrix[d_int, d_int] transformed_data_matrix_array_3[d_int, d_int, d_int];
  vector[d_int] transformed_data_vector;
  vector[d_int] transformed_data_vector_array[d_int];
  vector[d_int] transformed_data_vector_array_2[d_int, d_int];
  vector[d_int] transformed_data_vector_array_3[d_int, d_int, d_int];
  row_vector[d_int] transformed_data_row_vector;
  row_vector[d_int] transformed_data_row_vector_array[d_int];
  row_vector[d_int] transformed_data_row_vector_array_2[d_int, d_int];
  row_vector[d_int] transformed_data_row_vector_array_3[d_int, d_int, d_int];
  transformed_data_int_array = head(d_int_array, d_int);
  transformed_data_int_array_2 = head(d_int_array_2, d_int);
  transformed_data_int_array_3 = head(d_int_array_3, d_int);
  transformed_data_real_array = head(d_real_array, d_int);
  transformed_data_real_array_2 = head(d_real_array_2, d_int);
  transformed_data_real_array_3 = head(d_real_array_3, d_int);
  transformed_data_matrix_array = head(d_matrix_array, d_int);
  transformed_data_matrix_array_2 = head(d_matrix_array_2, d_int);
  transformed_data_matrix_array_3 = head(d_matrix_array_3, d_int);
  transformed_data_vector = head(d_vector, d_int);
  transformed_data_vector_array = head(d_vector_array, d_int);
  transformed_data_vector_array_2 = head(d_vector_array_2, d_int);
  transformed_data_vector_array_3 = head(d_vector_array_3, d_int);
  transformed_data_row_vector = head(d_row_vector, d_int);
  transformed_data_row_vector_array = head(d_row_vector_array, d_int);
  transformed_data_row_vector_array_2 = head(d_row_vector_array_2, d_int);
  transformed_data_row_vector_array_3 = head(d_row_vector_array_3, d_int);
}
parameters {
  real y_p;
  real p_real_array[d_int];
  real p_real_array_2[d_int, d_int];
  real p_real_array_3[d_int, d_int, d_int];
  matrix[d_int, d_int] p_matrix_array[d_int];
  matrix[d_int, d_int] p_matrix_array_2[d_int, d_int];
  matrix[d_int, d_int] p_matrix_array_3[d_int, d_int, d_int];
  vector[d_int] p_vector;
  vector[d_int] p_vector_array[d_int];
  vector[d_int] p_vector_array_2[d_int, d_int];
  vector[d_int] p_vector_array_3[d_int, d_int, d_int];
  row_vector[d_int] p_row_vector;
  row_vector[d_int] p_row_vector_array[d_int];
  row_vector[d_int] p_row_vector_array_2[d_int, d_int];
  row_vector[d_int] p_row_vector_array_3[d_int, d_int, d_int];
}
transformed parameters {
  real transformed_param_real_array[d_int];
  real transformed_param_real_array_2[d_int, d_int];
  real transformed_param_real_array_3[d_int, d_int, d_int];
  matrix[d_int, d_int] transformed_param_matrix_array[d_int];
  matrix[d_int, d_int] transformed_param_matrix_array_2[d_int, d_int];
  matrix[d_int, d_int] transformed_param_matrix_array_3[d_int, d_int, d_int];
  vector[d_int] transformed_param_vector;
  vector[d_int] transformed_param_vector_array[d_int];
  vector[d_int] transformed_param_vector_array_2[d_int, d_int];
  vector[d_int] transformed_param_vector_array_3[d_int, d_int, d_int];
  row_vector[d_int] transformed_param_row_vector;
  row_vector[d_int] transformed_param_row_vector_array[d_int];
  row_vector[d_int] transformed_param_row_vector_array_2[d_int, d_int];
  row_vector[d_int] transformed_param_row_vector_array_3[d_int, d_int, d_int];
  transformed_param_real_array = head(d_real_array, d_int);
  transformed_param_real_array_2 = head(d_real_array_2, d_int);
  transformed_param_real_array_3 = head(d_real_array_3, d_int);
  transformed_param_matrix_array = head(d_matrix_array, d_int);
  transformed_param_matrix_array_2 = head(d_matrix_array_2, d_int);
  transformed_param_matrix_array_3 = head(d_matrix_array_3, d_int);
  transformed_param_vector = head(d_vector, d_int);
  transformed_param_vector_array = head(d_vector_array, d_int);
  transformed_param_vector_array_2 = head(d_vector_array_2, d_int);
  transformed_param_vector_array_3 = head(d_vector_array_3, d_int);
  transformed_param_row_vector = head(d_row_vector, d_int);
  transformed_param_row_vector_array = head(d_row_vector_array, d_int);
  transformed_param_row_vector_array_2 = head(d_row_vector_array_2, d_int);
  transformed_param_row_vector_array_3 = head(d_row_vector_array_3, d_int);
  transformed_param_real_array = head(p_real_array, d_int);
  transformed_param_real_array_2 = head(p_real_array_2, d_int);
  transformed_param_real_array_3 = head(p_real_array_3, d_int);
  transformed_param_matrix_array = head(p_matrix_array, d_int);
  transformed_param_matrix_array_2 = head(p_matrix_array_2, d_int);
  transformed_param_matrix_array_3 = head(p_matrix_array_3, d_int);
  transformed_param_vector = head(p_vector, d_int);
  transformed_param_vector_array = head(p_vector_array, d_int);
  transformed_param_vector_array_2 = head(p_vector_array_2, d_int);
  transformed_param_vector_array_3 = head(p_vector_array_3, d_int);
  transformed_param_row_vector = head(p_row_vector, d_int);
  transformed_param_row_vector_array = head(p_row_vector_array, d_int);
  transformed_param_row_vector_array_2 = head(p_row_vector_array_2, d_int);
  transformed_param_row_vector_array_3 = head(p_row_vector_array_3, d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format infix_matrix_operators.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  real d_real;
}
transformed data {
  real transformed_data_real;
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_vector = d_vector + d_vector;
  transformed_data_row_vector = d_row_vector + d_row_vector;
  transformed_data_matrix = d_matrix + d_matrix;
  transformed_data_vector = d_vector - d_vector;
  transformed_data_row_vector = d_row_vector - d_row_vector;
  transformed_data_matrix = d_matrix - d_matrix;
  transformed_data_vector = d_real * d_vector;
  transformed_data_row_vector = d_real * d_row_vector;
  transformed_data_matrix = d_real * d_matrix;
  transformed_data_vector = d_vector * d_real;
  transformed_data_row_vector = d_row_vector * d_real;
  transformed_data_matrix = d_matrix * d_real;
  transformed_data_real = d_row_vector * d_vector;
  transformed_data_row_vector = d_row_vector * d_matrix;
  transformed_data_matrix = d_matrix * d_real;
  transformed_data_vector = d_matrix * d_vector;
  transformed_data_matrix = d_matrix * d_matrix;
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_vector = d_vector + d_vector;
  transformed_param_row_vector = d_row_vector + d_row_vector;
  transformed_param_matrix = d_matrix + d_matrix;
  transformed_param_vector = d_vector - d_vector;
  transformed_param_row_vector = d_row_vector - d_row_vector;
  transformed_param_matrix = d_matrix - d_matrix;
  transformed_param_vector = d_real * d_vector;
  transformed_param_row_vector = d_real * d_row_vector;
  transformed_param_matrix = d_real * d_matrix;
  transformed_param_vector = d_vector * d_real;
  transformed_param_row_vector = d_row_vector * d_real;
  transformed_param_matrix = d_matrix * d_real;
  transformed_param_real = d_row_vector * d_vector;
  transformed_param_row_vector = d_row_vector * d_matrix;
  transformed_param_matrix = d_matrix * d_real;
  transformed_param_vector = d_matrix * d_vector;
  transformed_param_matrix = d_matrix * d_matrix;
  transformed_param_vector = p_vector + d_vector;
  transformed_param_row_vector = p_row_vector + d_row_vector;
  transformed_param_matrix = p_matrix + d_matrix;
  transformed_param_vector = p_vector - d_vector;
  transformed_param_row_vector = p_row_vector - d_row_vector;
  transformed_param_matrix = p_matrix - d_matrix;
  transformed_param_vector = p_real * d_vector;
  transformed_param_row_vector = p_real * d_row_vector;
  transformed_param_matrix = p_real * d_matrix;
  transformed_param_vector = p_vector * d_real;
  transformed_param_row_vector = p_row_vector * d_real;
  transformed_param_matrix = p_matrix * d_real;
  transformed_param_real = p_row_vector * d_vector;
  transformed_param_row_vector = p_row_vector * d_matrix;
  transformed_param_matrix = p_matrix * d_real;
  transformed_param_vector = p_matrix * d_vector;
  transformed_param_matrix = p_matrix * d_matrix;
  transformed_param_vector = d_vector + p_vector;
  transformed_param_row_vector = d_row_vector + p_row_vector;
  transformed_param_matrix = d_matrix + p_matrix;
  transformed_param_vector = d_vector - p_vector;
  transformed_param_row_vector = d_row_vector - p_row_vector;
  transformed_param_matrix = d_matrix - p_matrix;
  transformed_param_vector = d_real * p_vector;
  transformed_param_row_vector = d_real * p_row_vector;
  transformed_param_matrix = d_real * p_matrix;
  transformed_param_vector = d_vector * p_real;
  transformed_param_row_vector = d_row_vector * p_real;
  transformed_param_matrix = d_matrix * p_real;
  transformed_param_real = d_row_vector * p_vector;
  transformed_param_row_vector = d_row_vector * p_matrix;
  transformed_param_matrix = d_matrix * p_real;
  transformed_param_vector = d_matrix * p_vector;
  transformed_param_matrix = d_matrix * p_matrix;
  transformed_param_vector = p_vector + p_vector;
  transformed_param_row_vector = p_row_vector + p_row_vector;
  transformed_param_matrix = p_matrix + p_matrix;
  transformed_param_vector = p_vector - p_vector;
  transformed_param_row_vector = p_row_vector - p_row_vector;
  transformed_param_matrix = p_matrix - p_matrix;
  transformed_param_vector = p_real * p_vector;
  transformed_param_row_vector = p_real * p_row_vector;
  transformed_param_matrix = p_real * p_matrix;
  transformed_param_vector = p_vector * p_real;
  transformed_param_row_vector = p_row_vector * p_real;
  transformed_param_matrix = p_matrix * p_real;
  transformed_param_real = p_row_vector * p_vector;
  transformed_param_row_vector = p_row_vector * p_matrix;
  transformed_param_matrix = p_matrix * p_real;
  transformed_param_vector = p_matrix * p_vector;
  transformed_param_matrix = p_matrix * p_matrix;
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inv.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = inv(d_matrix);
  transformed_data_vector = inv(d_vector);
  transformed_data_row_vector = inv(d_row_vector);
  trans_x3y = inv(x3y);
  trans_x4y = inv(x4y);
  trans_x5y = inv(x5y);
  trans_x2z = inv(x1z);
  trans_x2z = inv(x2z);
  trans_x3z = inv(x3z);
  trans_x4z = inv(x4z);
  trans_x5z = inv(x5z);
  trans_x2w = inv(x1w);
  trans_x2w = inv(x2w);
  trans_x3w = inv(x3w);
  trans_x4w = inv(x4w);
  trans_x5w = inv(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = inv(d_matrix);
  transformed_param_vector = inv(d_vector);
  transformed_param_row_vector = inv(d_row_vector);
  transformed_param_matrix = inv(p_matrix);
  transformed_param_vector = inv(p_vector);
  transformed_param_row_vector = inv(p_row_vector);
  trans_p_x3y = inv(p_x3y);
  trans_p_x4y = inv(p_x4y);
  trans_p_x5y = inv(p_x5y);
  trans_p_x2z = inv(p_x2z);
  trans_p_x3z = inv(p_x3z);
  trans_p_x4z = inv(p_x4z);
  trans_p_x5z = inv(p_x5z);
  trans_p_x2w = inv(p_x2w);
  trans_p_x3w = inv(p_x3w);
  trans_p_x4w = inv(p_x4w);
  trans_p_x5w = inv(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inv_Phi.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = inv_Phi(d_matrix);
  transformed_data_vector = inv_Phi(d_vector);
  transformed_data_row_vector = inv_Phi(d_row_vector);
  trans_x3y = inv_Phi(x3y);
  trans_x4y = inv_Phi(x4y);
  trans_x5y = inv_Phi(x5y);
  trans_x2z = inv_Phi(x1z);
  trans_x2z = inv_Phi(x2z);
  trans_x3z = inv_Phi(x3z);
  trans_x4z = inv_Phi(x4z);
  trans_x5z = inv_Phi(x5z);
  trans_x2w = inv_Phi(x1w);
  trans_x2w = inv_Phi(x2w);
  trans_x3w = inv_Phi(x3w);
  trans_x4w = inv_Phi(x4w);
  trans_x5w = inv_Phi(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = inv_Phi(d_matrix);
  transformed_param_vector = inv_Phi(d_vector);
  transformed_param_row_vector = inv_Phi(d_row_vector);
  transformed_param_matrix = inv_Phi(p_matrix);
  transformed_param_vector = inv_Phi(p_vector);
  transformed_param_row_vector = inv_Phi(p_row_vector);
  trans_p_x3y = inv_Phi(p_x3y);
  trans_p_x4y = inv_Phi(p_x4y);
  trans_p_x5y = inv_Phi(p_x5y);
  trans_p_x2z = inv_Phi(p_x2z);
  trans_p_x3z = inv_Phi(p_x3z);
  trans_p_x4z = inv_Phi(p_x4z);
  trans_p_x5z = inv_Phi(p_x5z);
  trans_p_x2w = inv_Phi(p_x2w);
  trans_p_x3w = inv_Phi(p_x3w);
  trans_p_x4w = inv_Phi(p_x4w);
  trans_p_x5w = inv_Phi(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inv_cloglog.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = inv_cloglog(d_matrix);
  transformed_data_vector = inv_cloglog(d_vector);
  transformed_data_row_vector = inv_cloglog(d_row_vector);
  trans_x3y = inv_cloglog(x3y);
  trans_x4y = inv_cloglog(x4y);
  trans_x5y = inv_cloglog(x5y);
  trans_x2z = inv_cloglog(x1z);
  trans_x2z = inv_cloglog(x2z);
  trans_x3z = inv_cloglog(x3z);
  trans_x4z = inv_cloglog(x4z);
  trans_x5z = inv_cloglog(x5z);
  trans_x2w = inv_cloglog(x1w);
  trans_x2w = inv_cloglog(x2w);
  trans_x3w = inv_cloglog(x3w);
  trans_x4w = inv_cloglog(x4w);
  trans_x5w = inv_cloglog(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = inv_cloglog(d_matrix);
  transformed_param_vector = inv_cloglog(d_vector);
  transformed_param_row_vector = inv_cloglog(d_row_vector);
  transformed_param_matrix = inv_cloglog(p_matrix);
  transformed_param_vector = inv_cloglog(p_vector);
  transformed_param_row_vector = inv_cloglog(p_row_vector);
  trans_p_x3y = inv_cloglog(p_x3y);
  trans_p_x4y = inv_cloglog(p_x4y);
  trans_p_x5y = inv_cloglog(p_x5y);
  trans_p_x2z = inv_cloglog(p_x2z);
  trans_p_x3z = inv_cloglog(p_x3z);
  trans_p_x4z = inv_cloglog(p_x4z);
  trans_p_x5z = inv_cloglog(p_x5z);
  trans_p_x2w = inv_cloglog(p_x2w);
  trans_p_x3w = inv_cloglog(p_x3w);
  trans_p_x4w = inv_cloglog(p_x4w);
  trans_p_x5w = inv_cloglog(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inv_logit.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = inv_logit(d_matrix);
  transformed_data_vector = inv_logit(d_vector);
  transformed_data_row_vector = inv_logit(d_row_vector);
  trans_x3y = inv_logit(x3y);
  trans_x4y = inv_logit(x4y);
  trans_x5y = inv_logit(x5y);
  trans_x2z = inv_logit(x1z);
  trans_x2z = inv_logit(x2z);
  trans_x3z = inv_logit(x3z);
  trans_x4z = inv_logit(x4z);
  trans_x5z = inv_logit(x5z);
  trans_x2w = inv_logit(x1w);
  trans_x2w = inv_logit(x2w);
  trans_x3w = inv_logit(x3w);
  trans_x4w = inv_logit(x4w);
  trans_x5w = inv_logit(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = inv_logit(d_matrix);
  transformed_param_vector = inv_logit(d_vector);
  transformed_param_row_vector = inv_logit(d_row_vector);
  transformed_param_matrix = inv_logit(p_matrix);
  transformed_param_vector = inv_logit(p_vector);
  transformed_param_row_vector = inv_logit(p_row_vector);
  trans_p_x3y = inv_logit(p_x3y);
  trans_p_x4y = inv_logit(p_x4y);
  trans_p_x5y = inv_logit(p_x5y);
  trans_p_x2z = inv_logit(p_x2z);
  trans_p_x3z = inv_logit(p_x3z);
  trans_p_x4z = inv_logit(p_x4z);
  trans_p_x5z = inv_logit(p_x5z);
  trans_p_x2w = inv_logit(p_x2w);
  trans_p_x3w = inv_logit(p_x3w);
  trans_p_x4w = inv_logit(p_x4w);
  trans_p_x5w = inv_logit(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inv_sqrt.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = inv_sqrt(d_matrix);
  transformed_data_vector = inv_sqrt(d_vector);
  transformed_data_row_vector = inv_sqrt(d_row_vector);
  trans_x3y = inv_sqrt(x3y);
  trans_x4y = inv_sqrt(x4y);
  trans_x5y = inv_sqrt(x5y);
  trans_x2z = inv_sqrt(x1z);
  trans_x2z = inv_sqrt(x2z);
  trans_x3z = inv_sqrt(x3z);
  trans_x4z = inv_sqrt(x4z);
  trans_x5z = inv_sqrt(x5z);
  trans_x2w = inv_sqrt(x1w);
  trans_x2w = inv_sqrt(x2w);
  trans_x3w = inv_sqrt(x3w);
  trans_x4w = inv_sqrt(x4w);
  trans_x5w = inv_sqrt(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = inv_sqrt(d_matrix);
  transformed_param_vector = inv_sqrt(d_vector);
  transformed_param_row_vector = inv_sqrt(d_row_vector);
  transformed_param_matrix = inv_sqrt(p_matrix);
  transformed_param_vector = inv_sqrt(p_vector);
  transformed_param_row_vector = inv_sqrt(p_row_vector);
  trans_p_x3y = inv_sqrt(p_x3y);
  trans_p_x4y = inv_sqrt(p_x4y);
  trans_p_x5y = inv_sqrt(p_x5y);
  trans_p_x2z = inv_sqrt(p_x2z);
  trans_p_x3z = inv_sqrt(p_x3z);
  trans_p_x4z = inv_sqrt(p_x4z);
  trans_p_x5z = inv_sqrt(p_x5z);
  trans_p_x2w = inv_sqrt(p_x2w);
  trans_p_x3w = inv_sqrt(p_x3w);
  trans_p_x4w = inv_sqrt(p_x4w);
  trans_p_x5w = inv_sqrt(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inv_square.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = inv_square(d_matrix);
  transformed_data_vector = inv_square(d_vector);
  transformed_data_row_vector = inv_square(d_row_vector);
  trans_x3y = inv_square(x3y);
  trans_x4y = inv_square(x4y);
  trans_x5y = inv_square(x5y);
  trans_x2z = inv_square(x1z);
  trans_x2z = inv_square(x2z);
  trans_x3z = inv_square(x3z);
  trans_x4z = inv_square(x4z);
  trans_x5z = inv_square(x5z);
  trans_x2w = inv_square(x1w);
  trans_x2w = inv_square(x2w);
  trans_x3w = inv_square(x3w);
  trans_x4w = inv_square(x4w);
  trans_x5w = inv_square(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = inv_square(d_matrix);
  transformed_param_vector = inv_square(d_vector);
  transformed_param_row_vector = inv_square(d_row_vector);
  transformed_param_matrix = inv_square(p_matrix);
  transformed_param_vector = inv_square(p_vector);
  transformed_param_row_vector = inv_square(p_row_vector);
  trans_p_x3y = inv_square(p_x3y);
  trans_p_x4y = inv_square(p_x4y);
  trans_p_x5y = inv_square(p_x5y);
  trans_p_x2z = inv_square(p_x2z);
  trans_p_x3z = inv_square(p_x3z);
  trans_p_x4z = inv_square(p_x4z);
  trans_p_x5z = inv_square(p_x5z);
  trans_p_x2w = inv_square(p_x2w);
  trans_p_x3w = inv_square(p_x3w);
  trans_p_x4w = inv_square(p_x4w);
  trans_p_x5w = inv_square(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inverse.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = inverse(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = inverse(d_matrix);
  transformed_param_matrix = inverse(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inverse_spd.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = inverse_spd(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = inverse_spd(d_matrix);
  transformed_param_matrix = inverse_spd(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format lambert.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = lambert_w0(d_matrix);
  transformed_data_vector = lambert_w0(d_vector);
  transformed_data_row_vector = lambert_w0(d_row_vector);
  trans_x3y = lambert_w0(x3y);
  trans_x4y = lambert_w0(x4y);
  trans_x5y = lambert_w0(x5y);
  trans_x2z = lambert_w0(x1z);
  trans_x2z = lambert_w0(x2z);
  trans_x3z = lambert_w0(x3z);
  trans_x4z = lambert_w0(x4z);
  trans_x5z = lambert_w0(x5z);
  trans_x2w = lambert_w0(x1w);
  trans_x2w = lambert_w0(x2w);
  trans_x3w = lambert_w0(x3w);
  trans_x4w = lambert_w0(x4w);
  trans_x5w = lambert_w0(x5w);
  transformed_data_matrix = lambert_wm1(d_matrix);
  transformed_data_vector = lambert_wm1(d_vector);
  transformed_data_row_vector = lambert_wm1(d_row_vector);
  trans_x3y = lambert_wm1(x3y);
  trans_x4y = lambert_wm1(x4y);
  trans_x5y = lambert_wm1(x5y);
  trans_x2z = lambert_wm1(x1z);
  trans_x2z = lambert_wm1(x2z);
  trans_x3z = lambert_wm1(x3z);
  trans_x4z = lambert_wm1(x4z);
  trans_x5z = lambert_wm1(x5z);
  trans_x2w = lambert_wm1(x1w);
  trans_x2w = lambert_wm1(x2w);
  trans_x3w = lambert_wm1(x3w);
  trans_x4w = lambert_wm1(x4w);
  trans_x5w = lambert_wm1(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = lambert_w0(d_matrix);
  transformed_param_vector = lambert_w0(d_vector);
  transformed_param_row_vector = lambert_w0(d_row_vector);
  transformed_param_matrix = lambert_w0(p_matrix);
  transformed_param_vector = lambert_w0(p_vector);
  transformed_param_row_vector = lambert_w0(p_row_vector);
  trans_p_x3y = lambert_w0(p_x3y);
  trans_p_x4y = lambert_w0(p_x4y);
  trans_p_x5y = lambert_w0(p_x5y);
  trans_p_x2z = lambert_w0(p_x2z);
  trans_p_x3z = lambert_w0(p_x3z);
  trans_p_x4z = lambert_w0(p_x4z);
  trans_p_x5z = lambert_w0(p_x5z);
  trans_p_x2w = lambert_w0(p_x2w);
  trans_p_x3w = lambert_w0(p_x3w);
  trans_p_x4w = lambert_w0(p_x4w);
  trans_p_x5w = lambert_w0(p_x5w);
  transformed_param_matrix = lambert_wm1(d_matrix);
  transformed_param_vector = lambert_wm1(d_vector);
  transformed_param_row_vector = lambert_wm1(d_row_vector);
  transformed_param_matrix = lambert_wm1(p_matrix);
  transformed_param_vector = lambert_wm1(p_vector);
  transformed_param_row_vector = lambert_wm1(p_row_vector);
  trans_p_x3y = lambert_wm1(p_x3y);
  trans_p_x4y = lambert_wm1(p_x4y);
  trans_p_x5y = lambert_wm1(p_x5y);
  trans_p_x2z = lambert_wm1(p_x2z);
  trans_p_x3z = lambert_wm1(p_x3z);
  trans_p_x4z = lambert_wm1(p_x4z);
  trans_p_x5z = lambert_wm1(p_x5z);
  trans_p_x2w = lambert_wm1(p_x2w);
  trans_p_x3w = lambert_wm1(p_x3w);
  trans_p_x4w = lambert_wm1(p_x4w);
  trans_p_x5w = lambert_wm1(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format lgamma.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = lgamma(d_matrix);
  transformed_data_vector = lgamma(d_vector);
  transformed_data_row_vector = lgamma(d_row_vector);
  trans_x3y = lgamma(x3y);
  trans_x4y = lgamma(x4y);
  trans_x5y = lgamma(x5y);
  trans_x2z = lgamma(x1z);
  trans_x2z = lgamma(x2z);
  trans_x3z = lgamma(x3z);
  trans_x4z = lgamma(x4z);
  trans_x5z = lgamma(x5z);
  trans_x2w = lgamma(x1w);
  trans_x2w = lgamma(x2w);
  trans_x3w = lgamma(x3w);
  trans_x4w = lgamma(x4w);
  trans_x5w = lgamma(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = lgamma(d_matrix);
  transformed_param_vector = lgamma(d_vector);
  transformed_param_row_vector = lgamma(d_row_vector);
  transformed_param_matrix = lgamma(p_matrix);
  transformed_param_vector = lgamma(p_vector);
  transformed_param_row_vector = lgamma(p_row_vector);
  trans_p_x3y = lgamma(p_x3y);
  trans_p_x4y = lgamma(p_x4y);
  trans_p_x5y = lgamma(p_x5y);
  trans_p_x2z = lgamma(p_x2z);
  trans_p_x3z = lgamma(p_x3z);
  trans_p_x4z = lgamma(p_x4z);
  trans_p_x5z = lgamma(p_x5z);
  trans_p_x2w = lgamma(p_x2w);
  trans_p_x3w = lgamma(p_x3w);
  trans_p_x4w = lgamma(p_x4w);
  trans_p_x5w = lgamma(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = log(d_matrix);
  transformed_data_vector = log(d_vector);
  transformed_data_row_vector = log(d_row_vector);
  trans_x3y = log(x3y);
  trans_x4y = log(x4y);
  trans_x5y = log(x5y);
  trans_x2z = log(x1z);
  trans_x2z = log(x2z);
  trans_x3z = log(x3z);
  trans_x4z = log(x4z);
  trans_x5z = log(x5z);
  trans_x2w = log(x1w);
  trans_x2w = log(x2w);
  trans_x3w = log(x3w);
  trans_x4w = log(x4w);
  trans_x5w = log(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = log(d_matrix);
  transformed_param_vector = log(d_vector);
  transformed_param_row_vector = log(d_row_vector);
  transformed_param_matrix = log(p_matrix);
  transformed_param_vector = log(p_vector);
  transformed_param_row_vector = log(p_row_vector);
  trans_p_x3y = log(p_x3y);
  trans_p_x4y = log(p_x4y);
  trans_p_x5y = log(p_x5y);
  trans_p_x2z = log(p_x2z);
  trans_p_x3z = log(p_x3z);
  trans_p_x4z = log(p_x4z);
  trans_p_x5z = log(p_x5z);
  trans_p_x2w = log(p_x2w);
  trans_p_x3w = log(p_x3w);
  trans_p_x4w = log(p_x4w);
  trans_p_x5w = log(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log10.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = log10(d_matrix);
  transformed_data_vector = log10(d_vector);
  transformed_data_row_vector = log10(d_row_vector);
  trans_x3y = log10(x3y);
  trans_x4y = log10(x4y);
  trans_x5y = log10(x5y);
  trans_x2z = log10(x1z);
  trans_x2z = log10(x2z);
  trans_x3z = log10(x3z);
  trans_x4z = log10(x4z);
  trans_x5z = log10(x5z);
  trans_x2w = log10(x1w);
  trans_x2w = log10(x2w);
  trans_x3w = log10(x3w);
  trans_x4w = log10(x4w);
  trans_x5w = log10(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = log10(d_matrix);
  transformed_param_vector = log10(d_vector);
  transformed_param_row_vector = log10(d_row_vector);
  transformed_param_matrix = log10(p_matrix);
  transformed_param_vector = log10(p_vector);
  transformed_param_row_vector = log10(p_row_vector);
  trans_p_x3y = log10(p_x3y);
  trans_p_x4y = log10(p_x4y);
  trans_p_x5y = log10(p_x5y);
  trans_p_x2z = log10(p_x2z);
  trans_p_x3z = log10(p_x3z);
  trans_p_x4z = log10(p_x4z);
  trans_p_x5z = log10(p_x5z);
  trans_p_x2w = log10(p_x2w);
  trans_p_x3w = log10(p_x3w);
  trans_p_x4w = log10(p_x4w);
  trans_p_x5w = log10(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log1m.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = log1m(d_matrix);
  transformed_data_vector = log1m(d_vector);
  transformed_data_row_vector = log1m(d_row_vector);
  trans_x3y = log1m(x3y);
  trans_x4y = log1m(x4y);
  trans_x5y = log1m(x5y);
  trans_x2z = log1m(x1z);
  trans_x2z = log1m(x2z);
  trans_x3z = log1m(x3z);
  trans_x4z = log1m(x4z);
  trans_x5z = log1m(x5z);
  trans_x2w = log1m(x1w);
  trans_x2w = log1m(x2w);
  trans_x3w = log1m(x3w);
  trans_x4w = log1m(x4w);
  trans_x5w = log1m(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = log1m(d_matrix);
  transformed_param_vector = log1m(d_vector);
  transformed_param_row_vector = log1m(d_row_vector);
  transformed_param_matrix = log1m(p_matrix);
  transformed_param_vector = log1m(p_vector);
  transformed_param_row_vector = log1m(p_row_vector);
  trans_p_x3y = log1m(p_x3y);
  trans_p_x4y = log1m(p_x4y);
  trans_p_x5y = log1m(p_x5y);
  trans_p_x2z = log1m(p_x2z);
  trans_p_x3z = log1m(p_x3z);
  trans_p_x4z = log1m(p_x4z);
  trans_p_x5z = log1m(p_x5z);
  trans_p_x2w = log1m(p_x2w);
  trans_p_x3w = log1m(p_x3w);
  trans_p_x4w = log1m(p_x4w);
  trans_p_x5w = log1m(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log1m_exp.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = log1m_exp(d_matrix);
  transformed_data_vector = log1m_exp(d_vector);
  transformed_data_row_vector = log1m_exp(d_row_vector);
  trans_x3y = log1m_exp(x3y);
  trans_x4y = log1m_exp(x4y);
  trans_x5y = log1m_exp(x5y);
  trans_x2z = log1m_exp(x1z);
  trans_x2z = log1m_exp(x2z);
  trans_x3z = log1m_exp(x3z);
  trans_x4z = log1m_exp(x4z);
  trans_x5z = log1m_exp(x5z);
  trans_x2w = log1m_exp(x1w);
  trans_x2w = log1m_exp(x2w);
  trans_x3w = log1m_exp(x3w);
  trans_x4w = log1m_exp(x4w);
  trans_x5w = log1m_exp(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = log1m_exp(d_matrix);
  transformed_param_vector = log1m_exp(d_vector);
  transformed_param_row_vector = log1m_exp(d_row_vector);
  transformed_param_matrix = log1m_exp(p_matrix);
  transformed_param_vector = log1m_exp(p_vector);
  transformed_param_row_vector = log1m_exp(p_row_vector);
  trans_p_x3y = log1m_exp(p_x3y);
  trans_p_x4y = log1m_exp(p_x4y);
  trans_p_x5y = log1m_exp(p_x5y);
  trans_p_x2z = log1m_exp(p_x2z);
  trans_p_x3z = log1m_exp(p_x3z);
  trans_p_x4z = log1m_exp(p_x4z);
  trans_p_x5z = log1m_exp(p_x5z);
  trans_p_x2w = log1m_exp(p_x2w);
  trans_p_x3w = log1m_exp(p_x3w);
  trans_p_x4w = log1m_exp(p_x4w);
  trans_p_x5w = log1m_exp(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log1m_inv_logit.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = log1m_inv_logit(d_matrix);
  transformed_data_vector = log1m_inv_logit(d_vector);
  transformed_data_row_vector = log1m_inv_logit(d_row_vector);
  trans_x3y = log1m_inv_logit(x3y);
  trans_x4y = log1m_inv_logit(x4y);
  trans_x5y = log1m_inv_logit(x5y);
  trans_x2z = log1m_inv_logit(x1z);
  trans_x2z = log1m_inv_logit(x2z);
  trans_x3z = log1m_inv_logit(x3z);
  trans_x4z = log1m_inv_logit(x4z);
  trans_x5z = log1m_inv_logit(x5z);
  trans_x2w = log1m_inv_logit(x1w);
  trans_x2w = log1m_inv_logit(x2w);
  trans_x3w = log1m_inv_logit(x3w);
  trans_x4w = log1m_inv_logit(x4w);
  trans_x5w = log1m_inv_logit(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = log1m_inv_logit(d_matrix);
  transformed_param_vector = log1m_inv_logit(d_vector);
  transformed_param_row_vector = log1m_inv_logit(d_row_vector);
  transformed_param_matrix = log1m_inv_logit(p_matrix);
  transformed_param_vector = log1m_inv_logit(p_vector);
  transformed_param_row_vector = log1m_inv_logit(p_row_vector);
  trans_p_x3y = log1m_inv_logit(p_x3y);
  trans_p_x4y = log1m_inv_logit(p_x4y);
  trans_p_x5y = log1m_inv_logit(p_x5y);
  trans_p_x2z = log1m_inv_logit(p_x2z);
  trans_p_x3z = log1m_inv_logit(p_x3z);
  trans_p_x4z = log1m_inv_logit(p_x4z);
  trans_p_x5z = log1m_inv_logit(p_x5z);
  trans_p_x2w = log1m_inv_logit(p_x2w);
  trans_p_x3w = log1m_inv_logit(p_x3w);
  trans_p_x4w = log1m_inv_logit(p_x4w);
  trans_p_x5w = log1m_inv_logit(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log1p.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = log1p(d_matrix);
  transformed_data_vector = log1p(d_vector);
  transformed_data_row_vector = log1p(d_row_vector);
  trans_x3y = log1p(x3y);
  trans_x4y = log1p(x4y);
  trans_x5y = log1p(x5y);
  trans_x2z = log1p(x1z);
  trans_x2z = log1p(x2z);
  trans_x3z = log1p(x3z);
  trans_x4z = log1p(x4z);
  trans_x5z = log1p(x5z);
  trans_x2w = log1p(x1w);
  trans_x2w = log1p(x2w);
  trans_x3w = log1p(x3w);
  trans_x4w = log1p(x4w);
  trans_x5w = log1p(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = log1p(d_matrix);
  transformed_param_vector = log1p(d_vector);
  transformed_param_row_vector = log1p(d_row_vector);
  transformed_param_matrix = log1p(p_matrix);
  transformed_param_vector = log1p(p_vector);
  transformed_param_row_vector = log1p(p_row_vector);
  trans_p_x3y = log1p(p_x3y);
  trans_p_x4y = log1p(p_x4y);
  trans_p_x5y = log1p(p_x5y);
  trans_p_x2z = log1p(p_x2z);
  trans_p_x3z = log1p(p_x3z);
  trans_p_x4z = log1p(p_x4z);
  trans_p_x5z = log1p(p_x5z);
  trans_p_x2w = log1p(p_x2w);
  trans_p_x3w = log1p(p_x3w);
  trans_p_x4w = log1p(p_x4w);
  trans_p_x5w = log1p(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log1p_exp.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = log1p_exp(d_matrix);
  transformed_data_vector = log1p_exp(d_vector);
  transformed_data_row_vector = log1p_exp(d_row_vector);
  trans_x3y = log1p_exp(x3y);
  trans_x4y = log1p_exp(x4y);
  trans_x5y = log1p_exp(x5y);
  trans_x2z = log1p_exp(x1z);
  trans_x2z = log1p_exp(x2z);
  trans_x3z = log1p_exp(x3z);
  trans_x4z = log1p_exp(x4z);
  trans_x5z = log1p_exp(x5z);
  trans_x2w = log1p_exp(x1w);
  trans_x2w = log1p_exp(x2w);
  trans_x3w = log1p_exp(x3w);
  trans_x4w = log1p_exp(x4w);
  trans_x5w = log1p_exp(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = log1p_exp(d_matrix);
  transformed_param_vector = log1p_exp(d_vector);
  transformed_param_row_vector = log1p_exp(d_row_vector);
  transformed_param_matrix = log1p_exp(p_matrix);
  transformed_param_vector = log1p_exp(p_vector);
  transformed_param_row_vector = log1p_exp(p_row_vector);
  trans_p_x3y = log1p_exp(p_x3y);
  trans_p_x4y = log1p_exp(p_x4y);
  trans_p_x5y = log1p_exp(p_x5y);
  trans_p_x2z = log1p_exp(p_x2z);
  trans_p_x3z = log1p_exp(p_x3z);
  trans_p_x4z = log1p_exp(p_x4z);
  trans_p_x5z = log1p_exp(p_x5z);
  trans_p_x2w = log1p_exp(p_x2w);
  trans_p_x3w = log1p_exp(p_x3w);
  trans_p_x4w = log1p_exp(p_x4w);
  trans_p_x5w = log1p_exp(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log2.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = log2(d_matrix);
  transformed_data_vector = log2(d_vector);
  transformed_data_row_vector = log2(d_row_vector);
  trans_x3y = log2(x3y);
  trans_x4y = log2(x4y);
  trans_x5y = log2(x5y);
  trans_x2z = log2(x1z);
  trans_x2z = log2(x2z);
  trans_x3z = log2(x3z);
  trans_x4z = log2(x4z);
  trans_x5z = log2(x5z);
  trans_x2w = log2(x1w);
  trans_x2w = log2(x2w);
  trans_x3w = log2(x3w);
  trans_x4w = log2(x4w);
  trans_x5w = log2(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = log2(d_matrix);
  transformed_param_vector = log2(d_vector);
  transformed_param_row_vector = log2(d_row_vector);
  transformed_param_matrix = log2(p_matrix);
  transformed_param_vector = log2(p_vector);
  transformed_param_row_vector = log2(p_row_vector);
  trans_p_x3y = log2(p_x3y);
  trans_p_x4y = log2(p_x4y);
  trans_p_x5y = log2(p_x5y);
  trans_p_x2z = log2(p_x2z);
  trans_p_x3z = log2(p_x3z);
  trans_p_x4z = log2(p_x4z);
  trans_p_x5z = log2(p_x5z);
  trans_p_x2w = log2(p_x2w);
  trans_p_x3w = log2(p_x3w);
  trans_p_x4w = log2(p_x4w);
  trans_p_x5w = log2(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log_determinant.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = log_determinant(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log_determinant(d_matrix);
  transformed_param_real = log_determinant(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log_inv_logit.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = log_inv_logit(d_matrix);
  transformed_data_vector = log_inv_logit(d_vector);
  transformed_data_row_vector = log_inv_logit(d_row_vector);
  trans_x3y = log_inv_logit(x3y);
  trans_x4y = log_inv_logit(x4y);
  trans_x5y = log_inv_logit(x5y);
  trans_x2z = log_inv_logit(x1z);
  trans_x2z = log_inv_logit(x2z);
  trans_x3z = log_inv_logit(x3z);
  trans_x4z = log_inv_logit(x4z);
  trans_x5z = log_inv_logit(x5z);
  trans_x2w = log_inv_logit(x1w);
  trans_x2w = log_inv_logit(x2w);
  trans_x3w = log_inv_logit(x3w);
  trans_x4w = log_inv_logit(x4w);
  trans_x5w = log_inv_logit(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = log_inv_logit(d_matrix);
  transformed_param_vector = log_inv_logit(d_vector);
  transformed_param_row_vector = log_inv_logit(d_row_vector);
  transformed_param_matrix = log_inv_logit(p_matrix);
  transformed_param_vector = log_inv_logit(p_vector);
  transformed_param_row_vector = log_inv_logit(p_row_vector);
  trans_p_x3y = log_inv_logit(p_x3y);
  trans_p_x4y = log_inv_logit(p_x4y);
  trans_p_x5y = log_inv_logit(p_x5y);
  trans_p_x2z = log_inv_logit(p_x2z);
  trans_p_x3z = log_inv_logit(p_x3z);
  trans_p_x4z = log_inv_logit(p_x4z);
  trans_p_x5z = log_inv_logit(p_x5z);
  trans_p_x2w = log_inv_logit(p_x2w);
  trans_p_x3w = log_inv_logit(p_x3w);
  trans_p_x4w = log_inv_logit(p_x4w);
  trans_p_x5w = log_inv_logit(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log_softmax.stan
data {
  int d_int;
  vector[d_int] d_vector;
}
transformed data {
  vector[d_int] transformed_data_vector;
  transformed_data_vector = log_softmax(d_vector);
}
parameters {
  real y_p;
  vector[d_int] p_vector;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  transformed_param_vector = log_softmax(d_vector);
  transformed_param_vector = log_softmax(p_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log_sum_exp.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = log_sum_exp(d_real_array);
  transformed_data_real = log_sum_exp(d_matrix);
  transformed_data_real = log_sum_exp(d_vector);
  transformed_data_real = log_sum_exp(d_row_vector);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log_sum_exp(d_real_array);
  transformed_param_real = log_sum_exp(d_matrix);
  transformed_param_real = log_sum_exp(d_vector);
  transformed_param_real = log_sum_exp(d_row_vector);
  transformed_param_real = log_sum_exp(p_real_array);
  transformed_param_real = log_sum_exp(p_matrix);
  transformed_param_real = log_sum_exp(p_vector);
  transformed_param_real = log_sum_exp(p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format logit.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = logit(d_matrix);
  transformed_data_vector = logit(d_vector);
  transformed_data_row_vector = logit(d_row_vector);
  trans_x3y = logit(x3y);
  trans_x4y = logit(x4y);
  trans_x5y = logit(x5y);
  trans_x2z = logit(x1z);
  trans_x2z = logit(x2z);
  trans_x3z = logit(x3z);
  trans_x4z = logit(x4z);
  trans_x5z = logit(x5z);
  trans_x2w = logit(x1w);
  trans_x2w = logit(x2w);
  trans_x3w = logit(x3w);
  trans_x4w = logit(x4w);
  trans_x5w = logit(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = logit(d_matrix);
  transformed_param_vector = logit(d_vector);
  transformed_param_row_vector = logit(d_row_vector);
  transformed_param_matrix = logit(p_matrix);
  transformed_param_vector = logit(p_vector);
  transformed_param_row_vector = logit(p_row_vector);
  trans_p_x3y = logit(p_x3y);
  trans_p_x4y = logit(p_x4y);
  trans_p_x5y = logit(p_x5y);
  trans_p_x2z = logit(p_x2z);
  trans_p_x3z = logit(p_x3z);
  trans_p_x4z = logit(p_x4z);
  trans_p_x5z = logit(p_x5z);
  trans_p_x2w = logit(p_x2w);
  trans_p_x3w = logit(p_x3w);
  trans_p_x4w = logit(p_x4w);
  trans_p_x5w = logit(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format matrix_division.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_row_vector = d_row_vector / d_matrix;
  transformed_data_vector = d_matrix \ d_vector;
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_row_vector = d_row_vector / d_matrix;
  transformed_param_vector = d_matrix \ d_vector;
  transformed_param_row_vector = p_row_vector / d_matrix;
  transformed_param_vector = p_matrix \ d_vector;
  transformed_param_row_vector = d_row_vector / p_matrix;
  transformed_param_vector = d_matrix \ p_vector;
  transformed_param_row_vector = p_row_vector / p_matrix;
  transformed_param_vector = p_matrix \ p_vector;
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format matrix_exp.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = matrix_exp(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = matrix_exp(p_matrix);
  transformed_param_matrix = matrix_exp(d_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format matrix_exp_multiply.stan
data {
  int d_int;
  int d_col;
  matrix[d_int, d_int] d_matrix_a;
  matrix[d_int, d_col] d_matrix_b;
}
transformed data {
  matrix[d_int, d_col] transformed_data_matrix;
  transformed_data_matrix = matrix_exp_multiply(d_matrix_a, d_matrix_b);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix_a;
  matrix[d_int, d_col] p_matrix_b;
}
transformed parameters {
  matrix[d_int, d_col] transformed_param_matrix;
  transformed_param_matrix = matrix_exp_multiply(p_matrix_a, p_matrix_b);
  transformed_param_matrix = matrix_exp_multiply(p_matrix_a, d_matrix_b);
  transformed_param_matrix = matrix_exp_multiply(d_matrix_a, p_matrix_b);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format max.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = max(d_int_array);
  transformed_data_real = max(d_real_array);
  transformed_data_real = max(d_matrix);
  transformed_data_real = max(d_vector);
  transformed_data_real = max(d_row_vector);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = max(d_int_array);
  transformed_param_real = max(d_real_array);
  transformed_param_real = max(d_matrix);
  transformed_param_real = max(d_vector);
  transformed_param_real = max(d_row_vector);
  transformed_param_real = max(p_real_array);
  transformed_param_real = max(p_matrix);
  transformed_param_real = max(p_vector);
  transformed_param_real = max(p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format mdivide_left.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
}
transformed data {
  vector[d_int] transformed_data_vector;
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = mdivide_left(d_matrix, d_matrix);
  transformed_data_vector = mdivide_left(d_matrix, d_vector);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = mdivide_left(d_matrix, d_matrix);
  transformed_param_vector = mdivide_left(d_matrix, d_vector);
  transformed_param_matrix = mdivide_left(p_matrix, d_matrix);
  transformed_param_vector = mdivide_left(p_matrix, d_vector);
  transformed_param_matrix = mdivide_left(d_matrix, p_matrix);
  transformed_param_vector = mdivide_left(d_matrix, p_vector);
  transformed_param_matrix = mdivide_left(p_matrix, p_matrix);
  transformed_param_vector = mdivide_left(p_matrix, p_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format mdivide_left_spd.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
}
transformed data {
  vector[d_int] transformed_data_vector;
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = mdivide_left_spd(d_matrix, d_matrix);
  transformed_data_vector = mdivide_left_spd(d_matrix, d_vector);
}
parameters {
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = mdivide_left_spd(d_matrix, d_matrix);
  transformed_param_vector = mdivide_left_spd(d_matrix, d_vector);
  transformed_param_matrix = mdivide_left_spd(p_matrix, d_matrix);
  transformed_param_vector = mdivide_left_spd(p_matrix, d_vector);
  transformed_param_matrix = mdivide_left_spd(d_matrix, p_matrix);
  transformed_param_vector = mdivide_left_spd(d_matrix, p_vector);
  transformed_param_matrix = mdivide_left_spd(p_matrix, p_matrix);
  transformed_param_vector = mdivide_left_spd(p_matrix, p_vector);
}
model {

}

  $ ../../../../../../../install/default/bin/stanc --auto-format mdivide_left_tri_low.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
}
transformed data {
  vector[d_int] transformed_data_vector;
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = mdivide_left_tri_low(d_matrix, d_matrix);
  transformed_data_vector = mdivide_left_tri_low(d_matrix, d_vector);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = mdivide_left_tri_low(d_matrix, d_matrix);
  transformed_param_vector = mdivide_left_tri_low(d_matrix, d_vector);
  transformed_param_matrix = mdivide_left_tri_low(p_matrix, d_matrix);
  transformed_param_vector = mdivide_left_tri_low(p_matrix, d_vector);
  transformed_param_matrix = mdivide_left_tri_low(d_matrix, p_matrix);
  transformed_param_vector = mdivide_left_tri_low(d_matrix, p_vector);
  transformed_param_matrix = mdivide_left_tri_low(p_matrix, p_matrix);
  transformed_param_vector = mdivide_left_tri_low(p_matrix, p_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format mdivide_right.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  row_vector[d_int] d_row_vector;
}
transformed data {
  row_vector[d_int] transformed_data_row_vector;
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = mdivide_right(d_matrix, d_matrix);
  transformed_data_row_vector = mdivide_right(d_row_vector, d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  row_vector[d_int] transformed_param_row_vector;
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = mdivide_right(d_matrix, d_matrix);
  transformed_param_row_vector = mdivide_right(d_row_vector, d_matrix);
  transformed_param_matrix = mdivide_right(p_matrix, d_matrix);
  transformed_param_row_vector = mdivide_right(p_row_vector, d_matrix);
  transformed_param_matrix = mdivide_right(d_matrix, p_matrix);
  transformed_param_row_vector = mdivide_right(d_row_vector, p_matrix);
  transformed_param_matrix = mdivide_right(p_matrix, p_matrix);
  transformed_param_row_vector = mdivide_right(p_row_vector, p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format mdivide_right_spd.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  row_vector[d_int] d_row_vector;
}
transformed data {
  row_vector[d_int] transformed_data_row_vector;
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = mdivide_right(d_matrix, d_matrix);
  transformed_data_row_vector = mdivide_right(d_row_vector, d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  row_vector[d_int] transformed_param_row_vector;
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = mdivide_right(d_matrix, d_matrix);
  transformed_param_row_vector = mdivide_right(d_row_vector, d_matrix);
  transformed_param_matrix = mdivide_right(p_matrix, d_matrix);
  transformed_param_row_vector = mdivide_right(p_row_vector, d_matrix);
  transformed_param_matrix = mdivide_right(d_matrix, p_matrix);
  transformed_param_row_vector = mdivide_right(d_row_vector, p_matrix);
  transformed_param_matrix = mdivide_right(p_matrix, p_matrix);
  transformed_param_row_vector = mdivide_right(p_row_vector, p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format mdivide_right_tri_low.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  row_vector[d_int] d_row_vector;
}
transformed data {
  row_vector[d_int] transformed_data_row_vector;
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = mdivide_right_tri_low(d_matrix, d_matrix);
  transformed_data_row_vector = mdivide_right_tri_low(d_row_vector, d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  row_vector[d_int] transformed_param_row_vector;
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = mdivide_right_tri_low(d_matrix, d_matrix);
  transformed_param_row_vector = mdivide_right_tri_low(d_row_vector,
                                                       d_matrix);
  transformed_param_matrix = mdivide_right_tri_low(p_matrix, d_matrix);
  transformed_param_row_vector = mdivide_right_tri_low(p_row_vector,
                                                       d_matrix);
  transformed_param_matrix = mdivide_right_tri_low(d_matrix, p_matrix);
  transformed_param_row_vector = mdivide_right_tri_low(d_row_vector,
                                                       p_matrix);
  transformed_param_matrix = mdivide_right_tri_low(p_matrix, p_matrix);
  transformed_param_row_vector = mdivide_right_tri_low(p_row_vector,
                                                       p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format mean.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = mean(d_real_array);
  transformed_data_real = mean(d_matrix);
  transformed_data_real = mean(d_vector);
  transformed_data_real = mean(d_row_vector);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = mean(d_real_array);
  transformed_param_real = mean(d_matrix);
  transformed_param_real = mean(d_vector);
  transformed_param_real = mean(d_row_vector);
  transformed_param_real = mean(p_real_array);
  transformed_param_real = mean(p_matrix);
  transformed_param_real = mean(p_vector);
  transformed_param_real = mean(p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format min.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = min(d_int_array);
  transformed_data_real = min(d_real_array);
  transformed_data_real = min(d_matrix);
  transformed_data_real = min(d_vector);
  transformed_data_real = min(d_row_vector);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = min(d_int_array);
  transformed_param_real = min(d_real_array);
  transformed_param_real = min(d_matrix);
  transformed_param_real = min(d_vector);
  transformed_param_real = min(d_row_vector);
  transformed_param_real = min(p_real_array);
  transformed_param_real = min(p_matrix);
  transformed_param_real = min(p_vector);
  transformed_param_real = min(p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format multiply_lower_tri_self_transpose.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = multiply_lower_tri_self_transpose(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = multiply_lower_tri_self_transpose(d_matrix);
  transformed_param_matrix = multiply_lower_tri_self_transpose(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format negation.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_vector = -d_vector;
  transformed_data_row_vector = -d_row_vector;
  transformed_data_matrix = -d_matrix;
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_vector = -d_vector;
  transformed_param_row_vector = -d_row_vector;
  transformed_param_matrix = -d_matrix;
  transformed_param_vector = -p_vector;
  transformed_param_row_vector = -p_row_vector;
  transformed_param_matrix = -p_matrix;
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format num_elements.stan
data {
  vector[2] x3x;
  row_vector[2] x4x;
  matrix[2, 3] x5x;
  int x1y[3];
  real x2y[3];
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  int val;
  val = num_elements(x4x);
  val = num_elements(x5x);
  val = num_elements(x1y);
  val = num_elements(x2y);
  val = num_elements(x3y);
  val = num_elements(x4y);
  val = num_elements(x5y);
  val = num_elements(x1z);
  val = num_elements(x2z);
  val = num_elements(x3z);
  val = num_elements(x4z);
  val = num_elements(x5z);
  val = num_elements(x1w);
  val = num_elements(x2w);
  val = num_elements(x3w);
  val = num_elements(x4w);
  val = num_elements(x5w);
}
parameters {
  real y;
  vector[2] p_x3x;
  row_vector[2] p_x4x;
  matrix[2, 3] p_x5x;
  real p_x1y[3];
  real p_x2y[3];
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x1z[3, 4];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x1w[3, 4, 5];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  real p_val;
  p_val = num_elements(x3x);
  p_val = num_elements(x4x);
  p_val = num_elements(x5x);
  p_val = num_elements(x1y);
  p_val = num_elements(x2y);
  p_val = num_elements(x3y);
  p_val = num_elements(x4y);
  p_val = num_elements(x5y);
  p_val = num_elements(x1z);
  p_val = num_elements(x2z);
  p_val = num_elements(x3z);
  p_val = num_elements(x4z);
  p_val = num_elements(x5z);
  p_val = num_elements(x1w);
  p_val = num_elements(x2w);
  p_val = num_elements(x3w);
  p_val = num_elements(x4w);
  p_val = num_elements(x5w);
  p_val = num_elements(p_x1y);
  p_val = num_elements(p_x2y);
  p_val = num_elements(p_x3y);
  p_val = num_elements(p_x4y);
  p_val = num_elements(p_x5y);
  p_val = num_elements(p_x1z);
  p_val = num_elements(p_x2z);
  p_val = num_elements(p_x3z);
  p_val = num_elements(p_x4z);
  p_val = num_elements(p_x5z);
  p_val = num_elements(p_x1w);
  p_val = num_elements(p_x2w);
  p_val = num_elements(p_x3w);
  p_val = num_elements(p_x4w);
  p_val = num_elements(p_x5w);
}
model {
  y ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format prod.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = prod(d_int_array);
  transformed_data_real = prod(d_real_array);
  transformed_data_real = prod(d_matrix);
  transformed_data_real = prod(d_vector);
  transformed_data_real = prod(d_row_vector);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = prod(d_int_array);
  transformed_param_real = prod(d_real_array);
  transformed_param_real = prod(d_matrix);
  transformed_param_real = prod(d_vector);
  transformed_param_real = prod(d_row_vector);
  transformed_param_real = prod(p_real_array);
  transformed_param_real = prod(p_matrix);
  transformed_param_real = prod(p_vector);
  transformed_param_real = prod(p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format qr_Q.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = qr_Q(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = qr_Q(d_matrix);
  transformed_param_matrix = qr_Q(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format qr_R.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = qr_R(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = qr_R(d_matrix);
  transformed_param_matrix = qr_R(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format qr_thin_Q.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = qr_thin_Q(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = qr_thin_Q(d_matrix);
  transformed_param_matrix = qr_thin_Q(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format qr_thin_R.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = qr_thin_R(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = qr_thin_R(d_matrix);
  transformed_param_matrix = qr_thin_R(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format quad_form.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  real transformed_data_real;
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_real = quad_form(d_matrix, d_vector);
  transformed_data_matrix = quad_form(d_matrix, d_matrix);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_real = quad_form(d_matrix, d_vector);
  transformed_param_matrix = quad_form(d_matrix, d_matrix);
  transformed_param_real = quad_form(d_matrix, p_vector);
  transformed_param_matrix = quad_form(d_matrix, p_matrix);
  transformed_param_real = quad_form(p_matrix, d_vector);
  transformed_param_matrix = quad_form(p_matrix, d_matrix);
  transformed_param_real = quad_form(p_matrix, p_vector);
  transformed_param_matrix = quad_form(p_matrix, p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format quad_form_diag.stan
data {
  int d_int;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = quad_form_diag(d_matrix, d_vector);
  transformed_data_matrix = quad_form_diag(d_matrix, d_row_vector);
}
parameters {
  real y_p;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = quad_form_diag(d_matrix, d_vector);
  transformed_param_matrix = quad_form_diag(d_matrix, d_row_vector);
  transformed_param_matrix = quad_form_diag(p_matrix, d_vector);
  transformed_param_matrix = quad_form_diag(p_matrix, d_row_vector);
  transformed_param_matrix = quad_form_diag(d_matrix, p_vector);
  transformed_param_matrix = quad_form_diag(d_matrix, p_row_vector);
  transformed_param_matrix = quad_form_diag(p_matrix, p_vector);
  transformed_param_matrix = quad_form_diag(p_matrix, p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format quad_form_sym.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  real transformed_data_real;
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_real = quad_form_sym(d_matrix, d_vector);
  transformed_data_matrix = quad_form_sym(d_matrix, d_matrix);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_real = quad_form_sym(d_matrix, d_vector);
  transformed_param_matrix = quad_form_sym(d_matrix, d_matrix);
  transformed_param_real = quad_form_sym(d_matrix, p_vector);
  transformed_param_matrix = quad_form_sym(d_matrix, p_matrix);
  transformed_param_real = quad_form_sym(p_matrix, d_vector);
  transformed_param_matrix = quad_form_sym(p_matrix, d_matrix);
  transformed_param_real = quad_form_sym(p_matrix, p_vector);
  transformed_param_matrix = quad_form_sym(p_matrix, p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format rank.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_int = rank(d_int_array, d_int);
  transformed_data_int = rank(d_real_array, d_int);
  transformed_data_int = rank(d_vector, d_int);
  transformed_data_int = rank(d_row_vector, d_int);
  transformed_data_real = rank(d_int_array, d_int);
  transformed_data_real = rank(d_real_array, d_int);
  transformed_data_real = rank(d_vector, d_int);
  transformed_data_real = rank(d_row_vector, d_int);
}
parameters {
  real y_p;
  real p_real_array[d_int];
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = rank(d_int_array, d_int);
  transformed_param_real = rank(d_real_array, d_int);
  transformed_param_real = rank(d_vector, d_int);
  transformed_param_real = rank(d_row_vector, d_int);
  transformed_param_real = rank(p_real_array, d_int);
  transformed_param_real = rank(p_vector, d_int);
  transformed_param_real = rank(p_row_vector, d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format rep_matrix.stan
data {
  int d_int;
  real d_real;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = rep_matrix(d_real, d_int, d_int);
  transformed_data_matrix = rep_matrix(d_vector, d_int);
  transformed_data_matrix = rep_matrix(d_row_vector, d_int);
}
parameters {
  real p_real;
  real y_p;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = rep_matrix(d_real, d_int, d_int);
  transformed_param_matrix = rep_matrix(d_vector, d_int);
  transformed_param_matrix = rep_matrix(d_row_vector, d_int);
  transformed_param_matrix = rep_matrix(p_real, d_int, d_int);
  transformed_param_matrix = rep_matrix(p_vector, d_int);
  transformed_param_matrix = rep_matrix(p_row_vector, d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format rep_param.stan
parameters {
  real zzz;
}
transformed parameters {
  real x0;
  real x1[2];
  real x2[3, 2];
  real x3[4, 3, 2];
  vector[5] v0;
  vector[5] v1[6];
  vector[5] v2[7, 6];
  vector[5] v3[8, 7, 6];
  row_vector[5] rv0;
  row_vector[5] rv1[6];
  row_vector[5] rv2[7, 6];
  row_vector[5] rv3[8, 7, 6];
  matrix[5, 6] m0;
  matrix[5, 6] m1[9];
  matrix[5, 6] m2[10, 9];
  matrix[5, 6] m3[11, 10, 9];
  x0 = 10.9;
  v0 = rep_vector(3.7, 5);
  rv0 = rep_row_vector(9.8, 5);
  m0 = rep_matrix(-1.8, 5, 6);
  x1 = rep_array(x0, 2);
  x2 = rep_array(x1, 3);
  x3 = rep_array(x2, 4);
  v1 = rep_array(v0, 6);
  v2 = rep_array(v1, 7);
  v3 = rep_array(v2, 8);
  rv1 = rep_array(rv0, 6);
  rv2 = rep_array(rv1, 7);
  rv3 = rep_array(rv2, 8);
  m1 = rep_array(m0, 6);
  m2 = rep_array(m1, 7);
  m3 = rep_array(m2, 8);
  x2 = rep_array(-128.676, 3, 2);
  x3 = rep_array(-128.676, 4, 3, 2);
}
model {
  zzz ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format rep_row_vector.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_row_vector = rep_row_vector(d_real, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_row_vector = rep_row_vector(d_real, d_int);
  transformed_param_row_vector = rep_row_vector(p_real, d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format rep_vector.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  vector[d_int] transformed_data_vector;
  transformed_data_vector = rep_vector(d_real, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  transformed_param_vector = rep_vector(d_real, d_int);
  transformed_param_vector = rep_vector(p_real, d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format reverse.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_vector = reverse(d_vector);
  transformed_data_row_vector = reverse(d_row_vector);
  trans_x3y = reverse(x3y);
  trans_x4y = reverse(x4y);
  trans_x5y = reverse(x5y);
  trans_x2z = reverse(x1z);
  trans_x2z = reverse(x2z);
  trans_x3z = reverse(x3z);
  trans_x4z = reverse(x4z);
  trans_x5z = reverse(x5z);
  trans_x2w = reverse(x1w);
  trans_x2w = reverse(x2w);
  trans_x3w = reverse(x3w);
  trans_x4w = reverse(x4w);
  trans_x5w = reverse(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_vector = reverse(d_vector);
  transformed_param_row_vector = reverse(d_row_vector);
  transformed_param_vector = reverse(p_vector);
  transformed_param_row_vector = reverse(p_row_vector);
  trans_p_x3y = reverse(p_x3y);
  trans_p_x4y = reverse(p_x4y);
  trans_p_x5y = reverse(p_x5y);
  trans_p_x2z = reverse(p_x2z);
  trans_p_x3z = reverse(p_x3z);
  trans_p_x4z = reverse(p_x4z);
  trans_p_x5z = reverse(p_x5z);
  trans_p_x2w = reverse(p_x2w);
  trans_p_x3w = reverse(p_x3w);
  trans_p_x4w = reverse(p_x4w);
  trans_p_x5w = reverse(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format round.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = round(d_matrix);
  transformed_data_vector = round(d_vector);
  transformed_data_row_vector = round(d_row_vector);
  trans_x3y = round(x3y);
  trans_x4y = round(x4y);
  trans_x5y = round(x5y);
  trans_x2z = round(x1z);
  trans_x2z = round(x2z);
  trans_x3z = round(x3z);
  trans_x4z = round(x4z);
  trans_x5z = round(x5z);
  trans_x2w = round(x1w);
  trans_x2w = round(x2w);
  trans_x3w = round(x3w);
  trans_x4w = round(x4w);
  trans_x5w = round(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = round(d_matrix);
  transformed_param_vector = round(d_vector);
  transformed_param_row_vector = round(d_row_vector);
  transformed_param_matrix = round(p_matrix);
  transformed_param_vector = round(p_vector);
  transformed_param_row_vector = round(p_row_vector);
  trans_p_x3y = round(p_x3y);
  trans_p_x4y = round(p_x4y);
  trans_p_x5y = round(p_x5y);
  trans_p_x2z = round(p_x2z);
  trans_p_x3z = round(p_x3z);
  trans_p_x4z = round(p_x4z);
  trans_p_x5z = round(p_x5z);
  trans_p_x2w = round(p_x2w);
  trans_p_x3w = round(p_x3w);
  trans_p_x4w = round(p_x4w);
  trans_p_x5w = round(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format row.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_row_vector = row(d_matrix, d_int);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_row_vector = row(d_matrix, d_int);
  transformed_param_row_vector = row(p_matrix, d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format rows.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_int = rows(d_vector);
  transformed_data_int = rows(d_row_vector);
  transformed_data_int = rows(d_matrix);
  transformed_data_real = rows(d_vector);
  transformed_data_real = rows(d_row_vector);
  transformed_data_real = rows(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = rows(d_vector);
  transformed_param_real = rows(d_row_vector);
  transformed_param_real = rows(d_matrix);
  transformed_param_real = rows(p_vector);
  transformed_param_real = rows(p_row_vector);
  transformed_param_real = rows(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format rows_dot_product.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  vector[d_int] transformed_data_vector;
  transformed_data_vector = rows_dot_product(d_vector, d_vector);
  transformed_data_vector = rows_dot_product(d_row_vector, d_row_vector);
  transformed_data_vector = rows_dot_product(d_matrix, d_matrix);
}
parameters {
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  real y_p;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  transformed_param_vector = rows_dot_product(d_vector, d_vector);
  transformed_param_vector = rows_dot_product(d_row_vector, d_row_vector);
  transformed_param_vector = rows_dot_product(d_matrix, d_matrix);
  transformed_param_vector = rows_dot_product(p_vector, d_vector);
  transformed_param_vector = rows_dot_product(p_row_vector, d_row_vector);
  transformed_param_vector = rows_dot_product(p_matrix, d_matrix);
  transformed_param_vector = rows_dot_product(d_vector, p_vector);
  transformed_param_vector = rows_dot_product(d_row_vector, p_row_vector);
  transformed_param_vector = rows_dot_product(d_matrix, p_matrix);
  transformed_param_vector = rows_dot_product(p_vector, p_vector);
  transformed_param_vector = rows_dot_product(p_row_vector, p_row_vector);
  transformed_param_vector = rows_dot_product(p_matrix, p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format rows_dot_self.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  vector[d_int] transformed_data_vector;
  transformed_data_vector = rows_dot_self(d_vector);
  transformed_data_vector = rows_dot_self(d_row_vector);
  transformed_data_vector = rows_dot_self(d_matrix);
}
parameters {
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  real y_p;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  transformed_param_vector = rows_dot_self(d_vector);
  transformed_param_vector = rows_dot_self(d_row_vector);
  transformed_param_vector = rows_dot_self(d_matrix);
  transformed_param_vector = rows_dot_self(p_vector);
  transformed_param_vector = rows_dot_self(p_row_vector);
  transformed_param_vector = rows_dot_self(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format scale_matrix_exp_multiply.stan
data {
  int d_int;
  int d_col;
  real d_t;
  matrix[d_int, d_int] d_matrix_a;
  matrix[d_int, d_col] d_matrix_b;
}
transformed data {
  matrix[d_int, d_col] transformed_data_matrix;
  transformed_data_matrix = scale_matrix_exp_multiply(d_t, d_matrix_a,
                                                      d_matrix_b);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix_a;
  matrix[d_int, d_col] p_matrix_b;
}
transformed parameters {
  matrix[d_int, d_col] transformed_param_matrix;
  transformed_param_matrix = scale_matrix_exp_multiply(d_t, p_matrix_a,
                                                       p_matrix_b);
  transformed_param_matrix = scale_matrix_exp_multiply(d_t, p_matrix_a,
                                                       d_matrix_b);
  transformed_param_matrix = scale_matrix_exp_multiply(d_t, d_matrix_a,
                                                       p_matrix_b);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format sd.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = sd(d_real_array);
  transformed_data_real = sd(d_matrix);
  transformed_data_real = sd(d_vector);
  transformed_data_real = sd(d_row_vector);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = sd(d_real_array);
  transformed_param_real = sd(d_matrix);
  transformed_param_real = sd(d_vector);
  transformed_param_real = sd(d_row_vector);
  transformed_param_real = sd(p_real_array);
  transformed_param_real = sd(p_matrix);
  transformed_param_real = sd(p_vector);
  transformed_param_real = sd(p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format segment.stan
data {
  int d_int;
  int d_int_array[d_int];
  int d_int_array_2[d_int, d_int];
  int d_int_array_3[d_int, d_int, d_int];
  real d_real_array[d_int];
  real d_real_array_2[d_int, d_int];
  real d_real_array_3[d_int, d_int, d_int];
  matrix[d_int, d_int] d_matrix_array[d_int];
  matrix[d_int, d_int] d_matrix_array_2[d_int, d_int];
  matrix[d_int, d_int] d_matrix_array_3[d_int, d_int, d_int];
  vector[d_int] d_vector;
  vector[d_int] d_vector_array[d_int];
  vector[d_int] d_vector_array_2[d_int, d_int];
  vector[d_int] d_vector_array_3[d_int, d_int, d_int];
  row_vector[d_int] d_row_vector;
  row_vector[d_int] d_row_vector_array[d_int];
  row_vector[d_int] d_row_vector_array_2[d_int, d_int];
  row_vector[d_int] d_row_vector_array_3[d_int, d_int, d_int];
}
transformed data {
  int transformed_data_int_array[d_int];
  int transformed_data_int_array_2[d_int, d_int];
  int transformed_data_int_array_3[d_int, d_int, d_int];
  real transformed_data_real_array[d_int];
  real transformed_data_real_array_2[d_int, d_int];
  real transformed_data_real_array_3[d_int, d_int, d_int];
  matrix[d_int, d_int] transformed_data_matrix_array[d_int];
  matrix[d_int, d_int] transformed_data_matrix_array_2[d_int, d_int];
  matrix[d_int, d_int] transformed_data_matrix_array_3[d_int, d_int, d_int];
  vector[d_int] transformed_data_vector;
  vector[d_int] transformed_data_vector_array[d_int];
  vector[d_int] transformed_data_vector_array_2[d_int, d_int];
  vector[d_int] transformed_data_vector_array_3[d_int, d_int, d_int];
  row_vector[d_int] transformed_data_row_vector;
  row_vector[d_int] transformed_data_row_vector_array[d_int];
  row_vector[d_int] transformed_data_row_vector_array_2[d_int, d_int];
  row_vector[d_int] transformed_data_row_vector_array_3[d_int, d_int, d_int];
  transformed_data_int_array = segment(d_int_array, d_int, d_int);
  transformed_data_int_array_2 = segment(d_int_array_2, d_int, d_int);
  transformed_data_int_array_3 = segment(d_int_array_3, d_int, d_int);
  transformed_data_real_array = segment(d_real_array, d_int, d_int);
  transformed_data_real_array_2 = segment(d_real_array_2, d_int, d_int);
  transformed_data_real_array_3 = segment(d_real_array_3, d_int, d_int);
  transformed_data_matrix_array = segment(d_matrix_array, d_int, d_int);
  transformed_data_matrix_array_2 = segment(d_matrix_array_2, d_int, d_int);
  transformed_data_matrix_array_3 = segment(d_matrix_array_3, d_int, d_int);
  transformed_data_vector = segment(d_vector, d_int, d_int);
  transformed_data_vector_array = segment(d_vector_array, d_int, d_int);
  transformed_data_vector_array_2 = segment(d_vector_array_2, d_int, d_int);
  transformed_data_vector_array_3 = segment(d_vector_array_3, d_int, d_int);
  transformed_data_row_vector = segment(d_row_vector, d_int, d_int);
  transformed_data_row_vector_array = segment(d_row_vector_array, d_int,
                                              d_int);
  transformed_data_row_vector_array_2 = segment(d_row_vector_array_2, d_int,
                                                d_int);
  transformed_data_row_vector_array_3 = segment(d_row_vector_array_3, d_int,
                                                d_int);
}
parameters {
  real y_p;
  real p_real_array[d_int];
  real p_real_array_2[d_int, d_int];
  real p_real_array_3[d_int, d_int, d_int];
  matrix[d_int, d_int] p_matrix_array[d_int];
  matrix[d_int, d_int] p_matrix_array_2[d_int, d_int];
  matrix[d_int, d_int] p_matrix_array_3[d_int, d_int, d_int];
  vector[d_int] p_vector;
  vector[d_int] p_vector_array[d_int];
  vector[d_int] p_vector_array_2[d_int, d_int];
  vector[d_int] p_vector_array_3[d_int, d_int, d_int];
  row_vector[d_int] p_row_vector;
  row_vector[d_int] p_row_vector_array[d_int];
  row_vector[d_int] p_row_vector_array_2[d_int, d_int];
  row_vector[d_int] p_row_vector_array_3[d_int, d_int, d_int];
}
transformed parameters {
  real transformed_param_real_array[d_int];
  real transformed_param_real_array_2[d_int, d_int];
  real transformed_param_real_array_3[d_int, d_int, d_int];
  matrix[d_int, d_int] transformed_param_matrix_array[d_int];
  matrix[d_int, d_int] transformed_param_matrix_array_2[d_int, d_int];
  matrix[d_int, d_int] transformed_param_matrix_array_3[d_int, d_int, d_int];
  vector[d_int] transformed_param_vector;
  vector[d_int] transformed_param_vector_array[d_int];
  vector[d_int] transformed_param_vector_array_2[d_int, d_int];
  vector[d_int] transformed_param_vector_array_3[d_int, d_int, d_int];
  row_vector[d_int] transformed_param_row_vector;
  row_vector[d_int] transformed_param_row_vector_array[d_int];
  row_vector[d_int] transformed_param_row_vector_array_2[d_int, d_int];
  row_vector[d_int] transformed_param_row_vector_array_3[d_int, d_int, d_int];
  transformed_param_real_array = segment(d_real_array, d_int, d_int);
  transformed_param_real_array_2 = segment(d_real_array_2, d_int, d_int);
  transformed_param_real_array_3 = segment(d_real_array_3, d_int, d_int);
  transformed_param_matrix_array = segment(d_matrix_array, d_int, d_int);
  transformed_param_matrix_array_2 = segment(d_matrix_array_2, d_int, d_int);
  transformed_param_matrix_array_3 = segment(d_matrix_array_3, d_int, d_int);
  transformed_param_vector = segment(d_vector, d_int, d_int);
  transformed_param_vector_array = segment(d_vector_array, d_int, d_int);
  transformed_param_vector_array_2 = segment(d_vector_array_2, d_int, d_int);
  transformed_param_vector_array_3 = segment(d_vector_array_3, d_int, d_int);
  transformed_param_row_vector = segment(d_row_vector, d_int, d_int);
  transformed_param_row_vector_array = segment(d_row_vector_array, d_int,
                                               d_int);
  transformed_param_row_vector_array_2 = segment(d_row_vector_array_2, d_int,
                                                 d_int);
  transformed_param_row_vector_array_3 = segment(d_row_vector_array_3, d_int,
                                                 d_int);
  transformed_param_real_array = segment(p_real_array, d_int, d_int);
  transformed_param_real_array_2 = segment(p_real_array_2, d_int, d_int);
  transformed_param_real_array_3 = segment(p_real_array_3, d_int, d_int);
  transformed_param_matrix_array = segment(p_matrix_array, d_int, d_int);
  transformed_param_matrix_array_2 = segment(p_matrix_array_2, d_int, d_int);
  transformed_param_matrix_array_3 = segment(p_matrix_array_3, d_int, d_int);
  transformed_param_vector = segment(p_vector, d_int, d_int);
  transformed_param_vector_array = segment(p_vector_array, d_int, d_int);
  transformed_param_vector_array_2 = segment(p_vector_array_2, d_int, d_int);
  transformed_param_vector_array_3 = segment(p_vector_array_3, d_int, d_int);
  transformed_param_row_vector = segment(p_row_vector, d_int, d_int);
  transformed_param_row_vector_array = segment(p_row_vector_array, d_int,
                                               d_int);
  transformed_param_row_vector_array_2 = segment(p_row_vector_array_2, d_int,
                                                 d_int);
  transformed_param_row_vector_array_3 = segment(p_row_vector_array_3, d_int,
                                                 d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format sin.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = sin(d_matrix);
  transformed_data_vector = sin(d_vector);
  transformed_data_row_vector = sin(d_row_vector);
  trans_x3y = sin(x3y);
  trans_x4y = sin(x4y);
  trans_x5y = sin(x5y);
  trans_x2z = sin(x1z);
  trans_x2z = sin(x2z);
  trans_x3z = sin(x3z);
  trans_x4z = sin(x4z);
  trans_x5z = sin(x5z);
  trans_x2w = sin(x1w);
  trans_x2w = sin(x2w);
  trans_x3w = sin(x3w);
  trans_x4w = sin(x4w);
  trans_x5w = sin(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = sin(d_matrix);
  transformed_param_vector = sin(d_vector);
  transformed_param_row_vector = sin(d_row_vector);
  transformed_param_matrix = sin(p_matrix);
  transformed_param_vector = sin(p_vector);
  transformed_param_row_vector = sin(p_row_vector);
  trans_p_x3y = sin(p_x3y);
  trans_p_x4y = sin(p_x4y);
  trans_p_x5y = sin(p_x5y);
  trans_p_x2z = sin(p_x2z);
  trans_p_x3z = sin(p_x3z);
  trans_p_x4z = sin(p_x4z);
  trans_p_x5z = sin(p_x5z);
  trans_p_x2w = sin(p_x2w);
  trans_p_x3w = sin(p_x3w);
  trans_p_x4w = sin(p_x4w);
  trans_p_x5w = sin(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format singular_values.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  vector[d_int] transformed_data_vector;
  transformed_data_vector = singular_values(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  transformed_param_vector = singular_values(d_matrix);
  transformed_param_vector = singular_values(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format sinh.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = sinh(d_matrix);
  transformed_data_vector = sinh(d_vector);
  transformed_data_row_vector = sinh(d_row_vector);
  trans_x3y = sinh(x3y);
  trans_x4y = sinh(x4y);
  trans_x5y = sinh(x5y);
  trans_x2z = sinh(x1z);
  trans_x2z = sinh(x2z);
  trans_x3z = sinh(x3z);
  trans_x4z = sinh(x4z);
  trans_x5z = sinh(x5z);
  trans_x2w = sinh(x1w);
  trans_x2w = sinh(x2w);
  trans_x3w = sinh(x3w);
  trans_x4w = sinh(x4w);
  trans_x5w = sinh(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = sinh(d_matrix);
  transformed_param_vector = sinh(d_vector);
  transformed_param_row_vector = sinh(d_row_vector);
  transformed_param_matrix = sinh(p_matrix);
  transformed_param_vector = sinh(p_vector);
  transformed_param_row_vector = sinh(p_row_vector);
  trans_p_x3y = sinh(p_x3y);
  trans_p_x4y = sinh(p_x4y);
  trans_p_x5y = sinh(p_x5y);
  trans_p_x2z = sinh(p_x2z);
  trans_p_x3z = sinh(p_x3z);
  trans_p_x4z = sinh(p_x4z);
  trans_p_x5z = sinh(p_x5z);
  trans_p_x2w = sinh(p_x2w);
  trans_p_x3w = sinh(p_x3w);
  trans_p_x4w = sinh(p_x4w);
  trans_p_x5w = sinh(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format size.stan
data {
  int x1x;
  real x2x;
  vector[2] x3x;
  row_vector[2] x4x;
  matrix[2, 3] x5x;
  int x1y[3];
  real x2y[3];
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  int val;
  val = size(x1x);
  val = size(x2x);
  val = size(x3x);
  val = size(x4x);
  val = size(x5x);
  val = size(x1y);
  val = size(x2y);
  val = size(x3y);
  val = size(x4y);
  val = size(x5y);
  val = size(x1z);
  val = size(x2z);
  val = size(x3z);
  val = size(x4z);
  val = size(x5z);
  val = size(x1w);
  val = size(x2w);
  val = size(x3w);
  val = size(x4w);
  val = size(x5w);
}
parameters {
  real y;
  real p_x1x;
  real p_x2x;
  vector[2] p_x3x;
  row_vector[2] p_x4x;
  matrix[2, 3] p_x5x;
  real p_x1y[3];
  real p_x2y[3];
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x1z[3, 4];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x1w[3, 4, 5];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  real p_val;
  p_val = size(x1x);
  p_val = size(x2x);
  p_val = size(x3x);
  p_val = size(x4x);
  p_val = size(x5x);
  p_val = size(x1y);
  p_val = size(x2y);
  p_val = size(x3y);
  p_val = size(x4y);
  p_val = size(x5y);
  p_val = size(x1z);
  p_val = size(x2z);
  p_val = size(x3z);
  p_val = size(x4z);
  p_val = size(x5z);
  p_val = size(x1w);
  p_val = size(x2w);
  p_val = size(x3w);
  p_val = size(x4w);
  p_val = size(x5w);
  p_val = size(p_x1x);
  p_val = size(p_x2x);
  p_val = size(p_x3x);
  p_val = size(p_x4x);
  p_val = size(p_x5x);
  p_val = size(p_x1y);
  p_val = size(p_x2y);
  p_val = size(p_x3y);
  p_val = size(p_x4y);
  p_val = size(p_x5y);
  p_val = size(p_x1z);
  p_val = size(p_x2z);
  p_val = size(p_x3z);
  p_val = size(p_x4z);
  p_val = size(p_x5z);
  p_val = size(p_x1w);
  p_val = size(p_x2w);
  p_val = size(p_x3w);
  p_val = size(p_x4w);
  p_val = size(p_x5w);
}
model {
  y ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format softmax.stan
data {
  int d_int;
  vector[d_int] d_vector;
}
transformed data {
  vector[d_int] transformed_data_vector;
  transformed_data_vector = softmax(d_vector);
}
parameters {
  real y_p;
  vector[d_int] p_vector;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  transformed_param_vector = softmax(d_vector);
  transformed_param_vector = softmax(p_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format sort_asc.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  int transformed_data_int_array[d_int];
  real transformed_data_real_array[d_int];
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_int_array = sort_asc(d_int_array);
  transformed_data_real_array = sort_asc(d_real_array);
  transformed_data_vector = sort_asc(d_vector);
  transformed_data_row_vector = sort_asc(d_row_vector);
}
parameters {
  real y_p;
  real p_real_array[d_int];
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real_array[d_int];
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_real_array = sort_asc(d_real_array);
  transformed_param_vector = sort_asc(d_vector);
  transformed_param_row_vector = sort_asc(d_row_vector);
  transformed_param_real_array = sort_asc(p_real_array);
  transformed_param_vector = sort_asc(p_vector);
  transformed_param_row_vector = sort_asc(p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format sort_desc.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  int transformed_data_int_array[d_int];
  real transformed_data_real_array[d_int];
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_int_array = sort_desc(d_int_array);
  transformed_data_real_array = sort_desc(d_real_array);
  transformed_data_vector = sort_desc(d_vector);
  transformed_data_row_vector = sort_desc(d_row_vector);
}
parameters {
  real y_p;
  real p_real_array[d_int];
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real_array[d_int];
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_real_array = sort_desc(d_real_array);
  transformed_param_vector = sort_desc(d_vector);
  transformed_param_row_vector = sort_desc(d_row_vector);
  transformed_param_real_array = sort_desc(p_real_array);
  transformed_param_vector = sort_desc(p_vector);
  transformed_param_row_vector = sort_desc(p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format sort_indices_asc.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  int transformed_data_int_array[d_int];
  real transformed_data_real_array[d_int];
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_int_array = sort_indices_asc(d_int_array);
  transformed_data_int_array = sort_indices_asc(d_real_array);
  transformed_data_int_array = sort_indices_asc(d_vector);
  transformed_data_int_array = sort_indices_asc(d_row_vector);
}
parameters {
  real p_real_array[d_int];
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real_array[d_int];
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  {
    int local_int_array[d_int];
    local_int_array = sort_indices_asc(p_real_array);
    local_int_array = sort_indices_asc(p_vector);
    local_int_array = sort_indices_asc(p_row_vector);
    local_int_array = sort_indices_asc(transformed_param_real_array);
    local_int_array = sort_indices_asc(transformed_param_vector);
    local_int_array = sort_indices_asc(transformed_param_row_vector);
  }
}
model {
  {
    int local_int_array[d_int];
    local_int_array = sort_indices_asc(d_int_array);
    local_int_array = sort_indices_asc(d_real_array);
    local_int_array = sort_indices_asc(d_vector);
    local_int_array = sort_indices_asc(d_row_vector);
    local_int_array = sort_indices_asc(transformed_data_int_array);
    local_int_array = sort_indices_asc(transformed_data_real_array);
    local_int_array = sort_indices_asc(transformed_data_vector);
    local_int_array = sort_indices_asc(transformed_data_row_vector);
    local_int_array = sort_indices_asc(p_real_array);
    local_int_array = sort_indices_asc(p_vector);
    local_int_array = sort_indices_asc(p_row_vector);
    local_int_array = sort_indices_asc(transformed_param_real_array);
    local_int_array = sort_indices_asc(transformed_param_vector);
    local_int_array = sort_indices_asc(transformed_param_row_vector);
  }
}

  $ ../../../../../../../install/default/bin/stanc --auto-format sort_indices_desc.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  int transformed_data_int_array[d_int];
  real transformed_data_real_array[d_int];
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_int_array = sort_indices_desc(d_int_array);
  transformed_data_int_array = sort_indices_desc(d_real_array);
  transformed_data_int_array = sort_indices_desc(d_vector);
  transformed_data_int_array = sort_indices_desc(d_row_vector);
}
parameters {
  real p_real_array[d_int];
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real_array[d_int];
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  {
    int local_int_array[d_int];
    local_int_array = sort_indices_desc(p_real_array);
    local_int_array = sort_indices_desc(p_vector);
    local_int_array = sort_indices_desc(p_row_vector);
    local_int_array = sort_indices_desc(transformed_param_real_array);
    local_int_array = sort_indices_desc(transformed_param_vector);
    local_int_array = sort_indices_desc(transformed_param_row_vector);
  }
}
model {
  {
    int local_int_array[d_int];
    local_int_array = sort_indices_desc(d_int_array);
    local_int_array = sort_indices_desc(d_real_array);
    local_int_array = sort_indices_desc(d_vector);
    local_int_array = sort_indices_desc(d_row_vector);
    local_int_array = sort_indices_desc(transformed_data_int_array);
    local_int_array = sort_indices_desc(transformed_data_real_array);
    local_int_array = sort_indices_desc(transformed_data_vector);
    local_int_array = sort_indices_desc(transformed_data_row_vector);
    local_int_array = sort_indices_desc(p_real_array);
    local_int_array = sort_indices_desc(p_vector);
    local_int_array = sort_indices_desc(p_row_vector);
    local_int_array = sort_indices_desc(transformed_param_real_array);
    local_int_array = sort_indices_desc(transformed_param_vector);
    local_int_array = sort_indices_desc(transformed_param_row_vector);
  }
}

  $ ../../../../../../../install/default/bin/stanc --auto-format sqrt.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = sqrt(d_matrix);
  transformed_data_vector = sqrt(d_vector);
  transformed_data_row_vector = sqrt(d_row_vector);
  trans_x3y = sqrt(x3y);
  trans_x4y = sqrt(x4y);
  trans_x5y = sqrt(x5y);
  trans_x2z = sqrt(x1z);
  trans_x2z = sqrt(x2z);
  trans_x3z = sqrt(x3z);
  trans_x4z = sqrt(x4z);
  trans_x5z = sqrt(x5z);
  trans_x2w = sqrt(x1w);
  trans_x2w = sqrt(x2w);
  trans_x3w = sqrt(x3w);
  trans_x4w = sqrt(x4w);
  trans_x5w = sqrt(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = sqrt(d_matrix);
  transformed_param_vector = sqrt(d_vector);
  transformed_param_row_vector = sqrt(d_row_vector);
  transformed_param_matrix = sqrt(p_matrix);
  transformed_param_vector = sqrt(p_vector);
  transformed_param_row_vector = sqrt(p_row_vector);
  trans_p_x3y = sqrt(p_x3y);
  trans_p_x4y = sqrt(p_x4y);
  trans_p_x5y = sqrt(p_x5y);
  trans_p_x2z = sqrt(p_x2z);
  trans_p_x3z = sqrt(p_x3z);
  trans_p_x4z = sqrt(p_x4z);
  trans_p_x5z = sqrt(p_x5z);
  trans_p_x2w = sqrt(p_x2w);
  trans_p_x3w = sqrt(p_x3w);
  trans_p_x4w = sqrt(p_x4w);
  trans_p_x5w = sqrt(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format square.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = square(d_matrix);
  transformed_data_vector = square(d_vector);
  transformed_data_row_vector = square(d_row_vector);
  trans_x3y = square(x3y);
  trans_x4y = square(x4y);
  trans_x5y = square(x5y);
  trans_x2z = square(x1z);
  trans_x2z = square(x2z);
  trans_x3z = square(x3z);
  trans_x4z = square(x4z);
  trans_x5z = square(x5z);
  trans_x2w = square(x1w);
  trans_x2w = square(x2w);
  trans_x3w = square(x3w);
  trans_x4w = square(x4w);
  trans_x5w = square(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = square(d_matrix);
  transformed_param_vector = square(d_vector);
  transformed_param_row_vector = square(d_row_vector);
  transformed_param_matrix = square(p_matrix);
  transformed_param_vector = square(p_vector);
  transformed_param_row_vector = square(p_row_vector);
  trans_p_x3y = square(p_x3y);
  trans_p_x4y = square(p_x4y);
  trans_p_x5y = square(p_x5y);
  trans_p_x2z = square(p_x2z);
  trans_p_x3z = square(p_x3z);
  trans_p_x4z = square(p_x4z);
  trans_p_x5z = square(p_x5z);
  trans_p_x2w = square(p_x2w);
  trans_p_x3w = square(p_x3w);
  trans_p_x4w = square(p_x4w);
  trans_p_x5w = square(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format squared_distance.stan
data {
  int d_int;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  real d_real;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = squared_distance(d_vector, d_vector);
  transformed_data_real = squared_distance(d_vector, d_row_vector);
  transformed_data_real = squared_distance(d_row_vector, d_vector);
  transformed_data_real = squared_distance(d_row_vector, d_row_vector);
  transformed_data_real = squared_distance(d_real, d_real);
}
parameters {
  real y_p;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  real p_real;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = squared_distance(d_vector, d_vector);
  transformed_param_real = squared_distance(d_vector, d_row_vector);
  transformed_param_real = squared_distance(d_row_vector, d_vector);
  transformed_param_real = squared_distance(d_row_vector, d_row_vector);
  transformed_param_real = squared_distance(p_vector, d_vector);
  transformed_param_real = squared_distance(p_vector, d_row_vector);
  transformed_param_real = squared_distance(p_row_vector, d_vector);
  transformed_param_real = squared_distance(p_row_vector, d_row_vector);
  transformed_param_real = squared_distance(d_vector, p_vector);
  transformed_param_real = squared_distance(d_vector, p_row_vector);
  transformed_param_real = squared_distance(d_row_vector, p_vector);
  transformed_param_real = squared_distance(d_row_vector, p_row_vector);
  transformed_param_real = squared_distance(p_vector, p_vector);
  transformed_param_real = squared_distance(p_vector, p_row_vector);
  transformed_param_real = squared_distance(p_row_vector, p_vector);
  transformed_param_real = squared_distance(p_row_vector, p_row_vector);
  transformed_param_real = squared_distance(p_real, p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format sub_col.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  vector[d_int] transformed_data_vector;
  transformed_data_vector = sub_col(d_matrix, d_int, d_int, d_int);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  transformed_param_vector = sub_col(d_matrix, d_int, d_int, d_int);
  transformed_param_vector = sub_col(p_matrix, d_int, d_int, d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format sub_row.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_row_vector = sub_row(d_matrix, d_int, d_int, d_int);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_row_vector = sub_row(d_matrix, d_int, d_int, d_int);
  transformed_param_row_vector = sub_row(p_matrix, d_int, d_int, d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format sum.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = sum(d_int_array);
  transformed_data_real = sum(d_real_array);
  transformed_data_real = sum(d_matrix);
  transformed_data_real = sum(d_vector);
  transformed_data_real = sum(d_row_vector);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = sum(d_int_array);
  transformed_param_real = sum(d_real_array);
  transformed_param_real = sum(d_matrix);
  transformed_param_real = sum(d_vector);
  transformed_param_real = sum(d_row_vector);
  transformed_param_real = sum(p_real_array);
  transformed_param_real = sum(p_matrix);
  transformed_param_real = sum(p_vector);
  transformed_param_real = sum(p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format tail.stan
data {
  int d_int;
  int d_int_array[d_int];
  int d_int_array_2[d_int, d_int];
  int d_int_array_3[d_int, d_int, d_int];
  real d_real_array[d_int];
  real d_real_array_2[d_int, d_int];
  real d_real_array_3[d_int, d_int, d_int];
  matrix[d_int, d_int] d_matrix_array[d_int];
  matrix[d_int, d_int] d_matrix_array_2[d_int, d_int];
  matrix[d_int, d_int] d_matrix_array_3[d_int, d_int, d_int];
  vector[d_int] d_vector;
  vector[d_int] d_vector_array[d_int];
  vector[d_int] d_vector_array_2[d_int, d_int];
  vector[d_int] d_vector_array_3[d_int, d_int, d_int];
  row_vector[d_int] d_row_vector;
  row_vector[d_int] d_row_vector_array[d_int];
  row_vector[d_int] d_row_vector_array_2[d_int, d_int];
  row_vector[d_int] d_row_vector_array_3[d_int, d_int, d_int];
}
transformed data {
  int transformed_data_int_array[d_int];
  int transformed_data_int_array_2[d_int, d_int];
  int transformed_data_int_array_3[d_int, d_int, d_int];
  real transformed_data_real_array[d_int];
  real transformed_data_real_array_2[d_int, d_int];
  real transformed_data_real_array_3[d_int, d_int, d_int];
  matrix[d_int, d_int] transformed_data_matrix_array[d_int];
  matrix[d_int, d_int] transformed_data_matrix_array_2[d_int, d_int];
  matrix[d_int, d_int] transformed_data_matrix_array_3[d_int, d_int, d_int];
  vector[d_int] transformed_data_vector;
  vector[d_int] transformed_data_vector_array[d_int];
  vector[d_int] transformed_data_vector_array_2[d_int, d_int];
  vector[d_int] transformed_data_vector_array_3[d_int, d_int, d_int];
  row_vector[d_int] transformed_data_row_vector;
  row_vector[d_int] transformed_data_row_vector_array[d_int];
  row_vector[d_int] transformed_data_row_vector_array_2[d_int, d_int];
  row_vector[d_int] transformed_data_row_vector_array_3[d_int, d_int, d_int];
  transformed_data_int_array = tail(d_int_array, d_int);
  transformed_data_int_array_2 = tail(d_int_array_2, d_int);
  transformed_data_int_array_3 = tail(d_int_array_3, d_int);
  transformed_data_real_array = tail(d_real_array, d_int);
  transformed_data_real_array_2 = tail(d_real_array_2, d_int);
  transformed_data_real_array_3 = tail(d_real_array_3, d_int);
  transformed_data_matrix_array = tail(d_matrix_array, d_int);
  transformed_data_matrix_array_2 = tail(d_matrix_array_2, d_int);
  transformed_data_matrix_array_3 = tail(d_matrix_array_3, d_int);
  transformed_data_vector = tail(d_vector, d_int);
  transformed_data_vector_array = tail(d_vector_array, d_int);
  transformed_data_vector_array_2 = tail(d_vector_array_2, d_int);
  transformed_data_vector_array_3 = tail(d_vector_array_3, d_int);
  transformed_data_row_vector = tail(d_row_vector, d_int);
  transformed_data_row_vector_array = tail(d_row_vector_array, d_int);
  transformed_data_row_vector_array_2 = tail(d_row_vector_array_2, d_int);
  transformed_data_row_vector_array_3 = tail(d_row_vector_array_3, d_int);
}
parameters {
  real y_p;
  real p_real_array[d_int];
  real p_real_array_2[d_int, d_int];
  real p_real_array_3[d_int, d_int, d_int];
  matrix[d_int, d_int] p_matrix_array[d_int];
  matrix[d_int, d_int] p_matrix_array_2[d_int, d_int];
  matrix[d_int, d_int] p_matrix_array_3[d_int, d_int, d_int];
  vector[d_int] p_vector;
  vector[d_int] p_vector_array[d_int];
  vector[d_int] p_vector_array_2[d_int, d_int];
  vector[d_int] p_vector_array_3[d_int, d_int, d_int];
  row_vector[d_int] p_row_vector;
  row_vector[d_int] p_row_vector_array[d_int];
  row_vector[d_int] p_row_vector_array_2[d_int, d_int];
  row_vector[d_int] p_row_vector_array_3[d_int, d_int, d_int];
}
transformed parameters {
  real transformed_param_real_array[d_int];
  real transformed_param_real_array_2[d_int, d_int];
  real transformed_param_real_array_3[d_int, d_int, d_int];
  matrix[d_int, d_int] transformed_param_matrix_array[d_int];
  matrix[d_int, d_int] transformed_param_matrix_array_2[d_int, d_int];
  matrix[d_int, d_int] transformed_param_matrix_array_3[d_int, d_int, d_int];
  vector[d_int] transformed_param_vector;
  vector[d_int] transformed_param_vector_array[d_int];
  vector[d_int] transformed_param_vector_array_2[d_int, d_int];
  vector[d_int] transformed_param_vector_array_3[d_int, d_int, d_int];
  row_vector[d_int] transformed_param_row_vector;
  row_vector[d_int] transformed_param_row_vector_array[d_int];
  row_vector[d_int] transformed_param_row_vector_array_2[d_int, d_int];
  row_vector[d_int] transformed_param_row_vector_array_3[d_int, d_int, d_int];
  transformed_param_real_array = tail(d_real_array, d_int);
  transformed_param_real_array_2 = tail(d_real_array_2, d_int);
  transformed_param_real_array_3 = tail(d_real_array_3, d_int);
  transformed_param_matrix_array = tail(d_matrix_array, d_int);
  transformed_param_matrix_array_2 = tail(d_matrix_array_2, d_int);
  transformed_param_matrix_array_3 = tail(d_matrix_array_3, d_int);
  transformed_param_vector = tail(d_vector, d_int);
  transformed_param_vector_array = tail(d_vector_array, d_int);
  transformed_param_vector_array_2 = tail(d_vector_array_2, d_int);
  transformed_param_vector_array_3 = tail(d_vector_array_3, d_int);
  transformed_param_row_vector = tail(d_row_vector, d_int);
  transformed_param_row_vector_array = tail(d_row_vector_array, d_int);
  transformed_param_row_vector_array_2 = tail(d_row_vector_array_2, d_int);
  transformed_param_row_vector_array_3 = tail(d_row_vector_array_3, d_int);
  transformed_param_real_array = tail(p_real_array, d_int);
  transformed_param_real_array_2 = tail(p_real_array_2, d_int);
  transformed_param_real_array_3 = tail(p_real_array_3, d_int);
  transformed_param_matrix_array = tail(p_matrix_array, d_int);
  transformed_param_matrix_array_2 = tail(p_matrix_array_2, d_int);
  transformed_param_matrix_array_3 = tail(p_matrix_array_3, d_int);
  transformed_param_vector = tail(p_vector, d_int);
  transformed_param_vector_array = tail(p_vector_array, d_int);
  transformed_param_vector_array_2 = tail(p_vector_array_2, d_int);
  transformed_param_vector_array_3 = tail(p_vector_array_3, d_int);
  transformed_param_row_vector = tail(p_row_vector, d_int);
  transformed_param_row_vector_array = tail(p_row_vector_array, d_int);
  transformed_param_row_vector_array_2 = tail(p_row_vector_array_2, d_int);
  transformed_param_row_vector_array_3 = tail(p_row_vector_array_3, d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format tan.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = tan(d_matrix);
  transformed_data_vector = tan(d_vector);
  transformed_data_row_vector = tan(d_row_vector);
  trans_x3y = tan(x3y);
  trans_x4y = tan(x4y);
  trans_x5y = tan(x5y);
  trans_x2z = tan(x1z);
  trans_x2z = tan(x2z);
  trans_x3z = tan(x3z);
  trans_x4z = tan(x4z);
  trans_x5z = tan(x5z);
  trans_x2w = tan(x1w);
  trans_x2w = tan(x2w);
  trans_x3w = tan(x3w);
  trans_x4w = tan(x4w);
  trans_x5w = tan(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = tan(d_matrix);
  transformed_param_vector = tan(d_vector);
  transformed_param_row_vector = tan(d_row_vector);
  transformed_param_matrix = tan(p_matrix);
  transformed_param_vector = tan(p_vector);
  transformed_param_row_vector = tan(p_row_vector);
  trans_p_x3y = tan(p_x3y);
  trans_p_x4y = tan(p_x4y);
  trans_p_x5y = tan(p_x5y);
  trans_p_x2z = tan(p_x2z);
  trans_p_x3z = tan(p_x3z);
  trans_p_x4z = tan(p_x4z);
  trans_p_x5z = tan(p_x5z);
  trans_p_x2w = tan(p_x2w);
  trans_p_x3w = tan(p_x3w);
  trans_p_x4w = tan(p_x4w);
  trans_p_x5w = tan(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format tanh.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = tanh(d_matrix);
  transformed_data_vector = tanh(d_vector);
  transformed_data_row_vector = tanh(d_row_vector);
  trans_x3y = tanh(x3y);
  trans_x4y = tanh(x4y);
  trans_x5y = tanh(x5y);
  trans_x2z = tanh(x1z);
  trans_x2z = tanh(x2z);
  trans_x3z = tanh(x3z);
  trans_x4z = tanh(x4z);
  trans_x5z = tanh(x5z);
  trans_x2w = tanh(x1w);
  trans_x2w = tanh(x2w);
  trans_x3w = tanh(x3w);
  trans_x4w = tanh(x4w);
  trans_x5w = tanh(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = tanh(d_matrix);
  transformed_param_vector = tanh(d_vector);
  transformed_param_row_vector = tanh(d_row_vector);
  transformed_param_matrix = tanh(p_matrix);
  transformed_param_vector = tanh(p_vector);
  transformed_param_row_vector = tanh(p_row_vector);
  trans_p_x3y = tanh(p_x3y);
  trans_p_x4y = tanh(p_x4y);
  trans_p_x5y = tanh(p_x5y);
  trans_p_x2z = tanh(p_x2z);
  trans_p_x3z = tanh(p_x3z);
  trans_p_x4z = tanh(p_x4z);
  trans_p_x5z = tanh(p_x5z);
  trans_p_x2w = tanh(p_x2w);
  trans_p_x3w = tanh(p_x3w);
  trans_p_x4w = tanh(p_x4w);
  trans_p_x5w = tanh(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format tcrossprod.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = tcrossprod(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = tcrossprod(d_matrix);
  transformed_param_matrix = tcrossprod(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format tgamma.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = tgamma(d_matrix);
  transformed_data_vector = tgamma(d_vector);
  transformed_data_row_vector = tgamma(d_row_vector);
  trans_x3y = tgamma(x3y);
  trans_x4y = tgamma(x4y);
  trans_x5y = tgamma(x5y);
  trans_x2z = tgamma(x1z);
  trans_x2z = tgamma(x2z);
  trans_x3z = tgamma(x3z);
  trans_x4z = tgamma(x4z);
  trans_x5z = tgamma(x5z);
  trans_x2w = tgamma(x1w);
  trans_x2w = tgamma(x2w);
  trans_x3w = tgamma(x3w);
  trans_x4w = tgamma(x4w);
  trans_x5w = tgamma(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = tgamma(d_matrix);
  transformed_param_vector = tgamma(d_vector);
  transformed_param_row_vector = tgamma(d_row_vector);
  transformed_param_matrix = tgamma(p_matrix);
  transformed_param_vector = tgamma(p_vector);
  transformed_param_row_vector = tgamma(p_row_vector);
  trans_p_x3y = tgamma(p_x3y);
  trans_p_x4y = tgamma(p_x4y);
  trans_p_x5y = tgamma(p_x5y);
  trans_p_x2z = tgamma(p_x2z);
  trans_p_x3z = tgamma(p_x3z);
  trans_p_x4z = tgamma(p_x4z);
  trans_p_x5z = tgamma(p_x5z);
  trans_p_x2w = tgamma(p_x2w);
  trans_p_x3w = tgamma(p_x3w);
  trans_p_x4w = tgamma(p_x4w);
  trans_p_x5w = tgamma(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format to_array_1d.stan
data {
  int d_int;
  int d_int_array_2[d_int, d_int];
  int d_int_array_3[d_int, d_int, d_int];
  real d_real_array_2[d_int, d_int];
  real d_real_array_3[d_int, d_int, d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  real transformed_data_real_array[d_int];
  int transformed_data_int_array[d_int];
  transformed_data_real_array = to_array_1d(d_matrix);
  transformed_data_real_array = to_array_1d(d_vector);
  transformed_data_real_array = to_array_1d(d_row_vector);
  transformed_data_real_array = to_array_1d(d_real_array_2);
  transformed_data_int_array = to_array_1d(d_int_array_2);
  transformed_data_real_array = to_array_1d(d_real_array_3);
  transformed_data_int_array = to_array_1d(d_int_array_3);
}
parameters {
  real y_p;
  real p_real_array_2[d_int, d_int];
  real p_real_array_3[d_int, d_int, d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real_array[d_int];
  transformed_param_real_array = to_array_1d(d_matrix);
  transformed_param_real_array = to_array_1d(d_vector);
  transformed_param_real_array = to_array_1d(d_row_vector);
  transformed_param_real_array = to_array_1d(d_real_array_2);
  transformed_param_real_array = to_array_1d(d_int_array_2);
  transformed_param_real_array = to_array_1d(d_real_array_3);
  transformed_param_real_array = to_array_1d(d_int_array_3);
  transformed_param_real_array = to_array_1d(p_matrix);
  transformed_param_real_array = to_array_1d(p_vector);
  transformed_param_real_array = to_array_1d(p_row_vector);
  transformed_param_real_array = to_array_1d(p_real_array_2);
  transformed_param_real_array = to_array_1d(p_real_array_3);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format to_array_2d.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  real transformed_data_real_array_2[d_int, d_int];
  transformed_data_real_array_2 = to_array_2d(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  real transformed_param_real_array_2[d_int, d_int];
  transformed_param_real_array_2 = to_array_2d(d_matrix);
  transformed_param_real_array_2 = to_array_2d(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format to_matrix.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  real d_array[6];
  real d_array2[6, 2];
  int d_iarray[6];
  int d_iarray2[6, 2];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  transformed_data_matrix = to_matrix(d_matrix);
  transformed_data_matrix = to_matrix(d_vector);
  transformed_data_matrix = to_matrix(d_row_vector);
  transformed_data_matrix = to_matrix(d_matrix, 4, 2);
  transformed_data_matrix = to_matrix(d_vector, 4, 3);
  transformed_data_matrix = to_matrix(d_row_vector, 5, 2);
  transformed_data_matrix = to_matrix(d_matrix, 4, 2, 1);
  transformed_data_matrix = to_matrix(d_vector, 4, 3, 1);
  transformed_data_matrix = to_matrix(d_row_vector, 5, 2, 4);
  transformed_data_matrix = to_matrix(d_array, 2, 3);
  transformed_data_matrix = to_matrix(d_array, 2, 3, 1);
  transformed_data_matrix = to_matrix(d_iarray, 2, 3);
  transformed_data_matrix = to_matrix(d_iarray, 2, 3, 1);
  transformed_data_matrix = to_matrix(d_array2);
  transformed_data_matrix = to_matrix(d_iarray2);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  real p_array[6];
  real p_array2[6, 7];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  transformed_param_matrix = to_matrix(d_matrix);
  transformed_param_matrix = to_matrix(d_vector);
  transformed_param_matrix = to_matrix(d_row_vector);
  transformed_param_matrix = to_matrix(d_matrix, 4, 2);
  transformed_param_matrix = to_matrix(d_vector, 3, 5);
  transformed_param_matrix = to_matrix(d_row_vector, 2, 4);
  transformed_param_matrix = to_matrix(d_matrix, 4, 2, 1);
  transformed_param_matrix = to_matrix(d_vector, 3, 5, 1);
  transformed_param_matrix = to_matrix(d_row_vector, 2, 4, 1);
  transformed_param_matrix = to_matrix(d_array, 3, 2);
  transformed_param_matrix = to_matrix(d_array, 3, 2, 1);
  transformed_param_matrix = to_matrix(d_iarray, 3, 2);
  transformed_param_matrix = to_matrix(d_iarray, 3, 2, 1);
  transformed_param_matrix = to_matrix(d_array2);
  transformed_param_matrix = to_matrix(d_iarray2);
  transformed_param_matrix = to_matrix(p_matrix);
  transformed_param_matrix = to_matrix(p_vector);
  transformed_param_matrix = to_matrix(p_row_vector);
  transformed_param_matrix = to_matrix(p_matrix, 4, 2);
  transformed_param_matrix = to_matrix(p_vector, 3, 5);
  transformed_param_matrix = to_matrix(p_row_vector, 2, 4);
  transformed_param_matrix = to_matrix(p_matrix, 4, 2, 1);
  transformed_param_matrix = to_matrix(p_vector, 3, 5, 1);
  transformed_param_matrix = to_matrix(p_row_vector, 2, 4, 1);
  transformed_param_matrix = to_matrix(p_array, 3, 2);
  transformed_param_matrix = to_matrix(p_array, 3, 2, 1);
  transformed_param_matrix = to_matrix(p_array2);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format to_row_vector.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_row_vector = to_row_vector(d_matrix);
  transformed_data_row_vector = to_row_vector(d_vector);
  transformed_data_row_vector = to_row_vector(d_row_vector);
  transformed_data_row_vector = to_row_vector(d_int_array);
  transformed_data_row_vector = to_row_vector(d_real_array);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_row_vector = to_row_vector(d_matrix);
  transformed_param_row_vector = to_row_vector(d_vector);
  transformed_param_row_vector = to_row_vector(d_row_vector);
  transformed_param_row_vector = to_row_vector(d_int_array);
  transformed_param_row_vector = to_row_vector(d_real_array);
  transformed_param_row_vector = to_row_vector(p_matrix);
  transformed_param_row_vector = to_row_vector(p_vector);
  transformed_param_row_vector = to_row_vector(p_row_vector);
  transformed_param_row_vector = to_row_vector(p_real_array);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format to_vector.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  vector[d_int] transformed_data_vector;
  transformed_data_vector = to_vector(d_matrix);
  transformed_data_vector = to_vector(d_vector);
  transformed_data_vector = to_vector(d_row_vector);
  transformed_data_vector = to_vector(d_int_array);
  transformed_data_vector = to_vector(d_real_array);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  vector[d_int] transformed_param_vector;
  transformed_param_vector = to_vector(d_matrix);
  transformed_param_vector = to_vector(d_vector);
  transformed_param_vector = to_vector(d_row_vector);
  transformed_param_vector = to_vector(d_int_array);
  transformed_param_vector = to_vector(d_real_array);
  transformed_param_vector = to_vector(p_matrix);
  transformed_param_vector = to_vector(p_vector);
  transformed_param_vector = to_vector(p_row_vector);
  transformed_param_vector = to_vector(p_real_array);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format trace.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = trace(d_matrix);
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = trace(d_matrix);
  transformed_param_real = trace(p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format trace_gen_quad_form.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = trace_gen_quad_form(d_matrix, d_matrix, d_matrix);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = trace_gen_quad_form(d_matrix, d_matrix, d_matrix);
  transformed_param_real = trace_gen_quad_form(d_matrix, p_matrix, d_matrix);
  transformed_param_real = trace_gen_quad_form(d_matrix, d_matrix, p_matrix);
  transformed_param_real = trace_gen_quad_form(d_matrix, p_matrix, p_matrix);
  transformed_param_real = trace_gen_quad_form(p_matrix, d_matrix, d_matrix);
  transformed_param_real = trace_gen_quad_form(p_matrix, p_matrix, d_matrix);
  transformed_param_real = trace_gen_quad_form(p_matrix, d_matrix, p_matrix);
  transformed_param_real = trace_gen_quad_form(p_matrix, p_matrix, p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format trace_quad_form.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = trace_quad_form(d_matrix, d_vector);
  transformed_data_real = trace_quad_form(d_matrix, d_matrix);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = trace_quad_form(d_matrix, d_vector);
  transformed_param_real = trace_quad_form(d_matrix, d_matrix);
  transformed_param_real = trace_quad_form(p_matrix, d_vector);
  transformed_param_real = trace_quad_form(p_matrix, d_matrix);
  transformed_param_real = trace_quad_form(d_matrix, p_vector);
  transformed_param_real = trace_quad_form(d_matrix, p_matrix);
  transformed_param_real = trace_quad_form(p_matrix, p_vector);
  transformed_param_real = trace_quad_form(p_matrix, p_matrix);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format transpose.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  transformed_data_matrix = d_matrix';
  transformed_data_row_vector = d_vector';
  transformed_data_vector = d_row_vector';
}
parameters {
  real y_p;
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  transformed_param_matrix = d_matrix';
  transformed_param_row_vector = d_vector';
  transformed_param_vector = d_row_vector';
  transformed_param_matrix = p_matrix';
  transformed_param_row_vector = p_vector';
  transformed_param_vector = p_row_vector';
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format trigamma.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = trigamma(d_matrix);
  transformed_data_vector = trigamma(d_vector);
  transformed_data_row_vector = trigamma(d_row_vector);
  trans_x3y = trigamma(x3y);
  trans_x4y = trigamma(x4y);
  trans_x5y = trigamma(x5y);
  trans_x2z = trigamma(x1z);
  trans_x2z = trigamma(x2z);
  trans_x3z = trigamma(x3z);
  trans_x4z = trigamma(x4z);
  trans_x5z = trigamma(x5z);
  trans_x2w = trigamma(x1w);
  trans_x2w = trigamma(x2w);
  trans_x3w = trigamma(x3w);
  trans_x4w = trigamma(x4w);
  trans_x5w = trigamma(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = trigamma(d_matrix);
  transformed_param_vector = trigamma(d_vector);
  transformed_param_row_vector = trigamma(d_row_vector);
  transformed_param_matrix = trigamma(p_matrix);
  transformed_param_vector = trigamma(p_vector);
  transformed_param_row_vector = trigamma(p_row_vector);
  trans_p_x3y = trigamma(p_x3y);
  trans_p_x4y = trigamma(p_x4y);
  trans_p_x5y = trigamma(p_x5y);
  trans_p_x2z = trigamma(p_x2z);
  trans_p_x3z = trigamma(p_x3z);
  trans_p_x4z = trigamma(p_x4z);
  trans_p_x5z = trigamma(p_x5z);
  trans_p_x2w = trigamma(p_x2w);
  trans_p_x3w = trigamma(p_x3w);
  trans_p_x4w = trigamma(p_x4w);
  trans_p_x5w = trigamma(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format trunc.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
  vector[2] x3y[3];
  row_vector[2] x4y[3];
  matrix[2, 3] x5y[3];
  int x1z[3, 4];
  real x2z[3, 4];
  vector[2] x3z[3, 4];
  row_vector[2] x4z[3, 4];
  matrix[2, 3] x5z[3, 4];
  int x1w[3, 4, 5];
  real x2w[3, 4, 5];
  vector[2] x3w[3, 4, 5];
  row_vector[2] x4w[3, 4, 5];
  matrix[2, 3] x5w[3, 4, 5];
}
transformed data {
  matrix[d_int, d_int] transformed_data_matrix;
  vector[d_int] transformed_data_vector;
  row_vector[d_int] transformed_data_row_vector;
  vector[2] trans_x3y[3];
  row_vector[2] trans_x4y[3];
  matrix[2, 3] trans_x5y[3];
  real trans_x2z[3, 4];
  vector[2] trans_x3z[3, 4];
  row_vector[2] trans_x4z[3, 4];
  matrix[2, 3] trans_x5z[3, 4];
  real trans_x2w[3, 4, 5];
  vector[2] trans_x3w[3, 4, 5];
  row_vector[2] trans_x4w[3, 4, 5];
  matrix[2, 3] trans_x5w[3, 4, 5];
  transformed_data_matrix = trunc(d_matrix);
  transformed_data_vector = trunc(d_vector);
  transformed_data_row_vector = trunc(d_row_vector);
  trans_x3y = trunc(x3y);
  trans_x4y = trunc(x4y);
  trans_x5y = trunc(x5y);
  trans_x2z = trunc(x1z);
  trans_x2z = trunc(x2z);
  trans_x3z = trunc(x3z);
  trans_x4z = trunc(x4z);
  trans_x5z = trunc(x5z);
  trans_x2w = trunc(x1w);
  trans_x2w = trunc(x2w);
  trans_x3w = trunc(x3w);
  trans_x4w = trunc(x4w);
  trans_x5w = trunc(x5w);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  vector[2] p_x3y[3];
  row_vector[2] p_x4y[3];
  matrix[2, 3] p_x5y[3];
  real p_x2z[3, 4];
  vector[2] p_x3z[3, 4];
  row_vector[2] p_x4z[3, 4];
  matrix[2, 3] p_x5z[3, 4];
  real p_x2w[3, 4, 5];
  vector[2] p_x3w[3, 4, 5];
  row_vector[2] p_x4w[3, 4, 5];
  matrix[2, 3] p_x5w[3, 4, 5];
}
transformed parameters {
  matrix[d_int, d_int] transformed_param_matrix;
  vector[d_int] transformed_param_vector;
  row_vector[d_int] transformed_param_row_vector;
  vector[2] trans_p_x3y[3];
  row_vector[2] trans_p_x4y[3];
  matrix[2, 3] trans_p_x5y[3];
  real trans_p_x2z[3, 4];
  vector[2] trans_p_x3z[3, 4];
  row_vector[2] trans_p_x4z[3, 4];
  matrix[2, 3] trans_p_x5z[3, 4];
  real trans_p_x2w[3, 4, 5];
  vector[2] trans_p_x3w[3, 4, 5];
  row_vector[2] trans_p_x4w[3, 4, 5];
  matrix[2, 3] trans_p_x5w[3, 4, 5];
  transformed_param_matrix = trunc(d_matrix);
  transformed_param_vector = trunc(d_vector);
  transformed_param_row_vector = trunc(d_row_vector);
  transformed_param_matrix = trunc(p_matrix);
  transformed_param_vector = trunc(p_vector);
  transformed_param_row_vector = trunc(p_row_vector);
  trans_p_x3y = trunc(p_x3y);
  trans_p_x4y = trunc(p_x4y);
  trans_p_x5y = trunc(p_x5y);
  trans_p_x2z = trunc(p_x2z);
  trans_p_x3z = trunc(p_x3z);
  trans_p_x4z = trunc(p_x4z);
  trans_p_x5z = trunc(p_x5z);
  trans_p_x2w = trunc(p_x2w);
  trans_p_x3w = trunc(p_x3w);
  trans_p_x4w = trunc(p_x4w);
  trans_p_x5w = trunc(p_x5w);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format variance.stan
data {
  int d_int;
  int d_int_array[d_int];
  real d_real_array[d_int];
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = variance(d_real_array);
  transformed_data_real = variance(d_matrix);
  transformed_data_real = variance(d_vector);
  transformed_data_real = variance(d_row_vector);
}
parameters {
  real p_real;
  real y_p;
  real p_real_array[d_int];
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = variance(d_real_array);
  transformed_param_real = variance(d_matrix);
  transformed_param_real = variance(d_vector);
  transformed_param_real = variance(d_row_vector);
  transformed_param_real = variance(p_real_array);
  transformed_param_real = variance(p_matrix);
  transformed_param_real = variance(p_vector);
  transformed_param_real = variance(p_row_vector);
}
model {
  y_p ~ normal(0, 1);
}

