  $ ../../../../../../../install/default/bin/stanc --auto-format abs.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = abs(d_int);
  transformed_data_real = abs(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = abs(d_int);
  transformed_param_real = abs(d_real);
  transformed_param_real = abs(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format acos.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = acos(d_int);
  transformed_data_real = acos(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = acos(d_int);
  transformed_param_real = acos(d_real);
  transformed_param_real = acos(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format acosh.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = acosh(d_int);
  transformed_data_real = acosh(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = acosh(d_int);
  transformed_param_real = acosh(d_real);
  transformed_param_real = acosh(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format asin.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = asin(d_int);
  transformed_data_real = asin(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = asin(d_int);
  transformed_param_real = asin(d_real);
  transformed_param_real = asin(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format asinh.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = asinh(d_int);
  transformed_data_real = asinh(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = asinh(d_int);
  transformed_param_real = asinh(d_real);
  transformed_param_real = asinh(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format atan.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = atan(d_int);
  transformed_data_real = atan(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = atan(d_int);
  transformed_param_real = atan(d_real);
  transformed_param_real = atan(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format atan2.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = atan2(d_real, r_real);
  transformed_data_real = atan2(d_int, r_real);
  transformed_data_real = atan2(d_real, d_int);
  transformed_data_real = atan2(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = atan2(d_real, r_real);
  transformed_param_real = atan2(d_int, r_real);
  transformed_param_real = atan2(d_real, d_int);
  transformed_param_real = atan2(r_int, d_int);
  transformed_param_real = atan2(r_int, p_real);
  transformed_param_real = atan2(r_real, p_real);
  transformed_param_real = atan2(p_real, p_real);
  transformed_param_real = atan2(p_real, r_int);
  transformed_param_real = atan2(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format atanh.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = atanh(d_int);
  transformed_data_real = atanh(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = atanh(d_int);
  transformed_param_real = atanh(d_real);
  transformed_param_real = atanh(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format bessel_first_kind.stan
data {
  int d_int;
  int r_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = bessel_first_kind(d_int, r_int);
  transformed_data_real = bessel_first_kind(d_int, d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = bessel_first_kind(d_int, r_int);
  transformed_param_real = bessel_first_kind(d_int, d_real);
  transformed_param_real = bessel_first_kind(d_int, p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format bessel_second_kind.stan
data {
  int d_int;
  int r_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = bessel_second_kind(d_int, r_int);
  transformed_data_real = bessel_second_kind(d_int, d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = bessel_second_kind(d_int, r_int);
  transformed_param_real = bessel_second_kind(d_int, d_real);
  transformed_param_real = bessel_second_kind(d_int, p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format binary_log_loss.stan
data {
  int d_int;
  int r_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = binary_log_loss(d_int, r_int);
  transformed_data_real = binary_log_loss(d_int, d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = binary_log_loss(d_int, r_int);
  transformed_param_real = binary_log_loss(d_int, d_real);
  transformed_param_real = binary_log_loss(d_int, p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format binomial_coefficient_log.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = binomial_coefficient_log(d_real, r_real);
  transformed_data_real = binomial_coefficient_log(d_int, r_real);
  transformed_data_real = binomial_coefficient_log(d_real, d_int);
  transformed_data_real = binomial_coefficient_log(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = binomial_coefficient_log(d_real, r_real);
  transformed_param_real = binomial_coefficient_log(d_int, r_real);
  transformed_param_real = binomial_coefficient_log(d_real, d_int);
  transformed_param_real = binomial_coefficient_log(r_int, d_int);
  transformed_param_real = binomial_coefficient_log(r_int, p_real);
  transformed_param_real = binomial_coefficient_log(r_real, p_real);
  transformed_param_real = binomial_coefficient_log(p_real, p_real);
  transformed_param_real = binomial_coefficient_log(p_real, r_int);
  transformed_param_real = binomial_coefficient_log(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format cbrt.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = cbrt(d_int);
  transformed_data_real = cbrt(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = cbrt(d_int);
  transformed_param_real = cbrt(d_real);
  transformed_param_real = cbrt(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format ceil.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = ceil(d_int);
  transformed_data_real = ceil(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = ceil(d_int);
  transformed_param_real = ceil(d_real);
  transformed_param_real = ceil(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format choose.stan
data {
  int d_int;
  int r_int;
}
transformed data {
  int transformed_data_int;
  transformed_data_int = choose(r_int, d_int);
}
parameters {
  real y_p;
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format constants.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = pi();
  transformed_data_real = e();
  transformed_data_real = sqrt2();
  transformed_data_real = log2();
  transformed_data_real = log10();
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = pi();
  transformed_param_real = e();
  transformed_param_real = sqrt2();
  transformed_param_real = log2();
  transformed_param_real = log10();
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format cos.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = cos(d_int);
  transformed_data_real = cos(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = cos(d_int);
  transformed_param_real = cos(d_real);
  transformed_param_real = cos(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format cosh.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = cosh(d_int);
  transformed_data_real = cosh(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = cosh(d_int);
  transformed_param_real = cosh(d_real);
  transformed_param_real = cosh(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format digamma.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = digamma(d_int);
  transformed_data_real = digamma(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = digamma(d_int);
  transformed_param_real = digamma(d_real);
  transformed_param_real = digamma(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format erf.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = erf(d_int);
  transformed_data_real = erf(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = erf(d_int);
  transformed_param_real = erf(d_real);
  transformed_param_real = erf(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format erfc.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = erfc(d_int);
  transformed_data_real = erfc(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = erfc(d_int);
  transformed_param_real = erfc(d_real);
  transformed_param_real = erfc(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format exp.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = exp(d_int);
  transformed_data_real = exp(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = exp(d_int);
  transformed_param_real = exp(d_real);
  transformed_param_real = exp(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format exp2.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = exp2(d_int);
  transformed_data_real = exp2(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = exp2(d_int);
  transformed_param_real = exp2(d_real);
  transformed_param_real = exp2(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format expm1.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = expm1(d_int);
  transformed_data_real = expm1(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = expm1(d_int);
  transformed_param_real = expm1(d_real);
  transformed_param_real = expm1(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format fabs.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = fabs(d_int);
  transformed_data_real = fabs(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = fabs(d_int);
  transformed_param_real = fabs(d_real);
  transformed_param_real = fabs(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format falling_factorial.stan
data {
  int d_int;
  int r_int;
  real d_real;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = falling_factorial(d_real, d_int);
  transformed_data_real = falling_factorial(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = falling_factorial(d_real, d_int);
  transformed_param_real = falling_factorial(r_int, d_int);
  transformed_param_real = falling_factorial(p_real, d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format fdim.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = fdim(d_real, r_real);
  transformed_data_real = fdim(d_int, r_real);
  transformed_data_real = fdim(d_real, d_int);
  transformed_data_real = fdim(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = fdim(d_real, r_real);
  transformed_param_real = fdim(d_int, r_real);
  transformed_param_real = fdim(d_real, d_int);
  transformed_param_real = fdim(r_int, d_int);
  transformed_param_real = fdim(r_int, p_real);
  transformed_param_real = fdim(r_real, p_real);
  transformed_param_real = fdim(p_real, p_real);
  transformed_param_real = fdim(p_real, r_int);
  transformed_param_real = fdim(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format floor.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = floor(d_int);
  transformed_data_real = floor(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = floor(d_int);
  transformed_param_real = floor(d_real);
  transformed_param_real = floor(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format fma.stan
data {
  int d_int;
  int e_int;
  int f_int;
  real d_real;
  real e_real;
  real f_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = fma(d_int, e_int, f_int);
  transformed_data_real = fma(d_real, d_int, e_int);
  transformed_data_real = fma(d_real, e_real, e_int);
  transformed_data_real = fma(d_real, d_int, e_real);
  transformed_data_real = fma(d_real, e_real, f_real);
  transformed_data_real = fma(d_int, d_real, e_int);
  transformed_data_real = fma(d_int, d_real, e_real);
  transformed_data_real = fma(d_int, e_int, d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = fma(d_int, e_int, f_int);
  transformed_param_real = fma(d_real, d_int, e_int);
  transformed_param_real = fma(d_real, e_real, e_int);
  transformed_param_real = fma(d_real, d_int, e_real);
  transformed_param_real = fma(d_real, e_real, f_real);
  transformed_param_real = fma(d_int, d_real, e_int);
  transformed_param_real = fma(d_int, d_real, e_real);
  transformed_param_real = fma(d_int, e_int, d_real);
  transformed_param_real = fma(p_real, p_real, p_real);
  transformed_param_real = fma(p_real, p_real, d_real);
  transformed_param_real = fma(p_real, p_real, d_int);
  transformed_param_real = fma(p_real, d_real, p_real);
  transformed_param_real = fma(p_real, e_real, p_real);
  transformed_param_real = fma(p_real, e_real, d_int);
  transformed_param_real = fma(p_real, d_int, p_real);
  transformed_param_real = fma(p_real, d_int, e_real);
  transformed_param_real = fma(p_real, d_int, e_int);
  transformed_param_real = fma(d_real, p_real, p_real);
  transformed_param_real = fma(d_real, p_real, d_real);
  transformed_param_real = fma(d_real, p_real, d_int);
  transformed_param_real = fma(d_real, e_real, p_real);
  transformed_param_real = fma(d_real, d_int, p_real);
  transformed_param_real = fma(d_real, e_real, p_real);
  transformed_param_real = fma(d_int, p_real, p_real);
  transformed_param_real = fma(d_int, p_real, d_real);
  transformed_param_real = fma(d_int, p_real, e_int);
  transformed_param_real = fma(d_int, d_real, p_real);
  transformed_param_real = fma(d_int, e_int, p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format fmax.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = fmax(d_real, r_real);
  transformed_data_real = fmax(d_int, r_real);
  transformed_data_real = fmax(d_real, d_int);
  transformed_data_real = fmax(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = fmax(d_real, r_real);
  transformed_param_real = fmax(d_int, r_real);
  transformed_param_real = fmax(d_real, d_int);
  transformed_param_real = fmax(r_int, d_int);
  transformed_param_real = fmax(r_int, p_real);
  transformed_param_real = fmax(r_real, p_real);
  transformed_param_real = fmax(p_real, p_real);
  transformed_param_real = fmax(p_real, r_int);
  transformed_param_real = fmax(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format fmin.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = fmin(d_real, r_real);
  transformed_data_real = fmin(d_int, r_real);
  transformed_data_real = fmin(d_real, d_int);
  transformed_data_real = fmin(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = fmin(d_real, r_real);
  transformed_param_real = fmin(d_int, r_real);
  transformed_param_real = fmin(d_real, d_int);
  transformed_param_real = fmin(r_int, d_int);
  transformed_param_real = fmin(r_int, p_real);
  transformed_param_real = fmin(r_real, p_real);
  transformed_param_real = fmin(p_real, p_real);
  transformed_param_real = fmin(p_real, r_int);
  transformed_param_real = fmin(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format fmod.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = fmod(d_real, r_real);
  transformed_data_real = fmod(d_int, r_real);
  transformed_data_real = fmod(d_real, d_int);
  transformed_data_real = fmod(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = fmod(d_real, r_real);
  transformed_param_real = fmod(d_int, r_real);
  transformed_param_real = fmod(d_real, d_int);
  transformed_param_real = fmod(r_int, d_int);
  transformed_param_real = fmod(r_int, p_real);
  transformed_param_real = fmod(r_real, p_real);
  transformed_param_real = fmod(p_real, p_real);
  transformed_param_real = fmod(p_real, r_int);
  transformed_param_real = fmod(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format gamma_p.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = gamma_p(d_real, r_real);
  transformed_data_real = gamma_p(d_int, r_real);
  transformed_data_real = gamma_p(d_real, d_int);
  transformed_data_real = gamma_p(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = gamma_p(d_real, r_real);
  transformed_param_real = gamma_p(d_int, r_real);
  transformed_param_real = gamma_p(d_real, d_int);
  transformed_param_real = gamma_p(r_int, d_int);
  transformed_param_real = gamma_p(r_int, p_real);
  transformed_param_real = gamma_p(r_real, p_real);
  transformed_param_real = gamma_p(p_real, p_real);
  transformed_param_real = gamma_p(p_real, r_int);
  transformed_param_real = gamma_p(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format gamma_q.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = gamma_q(d_real, r_real);
  transformed_data_real = gamma_q(d_int, r_real);
  transformed_data_real = gamma_q(d_real, d_int);
  transformed_data_real = gamma_q(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = gamma_q(d_real, r_real);
  transformed_param_real = gamma_q(d_int, r_real);
  transformed_param_real = gamma_q(d_real, d_int);
  transformed_param_real = gamma_q(r_int, d_int);
  transformed_param_real = gamma_q(r_int, p_real);
  transformed_param_real = gamma_q(r_real, p_real);
  transformed_param_real = gamma_q(p_real, p_real);
  transformed_param_real = gamma_q(p_real, r_int);
  transformed_param_real = gamma_q(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format hmm_hidden_states_prob.stan
data {
  int N;
  int K;
  matrix[K, N] log_omega;
  matrix[K, K] Gamma;
  vector[K] rho;
}
transformed data {
  matrix[K, N] prob = hmm_hidden_state_prob(log_omega, Gamma, rho);
}
parameters {
  real y_p;
}
transformed parameters {
  matrix[K, N] log_omega_v;
  matrix[K, K] Gamma_v;
  vector[K] rho_v;
}
model {
  y_p ~ normal(0, 1);
}
generated quantities {
  matrix[K, N] prob_gen;
  prob_gen = hmm_hidden_state_prob(log_omega, Gamma, rho);
  prob_gen = hmm_hidden_state_prob(log_omega_v, Gamma, rho);
  prob_gen = hmm_hidden_state_prob(log_omega, Gamma_v, rho);
  prob_gen = hmm_hidden_state_prob(log_omega, Gamma, rho_v);
  prob_gen = hmm_hidden_state_prob(log_omega_v, Gamma_v, rho);
  prob_gen = hmm_hidden_state_prob(log_omega_v, Gamma, rho_v);
  prob_gen = hmm_hidden_state_prob(log_omega, Gamma_v, rho_v);
  prob_gen = hmm_hidden_state_prob(log_omega_v, Gamma_v, rho_v);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format hypot.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = hypot(d_real, r_real);
  transformed_data_real = hypot(d_int, r_real);
  transformed_data_real = hypot(d_real, d_int);
  transformed_data_real = hypot(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = hypot(d_real, r_real);
  transformed_param_real = hypot(d_int, r_real);
  transformed_param_real = hypot(d_real, d_int);
  transformed_param_real = hypot(r_int, d_int);
  transformed_param_real = hypot(r_int, p_real);
  transformed_param_real = hypot(r_real, p_real);
  transformed_param_real = hypot(p_real, p_real);
  transformed_param_real = hypot(p_real, r_int);
  transformed_param_real = hypot(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format if_else.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = if_else(d_int, d_int, d_int);
  transformed_data_real = if_else(d_int, d_int, d_real);
  transformed_data_real = if_else(d_int, d_real, d_real);
  transformed_data_real = if_else(d_int, d_real, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = if_else(d_int, d_int, d_int);
  ;
  transformed_param_real = if_else(d_int, d_int, d_real);
  transformed_param_real = if_else(d_int, d_real, d_real);
  transformed_param_real = if_else(d_int, d_real, d_int);
  transformed_param_real = if_else(d_int, d_int, p_real);
  transformed_param_real = if_else(d_int, p_real, d_int);
  transformed_param_real = if_else(d_int, d_real, p_real);
  transformed_param_real = if_else(d_int, p_real, d_real);
  transformed_param_real = if_else(d_int, p_real, p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inc_beta.stan
transformed data {
  real a;
  a = inc_beta(1, 1, 1);
  a = inc_beta(1, 1, 2.7);
  a = inc_beta(1, 2.7, 1);
  a = inc_beta(1, 2.7, 2.7);
  a = inc_beta(2.7, 1, 1);
  a = inc_beta(2.7, 1, 2.7);
  a = inc_beta(2.7, 2.7, 1);
  a = inc_beta(2.7, 2.7, 2.7);
}
parameters {
  real b;
}
transformed parameters {
  real c;
  c = inc_beta(b, b, b);
  c = inc_beta(b, b, 2.7);
  c = inc_beta(b, 2.7, b);
  c = inc_beta(b, 2.7, 2.7);
  c = inc_beta(2.7, b, b);
  c = inc_beta(2.7, b, 2.7);
  c = inc_beta(2.7, 2.7, b);
}
model {
  b ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format int_step.stan
data {
  int d_int;
  matrix[d_int, d_int] d_matrix;
  vector[d_int] d_vector;
  row_vector[d_int] d_row_vector;
}
transformed data {
  int transformed_data_int;
  transformed_data_int = int_step(d_int);
}
parameters {
  matrix[d_int, d_int] p_matrix;
  vector[d_int] p_vector;
  row_vector[d_int] p_row_vector;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = int_step(rows(d_vector));
  transformed_param_real = int_step(rows(p_vector));
  transformed_param_real = int_step(rows(d_row_vector));
  transformed_param_real = int_step(rows(p_row_vector));
  transformed_param_real = int_step(rows(d_matrix));
  transformed_param_real = int_step(rows(p_matrix));
  transformed_param_real = int_step(cols(d_vector));
  transformed_param_real = int_step(cols(p_vector));
  transformed_param_real = int_step(cols(d_row_vector));
  transformed_param_real = int_step(cols(p_row_vector));
  transformed_param_real = int_step(cols(d_matrix));
  transformed_param_real = int_step(cols(p_matrix));
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format integrate_1d.stan
functions {
  real integrand(real x, real xc, real[] theta, real[] x_r, int[] x_i) {
    return 0.0;
  }
}
transformed data {
  real x_r[0];
  int x_i[0];
}
parameters {
  real x[1];
}
model {
  real y = integrate_1d(integrand, 0, 1, x, x_r, x_i);
  real z = integrate_1d(integrand, 0, 1, x, x_r, x_i, 1e-8);
  x ~ normal(y + z, 1.0);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inv.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = inv(d_int);
  transformed_data_real = inv(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = inv(d_int);
  transformed_param_real = inv(d_real);
  transformed_param_real = inv(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inv_cloglog.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = inv_cloglog(d_int);
  transformed_data_real = inv_cloglog(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = inv_cloglog(d_int);
  transformed_param_real = inv_cloglog(d_real);
  transformed_param_real = inv_cloglog(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inv_logit.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = inv_logit(d_int);
  transformed_data_real = inv_logit(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = inv_logit(d_int);
  transformed_param_real = inv_logit(d_real);
  transformed_param_real = inv_logit(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inv_phi.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = inv_Phi(d_int);
  transformed_data_real = inv_Phi(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = inv_Phi(d_int);
  transformed_param_real = inv_Phi(d_real);
  transformed_param_real = inv_Phi(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inv_sqrt.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = inv_sqrt(d_int);
  transformed_data_real = inv_sqrt(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = inv_sqrt(d_int);
  transformed_param_real = inv_sqrt(d_real);
  transformed_param_real = inv_sqrt(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format inv_square.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = inv_square(d_int);
  transformed_data_real = inv_square(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = inv_square(d_int);
  transformed_param_real = inv_square(d_real);
  transformed_param_real = inv_square(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format is_inf.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = if_else(is_inf(d_real), d_int, d_int);
  transformed_data_real = if_else(is_inf(d_real), d_int, d_real);
  transformed_data_real = if_else(is_inf(d_real), d_real, d_real);
  transformed_data_real = if_else(is_inf(d_real), d_real, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = if_else(is_inf(d_real), d_int, d_int);
  ;
  transformed_param_real = if_else(is_inf(d_real), d_int, d_real);
  transformed_param_real = if_else(is_inf(d_real), d_real, d_real);
  transformed_param_real = if_else(is_inf(d_real), d_real, d_int);
  transformed_param_real = if_else(is_inf(d_real), d_int, p_real);
  transformed_param_real = if_else(is_inf(d_real), p_real, d_int);
  transformed_param_real = if_else(is_inf(d_real), d_real, p_real);
  transformed_param_real = if_else(is_inf(d_real), p_real, d_real);
  transformed_param_real = if_else(is_inf(d_real), p_real, p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format is_nan.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = if_else(is_nan(d_real), d_int, d_int);
  transformed_data_real = if_else(is_nan(d_real), d_int, d_real);
  transformed_data_real = if_else(is_nan(d_real), d_real, d_real);
  transformed_data_real = if_else(is_nan(d_real), d_real, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = if_else(is_nan(d_real), d_int, d_int);
  ;
  transformed_param_real = if_else(is_nan(d_real), d_int, d_real);
  transformed_param_real = if_else(is_nan(d_real), d_real, d_real);
  transformed_param_real = if_else(is_nan(d_real), d_real, d_int);
  transformed_param_real = if_else(is_nan(d_real), d_int, p_real);
  transformed_param_real = if_else(is_nan(d_real), p_real, d_int);
  transformed_param_real = if_else(is_nan(d_real), d_real, p_real);
  transformed_param_real = if_else(is_nan(d_real), p_real, d_real);
  transformed_param_real = if_else(is_nan(d_real), p_real, p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format lambert.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = lambert_w0(d_int);
  transformed_data_real = lambert_w0(d_real);
  transformed_data_real = lambert_wm1(d_int);
  transformed_data_real = lambert_wm1(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = lambert_w0(d_int);
  transformed_param_real = lambert_w0(d_real);
  transformed_param_real = lambert_w0(p_real);
  transformed_param_real = lambert_wm1(d_int);
  transformed_param_real = lambert_wm1(d_real);
  transformed_param_real = lambert_wm1(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format lbeta.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = lbeta(d_real, r_real);
  transformed_data_real = lbeta(d_int, r_real);
  transformed_data_real = lbeta(d_real, d_int);
  transformed_data_real = lbeta(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = lbeta(d_real, r_real);
  transformed_param_real = lbeta(d_int, r_real);
  transformed_param_real = lbeta(d_real, d_int);
  transformed_param_real = lbeta(r_int, d_int);
  transformed_param_real = lbeta(r_int, p_real);
  transformed_param_real = lbeta(r_real, p_real);
  transformed_param_real = lbeta(p_real, p_real);
  transformed_param_real = lbeta(p_real, r_int);
  transformed_param_real = lbeta(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format lgamma.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = lgamma(d_int);
  transformed_data_real = lgamma(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = lgamma(d_int);
  transformed_param_real = lgamma(d_real);
  transformed_param_real = lgamma(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format lmgamma.stan
data {
  int d_int;
  int r_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = lmgamma(d_int, r_int);
  transformed_data_real = lmgamma(d_int, d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = lmgamma(d_int, r_int);
  transformed_param_real = lmgamma(d_int, d_real);
  transformed_param_real = lmgamma(d_int, p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = log(d_int);
  transformed_data_real = log(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log(d_int);
  transformed_param_real = log(d_real);
  transformed_param_real = log(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log10.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = log10(d_int);
  transformed_data_real = log10(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log10(d_int);
  transformed_param_real = log10(d_real);
  transformed_param_real = log10(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log1m.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = log1m(d_int);
  transformed_data_real = log1m(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log1m(d_int);
  transformed_param_real = log1m(d_real);
  transformed_param_real = log1m(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log1m_exp.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = log1m_exp(d_int);
  transformed_data_real = log1m_exp(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log1m_exp(d_int);
  transformed_param_real = log1m_exp(d_real);
  transformed_param_real = log1m_exp(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log1m_inv_logit.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = log1m_inv_logit(d_int);
  transformed_data_real = log1m_inv_logit(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log1m_inv_logit(d_int);
  transformed_param_real = log1m_inv_logit(d_real);
  transformed_param_real = log1m_inv_logit(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log1p.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = log1p(d_int);
  transformed_data_real = log1p(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log1p(d_int);
  transformed_param_real = log1p(d_real);
  transformed_param_real = log1p(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log1p_exp.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = log1p_exp(d_int);
  transformed_data_real = log1p_exp(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log1p_exp(d_int);
  transformed_param_real = log1p_exp(d_real);
  transformed_param_real = log1p_exp(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log2.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = log2(d_int);
  transformed_data_real = log2(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log2(d_int);
  transformed_param_real = log2(d_real);
  transformed_param_real = log2(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log_diff_exp.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = log_diff_exp(d_real, r_real);
  transformed_data_real = log_diff_exp(d_int, r_real);
  transformed_data_real = log_diff_exp(d_real, d_int);
  transformed_data_real = log_diff_exp(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log_diff_exp(d_real, r_real);
  transformed_param_real = log_diff_exp(d_int, r_real);
  transformed_param_real = log_diff_exp(d_real, d_int);
  transformed_param_real = log_diff_exp(r_int, d_int);
  transformed_param_real = log_diff_exp(r_int, p_real);
  transformed_param_real = log_diff_exp(r_real, p_real);
  transformed_param_real = log_diff_exp(p_real, p_real);
  transformed_param_real = log_diff_exp(p_real, r_int);
  transformed_param_real = log_diff_exp(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log_falling_factorial.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = log_falling_factorial(d_real, r_real);
  transformed_data_real = log_falling_factorial(d_int, r_real);
  transformed_data_real = log_falling_factorial(d_real, d_int);
  transformed_data_real = log_falling_factorial(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log_falling_factorial(d_real, r_real);
  transformed_param_real = log_falling_factorial(d_int, r_real);
  transformed_param_real = log_falling_factorial(d_real, d_int);
  transformed_param_real = log_falling_factorial(r_int, d_int);
  transformed_param_real = log_falling_factorial(r_int, p_real);
  transformed_param_real = log_falling_factorial(r_real, p_real);
  transformed_param_real = log_falling_factorial(p_real, p_real);
  transformed_param_real = log_falling_factorial(p_real, r_int);
  transformed_param_real = log_falling_factorial(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log_inv_logit.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = log_inv_logit(d_int);
  transformed_data_real = log_inv_logit(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log_inv_logit(d_int);
  transformed_param_real = log_inv_logit(d_real);
  transformed_param_real = log_inv_logit(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log_mix.stan
data {
  int N;
  int M;
  real d_real_theta;
  real d_real_theta_arr[N];
  vector[N] d_vec_theta;
  row_vector[N] d_rowvec_theta;
  real d_real_lam_1;
  real d_real_lam_2;
  real d_real_lam_arr[N];
  vector[N] d_vec_lam;
  row_vector[N] d_rowvec_lam;
  vector[N] d_vec_lam_arr[M];
  row_vector[N] d_rowvec_lam_arr[M];
  real y_p;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = log_mix(d_real_theta, d_real_lam_1, d_real_lam_1);
  transformed_data_real = log_mix(d_real_theta_arr, d_real_lam_arr);
  transformed_data_real = log_mix(d_real_theta_arr, d_vec_lam);
  transformed_data_real = log_mix(d_real_theta_arr, d_rowvec_lam);
  transformed_data_real = log_mix(d_real_theta_arr, d_vec_lam_arr);
  transformed_data_real = log_mix(d_real_theta_arr, d_rowvec_lam_arr);
  transformed_data_real = log_mix(d_vec_theta, d_real_lam_arr);
  transformed_data_real = log_mix(d_vec_theta, d_vec_lam);
  transformed_data_real = log_mix(d_vec_theta, d_rowvec_lam);
  transformed_data_real = log_mix(d_vec_theta, d_vec_lam_arr);
  transformed_data_real = log_mix(d_vec_theta, d_rowvec_lam_arr);
  transformed_data_real = log_mix(d_rowvec_theta, d_real_lam_arr);
  transformed_data_real = log_mix(d_rowvec_theta, d_vec_lam);
  transformed_data_real = log_mix(d_rowvec_theta, d_rowvec_lam);
  transformed_data_real = log_mix(d_rowvec_theta, d_vec_lam_arr);
  transformed_data_real = log_mix(d_rowvec_theta, d_rowvec_lam_arr);
}
parameters {
  real p_real_theta;
  real p_real_theta_arr[N];
  vector[N] p_vec_theta;
  row_vector[N] p_rowvec_theta;
  real p_real_lam_1;
  real p_real_lam_2;
  real p_real_lam_arr[N];
  vector[N] p_vec_lam;
  row_vector[N] p_rowvec_lam;
  vector[N] p_vec_lam_arr[M];
  row_vector[N] p_rowvec_lam_arr[M];
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log_mix(p_real_theta, p_real_lam_1, d_real_lam_1);
  transformed_param_real = log_mix(p_real_theta, d_real_lam_1, p_real_lam_1);
  transformed_param_real = log_mix(p_real_theta, d_real_lam_1, d_real_lam_1);
  transformed_param_real = log_mix(d_real_theta, p_real_lam_1, p_real_lam_1);
  transformed_param_real = log_mix(d_real_theta, p_real_lam_1, d_real_lam_1);
  transformed_param_real = log_mix(d_real_theta, d_real_lam_1, p_real_lam_1);
  transformed_param_real = log_mix(p_real_theta, p_real_lam_1, p_real_lam_1);
  transformed_param_real = log_mix(d_real_theta_arr, p_real_lam_arr);
  transformed_param_real = log_mix(d_real_theta_arr, p_vec_lam);
  transformed_param_real = log_mix(d_real_theta_arr, p_rowvec_lam);
  transformed_param_real = log_mix(d_real_theta_arr, p_vec_lam_arr);
  transformed_param_real = log_mix(d_real_theta_arr, p_rowvec_lam_arr);
  transformed_param_real = log_mix(p_real_theta_arr, d_real_lam_arr);
  transformed_param_real = log_mix(p_real_theta_arr, d_vec_lam);
  transformed_param_real = log_mix(p_real_theta_arr, d_rowvec_lam);
  transformed_param_real = log_mix(p_real_theta_arr, d_vec_lam_arr);
  transformed_param_real = log_mix(p_real_theta_arr, d_rowvec_lam_arr);
  transformed_param_real = log_mix(p_real_theta_arr, p_real_lam_arr);
  transformed_param_real = log_mix(p_real_theta_arr, p_vec_lam);
  transformed_param_real = log_mix(p_real_theta_arr, p_rowvec_lam);
  transformed_param_real = log_mix(p_real_theta_arr, p_vec_lam_arr);
  transformed_param_real = log_mix(p_real_theta_arr, p_rowvec_lam_arr);
  transformed_param_real = log_mix(d_vec_theta, p_real_lam_arr);
  transformed_param_real = log_mix(d_vec_theta, p_vec_lam);
  transformed_param_real = log_mix(d_vec_theta, p_rowvec_lam);
  transformed_param_real = log_mix(d_vec_theta, p_vec_lam_arr);
  transformed_param_real = log_mix(d_vec_theta, p_rowvec_lam_arr);
  transformed_param_real = log_mix(p_vec_theta, d_real_lam_arr);
  transformed_param_real = log_mix(p_vec_theta, d_vec_lam);
  transformed_param_real = log_mix(p_vec_theta, d_rowvec_lam);
  transformed_param_real = log_mix(p_vec_theta, d_vec_lam_arr);
  transformed_param_real = log_mix(p_vec_theta, d_rowvec_lam_arr);
  transformed_param_real = log_mix(p_vec_theta, p_real_lam_arr);
  transformed_param_real = log_mix(p_vec_theta, p_vec_lam);
  transformed_param_real = log_mix(p_vec_theta, p_rowvec_lam);
  transformed_param_real = log_mix(p_vec_theta, p_vec_lam_arr);
  transformed_param_real = log_mix(p_vec_theta, p_rowvec_lam_arr);
  transformed_param_real = log_mix(d_rowvec_theta, p_real_lam_arr);
  transformed_param_real = log_mix(d_rowvec_theta, p_vec_lam);
  transformed_param_real = log_mix(d_rowvec_theta, p_rowvec_lam);
  transformed_param_real = log_mix(d_rowvec_theta, p_vec_lam_arr);
  transformed_param_real = log_mix(d_rowvec_theta, p_rowvec_lam_arr);
  transformed_param_real = log_mix(p_rowvec_theta, d_real_lam_arr);
  transformed_param_real = log_mix(p_rowvec_theta, d_vec_lam);
  transformed_param_real = log_mix(p_rowvec_theta, d_rowvec_lam);
  transformed_param_real = log_mix(p_rowvec_theta, d_vec_lam_arr);
  transformed_param_real = log_mix(p_rowvec_theta, d_rowvec_lam_arr);
  transformed_param_real = log_mix(p_rowvec_theta, p_real_lam_arr);
  transformed_param_real = log_mix(p_rowvec_theta, p_vec_lam);
  transformed_param_real = log_mix(p_rowvec_theta, p_rowvec_lam);
  transformed_param_real = log_mix(p_rowvec_theta, p_vec_lam_arr);
  transformed_param_real = log_mix(p_rowvec_theta, p_rowvec_lam_arr);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log_rising_factorial.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = log_rising_factorial(d_real, r_real);
  transformed_data_real = log_rising_factorial(d_int, r_real);
  transformed_data_real = log_rising_factorial(d_real, d_int);
  transformed_data_real = log_rising_factorial(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log_rising_factorial(d_real, r_real);
  transformed_param_real = log_rising_factorial(d_int, r_real);
  transformed_param_real = log_rising_factorial(d_real, d_int);
  transformed_param_real = log_rising_factorial(r_int, d_int);
  transformed_param_real = log_rising_factorial(r_int, p_real);
  transformed_param_real = log_rising_factorial(r_real, p_real);
  transformed_param_real = log_rising_factorial(p_real, p_real);
  transformed_param_real = log_rising_factorial(p_real, r_int);
  transformed_param_real = log_rising_factorial(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format log_sum_exp.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = log_sum_exp(d_real, r_real);
  transformed_data_real = log_sum_exp(d_int, r_real);
  transformed_data_real = log_sum_exp(d_real, d_int);
  transformed_data_real = log_sum_exp(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = log_sum_exp(d_real, r_real);
  transformed_param_real = log_sum_exp(d_int, r_real);
  transformed_param_real = log_sum_exp(d_real, d_int);
  transformed_param_real = log_sum_exp(r_int, d_int);
  transformed_param_real = log_sum_exp(r_int, p_real);
  transformed_param_real = log_sum_exp(r_real, p_real);
  transformed_param_real = log_sum_exp(p_real, p_real);
  transformed_param_real = log_sum_exp(p_real, r_int);
  transformed_param_real = log_sum_exp(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format logit.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = logit(d_int);
  transformed_data_real = logit(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = logit(d_int);
  transformed_param_real = logit(d_real);
  transformed_param_real = logit(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format max.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_int = max(d_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = max(d_int, d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format min.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_int = min(d_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = min(d_int, d_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format modified_bessel_first_kind.stan
data {
  int d_int;
  int r_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = modified_bessel_first_kind(d_int, r_int);
  transformed_data_real = modified_bessel_first_kind(d_int, d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = modified_bessel_first_kind(d_int, r_int);
  transformed_param_real = modified_bessel_first_kind(d_int, d_real);
  transformed_param_real = modified_bessel_first_kind(d_int, p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format modified_bessel_second_kind.stan
data {
  int d_int;
  int r_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = modified_bessel_second_kind(d_int, r_int);
  transformed_data_real = modified_bessel_second_kind(d_int, d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = modified_bessel_second_kind(d_int, r_int);
  transformed_param_real = modified_bessel_second_kind(d_int, d_real);
  transformed_param_real = modified_bessel_second_kind(d_int, p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format multiply_log.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = multiply_log(d_real, r_real);
  transformed_data_real = multiply_log(d_int, r_real);
  transformed_data_real = multiply_log(d_real, d_int);
  transformed_data_real = multiply_log(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = multiply_log(d_real, r_real);
  transformed_param_real = multiply_log(d_int, r_real);
  transformed_param_real = multiply_log(d_real, d_int);
  transformed_param_real = multiply_log(r_int, d_int);
  transformed_param_real = multiply_log(r_int, p_real);
  transformed_param_real = multiply_log(r_real, p_real);
  transformed_param_real = multiply_log(p_real, p_real);
  transformed_param_real = multiply_log(p_real, r_int);
  transformed_param_real = multiply_log(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format operators_int.stan
data {
  int d_int;
}
transformed data {
  int transformed_data_int;
  transformed_data_int = d_int + d_int;
  transformed_data_int = d_int - d_int;
  transformed_data_int = d_int * d_int;
  transformed_data_int = d_int / d_int;
  transformed_data_int = d_int %/% d_int;
  transformed_data_int = d_int % d_int;
  transformed_data_int = -d_int;
  transformed_data_int = +d_int;
}
parameters {
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = d_int + d_int;
  transformed_param_real = d_int - d_int;
  transformed_param_real = d_int * d_int;
  transformed_param_real = d_int / d_int;
  transformed_param_real = d_int %/% d_int;
  transformed_param_real = d_int % d_int;
  transformed_param_real = -d_int;
  transformed_param_real = +d_int;
}
model {
  y_p ~ normal(0, 1);
}

Info: Found int division at 'operators_int.stan', line 10, column 25 to column 30:
  d_int / d_int
Values will be rounded towards zero. If rounding is not desired you can write
the division as
  d_int * 1.0 / d_int
If rounding is intended please use the integer division operator %/%.
Info: Found int division at 'operators_int.stan', line 26, column 27 to column 32:
  d_int / d_int
Values will be rounded towards zero. If rounding is not desired you can write
the division as
  d_int * 1.0 / d_int
If rounding is intended please use the integer division operator %/%.
  $ ../../../../../../../install/default/bin/stanc --auto-format operators_real.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = d_real + d_real;
  transformed_data_real = d_real + d_int;
  transformed_data_real = d_int + d_real;
  transformed_data_real = d_int + d_int;
  transformed_data_real = d_real - d_real;
  transformed_data_real = d_int - d_real;
  transformed_data_real = d_real - d_int;
  transformed_data_real = d_int - d_int;
  transformed_data_real = d_real * d_real;
  transformed_data_real = d_int * d_real;
  transformed_data_real = d_real * d_int;
  transformed_data_real = d_int * d_int;
  transformed_data_real = d_real / d_real;
  transformed_data_real = d_int / d_real;
  transformed_data_real = d_real / d_int;
  transformed_data_real = d_int / d_int;
  transformed_data_real = d_int %/% d_int;
  transformed_data_real = d_int % d_int;
  transformed_data_real = -d_real;
  transformed_data_real = -d_int;
  transformed_data_real = +d_real;
  transformed_data_real = +d_int;
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = d_real + d_real;
  transformed_param_real = d_real + d_int;
  transformed_param_real = d_int + d_real;
  transformed_param_real = d_int + d_int;
  transformed_param_real = p_real + d_real;
  transformed_param_real = p_real + d_int;
  transformed_param_real = d_real + p_real;
  transformed_param_real = d_int + p_real;
  transformed_param_real = p_real + p_real;
  transformed_param_real = d_real - d_real;
  transformed_param_real = d_real - d_int;
  transformed_param_real = d_int - d_real;
  transformed_param_real = d_int - d_int;
  transformed_param_real = p_real - d_real;
  transformed_param_real = p_real - d_int;
  transformed_param_real = d_real - p_real;
  transformed_param_real = d_int - p_real;
  transformed_param_real = p_real - p_real;
  transformed_param_real = d_real * d_real;
  transformed_param_real = d_real * d_int;
  transformed_param_real = d_int * d_real;
  transformed_param_real = d_int * d_int;
  transformed_param_real = p_real * d_real;
  transformed_param_real = p_real * d_int;
  transformed_param_real = d_real * p_real;
  transformed_param_real = d_int * p_real;
  transformed_param_real = p_real * p_real;
  transformed_param_real = d_real / d_real;
  transformed_param_real = d_real / d_int;
  transformed_param_real = d_int / d_real;
  transformed_param_real = d_int / d_int;
  transformed_param_real = d_int %/% d_int;
  transformed_param_real = d_int % d_int;
  transformed_param_real = p_real / d_real;
  transformed_param_real = p_real / d_int;
  transformed_param_real = d_real / p_real;
  transformed_param_real = d_int / p_real;
  transformed_param_real = p_real / p_real;
  transformed_param_real = -d_int;
  transformed_param_real = -d_real;
  transformed_param_real = -p_real;
  transformed_param_real = +d_int;
  transformed_param_real = +d_real;
  transformed_param_real = +p_real;
}
model {
  y_p ~ normal(0, 1);
}

Info: Found int division at 'operators_real.stan', line 23, column 26 to column 31:
  d_int / d_int
Values will be rounded towards zero. If rounding is not desired you can write
the division as
  d_int * 1.0 / d_int
If rounding is intended please use the integer division operator %/%.
Info: Found int division at 'operators_real.stan', line 69, column 27 to column 32:
  d_int / d_int
Values will be rounded towards zero. If rounding is not desired you can write
the division as
  d_int * 1.0 / d_int
If rounding is intended please use the integer division operator %/%.
  $ ../../../../../../../install/default/bin/stanc --auto-format owens_t.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = owens_t(d_real, r_real);
  transformed_data_real = owens_t(d_int, r_real);
  transformed_data_real = owens_t(d_real, d_int);
  transformed_data_real = owens_t(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = owens_t(d_real, r_real);
  transformed_param_real = owens_t(d_int, r_real);
  transformed_param_real = owens_t(d_real, d_int);
  transformed_param_real = owens_t(r_int, d_int);
  transformed_param_real = owens_t(r_int, p_real);
  transformed_param_real = owens_t(r_real, p_real);
  transformed_param_real = owens_t(p_real, p_real);
  transformed_param_real = owens_t(p_real, r_int);
  transformed_param_real = owens_t(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format phi.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = Phi(d_int);
  transformed_data_real = Phi(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = Phi(d_int);
  transformed_param_real = Phi(d_real);
  transformed_param_real = Phi(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format phi_approx.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = Phi_approx(d_int);
  transformed_data_real = Phi_approx(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = Phi_approx(d_int);
  transformed_param_real = Phi_approx(d_real);
  transformed_param_real = Phi_approx(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format pow.stan
data {
  int d_int;
  int r_int;
  real d_real;
  real r_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = pow(d_real, r_real);
  transformed_data_real = pow(d_int, r_real);
  transformed_data_real = pow(d_real, d_int);
  transformed_data_real = pow(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = pow(d_real, r_real);
  transformed_param_real = pow(d_int, r_real);
  transformed_param_real = pow(d_real, d_int);
  transformed_param_real = pow(r_int, d_int);
  transformed_param_real = pow(r_int, p_real);
  transformed_param_real = pow(r_real, p_real);
  transformed_param_real = pow(p_real, p_real);
  transformed_param_real = pow(p_real, r_int);
  transformed_param_real = pow(p_real, r_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format rising_factorial.stan
data {
  int d_int;
  int r_int;
  real d_real;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = rising_factorial(d_real, d_int);
  transformed_data_real = rising_factorial(r_int, d_int);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = rising_factorial(d_real, d_int);
  transformed_param_real = rising_factorial(r_int, d_int);
  transformed_param_real = rising_factorial(p_real, r_int);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format round.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = round(d_int);
  transformed_data_real = round(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = round(d_int);
  transformed_param_real = round(d_real);
  transformed_param_real = round(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format sin.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = sin(d_int);
  transformed_data_real = sin(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = sin(d_int);
  transformed_param_real = sin(d_real);
  transformed_param_real = sin(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format sinh.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = sinh(d_int);
  transformed_data_real = sinh(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = sinh(d_int);
  transformed_param_real = sinh(d_real);
  transformed_param_real = sinh(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format special_values.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  real transformed_data_real;
  transformed_data_real = not_a_number();
  transformed_data_real = positive_infinity();
  transformed_data_real = negative_infinity();
  transformed_data_real = machine_precision();
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = not_a_number();
  transformed_param_real = positive_infinity();
  transformed_param_real = negative_infinity();
  transformed_param_real = machine_precision();
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format sqrt.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = sqrt(d_int);
  transformed_data_real = sqrt(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = sqrt(d_int);
  transformed_param_real = sqrt(d_real);
  transformed_param_real = sqrt(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format square.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = square(d_int);
  transformed_data_real = square(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = square(d_int);
  transformed_param_real = square(d_real);
  transformed_param_real = square(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format step.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = step(d_int);
  transformed_data_real = step(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = step(d_int);
  transformed_param_real = step(d_real);
  transformed_param_real = step(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format tan.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = tan(d_int);
  transformed_data_real = tan(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = tan(d_int);
  transformed_param_real = tan(d_real);
  transformed_param_real = tan(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format tanh.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = tanh(d_int);
  transformed_data_real = tanh(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = tanh(d_int);
  transformed_param_real = tanh(d_real);
  transformed_param_real = tanh(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format tgamma.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = tgamma(d_int);
  transformed_data_real = tgamma(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = tgamma(d_int);
  transformed_param_real = tgamma(d_real);
  transformed_param_real = tgamma(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format trigamma.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = trigamma(d_int);
  transformed_data_real = trigamma(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = trigamma(d_int);
  transformed_param_real = trigamma(d_real);
  transformed_param_real = trigamma(p_real);
}
model {
  y_p ~ normal(0, 1);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format trunc.stan
data {
  int d_int;
  real d_real;
}
transformed data {
  int transformed_data_int;
  real transformed_data_real;
  transformed_data_real = trunc(d_int);
  transformed_data_real = trunc(d_real);
}
parameters {
  real p_real;
  real y_p;
}
transformed parameters {
  real transformed_param_real;
  transformed_param_real = trunc(d_int);
  transformed_param_real = trunc(d_real);
  transformed_param_real = trunc(p_real);
}
model {
  y_p ~ normal(0, 1);
}

