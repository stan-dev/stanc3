  $ ../../../../../../install/default/bin/stanc --auto_format mr_mnl.stan
data {
  int n_occasions;
  int marr[n_occasions, n_occasions + 1];
}
parameters {
  real<lower=0, upper=1> mean_s;
  real<lower=0, upper=1> mean_r;
}
transformed parameters {
  vector[n_occasions] s;
  vector[n_occasions] r;
  simplex[n_occasions + 1] pr[n_occasions];
  s = rep_vector(mean_s, n_occasions);
  r = rep_vector(mean_r, n_occasions);
  for (t in 1 : n_occasions) {
    pr[t, t] = (1 - s[t]) * r[t];
    for (j in (t + 1) : n_occasions) 
      pr[t, j] = prod(s[t : (j - 1)]) * (1 - s[j]) * r[j];
    for (j in 1 : (t - 1)) 
      pr[t, j] = 0;
  }
  for (t in 1 : n_occasions) 
    pr[t, n_occasions + 1] = 1 - sum(pr[t,  : n_occasions]);
}
model {
  for (t in 1 : n_occasions) 
    marr[t] ~ multinomial(pr[t]);
}

  $ ../../../../../../install/default/bin/stanc --auto_format mr_mnl_age.stan
data {
  int n_occasions;
  int marr_j[n_occasions, n_occasions + 1];
  int marr_a[n_occasions, n_occasions + 1];
}
parameters {
  real<lower=0, upper=1> mean_sj;
  real<lower=0, upper=1> mean_sa;
  real<lower=0, upper=1> mean_rj;
  real<lower=0, upper=1> mean_ra;
}
transformed parameters {
  vector[n_occasions] sj;
  vector[n_occasions] sa;
  vector[n_occasions] rj;
  vector[n_occasions] ra;
  simplex[n_occasions + 1] pr_a[n_occasions];
  simplex[n_occasions + 1] pr_j[n_occasions];
  for (t in 1 : n_occasions) {
    sj[t] = mean_sj;
    sa[t] = mean_sa;
    rj[t] = mean_rj;
    ra[t] = mean_ra;
  }
  for (t in 1 : n_occasions) {
    pr_j[t, t] = (1 - sj[t]) * rj[t];
    for (j in (t + 2) : n_occasions) 
      pr_j[t, j] = sj[t] * prod(segment(sa, t + 1, j - t - 1)) * (1 - sa[j])
                   * ra[j];
    for (j in 1 : (t - 1)) 
      pr_j[t, j] = 0;
  }
  for (t in 1 : (n_occasions - 1)) 
    pr_j[t, t + 1] = sj[t] * (1 - sa[t + 1]) * ra[t + 1];
  for (t in 1 : n_occasions) 
    pr_j[t, n_occasions + 1] = 1 - sum(pr_j[t,  : n_occasions]);
  for (t in 1 : n_occasions) {
    pr_a[t, t] = (1 - sa[t]) * ra[t];
    for (j in (t + 1) : n_occasions) 
      pr_a[t, j] = prod(sa[t : (j - 1)]) * (1 - sa[j]) * ra[j];
    for (j in 1 : (t - 1)) 
      pr_a[t, j] = 0;
  }
  for (t in 1 : n_occasions) 
    pr_a[t, n_occasions + 1] = 1 - sum(pr_a[t,  : n_occasions]);
}
model {
  for (t in 1 : n_occasions) {
    marr_j[t] ~ multinomial(pr_j[t]);
    marr_a[t] ~ multinomial(pr_a[t]);
  }
}

  $ ../../../../../../install/default/bin/stanc --auto_format mr_mnl_age3.stan
data {
  int n_age;
  int marr_j[n_age + 1];
  int marr_a[n_age + 1];
}
parameters {
  real<lower=0, upper=1> sjuv;
  real<lower=0, upper=1> ssub;
  real<lower=0, upper=1> sad;
  real<lower=0, upper=1> rjuv;
  real<lower=0, upper=1> rad;
}
transformed parameters {
  simplex[n_age + 1] pr_a;
  simplex[n_age + 1] pr_j;
  pr_j[1] = (1 - sjuv) * rjuv;
  pr_j[2] = sjuv * (1 - ssub) * rad;
  for (t in 3 : n_age) 
    pr_j[t] = sjuv * ssub * pow(sad, t - 3) * (1 - sad) * rad;
  pr_j[n_age + 1] = 1 - sum(pr_j[ : n_age]);
  for (t in 1 : n_age) 
    pr_a[t] = pow(sad, t - 1) * (1 - sad) * rad;
  pr_a[n_age + 1] = 1 - sum(pr_a[ : n_age]);
}
model {
  sjuv ~ beta(4.2, 2.8);
  marr_j ~ multinomial(pr_j);
  marr_a ~ multinomial(pr_a);
}

  $ ../../../../../../install/default/bin/stanc --auto_format mr_ss.stan
functions {
  int first_capture(int[] y_i) {
    for (k in 1 : size(y_i)) 
      if (y_i[k]) 
        return k;
    return 0;
  }
  int last_capture(int[] y_i) {
    for (k_rev in 0 : (size(y_i) - 1)) {
      int k = size(y_i) - k_rev;
      if (y_i[k]) 
        return k;
    }
    return 0;
  }
  real cell_prob(int n_occasions, row_vector s, row_vector r, int first,
                 int last) {
    vector[n_occasions] pr;
    pr[first] = (1 - s[first]) * r[first];
    for (j in (first + 1) : n_occasions - 1) 
      pr[j] = prod(s[first : (j - 1)]) * (1 - s[j]) * r[j];
    for (j in 1 : (first - 1)) 
      pr[j] = 0;
    for (t in 1 : n_occasions - 1) 
      pr[n_occasions] = 1 - sum(pr[ : (n_occasions - 1)]);
    return pr[last];
  }
}
data {
  int<lower=0> nind;
  int<lower=0> n_occasions;
  int<lower=0, upper=1> y[nind, n_occasions];
}
transformed data {
  int n_occ_minus_1 = n_occasions - 1;
  int<lower=0, upper=n_occasions> first[nind];
  int<lower=0, upper=n_occasions> last[nind];
  for (i in 1 : nind) 
    first[i] = first_capture(y[i]);
  for (i in 1 : nind) 
    last[i] = last_capture(y[i]);
}
parameters {
  real<lower=0, upper=1> mean_s;
  real<lower=0, upper=1> mean_r;
}
transformed parameters {
  matrix<lower=0, upper=1>[nind, n_occ_minus_1] s;
  matrix<lower=0, upper=1>[nind, n_occ_minus_1] r;
  for (i in 1 : nind) {
    for (t in 1 : (first[i] - 1)) {
      s[i, t] = 0;
      r[i, t] = 0;
    }
    for (t in first[i] : n_occ_minus_1) {
      s[i, t] = mean_s;
      r[i, t] = mean_r;
    }
  }
}
model {
  for (i in 1 : nind) {
    real pr;
    if (first[i] > 0) {
      if (last[i] > first[i]) 
        pr = cell_prob(n_occasions, s[i], r[i], first[i], last[i] - 1);
      else 
        pr = cell_prob(n_occasions, s[i], r[i], first[i], n_occasions);
      1 ~ bernoulli(pr);
    }
  }
}

