  $ ../../../../../../install/default/bin/stanc --auto_format js_ms.stan
functions {
  vector seq_cprob(vector gamma) {
    int N = rows(gamma);
    vector[N] log_cprob;
    real log_residual_prob = 0;
    for (n in 1 : N) {
      log_cprob[n] = log(gamma[n]) + log_residual_prob;
      log_residual_prob = log_residual_prob + log(1 - gamma[n]);
    }
    return exp(log_cprob);
  }
}
data {
  int<lower=0> M;
  int<lower=0> n_occasions;
  int<lower=1, upper=2> y[M, n_occasions];
}
transformed data {
  int n_occ_minus_1 = n_occasions - 1;
}
parameters {
  vector<lower=0, upper=1>[n_occ_minus_1] gamma;
  real<lower=0, upper=1> mean_phi;
  real<lower=0, upper=1> mean_p;
}
transformed parameters {
  vector<lower=0, upper=1>[n_occ_minus_1] phi;
  vector<lower=0, upper=1>[n_occ_minus_1] p;
  simplex[3] ps[3, M, n_occ_minus_1];
  simplex[2] po[3, M, n_occ_minus_1];
  for (t in 1 : n_occ_minus_1) {
    phi[t] = mean_phi;
    p[t] = mean_p;
  }
  for (i in 1 : M) {
    for (t in 1 : n_occ_minus_1) {
      ps[1, i, t, 1] = 1.0 - gamma[t];
      ps[1, i, t, 2] = gamma[t];
      ps[1, i, t, 3] = 0.0;
      ps[2, i, t, 1] = 0.0;
      ps[2, i, t, 2] = phi[t];
      ps[2, i, t, 3] = 1 - phi[t];
      ps[3, i, t, 1] = 0.0;
      ps[3, i, t, 2] = 0.0;
      ps[3, i, t, 3] = 1.0;
      po[1, i, t, 1] = 0.0;
      po[1, i, t, 2] = 1.0;
      po[2, i, t, 1] = p[t];
      po[2, i, t, 2] = 1.0 - p[t];
      po[3, i, t, 1] = 0.0;
      po[3, i, t, 2] = 1.0;
    }
  }
}
model {
  real acc[3];
  vector[3] gam[n_occasions];
  for (i in 1 : M) {
    gam[1, 1] = 1.0;
    gam[1, 2] = 0.0;
    gam[1, 3] = 0.0;
    for (t in 2 : n_occasions) {
      for (k in 1 : 3) {
        for (j in 1 : 3) 
          acc[j] = gam[t - 1, j] * ps[j, i, t - 1, k]
                   * po[k, i, t - 1, y[i, t]];
        gam[t, k] = sum(acc);
      }
    }
    target += log(sum(gam[n_occasions]));
  }
}
generated quantities {
  real<lower=0, upper=1> psi;
  vector<lower=0, upper=1>[n_occ_minus_1] b;
  int<lower=0> Nsuper;
  int<lower=0> N[n_occ_minus_1];
  int<lower=0> B[n_occ_minus_1];
  int<lower=1, upper=3> z[M, n_occasions];
  for (i in 1 : M) {
    z[i, 1] = 1;
    for (t in 2 : n_occasions) 
      z[i, t] = categorical_rng(ps[z[i, t - 1], i, t - 1]);
  }
  {
    vector[n_occ_minus_1] cprob = seq_cprob(gamma[ : n_occ_minus_1]);
    int al[M, n_occ_minus_1];
    int d[M, n_occ_minus_1];
    int alive[M];
    int w[M];
    psi = sum(cprob);
    b = cprob / psi;
    for (i in 1 : M) {
      for (t in 2 : n_occasions) 
        al[i, t - 1] = (z[i, t] == 2);
      for (t in 1 : n_occ_minus_1) 
        d[i, t] = (z[i, t] == al[i, t]);
      alive[i] = sum(al[i]);
    }
    for (t in 1 : n_occ_minus_1) {
      N[t] = sum(al[ : , t]);
      B[t] = sum(d[ : , t]);
    }
    for (i in 1 : M) 
      w[i] = 1 - !alive[i];
    Nsuper = sum(w);
  }
}

  $ ../../../../../../install/default/bin/stanc --auto_format js_rest_occ.stan
functions {
  int first_capture(int[] y_i) {
    for (k in 1 : size(y_i)) 
      if (y_i[k]) 
        return k;
    return 0;
  }
  int last_capture(int[] y_i) {
    for (k_rev in 0 : (size(y_i) - 1)) {
      int k = size(y_i) - k_rev;
      if (y_i[k]) 
        return k;
    }
    return 0;
  }
  matrix prob_uncaptured(matrix p, matrix phi) {
    int n_ind = rows(p);
    int n_occasions = cols(p);
    matrix[n_ind, n_occasions] chi;
    for (i in 1 : n_ind) {
      chi[i, n_occasions] = 1.0;
      for (t in 1 : (n_occasions - 1)) {
        int t_curr = n_occasions - t;
        int t_next = t_curr + 1;
        chi[i, t_curr] = (1 - phi[i, t_curr])
                         + phi[i, t_curr] * (1 - p[i, t_next])
                           * chi[i, t_next];
      }
    }
    return chi;
  }
  void jolly_seber_lp(int[,] y, int[] first, int[] last, matrix p,
                      matrix phi, vector gamma, matrix chi) {
    int n_ind = dims(y)[1];
    int n_occasions = dims(y)[2];
    vector[n_occasions] qgamma = 1.0 - gamma;
    for (i in 1 : n_ind) {
      vector[n_occasions] qp = 1.0 - p[i]';
      if (first[i]) {
        if (first[i] == 1) {
          1 ~ bernoulli(gamma[1] * p[i, 1]);
        }
        else {
          vector[first[i]] lp;
          lp[1] = bernoulli_lpmf(1| gamma[1])
                  + bernoulli_lpmf(1| prod(qp[1 : (first[i] - 1)]))
                  + bernoulli_lpmf(1| prod(phi[i, 1 : (first[i] - 1)]))
                  + bernoulli_lpmf(1| p[i, first[i]]);
          for (t in 2 : (first[i] - 1)) 
            lp[t] = bernoulli_lpmf(1| prod(qgamma[1 : (t - 1)]))
                    + bernoulli_lpmf(1| gamma[t])
                    + bernoulli_lpmf(1| prod(qp[t : (first[i] - 1)]))
                    + bernoulli_lpmf(1| prod(phi[i, t : (first[i] - 1)]))
                    + bernoulli_lpmf(1| p[i, first[i]]);
          lp[first[i]] = bernoulli_lpmf(1| prod(qgamma[1 : (first[i] - 1)]))
                         + bernoulli_lpmf(1| gamma[first[i]])
                         + bernoulli_lpmf(1| p[i, first[i]]);
          target += log_sum_exp(lp);
        }
        for (t in (first[i] + 1) : last[i]) {
          1 ~ bernoulli(phi[i, t - 1]);
          y[i, t] ~ bernoulli(p[i, t]);
        }
        1 ~ bernoulli(chi[i, last[i]]);
      }
      else {
        vector[n_occasions + 1] lp;
        lp[1] = bernoulli_lpmf(1| gamma[1]) + bernoulli_lpmf(0| p[i, 1])
                + bernoulli_lpmf(1| chi[i, 1]);
        for (t in 2 : n_occasions) 
          lp[t] = bernoulli_lpmf(1| prod(qgamma[1 : (t - 1)]))
                  + bernoulli_lpmf(1| gamma[t]) + bernoulli_lpmf(0| p[i, t])
                  + bernoulli_lpmf(1| chi[i, t]);
        lp[n_occasions + 1] = bernoulli_lpmf(1| prod(qgamma));
        target += log_sum_exp(lp);
      }
    }
  }
  vector seq_cprob(vector gamma) {
    int N = rows(gamma);
    vector[N] log_cprob;
    real log_residual_prob = 0;
    for (n in 1 : N) {
      log_cprob[n] = log(gamma[n]) + log_residual_prob;
      log_residual_prob = log_residual_prob + log(1 - gamma[n]);
    }
    return exp(log_cprob);
  }
}
data {
  int<lower=0> M;
  int<lower=0> n_occasions;
  int<lower=0, upper=1> y[M, n_occasions];
}
transformed data {
  int n_occ_minus_1 = n_occasions - 1;
  int<lower=0, upper=n_occasions> first[M];
  int<lower=0, upper=n_occasions> last[M];
  for (i in 1 : M) 
    first[i] = first_capture(y[i]);
  for (i in 1 : M) 
    last[i] = last_capture(y[i]);
}
parameters {
  real<lower=0, upper=1> mean_phi;
  real<lower=0, upper=1> mean_p;
  vector<lower=0, upper=1>[n_occasions] gamma;
}
transformed parameters {
  matrix<lower=0, upper=1>[M, n_occ_minus_1] phi;
  matrix<lower=0, upper=1>[M, n_occasions] p;
  matrix<lower=0, upper=1>[M, n_occasions] chi;
  phi = rep_matrix(mean_phi, M, n_occ_minus_1);
  p = rep_matrix(mean_p, M, n_occasions);
  chi = prob_uncaptured(p, phi);
}
model {
  jolly_seber_lp(y, first, last, p, phi, gamma, chi);
}
generated quantities {
  real psi;
  vector[n_occasions] b;
  int Nsuper;
  int N[n_occasions];
  int B[n_occasions];
  int z[M, n_occasions];
  for (i in 1 : M) {
    int q = 1;
    real mu2;
    z[i, 1] = bernoulli_rng(gamma[1]);
    for (t in 2 : n_occasions) {
      q = q * (1 - z[i, t - 1]);
      mu2 = phi[i, t - 1] * z[i, t - 1] + gamma[t] * q;
      z[i, t] = bernoulli_rng(mu2);
    }
  }
  {
    vector[n_occasions] cprob = seq_cprob(gamma);
    int recruit[M, n_occasions] = rep_array(0, M, n_occasions);
    int Nind[M];
    int Nalive[M];
    psi = sum(cprob);
    b = cprob / psi;
    for (i in 1 : M) {
      int f = first_capture(z[i,  : ]);
      if (f > 0) 
        recruit[i, f] = 1;
    }
    for (t in 1 : n_occasions) {
      N[t] = sum(z[ : , t]);
      B[t] = sum(recruit[ : , t]);
    }
    for (i in 1 : M) {
      Nind[i] = sum(z[i]);
      Nalive[i] = 1 - !Nind[i];
    }
    Nsuper = sum(Nalive);
  }
}

  $ ../../../../../../install/default/bin/stanc --auto_format js_super.stan
functions {
  int first_capture(int[] y_i) {
    for (k in 1 : size(y_i)) 
      if (y_i[k]) 
        return k;
    return 0;
  }
  int last_capture(int[] y_i) {
    for (k_rev in 0 : (size(y_i) - 1)) {
      int k = size(y_i) - k_rev;
      if (y_i[k]) 
        return k;
    }
    return 0;
  }
  matrix prob_uncaptured(matrix p, matrix phi) {
    int n_ind = rows(p);
    int n_occasions = cols(p);
    matrix[n_ind, n_occasions] chi;
    for (i in 1 : n_ind) {
      chi[i, n_occasions] = 1.0;
      for (t in 1 : (n_occasions - 1)) {
        int t_curr = n_occasions - t;
        int t_next = t_curr + 1;
        chi[i, t_curr] = (1 - phi[i, t_curr])
                         + phi[i, t_curr] * (1 - p[i, t_next])
                           * chi[i, t_next];
      }
    }
    return chi;
  }
  void js_super_lp(int[,] y, int[] first, int[] last, matrix p, matrix phi,
                   real psi, vector nu, matrix chi) {
    int n_ind = dims(y)[1];
    int n_occasions = dims(y)[2];
    vector[n_occasions] qnu = 1.0 - nu;
    for (i in 1 : n_ind) {
      vector[n_occasions] qp = 1.0 - p[i]';
      if (first[i]) {
        1 ~ bernoulli(psi);
        if (first[i] == 1) {
          1 ~ bernoulli(nu[1] * p[i, 1]);
        }
        else {
          vector[first[i]] lp;
          lp[1] = bernoulli_lpmf(1| nu[1])
                  + bernoulli_lpmf(1| prod(qp[1 : (first[i] - 1)]))
                  + bernoulli_lpmf(1| prod(phi[i, 1 : (first[i] - 1)]))
                  + bernoulli_lpmf(1| p[i, first[i]]);
          for (t in 2 : (first[i] - 1)) 
            lp[t] = bernoulli_lpmf(1| prod(qnu[1 : (t - 1)]))
                    + bernoulli_lpmf(1| nu[t])
                    + bernoulli_lpmf(1| prod(qp[t : (first[i] - 1)]))
                    + bernoulli_lpmf(1| prod(phi[i, t : (first[i] - 1)]))
                    + bernoulli_lpmf(1| p[i, first[i]]);
          lp[first[i]] = bernoulli_lpmf(1| prod(qnu[1 : (first[i] - 1)]))
                         + bernoulli_lpmf(1| nu[first[i]])
                         + bernoulli_lpmf(1| p[i, first[i]]);
          target += log_sum_exp(lp);
        }
        for (t in (first[i] + 1) : last[i]) {
          1 ~ bernoulli(phi[i, t - 1]);
          y[i, t] ~ bernoulli(p[i, t]);
        }
        1 ~ bernoulli(chi[i, last[i]]);
      }
      else {
        vector[n_occasions + 1] lp;
        lp[1] = bernoulli_lpmf(1| psi) + bernoulli_lpmf(1| nu[1])
                + bernoulli_lpmf(0| p[i, 1]) + bernoulli_lpmf(1| chi[i, 1]);
        for (t in 2 : n_occasions) 
          lp[t] = bernoulli_lpmf(1| psi)
                  + bernoulli_lpmf(1| prod(qnu[1 : (t - 1)]))
                  + bernoulli_lpmf(1| nu[t]) + bernoulli_lpmf(0| p[i, t])
                  + bernoulli_lpmf(1| chi[i, t]);
        lp[n_occasions + 1] = bernoulli_lpmf(0| psi);
        target += log_sum_exp(lp);
      }
    }
  }
}
data {
  int<lower=0> M;
  int<lower=0> n_occasions;
  int<lower=0, upper=1> y[M, n_occasions];
}
transformed data {
  int n_occ_minus_1 = n_occasions - 1;
  int<lower=0, upper=n_occasions> first[M];
  int<lower=0, upper=n_occasions> last[M];
  for (i in 1 : M) 
    first[i] = first_capture(y[i]);
  for (i in 1 : M) 
    last[i] = last_capture(y[i]);
}
parameters {
  real<lower=0, upper=1> mean_phi;
  real<lower=0, upper=1> mean_p;
  real<lower=0, upper=1> psi;
  vector<lower=0>[n_occasions] beta;
}
transformed parameters {
  matrix<lower=0, upper=1>[M, n_occ_minus_1] phi;
  matrix<lower=0, upper=1>[M, n_occasions] p;
  simplex[n_occasions] b;
  vector<lower=0, upper=1>[n_occasions] nu;
  matrix<lower=0, upper=1>[M, n_occasions] chi;
  phi = rep_matrix(mean_phi, M, n_occ_minus_1);
  p = rep_matrix(mean_p, M, n_occasions);
  b = beta / sum(beta);
  {
    real cum_b = b[1];
    nu[1] = b[1];
    for (t in 2 : n_occ_minus_1) {
      nu[t] = b[t] / (1.0 - cum_b);
      cum_b = cum_b + b[t];
    }
    nu[n_occasions] = 1.0;
  }
  chi = prob_uncaptured(p, phi);
}
model {
  beta ~ gamma(1, 1);
  js_super_lp(y, first, last, p, phi, psi, nu, chi);
}
generated quantities {
  int<lower=0> Nsuper;
  int<lower=0> N[n_occasions];
  int<lower=0> B[n_occasions];
  int<lower=0, upper=1> z[M, n_occasions];
  for (i in 1 : M) {
    if (bernoulli_rng(psi)) {
      z[i, 1] = bernoulli_rng(nu[1]);
      for (t in 2 : n_occasions) {
        z[i, t] = bernoulli_rng(z[i, t - 1] * phi[i, t - 1]
                                + (1 - z[i, t - 1]) * nu[t]);
      }
    }
    else {
      z[i,  : ] = rep_array(0, n_occasions);
    }
  }
  {
    int recruit[M, n_occasions] = rep_array(0, M, n_occasions);
    int Nind[M];
    int Nalive[M];
    for (i in 1 : M) {
      int f = first_capture(z[i,  : ]);
      if (f > 0) 
        recruit[i, f] = 1;
    }
    for (t in 1 : n_occasions) {
      N[t] = sum(z[ : , t]);
      B[t] = sum(recruit[ : , t]);
    }
    for (i in 1 : M) {
      Nind[i] = sum(z[i]);
      Nalive[i] = 1 - !Nind[i];
    }
    Nsuper = sum(Nalive);
  }
}

  $ ../../../../../../install/default/bin/stanc --auto_format js_super_indran.stan
functions {
  int first_capture(int[] y_i) {
    for (k in 1 : size(y_i)) 
      if (y_i[k]) 
        return k;
    return 0;
  }
  int last_capture(int[] y_i) {
    for (k_rev in 0 : (size(y_i) - 1)) {
      int k = size(y_i) - k_rev;
      if (y_i[k]) 
        return k;
    }
    return 0;
  }
  matrix prob_uncaptured(matrix p, matrix phi) {
    int n_ind = rows(p);
    int n_occasions = cols(p);
    matrix[n_ind, n_occasions] chi;
    for (i in 1 : n_ind) {
      chi[i, n_occasions] = 1.0;
      for (t in 1 : (n_occasions - 1)) {
        int t_curr = n_occasions - t;
        int t_next = t_curr + 1;
        chi[i, t_curr] = (1 - phi[i, t_curr])
                         + phi[i, t_curr] * (1 - p[i, t_next])
                           * chi[i, t_next];
      }
    }
    return chi;
  }
  void js_super_lp(int[,] y, int[] first, int[] last, matrix p, matrix phi,
                   real psi, vector nu, matrix chi) {
    int n_ind = dims(y)[1];
    int n_occasions = dims(y)[2];
    vector[n_occasions] qnu = 1.0 - nu;
    for (i in 1 : n_ind) {
      vector[n_occasions] qp = 1.0 - p[i]';
      if (first[i]) {
        1 ~ bernoulli(psi);
        if (first[i] == 1) {
          1 ~ bernoulli(nu[1] * p[i, 1]);
        }
        else {
          vector[first[i]] lp;
          lp[1] = bernoulli_lpmf(1| nu[1])
                  + bernoulli_lpmf(1| prod(qp[1 : (first[i] - 1)]))
                  + bernoulli_lpmf(1| prod(phi[i, 1 : (first[i] - 1)]))
                  + bernoulli_lpmf(1| p[i, first[i]]);
          for (t in 2 : (first[i] - 1)) 
            lp[t] = bernoulli_lpmf(1| prod(qnu[1 : (t - 1)]))
                    + bernoulli_lpmf(1| nu[t])
                    + bernoulli_lpmf(1| prod(qp[t : (first[i] - 1)]))
                    + bernoulli_lpmf(1| prod(phi[i, t : (first[i] - 1)]))
                    + bernoulli_lpmf(1| p[i, first[i]]);
          lp[first[i]] = bernoulli_lpmf(1| prod(qnu[1 : (first[i] - 1)]))
                         + bernoulli_lpmf(1| nu[first[i]])
                         + bernoulli_lpmf(1| p[i, first[i]]);
          target += log_sum_exp(lp);
        }
        for (t in (first[i] + 1) : last[i]) {
          1 ~ bernoulli(phi[i, t - 1]);
          y[i, t] ~ bernoulli(p[i, t]);
        }
        1 ~ bernoulli(chi[i, last[i]]);
      }
      else {
        vector[n_occasions + 1] lp;
        lp[1] = bernoulli_lpmf(1| psi) + bernoulli_lpmf(1| nu[1])
                + bernoulli_lpmf(0| p[i, 1]) + bernoulli_lpmf(1| chi[i, 1]);
        for (t in 2 : n_occasions) 
          lp[t] = bernoulli_lpmf(1| psi)
                  + bernoulli_lpmf(1| prod(qnu[1 : (t - 1)]))
                  + bernoulli_lpmf(1| nu[t]) + bernoulli_lpmf(0| p[i, t])
                  + bernoulli_lpmf(1| chi[i, t]);
        lp[n_occasions + 1] = bernoulli_lpmf(0| psi);
        target += log_sum_exp(lp);
      }
    }
  }
}
data {
  int<lower=0> M;
  int<lower=0> n_occasions;
  int<lower=0, upper=1> y[M, n_occasions];
}
transformed data {
  int<lower=0, upper=n_occasions> first[M];
  int<lower=0, upper=n_occasions> last[M];
  for (i in 1 : M) 
    first[i] = first_capture(y[i]);
  for (i in 1 : M) 
    last[i] = last_capture(y[i]);
}
parameters {
  real<lower=0, upper=1> mean_phi;
  real<lower=0, upper=1> mean_p;
  real<lower=0, upper=1> psi;
  vector<lower=0>[n_occasions] beta;
  vector[M] epsilon;
  real<lower=0, upper=5> sigma;
}
transformed parameters {
  matrix<lower=0, upper=1>[M, n_occasions - 1] phi;
  matrix<lower=0, upper=1>[M, n_occasions] p;
  simplex[n_occasions] b;
  vector<lower=0, upper=1>[n_occasions] nu;
  matrix<lower=0, upper=1>[M, n_occasions] chi;
  phi = rep_matrix(mean_phi, M, n_occasions - 1);
  for (t in 1 : n_occasions) 
    p[ : , t] = inv_logit(logit(mean_p) + epsilon);
  b = beta / sum(beta);
  {
    real cum_b = b[1];
    nu[1] = b[1];
    for (t in 2 : (n_occasions - 1)) {
      nu[t] = b[t] / (1.0 - cum_b);
      cum_b = cum_b + b[t];
    }
    nu[n_occasions] = 1.0;
  }
  chi = prob_uncaptured(p, phi);
}
model {
  epsilon ~ normal(0, sigma);
  beta ~ gamma(1, 1);
  js_super_lp(y, first, last, p, phi, psi, nu, chi);
}
generated quantities {
  real<lower=0> sigma2;
  int<lower=0> Nsuper;
  int<lower=0> N[n_occasions];
  int<lower=0> B[n_occasions];
  int<lower=0, upper=1> z[M, n_occasions];
  sigma2 = square(sigma);
  for (i in 1 : M) {
    if (bernoulli_rng(psi)) {
      z[i, 1] = bernoulli_rng(nu[1]);
      for (t in 2 : n_occasions) 
        z[i, t] = bernoulli_rng(z[i, t - 1] * phi[i, t - 1]
                                + (1 - z[i, t - 1]) * nu[t]);
    }
    else {
      z[i,  : ] = rep_array(0, n_occasions);
    }
  }
  {
    int recruit[M, n_occasions] = rep_array(0, M, n_occasions);
    int Nind[M];
    int Nalive[M];
    for (i in 1 : M) {
      int f = first_capture(z[i,  : ]);
      if (f > 0) 
        recruit[i, f] = 1;
    }
    for (t in 1 : n_occasions) {
      N[t] = sum(z[ : , t]);
      B[t] = sum(recruit[ : , t]);
    }
    for (i in 1 : M) {
      Nind[i] = sum(z[i]);
      Nalive[i] = (Nind[i] > 0);
    }
    Nsuper = sum(Nalive);
  }
}

  $ ../../../../../../install/default/bin/stanc --auto_format js_tempran.stan
functions {
  int first_capture(int[] y_i) {
    for (k in 1 : size(y_i)) 
      if (y_i[k]) 
        return k;
    return 0;
  }
  int last_capture(int[] y_i) {
    for (k_rev in 0 : (size(y_i) - 1)) {
      int k = size(y_i) - k_rev;
      if (y_i[k]) 
        return k;
    }
    return 0;
  }
  matrix prob_uncaptured(matrix p, matrix phi) {
    int n_ind = rows(p);
    int n_occasions = cols(p);
    matrix[n_ind, n_occasions] chi;
    for (i in 1 : n_ind) {
      chi[i, n_occasions] = 1.0;
      for (t in 1 : (n_occasions - 1)) {
        int t_curr = n_occasions - t;
        int t_next = t_curr + 1;
        chi[i, t_curr] = (1 - phi[i, t_curr])
                         + phi[i, t_curr] * (1 - p[i, t_next])
                           * chi[i, t_next];
      }
    }
    return chi;
  }
  void jolly_seber_lp(int[,] y, int[] first, int[] last, matrix p,
                      matrix phi, vector gamma, matrix chi) {
    int n_ind = dims(y)[1];
    int n_occasions = dims(y)[2];
    vector[n_occasions] qgamma = 1.0 - gamma;
    for (i in 1 : n_ind) {
      vector[n_occasions] qp = 1.0 - p[i]';
      if (first[i]) {
        if (first[i] == 1) {
          1 ~ bernoulli(gamma[1] * p[i, 1]);
        }
        else {
          vector[first[i]] lp;
          lp[1] = bernoulli_lpmf(1| gamma[1])
                  + bernoulli_lpmf(1| prod(qp[1 : (first[i] - 1)]))
                  + bernoulli_lpmf(1| prod(phi[i, 1 : (first[i] - 1)]))
                  + bernoulli_lpmf(1| p[i, first[i]]);
          for (t in 2 : (first[i] - 1)) 
            lp[t] = bernoulli_lpmf(1| prod(qgamma[1 : (t - 1)]))
                    + bernoulli_lpmf(1| gamma[t])
                    + bernoulli_lpmf(1| prod(qp[t : (first[i] - 1)]))
                    + bernoulli_lpmf(1| prod(phi[i, t : (first[i] - 1)]))
                    + bernoulli_lpmf(1| p[i, first[i]]);
          lp[first[i]] = bernoulli_lpmf(1| prod(qgamma[1 : (first[i] - 1)]))
                         + bernoulli_lpmf(1| gamma[first[i]])
                         + bernoulli_lpmf(1| p[i, first[i]]);
          target += log_sum_exp(lp);
        }
        for (t in (first[i] + 1) : last[i]) {
          1 ~ bernoulli(phi[i, t - 1]);
          y[i, t] ~ bernoulli(p[i, t]);
        }
        1 ~ bernoulli(chi[i, last[i]]);
      }
      else {
        vector[n_occasions + 1] lp;
        lp[1] = bernoulli_lpmf(1| gamma[1]) + bernoulli_lpmf(0| p[i, 1])
                + bernoulli_lpmf(1| chi[i, 1]);
        for (t in 2 : n_occasions) 
          lp[t] = bernoulli_lpmf(1| prod(qgamma[1 : (t - 1)]))
                  + bernoulli_lpmf(1| gamma[t]) + bernoulli_lpmf(0| p[i, t])
                  + bernoulli_lpmf(1| chi[i, t]);
        lp[n_occasions + 1] = bernoulli_lpmf(1| prod(qgamma));
        target += log_sum_exp(lp);
      }
    }
  }
  vector seq_cprob(vector gamma) {
    int N = rows(gamma);
    vector[N] log_cprob;
    real log_residual_prob = 0;
    for (n in 1 : N) {
      log_cprob[n] = log(gamma[n]) + log_residual_prob;
      log_residual_prob = log_residual_prob + log(1 - gamma[n]);
    }
    return exp(log_cprob);
  }
}
data {
  int<lower=0> M;
  int<lower=0> n_occasions;
  int<lower=0, upper=1> y[M, n_occasions];
}
transformed data {
  int<lower=0, upper=n_occasions> first[M];
  int<lower=0, upper=n_occasions> last[M];
  for (i in 1 : M) 
    first[i] = first_capture(y[i]);
  for (i in 1 : M) 
    last[i] = last_capture(y[i]);
}
parameters {
  real<lower=0, upper=1> mean_phi;
  real<lower=0, upper=1> mean_p;
  vector<lower=0, upper=1>[n_occasions] gamma;
  vector[n_occasions - 1] epsilon;
  real<lower=0, upper=5> sigma;
}
transformed parameters {
  matrix<lower=0, upper=1>[M, n_occasions - 1] phi;
  matrix<lower=0, upper=1>[M, n_occasions] p;
  matrix<lower=0, upper=1>[M, n_occasions] chi;
  for (t in 1 : (n_occasions - 1)) 
    for (i in 1 : M) 
      phi[i, t] = inv_logit(logit(mean_phi) + epsilon[t]);
  p = rep_matrix(mean_p, M, n_occasions);
  chi = prob_uncaptured(p, phi);
}
model {
  epsilon ~ normal(0, sigma);
  jolly_seber_lp(y, first, last, p, phi, gamma, chi);
}
generated quantities {
  real sigma2;
  real psi;
  vector[n_occasions] b;
  int Nsuper;
  int N[n_occasions];
  int B[n_occasions];
  int z[M, n_occasions];
  for (i in 1 : M) {
    int q = 1;
    real mu2;
    z[i, 1] = bernoulli_rng(gamma[1]);
    for (t in 2 : n_occasions) {
      q = q * (1 - z[i, t - 1]);
      mu2 = phi[i, t - 1] * z[i, t - 1] + gamma[t] * q;
      z[i, t] = bernoulli_rng(mu2);
    }
  }
  {
    vector[n_occasions] cprob = seq_cprob(gamma);
    int recruit[M, n_occasions] = rep_array(0, M, n_occasions);
    int Nind[M];
    int Nalive[M];
    sigma2 = square(sigma);
    psi = sum(cprob);
    b = cprob / psi;
    for (i in 1 : M) {
      int f = first_capture(z[i,  : ]);
      if (f > 0) 
        recruit[i, f] = 1;
    }
    for (t in 1 : n_occasions) {
      N[t] = sum(z[ : , t]);
      B[t] = sum(recruit[ : , t]);
    }
    for (i in 1 : M) {
      Nind[i] = sum(z[i]);
      Nalive[i] = 1 - !Nind[i];
    }
    Nsuper = sum(Nalive);
  }
}

