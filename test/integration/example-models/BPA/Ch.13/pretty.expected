  $ ../../../../../../install/default/bin/stanc --auto_format Dynocc.stan
data {
  int<lower=1> nsite;
  int<lower=1> nrep;
  int<lower=1> nyear;
  int<lower=0, upper=1> y[nsite, nrep, nyear];
}
transformed data {
  int<lower=1, upper=nrep + 1> sum_y[nsite, nyear];
  int ny_minus_1 = nyear - 1;
  for (i in 1 : nsite) 
    for (k in 1 : nyear) 
      sum_y[i, k] = sum(y[i, 1 : nrep, k]) + 1;
}
parameters {
  real<lower=0, upper=1> psi1;
  vector<lower=0, upper=1>[nyear] p;
  simplex[2] ps[2, nyear - 1];
}
transformed parameters {
  simplex[nrep + 1] po[2, nyear];
  for (t in 1 : nyear) {
    for (r in 1 : (nrep + 1)) {
      po[1, t, r] = exp(binomial_lpmf(r - 1| nrep, p[t]));
      po[2, t, r] = (r == 1);
    }
  }
}
model {
  for (i in 1 : nsite) {
    real acc[2];
    vector[2] gam[nyear];
    gam[1, 1] = psi1 * po[1, 1, sum_y[i, 1]];
    gam[1, 2] = (1 - psi1) * po[2, 1, sum_y[i, 1]];
    for (t in 2 : nyear) {
      for (k in 1 : 2) {
        for (j in 1 : 2) 
          acc[j] = gam[t - 1, j] * ps[j, t - 1, k] * po[k, t, sum_y[i, t]];
        gam[t, k] = sum(acc);
      }
    }
    target += log(sum(gam[nyear]));
  }
}
generated quantities {
  vector<lower=0, upper=1>[nyear] psi;
  vector<lower=0, upper=1>[ny_minus_1] phi;
  vector<lower=0, upper=1>[ny_minus_1] gamma;
  int<lower=0, upper=1> z[nsite, nyear];
  int<lower=0, upper=nsite> n_occ[nyear];
  vector[nyear - 1] growthr;
  vector[nyear - 1] turnover;
  for (k in 1 : ny_minus_1) {
    phi[k] = ps[1, k, 1];
    gamma[k] = ps[2, k, 1];
  }
  psi[1] = psi1;
  for (k in 2 : nyear) 
    psi[k] = psi[k - 1] * phi[k - 1] + (1 - psi[k - 1]) * gamma[k - 1];
  for (i in 1 : nsite) 
    for (k in 1 : nyear) 
      z[i, k] = bernoulli_rng(psi[k]);
  for (t in 1 : nyear) 
    n_occ[t] = sum(z[1 : nsite, t]);
  growthr[ : ny_minus_1] = psi[2 : ] ./ psi[ : ny_minus_1];
  turnover[ : ny_minus_1] = (1 - psi[ : ny_minus_1]) .* gamma[ : ny_minus_1]
                            ./ psi[2 : ];
}

  $ ../../../../../../install/default/bin/stanc --auto_format Dynocc2.stan
data {
  int<lower=1> nsite;
  int<lower=1> nyear;
  int<lower=0, upper=2> y[nsite, nyear];
}
transformed data {
  int ny_minus_1 = nyear - 1;
}
parameters {
  real<lower=0, upper=1> psi1;
  real<lower=0, upper=1> p;
  simplex[2] ps[2, nyear - 1];
}
transformed parameters {
  simplex[3] po[2, nyear];
  for (t in 1 : nyear) {
    for (r in 1 : 3) {
      po[1, t, r] = exp(binomial_lpmf(r - 1| 2, p));
      po[2, t, r] = (r == 1);
    }
  }
}
model {
  for (i in 1 : nsite) {
    real acc[2];
    vector[2] gam[nyear];
    gam[1, 1] = psi1 * po[1, 1, y[i, 1] + 1];
    gam[1, 2] = (1 - psi1) * po[2, 1, y[i, 1] + 1];
    for (t in 2 : nyear) {
      for (k in 1 : 2) {
        for (j in 1 : 2) 
          acc[j] = gam[t - 1, j] * ps[j, t - 1, k] * po[k, t, y[i, t] + 1];
        gam[t, k] = sum(acc);
      }
    }
    target += log(sum(gam[nyear]));
  }
}
generated quantities {
  vector<lower=0, upper=1>[nyear] psi;
  vector<lower=0, upper=1>[ny_minus_1] phi;
  vector<lower=0, upper=1>[ny_minus_1] gamma;
  int<lower=0, upper=1> z[nsite, nyear];
  int<lower=0, upper=nsite> n_occ[nyear];
  vector[nyear - 1] growthr;
  vector[nyear - 1] turnover;
  for (k in 1 : ny_minus_1) {
    phi[k] = ps[1, k, 1];
    gamma[k] = ps[2, k, 1];
  }
  psi[1] = psi1;
  for (k in 2 : nyear) 
    psi[k] = psi[k - 1] * phi[k - 1] + (1 - psi[k - 1]) * gamma[k - 1];
  for (i in 1 : nsite) 
    for (k in 1 : nyear) 
      z[i, k] = bernoulli_rng(psi[k]);
  for (t in 1 : nyear) 
    n_occ[t] = sum(z[1 : nsite, t]);
  growthr[ : ny_minus_1] = psi[2 : ] ./ psi[ : ny_minus_1];
  turnover[ : ny_minus_1] = (1 - psi[ : ny_minus_1]) .* gamma[ : ny_minus_1]
                            ./ psi[2 : ];
}

  $ ../../../../../../install/default/bin/stanc --auto_format bluebug.stan
data {
  int<lower=1> R;
  int<lower=1> T;
  int<lower=0, upper=1> y[R, T];
  int<lower=0, upper=1> edge[R];
  matrix[R, T] DATES;
  matrix[R, T] HOURS;
  int last[R];
}
transformed data {
  int<lower=0, upper=T> sum_y[R];
  int<lower=0, upper=R> occ_obs;
  matrix[R, T] DATES2;
  matrix[R, T] HOURS2;
  occ_obs = 0;
  for (i in 1 : R) {
    sum_y[i] = sum(y[i]);
    if (sum_y[i]) 
      occ_obs = occ_obs + 1;
  }
  DATES2 = DATES .* DATES;
  HOURS2 = HOURS .* HOURS;
}
parameters {
  real alpha_psi;
  real beta_psi;
  real alpha_p;
  real beta1_p;
  real beta2_p;
  real beta3_p;
  real beta4_p;
}
transformed parameters {
  vector[R] logit_psi;
  matrix[R, T] logit_p;
  for (i in 1 : R) 
    logit_psi[i] = alpha_psi + beta_psi * edge[i];
  logit_p = alpha_p + beta1_p * DATES + beta2_p * DATES2 + beta3_p * HOURS
            + beta4_p * HOURS2;
}
model {
  alpha_psi ~ normal(0, 10);
  beta_psi ~ normal(0, 10);
  alpha_p ~ normal(0, 10);
  beta1_p ~ normal(0, 10);
  beta2_p ~ normal(0, 10);
  beta3_p ~ normal(0, 10);
  beta4_p ~ normal(0, 10);
  for (i in 1 : R) {
    if (sum_y[i]) {
      target += bernoulli_logit_lpmf(1| logit_psi[i])
                + bernoulli_logit_lpmf(y[i, 1 : last[i]]| logit_p[i, 1 : last[i]]);
    }
    else {
      target += log_sum_exp(bernoulli_logit_lpmf(1| logit_psi[i])
                            + bernoulli_logit_lpmf(0| logit_p[i, 1 : last[i]]),
                            bernoulli_logit_lpmf(0| logit_psi[i]));
    }
  }
}
generated quantities {
  real<lower=0, upper=1> mean_p = inv_logit(alpha_p);
  int occ_fs;
  real psi_con[R];
  int z[R];
  for (i in 1 : R) {
    if (sum_y[i] == 0) {
      real psi = inv_logit(logit_psi[i]);
      vector[last[i]] q = inv_logit(-logit_p[i, 1 : last[i]])';
      real qT = prod(q[ : ]);
      psi_con[i] = (psi * qT) / (psi * qT + (1 - psi));
      z[i] = bernoulli_rng(psi_con[i]);
    }
    else {
      psi_con[i] = 1;
      z[i] = 1;
    }
  }
  occ_fs = sum(z);
}

  $ ../../../../../../install/default/bin/stanc --auto_format owls_ms1.stan
data {
  int<lower=1> R;
  int<lower=1> T;
  int<lower=0, upper=3> y[R, T];
}
parameters {
  real<lower=0, upper=1> p2;
  real<lower=0, upper=1> psi;
  real<lower=0, upper=1> r;
  vector<lower=0>[3] beta;
}
transformed parameters {
  simplex[3] p3;
  simplex[3] phi[R];
  simplex[3] p[3, T];
  p3 = beta / sum(beta);
  phi[ : , 1] = rep_array(1 - psi, R);
  phi[ : , 2] = rep_array(psi * (1 - r), R);
  phi[ : , 3] = rep_array(psi * r, R);
  p[1,  : , 1] = rep_array(1, T);
  p[1,  : , 2] = rep_array(0, T);
  p[1,  : , 3] = rep_array(0, T);
  p[2,  : , 1] = rep_array(1 - p2, T);
  p[2,  : , 2] = rep_array(p2, T);
  p[2,  : , 3] = rep_array(0, T);
  p[3,  : , 1] = rep_array(p3[1], T);
  p[3,  : , 2] = rep_array(p3[2], T);
  p[3,  : , 3] = rep_array(p3[3], T);
}
model {
  beta ~ gamma(1, 1);
  for (s in 1 : R) {
    vector[3] lp;
    for (k in 1 : 3) {
      lp[k] = categorical_lpmf(k| phi[s]);
      for (t in 1 : T) {
        if (y[s, t]) 
          lp[k] = lp[k] + categorical_lpmf(y[s, t]| p[k, t]);
      }
    }
    target += log_sum_exp(lp);
  }
}
generated quantities {
  int<lower=1, upper=3> z[R];
  int occ[3, R];
  real n_occ[3];
  for (s in 1 : R) 
    z[s] = categorical_rng(phi[s]);
  for (i in 1 : 3) 
    for (s in 1 : R) 
      occ[i, s] = (z[s] == i);
  for (i in 1 : 3) 
    n_occ[i] = sum(occ[i]);
}

  $ ../../../../../../install/default/bin/stanc --auto_format owls_ms2.stan
data {
  int<lower=1> R;
  int<lower=1> T;
  int<lower=0, upper=3> y[R, T];
}
parameters {
  vector<lower=0, upper=1>[T] p2;
  real<lower=0, upper=1> psi;
  real<lower=0, upper=1> r;
  vector<lower=0>[T] beta[3];
}
transformed parameters {
  simplex[3] p3[T];
  simplex[3] phi[R];
  simplex[3] p[3, T];
  for (t in 1 : T) 
    for (i in 1 : 3) 
      p3[t, i] = beta[i, t] / sum(beta[ : , t]);
  phi[ : , 1] = rep_array(1 - psi, R);
  phi[ : , 2] = rep_array(psi * (1 - r), R);
  phi[ : , 3] = rep_array(psi * r, R);
  p[1,  : , 1] = rep_array(1, T);
  p[1,  : , 2] = rep_array(0, T);
  p[1,  : , 3] = rep_array(0, T);
  for (t in 1 : T) {
    p[2, t, 1] = 1 - p2[t];
    p[2, t, 2] = p2[t];
  }
  p[2,  : , 3] = rep_array(0, T);
  p[3,  : , 1] = p3[ : , 1];
  p[3,  : , 2] = p3[ : , 2];
  p[3,  : , 3] = p3[ : , 3];
}
model {
  real acc[3];
  vector[3] gamma[T];
  for (t in 1 : T) 
    beta[1 : 3, t] ~ gamma(1, 1);
  for (s in 1 : R) {
    vector[3] lp;
    for (k in 1 : 3) {
      lp[k] = categorical_lpmf(k| phi[s]);
      for (t in 1 : T) {
        if (y[s, t]) 
          lp[k] = lp[k] + categorical_lpmf(y[s, t]| p[k, t]);
      }
    }
    target += log_sum_exp(lp);
  }
}
generated quantities {
  int<lower=1, upper=3> z[R];
  int occ[3, R];
  real n_occ[3];
  for (s in 1 : R) 
    z[s] = categorical_rng(phi[s]);
  for (i in 1 : 3) 
    for (s in 1 : R) 
      occ[i, s] = (z[s] == i);
  for (i in 1 : 3) 
    n_occ[i] = sum(occ[i]);
}

  $ ../../../../../../install/default/bin/stanc --auto_format site-occ.stan
data {
  int<lower=1> R;
  int<lower=1> T;
  int<lower=0, upper=1> y[R, T];
}
transformed data {
  int<lower=0, upper=T> sum_y[R];
  int<lower=0, upper=R> occ_obs;
  occ_obs = 0;
  for (i in 1 : R) {
    sum_y[i] = sum(y[i]);
    if (sum_y[i]) 
      occ_obs = occ_obs + 1;
  }
}
parameters {
  real<lower=0, upper=1> psi;
  real<lower=0, upper=1> p;
}
model {
  for (i in 1 : R) {
    if (sum_y[i]) {
      1 ~ bernoulli(psi);
      y[i] ~ bernoulli(p);
    }
    else {
      target += log_sum_exp(bernoulli_lpmf(1| psi) + bernoulli_lpmf(0| p) * T,
                            bernoulli_lpmf(0| psi));
    }
  }
}
generated quantities {
  int<lower=occ_obs, upper=R> occ_fs;
  real psi_nd;
  psi_nd = (psi * (1 - p) ^ T) / (psi * (1 - p) ^ T + (1 - psi));
  occ_fs = occ_obs + binomial_rng(R - occ_obs, psi_nd);
}

  $ ../../../../../../install/default/bin/stanc --auto_format site-occ_cov.stan
data {
  int<lower=1> R;
  int<lower=1> T;
  int<lower=0, upper=1> y[R, T];
  vector[R] X;
}
transformed data {
  int<lower=0, upper=T> sum_y[R];
  int<lower=0, upper=R> occ_obs;
  occ_obs = 0;
  for (i in 1 : R) {
    sum_y[i] = sum(y[i]);
    if (sum_y[i]) 
      occ_obs = occ_obs + 1;
  }
}
parameters {
  real alpha_occ;
  real beta_occ;
  real alpha_p;
  real beta_p;
}
transformed parameters {
  vector[R] logit_psi;
  matrix[R, T] logit_p;
  logit_psi = alpha_occ + beta_occ * X;
  logit_p = rep_matrix(alpha_p + beta_p * X, T);
}
model {
  for (i in 1 : R) {
    if (sum_y[i]) {
      1 ~ bernoulli_logit(logit_psi[i]);
      y[i] ~ bernoulli_logit(logit_p[i]);
    }
    else {
      target += log_sum_exp(bernoulli_logit_lpmf(1| logit_psi[i])
                            + bernoulli_logit_lpmf(0| logit_p[i]),
                            bernoulli_logit_lpmf(0| logit_psi[i]));
    }
  }
}
generated quantities {
  int occ_fs;
  real psi_con[R];
  int z[R];
  for (i in 1 : R) {
    if (sum_y[i] == 0) {
      real psi = inv_logit(logit_psi[i]);
      vector[T] q = inv_logit(-logit_p[i])';
      real qT = prod(q[ : ]);
      psi_con[i] = (psi * qT) / (psi * qT + (1 - psi));
      z[i] = bernoulli_rng(psi_con[i]);
    }
    else {
      psi_con[i] = 1;
      z[i] = 1;
    }
  }
  occ_fs = sum(z);
}

