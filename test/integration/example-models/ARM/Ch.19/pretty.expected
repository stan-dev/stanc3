  $ ../../../../../../install/default/bin/stanc --auto_format election88.stan
data {
  int<lower=0> N;
  int<lower=0> n_age;
  int<lower=0> n_age_edu;
  int<lower=0> n_edu;
  int<lower=0> n_region;
  int<lower=0> n_state;
  int<lower=1, upper=n_age> age[N];
  int<lower=1, upper=n_age_edu> age_edu[N];
  vector<lower=0, upper=1>[N] black;
  int<lower=1, upper=n_edu> edu[N];
  vector<lower=0, upper=1>[N] female;
  int<lower=1, upper=n_region> region[n_state];
  int<lower=1, upper=n_state> state[N];
  vector[n_state] v_prev;
  int<lower=0, upper=1> y[N];
}
parameters {
  vector[n_age] b_age;
  vector[n_age_edu] b_age_edu;
  vector[n_edu] b_edu;
  vector[n_region] b_region;
  vector[n_state] b_state;
  real b_v_prev;
  vector[4] beta;
  real mu;
  real mu_age;
  real mu_age_edu;
  real mu_edu;
  real mu_region;
  real<lower=0, upper=100> sigma_age;
  real<lower=0, upper=100> sigma_edu;
  real<lower=0, upper=100> sigma_age_edu;
  real<lower=0, upper=100> sigma_region;
  real<lower=0, upper=100> sigma_state;
}
transformed parameters {
  vector[n_age] b_age_adj;
  vector[n_age_edu] b_age_edu_adj;
  vector[n_edu] b_edu_adj;
  vector[n_region] b_region_adj;
  vector[n_state] b_state_hat;
  real mu_adj;
  vector[N] Xbeta;
  vector[N] p;
  vector[N] p_bound;
  for (i in 1 : N) 
    Xbeta[i] = beta[1] + beta[2] * female[i] + beta[3] * black[i]
               + beta[4] * female[i] * black[i] + b_age[age[i]]
               + b_edu[edu[i]] + b_age_edu[age_edu[i]] + b_state[state[i]];
  mu_adj = beta[1] + mean(b_age) + mean(b_edu) + mean(b_age_edu)
           + mean(b_state);
  b_age_adj = b_age - mean(b_age);
  b_edu_adj = b_edu - mean(b_edu);
  b_age_edu_adj = b_age_edu - mean(b_age_edu);
  b_region_adj = b_region - mean(b_region);
  for (j in 1 : n_state) 
    b_state_hat[j] = b_region[region[j]] + 100 * b_v_prev * v_prev[j];
}
model {
  mu_age ~ normal(0, 1);
  mu_edu ~ normal(0, 1);
  mu_age_edu ~ normal(0, 1);
  mu_region ~ normal(0, 1);
  mu ~ normal(0, 100);
  sigma_age ~ uniform(0, 100);
  sigma_edu ~ uniform(0, 100);
  sigma_age_edu ~ uniform(0, 100);
  sigma_region ~ uniform(0, 100);
  sigma_state ~ uniform(0, 100);
  beta ~ normal(0, 100);
  b_age ~ normal(100 * mu_age, sigma_age);
  b_edu ~ normal(100 * mu_edu, sigma_edu);
  b_age_edu ~ normal(100 * mu_age_edu, sigma_age_edu);
  b_state ~ normal(b_state_hat, sigma_state);
  b_v_prev ~ normal(0, 1);
  b_region ~ normal(100 * mu_region, sigma_region);
  y ~ bernoulli_logit(Xbeta);
}

  $ ../../../../../../install/default/bin/stanc --auto_format election88_expansion.stan
data {
  int<lower=0> N;
  int<lower=0> n_age;
  int<lower=0> n_age_edu;
  int<lower=0> n_edu;
  int<lower=0> n_region;
  int<lower=0> n_state;
  int<lower=1, upper=n_age> age[N];
  int<lower=1, upper=n_age_edu> age_edu[N];
  vector<lower=0, upper=1>[N] black;
  int<lower=1, upper=n_edu> edu[N];
  vector<lower=0, upper=1>[N] female;
  int<lower=1, upper=n_region> region[n_state];
  int<lower=1, upper=n_state> state[N];
  vector[n_state] v_prev;
  int<lower=0, upper=1> y[N];
}
parameters {
  real b_0;
  real b_black;
  real b_female;
  real b_female_black;
  real b_v_prev_raw;
  vector[4] beta;
  vector[n_age_edu] b_age_edu;
  vector[n_age] b_age_raw;
  vector[n_edu] b_edu_raw;
  vector[n_region] b_region_raw;
  vector[n_state] b_state_raw;
  real mu;
  real mu_age_edu;
  real<lower=0> sigma_age_raw;
  real<lower=0> sigma_edu_raw;
  real<lower=0> sigma_region_raw;
  real<lower=0> sigma_state_raw;
  real<lower=0> sigma_age_edu_raw;
  real<lower=0> xi_age;
  real<lower=0> xi_edu;
  real<lower=0> xi_age_edu;
  real<lower=0> xi_state;
}
transformed parameters {
  vector[N] Xbeta;
  vector[n_age] b_age;
  vector[n_age_edu] b_age_edu_adj;
  vector[n_edu] b_edu;
  vector[n_region] b_region;
  vector[n_state] b_state;
  vector[n_state] b_state_hat;
  real mu_adj;
  real<lower=0> sigma_age;
  real<lower=0> sigma_edu;
  real<lower=0> sigma_age_edu;
  real<lower=0> sigma_state;
  real<lower=0> sigma_region;
  b_age = xi_age * (b_age_raw - mean(b_age_raw));
  b_edu = xi_edu * (b_edu_raw - mean(b_edu_raw));
  b_age_edu_adj = b_age_edu - mean(b_age_edu);
  b_region = xi_state * b_region_raw;
  b_state = xi_state * (b_state_raw - mean(b_state_raw));
  mu_adj = beta[1] + mean(b_age) + mean(b_edu) + mean(b_age_edu)
           + mean(b_state);
  sigma_age = xi_age * sigma_age_raw;
  sigma_edu = xi_edu * sigma_edu_raw;
  sigma_age_edu = xi_age_edu * sigma_age_edu_raw;
  sigma_state = xi_state * sigma_state_raw;
  sigma_region = xi_state * sigma_region_raw;
  for (i in 1 : N) 
    Xbeta[i] = beta[1] + beta[2] * female[i] + beta[3] * black[i]
               + beta[4] * female[i] * black[i] + b_age[age[i]]
               + b_edu[edu[i]] + b_age_edu[age_edu[i]] + b_state[state[i]];
  for (j in 1 : n_state) 
    b_state_hat[j] = b_region_raw[region[j]] + b_v_prev_raw * v_prev[j];
}
model {
  mu ~ normal(0, 100);
  mu_age_edu ~ normal(0, 1);
  b_age_raw ~ normal(0, sigma_age_raw);
  b_edu_raw ~ normal(0, sigma_edu_raw);
  b_age_edu ~ normal(100 * mu_age_edu, sigma_age_edu);
  b_state_raw ~ normal(b_state_hat, sigma_state_raw);
  beta ~ normal(0, 100);
  b_v_prev_raw ~ normal(0, 100);
  b_region_raw ~ normal(0, sigma_region_raw);
  y ~ bernoulli_logit(Xbeta);
}


Warning: deprecated language construct used in 'election88_expansion.stan', line 69, column 48:
   -------------------------------------------------
    67:    sigma_age_edu = xi_age_edu*sigma_age_edu_raw;
    68:    sigma_state = xi_state*sigma_state_raw;
    69:    sigma_region = xi_state*sigma_region_raw;     # not "xi_region"
                                                         ^
    70:  
    71:    for (i in 1:N)
   -------------------------------------------------

Comments beginning with # are deprecated. Please use // in place of # for line comments.

  $ ../../../../../../install/default/bin/stanc --auto_format item_response.stan
data {
  int<lower=0> K;
  int<lower=0> J;
  int<lower=0> N;
  int<lower=0, upper=J> j[N];
  int<lower=1, upper=K> k[N];
  vector[N] x;
  int<lower=0, upper=1> y[N];
}
parameters {
  vector[J] a_raw;
  vector[K] b_raw;
  vector[K] g_raw;
  real b_0_raw;
  real mu_a_raw;
  real mu_g_raw;
  real<lower=0> d_raw;
  real<lower=0, upper=100> sigma_a_raw;
  real<lower=0, upper=100> sigma_b_raw;
  real<lower=0, upper=100> sigma_g_raw;
}
transformed parameters {
  vector[J] a;
  vector[K] b;
  vector[K] b_hat_raw;
  real d;
  vector[K] g;
  vector[N] p;
  real scale;
  real shift;
  shift = mean(a_raw);
  scale = sd(a_raw);
  a = (a_raw - shift) / scale;
  b_hat_raw = 100 * b_0_raw + d_raw * x;
  b = (b_raw - shift) / scale;
  g = g_raw * scale;
  d = d_raw * scale;
  for (i in 1 : N) 
    p[i] = (g[k[i]] * (a[j[i]] - b[k[i]]));
}
model {
  mu_a_raw ~ normal(0, 1);
  sigma_a_raw ~ uniform(0, 100);
  a_raw ~ normal(100 * mu_a_raw, sigma_a_raw);
  sigma_b_raw ~ uniform(0, 100);
  b_raw ~ normal(b_hat_raw, sigma_b_raw);
  mu_g_raw ~ normal(0, 1);
  sigma_g_raw ~ uniform(0, 100);
  g_raw ~ normal(100 * mu_g_raw, sigma_g_raw);
  b_0_raw ~ normal(0, 1);
  d_raw ~ normal(0, 100);
  y ~ bernoulli_logit(p);
}

  $ ../../../../../../install/default/bin/stanc --auto_format pilots.stan
data {
  int<lower=0> N;
  int<lower=0> n_airport;
  int<lower=0> n_treatment;
  int<lower=1, upper=n_airport> airport[N];
  int<lower=1, upper=n_treatment> treatment[N];
  vector[N] y;
}
parameters {
  vector[n_airport] d;
  vector[n_treatment] g;
  real mu;
  real mu_d;
  real mu_g;
  real<lower=0, upper=100> sigma_d;
  real<lower=0, upper=100> sigma_g;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[n_airport] d_adj;
  vector[n_treatment] g_adj;
  real mu_adj;
  real mu_d2;
  real mu_g2;
  vector[N] y_hat;
  mu_g2 = mean(g);
  mu_d2 = mean(d);
  g_adj = g - mu_g2;
  d_adj = d - mu_d2;
  mu_adj = mu + mu_g2 + mu_d2;
  for (i in 1 : N) 
    y_hat[i] = mu + g[treatment[i]] + d[airport[i]];
}
model {
  sigma_y ~ uniform(0, 100);
  sigma_d ~ uniform(0, 100);
  sigma_g ~ uniform(0, 100);
  mu ~ normal(0, 100);
  mu_g ~ normal(0, 1);
  mu_d ~ normal(0, 1);
  g ~ normal(100 * mu_g, sigma_g);
  d ~ normal(100 * mu_d, sigma_d);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format pilots_expansion.stan
data {
  int<lower=0> N;
  int<lower=0> n_airport;
  int<lower=0> n_treatment;
  int<lower=1, upper=n_airport> airport[N];
  int<lower=1, upper=n_treatment> treatment[N];
  vector[N] y;
}
parameters {
  vector[n_airport] d_raw;
  vector[n_treatment] g_raw;
  real mu;
  real mu_d_raw;
  real mu_g_raw;
  real<lower=0, upper=100> sigma_d_raw;
  real<lower=0, upper=100> sigma_g_raw;
  real<lower=0, upper=100> sigma_y;
  real xi_d;
  real<lower=0, upper=100> xi_g;
}
transformed parameters {
  vector[n_airport] d;
  vector[n_treatment] g;
  real<lower=0> sigma_d;
  real<lower=0> sigma_g;
  vector[N] y_hat;
  g = xi_g * (g_raw - mean(g_raw));
  d = xi_d * (d_raw - mean(d_raw));
  sigma_g = xi_g * sigma_g_raw;
  sigma_d = fabs(xi_d) * sigma_d_raw;
  for (i in 1 : N) 
    y_hat[i] = mu + g[treatment[i]] + d[airport[i]];
}
model {
  sigma_y ~ uniform(0, 100);
  sigma_d_raw ~ uniform(0, 100);
  sigma_g_raw ~ uniform(0, 100);
  xi_g ~ uniform(0, 100);
  xi_d ~ normal(0, 100);
  mu ~ normal(0, 100);
  mu_g_raw ~ normal(0, 1);
  mu_d_raw ~ normal(0, 1);
  g_raw ~ normal(100 * mu_g_raw, sigma_g_raw);
  d_raw ~ normal(100 * mu_d_raw, sigma_d_raw);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  int<lower=1, upper=J> county[N];
  vector[N] y;
}
parameters {
  vector[J] eta;
  real mu;
  real<lower=0, upper=100> sigma_eta;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = 0.1 * mu + eta[county[i]];
}
model {
  sigma_eta ~ uniform(0, 100);
  sigma_y ~ uniform(0, 100);
  mu ~ normal(0, 1);
  eta ~ normal(0, sigma_eta);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon_chr.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  int<lower=1, upper=J> county[N];
  vector[N] y;
}
parameters {
  vector[J] et;
  real mu_eta;
  real<lower=0, upper=100> sigma_eta;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[J] eta;
  vector[N] y_hat;
  eta = 0.1 * mu_eta + sigma_eta * et;
  for (i in 1 : N) 
    y_hat[i] = eta[county[i]];
}
model {
  et ~ normal(0, 1);
  mu_eta ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon_redundant.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  int<lower=1, upper=J> county[N];
  vector[N] y;
}
parameters {
  vector[J] eta;
  real mu;
  real<lower=0, upper=100> sigma_eta;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[J] eta_adj;
  real mean_eta;
  real mu_adj;
  vector[N] y_hat;
  mean_eta = mean(eta);
  mu_adj = 100 * mu + mean_eta;
  eta_adj = eta - mean_eta;
  for (i in 1 : N) 
    y_hat[i] = 100 * mu + eta[county[i]];
}
model {
  mu ~ normal(0, 1);
  sigma_eta ~ uniform(0, 100);
  sigma_y ~ uniform(0, 100);
  eta ~ normal(0, sigma_eta);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon_redundant_chr.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  int<lower=1, upper=J> county[N];
  vector[N] y;
}
parameters {
  vector[J] et;
  real mu_eta;
  real<lower=0, upper=100> sigma_eta;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[J] eta;
  vector[J] eta_adj;
  real mean_eta;
  real mu_adj;
  vector[N] y_hat;
  eta = 100 * mu_eta + sigma_eta * et;
  mean_eta = mean(eta);
  mu_adj = mean_eta;
  eta_adj = eta - mean_eta;
  for (i in 1 : N) 
    y_hat[i] = eta[county[i]];
}
model {
  mu_eta ~ normal(0, 1);
  sigma_eta ~ uniform(0, 100);
  sigma_y ~ uniform(0, 100);
  et ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format schools.stan
data {
  int<lower=0> N;
  vector[N] y;
  vector[N] sigma_y;
}
parameters {
  vector[N] eta;
  real mu_theta;
  real<lower=0, upper=100> sigma_eta;
  real xi;
}
transformed parameters {
  real<lower=0> sigma_theta;
  vector[N] theta;
  theta = mu_theta + xi * eta;
  sigma_theta = fabs(xi) / sigma_eta;
}
model {
  mu_theta ~ normal(0, 100);
  sigma_eta ~ inv_gamma(1, 1);
  eta ~ normal(0, sigma_eta);
  xi ~ normal(0, 5);
  y ~ normal(theta, sigma_y);
}

