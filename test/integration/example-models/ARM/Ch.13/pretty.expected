  $ ../../../../../../install/default/bin/stanc --auto_format earnings_latin_square.stan
data {
  int<lower=0> N;
  int<lower=0> n_age;
  int<lower=0> n_eth;
  int<lower=1, upper=n_age> age[N];
  int<lower=1, upper=n_eth> eth[N];
  vector[N] x;
  vector[N] y;
}
parameters {
  vector[n_eth] a1;
  vector[n_eth] a2;
  vector[n_age] b1;
  vector[n_age] b2;
  matrix[n_eth, n_age] c;
  matrix[n_eth, n_age] d;
  real mu_a1;
  real mu_a2;
  real mu_b1;
  real mu_b2;
  real mu_c;
  real mu_d;
  real<lower=0, upper=100> sigma_a1;
  real<lower=0, upper=100> sigma_a2;
  real<lower=0, upper=100> sigma_b1;
  real<lower=0, upper=100> sigma_b2;
  real<lower=0, upper=100> sigma_c;
  real<lower=0, upper=100> sigma_d;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = a1[eth[i]] + a2[eth[i]] * x[i] + b1[age[i]]
               + b2[age[i]] * x[i] + c[eth[i], age[i]]
               + d[eth[i], age[i]] * x[i];
}
model {
  mu_a1 ~ normal(0, 1);
  mu_a2 ~ normal(0, 1);
  a1 ~ normal(10 * mu_a1, sigma_a1);
  a2 ~ normal(mu_a2, sigma_a2);
  mu_b1 ~ normal(0, 1);
  mu_b2 ~ normal(0, 1);
  b1 ~ normal(10 * mu_b1, sigma_b1);
  b2 ~ normal(0.1 * mu_b2, sigma_b2);
  mu_c ~ normal(0, 1);
  for (i in 1 : n_eth) 
    c[i] ~ normal(10 * mu_c, sigma_c);
  mu_d ~ normal(0, 1);
  for (i in 1 : n_eth) 
    d[i] ~ normal(0.1 * mu_d, sigma_d);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format earnings_latin_square_chr.stan
data {
  int<lower=0> N;
  int<lower=0> n_age;
  int<lower=0> n_eth;
  int<lower=1, upper=n_age> age[N];
  int<lower=1, upper=n_eth> eth[N];
  vector[N] x_centered;
  vector[N] y;
}
parameters {
  vector[n_eth] eta_a1;
  vector[n_eth] eta_a2;
  vector[n_age] eta_b1;
  vector[n_age] eta_b2;
  matrix[n_eth, n_age] eta_c;
  matrix[n_eth, n_age] eta_d;
  real mu_a1;
  real mu_a2;
  real mu_b1;
  real mu_b2;
  real mu_c;
  real mu_d;
  real<lower=0, upper=100> sigma_a1;
  real<lower=0, upper=100> sigma_a2;
  real<lower=0, upper=100> sigma_b1;
  real<lower=0, upper=100> sigma_b2;
  real<lower=0, upper=100> sigma_c;
  real<lower=0, upper=100> sigma_d;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[n_eth] a1;
  vector[n_eth] a2;
  vector[n_age] b1;
  vector[n_age] b2;
  matrix[n_eth, n_age] c;
  matrix[n_eth, n_age] d;
  vector[N] y_hat;
  a1 = 5 * mu_a1 + sigma_a1 * eta_a1;
  a2 = mu_a2 + sigma_a2 * eta_a2;
  b1 = 5 * mu_b1 + sigma_b1 * eta_b1;
  b2 = 0.1 * mu_b2 + sigma_b2 * eta_b2;
  c = 0.1 * mu_c + sigma_c * eta_c;
  d = 0.01 * mu_d + sigma_d * eta_d;
  for (i in 1 : N) 
    y_hat[i] = a1[eth[i]] + a2[eth[i]] * x_centered[i] + b1[age[i]]
               + b2[age[i]] * x_centered[i] + c[eth[i], age[i]]
               + d[eth[i], age[i]] * x_centered[i];
}
model {
  mu_a1 ~ normal(0, 1);
  mu_a2 ~ normal(0, 1);
  eta_a1 ~ normal(0, 1);
  eta_a2 ~ normal(0, 1);
  mu_b1 ~ normal(0, 1);
  mu_b2 ~ normal(0, 1);
  eta_b1 ~ normal(0, 1);
  eta_b2 ~ normal(0, 1);
  mu_c ~ normal(0, 1);
  for (j in 1 : n_eth) 
    eta_c[j] ~ normal(0, 1);
  mu_d ~ normal(0, 1);
  for (j in 1 : n_eth) 
    eta_d[j] ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format earnings_vary_si.stan
data {
  int<lower=0> N;
  vector[N] earn;
  int eth[N];
  vector[N] height;
}
transformed data {
  vector[N] log_earn;
  log_earn = log(earn);
}
parameters {
  vector[4] a1;
  vector[4] a2;
  real<lower=0> sigma_a1;
  real<lower=0> sigma_a2;
  real<lower=0> sigma_y;
  real mu_a1;
  real mu_a2;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = a1[eth[i]] + a2[eth[i]] * height[i];
}
model {
  mu_a1 ~ normal(0, 1);
  mu_a2 ~ normal(0, 1);
  a1 ~ normal(10 * mu_a1, sigma_a1);
  a2 ~ normal(0.01 * mu_a2, sigma_a2);
  sigma_a1 ~ cauchy(0, 5);
  sigma_a2 ~ cauchy(0, 5);
  sigma_y ~ cauchy(0, 5);
  log_earn ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format earnings_vary_si_chr.stan
data {
  int<lower=0> N;
  vector[N] earn;
  int eth[N];
  vector[N] height;
}
transformed data {
  vector[N] log_earn;
  log_earn = log(earn);
}
parameters {
  vector[4] eta1;
  vector[4] eta2;
  real mu_a1;
  real mu_a2;
  real xi;
  real<lower=0> sigma_a1;
  real<lower=0> sigma_a2;
  real<lower=0> sigma_y;
}
transformed parameters {
  vector[4] a1;
  vector[4] a2;
  vector[N] y_hat;
  a1 = 10 * mu_a1 + sigma_a1 * eta1;
  a2 = 0.1 * mu_a2 + sigma_a2 * eta2;
  for (i in 1 : N) 
    y_hat[i] = a1[eth[i]] + a2[eth[i]] * height[i];
}
model {
  mu_a1 ~ normal(0, 1);
  mu_a2 ~ normal(0, 1);
  eta1 ~ normal(0, 1);
  eta2 ~ normal(0, 1);
  sigma_a1 ~ cauchy(0, 5);
  sigma_a2 ~ cauchy(0, 5);
  sigma_y ~ cauchy(0, 5);
  log_earn ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format pilots.stan
data {
  int<lower=0> N;
  int<lower=0> n_groups;
  int<lower=0> n_scenarios;
  int<lower=1, upper=n_groups> group_id[N];
  int<lower=1, upper=n_scenarios> scenario_id[N];
  vector[N] y;
}
parameters {
  vector[n_groups] gamma;
  vector[n_scenarios] delta;
  real mu;
  real<lower=0, upper=100> sigma_gamma;
  real<lower=0, upper=100> sigma_delta;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = mu + gamma[group_id[i]] + delta[scenario_id[i]];
}
model {
  gamma ~ normal(0, sigma_gamma);
  delta ~ normal(0, sigma_delta);
  y ~ normal(y_hat, sigma_y);
}


Warning: deprecated language construct used in 'pilots.stan', line 24, column 2:
   -------------------------------------------------
    22:  }
    23:  model {
    24:    # mu ~ unif(-inf, +inf); # implicit
           ^
    25:    gamma ~ normal(0, sigma_gamma);
    26:    delta ~ normal(0, sigma_delta);
   -------------------------------------------------

Comments beginning with # are deprecated. Please use // in place of # for line comments.

  $ ../../../../../../install/default/bin/stanc --auto_format pilots_chr.stan
data {
  int<lower=0> N;
  int<lower=0> n_groups;
  int<lower=0> n_scenarios;
  int<lower=1, upper=n_groups> group_id[N];
  int<lower=1, upper=n_scenarios> scenario_id[N];
  vector[N] y;
}
parameters {
  vector[n_groups] eta_a;
  vector[n_scenarios] eta_b;
  real mu_a;
  real mu_b;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_b;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  vector[n_groups] a;
  vector[n_scenarios] b;
  a = 0.1 * mu_a + eta_a * sigma_a;
  b = 0.1 * mu_b + eta_b * sigma_b;
  for (i in 1 : N) 
    y_hat[i] = a[group_id[i]] + b[scenario_id[i]];
}
model {
  mu_a ~ normal(0, 1);
  mu_b ~ normal(0, 1);
  eta_a ~ normal(0, 1);
  eta_b ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon_inter_vary.stan
data {
  int<lower=0> N;
  int<lower=1, upper=85> county[N];
  vector[N] u;
  vector[N] x;
  vector[N] y;
}
transformed data {
  vector[N] inter;
  inter = u .* x;
}
parameters {
  vector[85] a;
  vector[85] b;
  vector[2] beta;
  real mu_a;
  real mu_b;
  real mu_beta;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_b;
  real<lower=0, upper=100> sigma_beta;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + x[i] * b[county[i]] + beta[1] * u[i]
               + beta[2] * inter[i];
}
model {
  mu_beta ~ normal(0, 1);
  beta ~ normal(100 * mu_beta, sigma_beta);
  mu_a ~ normal(0, 1);
  a ~ normal(mu_a, sigma_a);
  mu_b ~ normal(0, 1);
  b ~ normal(0.1 * mu_b, sigma_b);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon_inter_vary_chr.stan
data {
  int<lower=0> N;
  int<lower=1, upper=85> county[N];
  vector[N] u;
  vector[N] x;
  vector[N] y;
}
transformed data {
  vector[N] inter;
  inter = u .* x;
}
parameters {
  vector[2] beta;
  vector[85] eta1;
  vector[85] eta2;
  real mu_a1;
  real mu_a2;
  real<lower=0, upper=100> sigma_a1;
  real<lower=0, upper=100> sigma_a2;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[85] a1;
  vector[85] a2;
  vector[N] y_hat;
  a1 = mu_a1 + sigma_a1 * eta1;
  a2 = 0.1 * mu_a2 + sigma_a2 * eta2;
  for (i in 1 : N) 
    y_hat[i] = a1[county[i]] + x[i] * a2[county[i]] + beta[1] * u[i]
               + beta[2] * inter[i];
}
model {
  beta ~ normal(0, 100);
  mu_a1 ~ normal(0, 1);
  mu_a2 ~ normal(0, 1);
  eta1 ~ normal(0, 1);
  eta2 ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon_vary_si.stan
data {
  int<lower=0> N;
  int<lower=1, upper=85> county[N];
  vector[N] x;
  vector[N] y;
}
parameters {
  vector[85] a1;
  vector[85] a2;
  real mu_a1;
  real mu_a2;
  real<lower=0, upper=100> sigma_a1;
  real<lower=0, upper=100> sigma_a2;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = a1[county[i]] + a2[county[i]] * x[i];
}
model {
  mu_a1 ~ normal(0, 1);
  a1 ~ normal(mu_a1, sigma_a1);
  mu_a2 ~ normal(0, 1);
  a2 ~ normal(0.1 * mu_a2, sigma_a2);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon_vary_si_chr.stan
data {
  int<lower=0> N;
  int<lower=1, upper=85> county[N];
  vector[N] x;
  vector[N] y;
}
parameters {
  vector[85] eta1;
  vector[85] eta2;
  real mu_a1;
  real mu_a2;
  real<lower=0, upper=100> sigma_a1;
  real<lower=0, upper=100> sigma_a2;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[85] a1;
  vector[85] a2;
  vector[N] y_hat;
  a1 = mu_a1 + sigma_a1 * eta1;
  a2 = 0.1 * mu_a2 + sigma_a2 * eta2;
  for (i in 1 : N) 
    y_hat[i] = a1[county[i]] + a2[county[i]] * x[i];
}
model {
  mu_a1 ~ normal(0, 1);
  mu_a2 ~ normal(0, 1);
  eta1 ~ normal(0, 1);
  eta2 ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format y_x.stan
data {
  int<lower=0> N;
  vector[N] x;
  vector[N] y;
}
parameters {
  vector[2] beta;
  real<lower=0> sigma;
}
model {
  y ~ normal(beta[1] + beta[2] * x, sigma);
}

