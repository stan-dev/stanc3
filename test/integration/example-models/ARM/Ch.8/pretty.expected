  $ ../../../../../../install/default/bin/stanc --auto_format grades.stan
data {
  int<lower=0> N;
  vector[N] final;
  vector[N] midterm;
}
parameters {
  vector[2] beta;
  real<lower=0> sigma;
}
model {
  final ~ normal(beta[1] + beta[2] * midterm, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format lightspeed.stan
data {
  int<lower=0> N;
  vector[N] y;
}
parameters {
  vector[1] beta;
  real<lower=0> sigma;
}
model {
  y ~ normal(beta[1], sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format roaches.stan
data {
  int<lower=0> N;
  vector[N] exposure2;
  vector[N] roach1;
  vector[N] senior;
  vector[N] treatment;
  int y[N];
}
transformed data {
  vector[N] log_expo;
  log_expo = log(exposure2);
}
parameters {
  vector[4] beta;
}
model {
  y ~ poisson_log(log_expo + beta[1] + beta[2] * roach1 + beta[3] * treatment
                  + beta[4] * senior);
}

  $ ../../../../../../install/default/bin/stanc --auto_format roaches_overdispersion.stan
data {
  int<lower=0> N;
  vector[N] exposure2;
  vector[N] roach1;
  vector[N] senior;
  vector[N] treatment;
  int y[N];
}
transformed data {
  vector[N] log_expo;
  log_expo = log(exposure2);
}
parameters {
  vector[4] beta;
  vector[N] lambda;
  real<lower=0> tau;
}
transformed parameters {
  real<lower=0> sigma;
  sigma = 1.0 / sqrt(tau);
}
model {
  tau ~ gamma(0.001, 0.001);
  for (i in 1 : N) {
    lambda[i] ~ normal(0, sigma);
    y[i] ~ poisson_log(lambda[i] + log_expo[i] + beta[1]
                       + beta[2] * roach1[i] + beta[3] * senior[i]
                       + beta[4] * treatment[i]);
  }
}

  $ ../../../../../../install/default/bin/stanc --auto_format unemployment.stan
data {
  int<lower=0> N;
  vector[N] y;
  vector[N] y_lag;
}
parameters {
  vector[2] beta;
  real<lower=0> sigma;
}
model {
  y ~ normal(beta[1] + beta[2] * y_lag, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format y_x.stan
data {
  int<lower=0> N;
  vector[N] x;
  vector[N] y;
}
parameters {
  vector[2] beta;
  real<lower=0> sigma;
}
model {
  y ~ normal(beta[1] + beta[2] * x, sigma);
}

