  $ ../../../../../../install/default/bin/stanc --auto_format radon.1.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  int county[N];
}
parameters {
  real a[J];
  real b;
  real mu_a;
  real<lower=0> sigma_y;
  real<lower=0> sigma_a;
}
model {
  a ~ normal(mu_a, sigma_a);
  for (n in 1 : N) 
    y[n] ~ normal(a[county[n]] + b * x[n], sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon.2.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  int county[N];
  vector[J] u;
}
parameters {
  real a[J];
  real b;
  real g_0;
  real g_1;
  real<lower=0> sigma_y;
  real<lower=0> sigma_a;
}
model {
  for (j in 1 : J) 
    a[j] ~ normal(g_0 + g_1 * u[j], sigma_a);
  for (n in 1 : N) 
    y[n] ~ normal(a[county[n]] + b * x[n], sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon.nopooling.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  int county[N];
}
parameters {
  real a[J];
  real b;
  real<lower=0> sigma_y;
}
model {
  for (i in 1 : N) 
    y[i] ~ normal(a[county[i]] + b * x[i], sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon.pooling.stan
data {
  int<lower=0> N;
  vector[N] y;
  vector<lower=0, upper=1>[N] x;
}
parameters {
  real a;
  real b;
  real<lower=0> sigma_y;
}
model {
  y ~ normal(a + b * x, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format weight.stan
data {
  int<lower=0> N;
  vector[N] weight;
  vector[N] height;
}
transformed data {
  vector[N] c_height;
  c_height = height - mean(height);
}
parameters {
  real a;
  real b;
  real<lower=0> sigma;
}
model {
  weight ~ normal(a + b * c_height, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format weight_censored.stan
data {
  int<lower=0> N;
  int<lower=0> N_obs;
  int<lower=0> N_cens;
  vector[N] weight;
  vector[N] height;
  real<lower=max(weight)> C;
}
transformed data {
  vector[N] c_height;
  vector[N_obs] weight_obs;
  vector[N_obs] c_height_obs;
  vector[N_cens] c_height_cens;
  int i;
  int j;
  c_height = height - mean(height);
  i = 1;
  j = 1;
  for (n in 1 : N) {
    if (weight[n] == C) {
      c_height_cens[i] = c_height[n];
      i = i + 1;
    }
    else {
      weight_obs[j] = weight[n];
      c_height_obs[j] = c_height[n];
      j = j + 1;
    }
  }
}
parameters {
  vector<lower=C>[N_cens] weight_cens;
  real a;
  real b;
  real<lower=0> sigma;
}
model {
  weight_obs ~ normal(a + b * c_height_obs, sigma);
  weight_cens ~ normal(a + b * c_height_cens, sigma);
}

