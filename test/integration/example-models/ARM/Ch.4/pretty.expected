  $ ../../../../../../install/default/bin/stanc --auto_format earn_height.stan
data {
  int<lower=0> N;
  vector[N] earn;
  vector[N] height;
}
parameters {
  vector[2] beta;
  real<lower=0> sigma;
}
model {
  earn ~ normal(beta[1] + beta[2] * height, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format kidiq_interaction.stan
data {
  int<lower=0> N;
  vector[N] kid_score;
  vector[N] mom_hs;
  vector[N] mom_iq;
}
transformed data {
  vector[N] inter;
  inter = mom_hs .* mom_iq;
}
parameters {
  vector[4] beta;
  real<lower=0> sigma;
}
model {
  kid_score ~ normal(beta[1] + beta[2] * mom_hs + beta[3] * mom_iq
                     + beta[4] * inter, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format kidiq_interaction_c.stan
data {
  int<lower=0> N;
  vector[N] kid_score;
  vector[N] mom_hs;
  vector[N] mom_iq;
}
transformed data {
  vector[N] c_mom_hs;
  vector[N] c_mom_iq;
  vector[N] inter;
  c_mom_hs = mom_hs - mean(mom_hs);
  c_mom_iq = mom_iq - mean(mom_iq);
  inter = c_mom_hs .* c_mom_iq;
}
parameters {
  vector[4] beta;
  real<lower=0> sigma;
}
model {
  kid_score ~ normal(beta[1] + beta[2] * c_mom_hs + beta[3] * c_mom_iq
                     + beta[4] * inter, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format kidiq_interaction_c2.stan
data {
  int<lower=0> N;
  vector[N] kid_score;
  vector[N] mom_hs;
  vector[N] mom_iq;
}
transformed data {
  vector[N] c2_mom_hs;
  vector[N] c2_mom_iq;
  vector[N] inter;
  c2_mom_hs = mom_hs - 0.5;
  c2_mom_iq = mom_iq - 100;
  inter = c2_mom_hs .* c2_mom_iq;
}
parameters {
  vector[4] beta;
  real<lower=0> sigma;
}
model {
  kid_score ~ normal(beta[1] + beta[2] * c2_mom_hs + beta[3] * c2_mom_iq
                     + beta[4] * inter, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format kidiq_interaction_z.stan
data {
  int<lower=0> N;
  vector[N] kid_score;
  vector[N] mom_hs;
  vector[N] mom_iq;
}
transformed data {
  vector[N] z_mom_hs;
  vector[N] z_mom_iq;
  vector[N] inter;
  z_mom_hs = (mom_hs - mean(mom_hs)) / (2 * sd(mom_hs));
  z_mom_iq = (mom_iq - mean(mom_iq)) / (2 * sd(mom_iq));
  inter = z_mom_hs .* z_mom_iq;
}
parameters {
  vector[4] beta;
  real<lower=0> sigma;
}
model {
  kid_score ~ normal(beta[1] + beta[2] * z_mom_hs + beta[3] * z_mom_iq
                     + beta[4] * inter, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format kidscore_momwork.stan
data {
  int<lower=0> N;
  vector[N] kid_score;
  int mom_work[N];
}
transformed data {
  vector[N] work2;
  vector[N] work3;
  vector[N] work4;
  for (i in 1 : N) {
    work2[i] = mom_work[i] == 2;
    work3[i] = mom_work[i] == 3;
    work4[i] = mom_work[i] == 4;
  }
}
parameters {
  vector[4] beta;
  real<lower=0> sigma;
}
model {
  kid_score ~ normal(beta[1] + beta[2] * work2 + beta[3] * work3
                     + beta[4] * work4, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format log10earn_height.stan
data {
  int<lower=0> N;
  vector[N] earn;
  vector[N] height;
}
transformed data {
  vector[N] log10_earn;
  for (i in 1 : N) {
    log10_earn[i] = log10(earn[i]);
  }
}
parameters {
  vector[2] beta;
  real<lower=0> sigma;
}
model {
  log10_earn ~ normal(beta[1] + beta[2] * height, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format logearn_height.stan
data {
  int<lower=0> N;
  vector[N] earn;
  vector[N] height;
}
transformed data {
  vector[N] log_earn;
  log_earn = log(earn);
}
parameters {
  vector[2] beta;
  real<lower=0> sigma;
}
model {
  log_earn ~ normal(beta[1] + beta[2] * height, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format logearn_height_male.stan
data {
  int<lower=0> N;
  vector[N] earn;
  vector[N] height;
  vector[N] male;
}
transformed data {
  vector[N] log_earn;
  log_earn = log(earn);
}
parameters {
  vector[3] beta;
  real<lower=0> sigma;
}
model {
  log_earn ~ normal(beta[1] + beta[2] * height + beta[3] * male, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format logearn_interaction.stan
data {
  int<lower=0> N;
  vector[N] earn;
  vector[N] height;
  vector[N] male;
}
transformed data {
  vector[N] log_earn;
  vector[N] inter;
  log_earn = log(earn);
  inter = height .* male;
}
parameters {
  vector[4] beta;
  real<lower=0> sigma;
}
model {
  log_earn ~ normal(beta[1] + beta[2] * height + beta[3] * male
                    + beta[4] * inter, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format logearn_interaction_z.stan
data {
  int<lower=0> N;
  vector[N] earn;
  vector[N] height;
  vector[N] male;
}
transformed data {
  vector[N] log_earn;
  vector[N] z_height;
  vector[N] inter;
  log_earn = log(earn);
  z_height = (height - mean(height)) / sd(height);
  inter = z_height .* male;
}
parameters {
  vector[4] beta;
  real<lower=0> sigma;
}
model {
  log_earn ~ normal(beta[1] + beta[2] * z_height + beta[3] * male
                    + beta[4] * inter, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format logearn_logheight.stan
data {
  int<lower=0> N;
  vector[N] earn;
  vector[N] height;
  vector[N] male;
}
transformed data {
  vector[N] log_earn;
  vector[N] log_height;
  log_earn = log(earn);
  log_height = log(height);
}
parameters {
  vector[3] beta;
  real<lower=0> sigma;
}
model {
  log_earn ~ normal(beta[1] + beta[2] * log_height + beta[3] * male, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format mesquite.stan
data {
  int<lower=0> N;
  vector[N] weight;
  vector[N] diam1;
  vector[N] diam2;
  vector[N] canopy_height;
  vector[N] total_height;
  vector[N] density;
  vector[N] group;
}
parameters {
  vector[7] beta;
  real<lower=0> sigma;
}
model {
  weight ~ normal(beta[1] + beta[2] * diam1 + beta[3] * diam2
                  + beta[4] * canopy_height + beta[5] * total_height
                  + beta[6] * density + beta[7] * group, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format mesquite_log.stan
data {
  int<lower=0> N;
  vector[N] weight;
  vector[N] diam1;
  vector[N] diam2;
  vector[N] canopy_height;
  vector[N] total_height;
  vector[N] density;
  vector[N] group;
}
transformed data {
  vector[N] log_weight;
  vector[N] log_diam1;
  vector[N] log_diam2;
  vector[N] log_canopy_height;
  vector[N] log_total_height;
  vector[N] log_density;
  log_weight = log(weight);
  log_diam1 = log(diam1);
  log_diam2 = log(diam2);
  log_canopy_height = log(canopy_height);
  log_total_height = log(total_height);
  log_density = log(density);
}
parameters {
  vector[7] beta;
  real<lower=0> sigma;
}
model {
  log_weight ~ normal(beta[1] + beta[2] * log_diam1 + beta[3] * log_diam2
                      + beta[4] * log_canopy_height
                      + beta[5] * log_total_height + beta[6] * log_density
                      + beta[7] * group, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format mesquite_va.stan
data {
  int<lower=0> N;
  vector[N] weight;
  vector[N] diam1;
  vector[N] diam2;
  vector[N] canopy_height;
  vector[N] group;
}
transformed data {
  vector[N] log_weight;
  vector[N] log_canopy_volume;
  vector[N] log_canopy_area;
  log_weight = log(weight);
  log_canopy_volume = log(diam1 .* diam2 .* canopy_height);
  log_canopy_area = log(diam1 .* diam2);
}
parameters {
  vector[4] beta;
  real<lower=0> sigma;
}
model {
  log_weight ~ normal(beta[1] + beta[2] * log_canopy_volume
                      + beta[3] * log_canopy_area + beta[4] * group, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format mesquite_vas.stan
data {
  int<lower=0> N;
  vector[N] weight;
  vector[N] diam1;
  vector[N] diam2;
  vector[N] canopy_height;
  vector[N] total_height;
  vector[N] density;
  vector[N] group;
}
transformed data {
  vector[N] log_weight;
  vector[N] log_canopy_volume;
  vector[N] log_canopy_area;
  vector[N] log_canopy_shape;
  vector[N] log_total_height;
  vector[N] log_density;
  log_weight = log(weight);
  log_canopy_volume = log(diam1 .* diam2 .* canopy_height);
  log_canopy_area = log(diam1 .* diam2);
  log_canopy_shape = log(diam1 ./ diam2);
  log_total_height = log(total_height);
  log_density = log(density);
}
parameters {
  vector[7] beta;
  real<lower=0> sigma;
}
model {
  log_weight ~ normal(beta[1] + beta[2] * log_canopy_volume
                      + beta[3] * log_canopy_area
                      + beta[4] * log_canopy_shape
                      + beta[5] * log_total_height + beta[6] * log_density
                      + beta[7] * group, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format mesquite_vash.stan
data {
  int<lower=0> N;
  vector[N] weight;
  vector[N] diam1;
  vector[N] diam2;
  vector[N] canopy_height;
  vector[N] total_height;
  vector[N] group;
}
transformed data {
  vector[N] log_weight;
  vector[N] log_canopy_volume;
  vector[N] log_canopy_area;
  vector[N] log_canopy_shape;
  vector[N] log_total_height;
  log_weight = log(weight);
  log_canopy_volume = log(diam1 .* diam2 .* canopy_height);
  log_canopy_area = log(diam1 .* diam2);
  log_canopy_shape = log(diam1 ./ diam2);
  log_total_height = log(total_height);
}
parameters {
  vector[6] beta;
  real<lower=0> sigma;
}
model {
  log_weight ~ normal(beta[1] + beta[2] * log_canopy_volume
                      + beta[3] * log_canopy_area
                      + beta[4] * log_canopy_shape
                      + beta[5] * log_total_height + beta[6] * group, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format mesquite_volume.stan
data {
  int<lower=0> N;
  vector[N] weight;
  vector[N] diam1;
  vector[N] diam2;
  vector[N] canopy_height;
}
transformed data {
  vector[N] log_weight;
  vector[N] log_canopy_volume;
  log_weight = log(weight);
  log_canopy_volume = log(diam1 .* diam2 .* canopy_height);
}
parameters {
  vector[2] beta;
  real<lower=0> sigma;
}
model {
  log_weight ~ normal(beta[1] + beta[2] * log_canopy_volume, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format nes.stan
data {
  int<lower=0> N;
  vector[N] partyid7;
  vector[N] real_ideo;
  vector[N] race_adj;
  vector[N] educ1;
  vector[N] gender;
  vector[N] income;
  int age_discrete[N];
}
transformed data {
  vector[N] age30_44;
  vector[N] age45_64;
  vector[N] age65up;
  for (n in 1 : N) {
    age30_44[n] = age_discrete[n] == 2;
    age45_64[n] = age_discrete[n] == 3;
    age65up[n] = age_discrete[n] == 4;
  }
}
parameters {
  vector[9] beta;
  real<lower=0> sigma;
}
model {
  partyid7 ~ normal(beta[1] + beta[2] * real_ideo + beta[3] * race_adj
                    + beta[4] * age30_44 + beta[5] * age45_64
                    + beta[6] * age65up + beta[7] * educ1 + beta[8] * gender
                    + beta[9] * income, sigma);
}

