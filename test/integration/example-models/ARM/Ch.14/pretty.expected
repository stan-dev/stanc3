  $ ../../../../../../install/default/bin/stanc --auto_format election88.stan
data {
  int<lower=0> N;
  int<lower=0> n_state;
  vector<lower=0, upper=1>[N] black;
  vector<lower=0, upper=1>[N] female;
  int<lower=1, upper=n_state> state[N];
  int<lower=0, upper=1> y[N];
}
parameters {
  vector[n_state] a;
  vector[2] b;
  real<lower=0, upper=100> sigma_a;
  real mu_a;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = b[1] * black[i] + b[2] * female[i] + a[state[i]];
}
model {
  mu_a ~ normal(0, 1);
  a ~ normal(mu_a, sigma_a);
  b ~ normal(0, 100);
  y ~ bernoulli_logit(y_hat);
}

  $ ../../../../../../install/default/bin/stanc --auto_format election88_full.stan
data {
  int<lower=0> N;
  int<lower=0> n_age;
  int<lower=0> n_age_edu;
  int<lower=0> n_edu;
  int<lower=0> n_region_full;
  int<lower=0> n_state;
  int<lower=0, upper=n_age> age[N];
  int<lower=0, upper=n_age_edu> age_edu[N];
  vector<lower=0, upper=1>[N] black;
  int<lower=0, upper=n_edu> edu[N];
  vector<lower=0, upper=1>[N] female;
  int<lower=0, upper=n_region_full> region_full[N];
  int<lower=0, upper=n_state> state[N];
  vector[N] v_prev_full;
  int<lower=0, upper=1> y[N];
}
parameters {
  vector[n_age] a;
  vector[n_edu] b;
  vector[n_age_edu] c;
  vector[n_state] d;
  vector[n_region_full] e;
  vector[5] beta;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_b;
  real<lower=0, upper=100> sigma_c;
  real<lower=0, upper=100> sigma_d;
  real<lower=0, upper=100> sigma_e;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = beta[1] + beta[2] * black[i] + beta[3] * female[i]
               + beta[5] * female[i] * black[i] + beta[4] * v_prev_full[i]
               + a[age[i]] + b[edu[i]] + c[age_edu[i]] + d[state[i]]
               + e[region_full[i]];
}
model {
  a ~ normal(0, sigma_a);
  b ~ normal(0, sigma_b);
  c ~ normal(0, sigma_c);
  d ~ normal(0, sigma_d);
  e ~ normal(0, sigma_e);
  beta ~ normal(0, 100);
  y ~ bernoulli_logit(y_hat);
}

  $ ../../../../../../install/default/bin/stanc --auto_format pilots.stan
data {
  int<lower=0> N;
  int<lower=0> n_groups;
  int<lower=0> n_scenarios;
  int<lower=1, upper=n_groups> group_id[N];
  int<lower=1, upper=n_scenarios> scenario_id[N];
  vector[N] y;
}
parameters {
  vector[n_groups] a;
  vector[n_scenarios] b;
  real mu_a;
  real mu_b;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_b;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = a[group_id[i]] + b[scenario_id[i]];
}
model {
  mu_a ~ normal(0, 1);
  a ~ normal(10 * mu_a, sigma_a);
  mu_b ~ normal(0, 1);
  b ~ normal(10 * mu_b, sigma_b);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format pilots_chr.stan
data {
  int<lower=0> N;
  int<lower=0> n_groups;
  int<lower=0> n_scenarios;
  int<lower=1, upper=n_groups> group_id[N];
  int<lower=1, upper=n_scenarios> scenario_id[N];
  vector[N] y;
}
parameters {
  vector[n_groups] eta_a;
  vector[n_scenarios] eta_b;
  real mu_a;
  real mu_b;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_b;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  vector[n_groups] a;
  vector[n_scenarios] b;
  a = 10 * mu_a + eta_a * sigma_a;
  b = 10 * mu_b + eta_b * sigma_b;
  for (i in 1 : N) 
    y_hat[i] = a[group_id[i]] + b[scenario_id[i]];
}
model {
  mu_a ~ normal(0, 1);
  eta_a ~ normal(0, 1);
  mu_b ~ normal(0, 1);
  eta_b ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

