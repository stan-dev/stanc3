  $ ../../../../../../install/default/bin/stanc --auto_format congress.stan
data {
  int<lower=0> N;
  vector[N] incumbency_88;
  vector[N] vote_86;
  vector[N] vote_88;
}
parameters {
  vector[3] beta;
  real<lower=0> sigma;
}
model {
  vote_88 ~ normal(beta[1] + beta[2] * vote_86 + beta[3] * incumbency_88,
                   sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format earnings1.stan
data {
  int<lower=0> N;
  int<lower=0, upper=1> earn_pos[N];
  vector[N] height;
  vector[N] male;
}
parameters {
  vector[3] beta;
  real<lower=0> sigma;
}
model {
  earn_pos ~ bernoulli_logit(beta[1] + beta[2] * height + beta[3] * male);
}

  $ ../../../../../../install/default/bin/stanc --auto_format earnings2.stan
data {
  int<lower=0> N;
  vector[N] earnings;
  vector[N] height;
  vector[N] sex;
}
transformed data {
  vector[N] log_earnings;
  vector[N] male;
  log_earnings = log(earnings);
  male = 2 - sex;
}
parameters {
  vector[3] beta;
  real<lower=0> sigma;
}
model {
  log_earnings ~ normal(beta[1] + beta[2] * height + beta[3] * male, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format earnings_interactions.stan
data {
  int<lower=0> N;
  vector[N] earnings;
  vector[N] height;
  vector[N] sex1;
}
transformed data {
  vector[N] log_earnings;
  vector[N] male;
  vector[N] height_male_inter;
  log_earnings = log(earnings);
  male = 2 - sex1;
  height_male_inter = height .* male;
}
parameters {
  vector[4] beta;
  real<lower=0> sigma;
}
model {
  log_earnings ~ normal(beta[1] + beta[2] * height + beta[3] * male
                        + beta[4] * height_male_inter, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format wells.stan
data {
  int<lower=0> N;
  vector[N] dist;
  int<lower=0, upper=1> switc[N];
}
parameters {
  vector[2] beta;
}
model {
  switc ~ bernoulli_logit(beta[1] + beta[2] * dist / 100);
}

