  $ ../../../../../../install/default/bin/stanc --auto-format flight_simulator_17.3.stan
data {
  int<lower=0> N;
  int<lower=0> n_treatment;
  int<lower=0> n_airport;
  int<lower=0, upper=n_treatment> treatment[N];
  int<lower=0, upper=n_airport> airport[N];
  vector[N] y;
}
parameters {
  real<lower=0> sigma;
  real<lower=0> sigma_gamma;
  real<lower=0> sigma_delta;
  vector[n_treatment] gamma;
  vector[n_airport] delta;
  real mu;
}
model {
  vector[N] y_hat;
  sigma ~ uniform(0, 100);
  sigma_gamma ~ uniform(0, 100);
  sigma_delta ~ uniform(0, 100);
  mu ~ normal(0, 100);
  gamma ~ normal(0, sigma_gamma);
  delta ~ normal(0, sigma_delta);
  for (i in 1 : N) 
    y_hat[i] = mu + gamma[treatment[i]] + delta[airport[i]];
  y ~ normal(y_hat, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto-format latent_glm_17.7.stan
data {
  int<lower=0> N;
  int<lower=0> n_age;
  int<lower=0> n_edu;
  int<lower=0> n_region;
  int<lower=0> n_state;
  int<lower=0, upper=1> female[N];
  int<lower=0, upper=1> black[N];
  int<lower=0, upper=n_age> age[N];
  int<lower=0, upper=n_edu> edu[N];
  int<lower=0, upper=n_state> region[n_state];
  int<lower=0, upper=n_state> state[N];
  int<lower=0, upper=1> y[N];
  vector[n_state] v_prev;
  vector[N] z;
}
parameters {
  real<lower=0> sigma;
  real<lower=0> sigma_age;
  real<lower=0> sigma_edu;
  real<lower=0> sigma_state;
  real<lower=0> sigma_region;
  real<lower=0> sigma_age_edu;
  real b_0;
  real b_female;
  real b_black;
  real b_female_black;
  real b_v_prev;
  vector[n_age] b_age;
  vector[n_edu] b_edu;
  vector[n_region] b_region;
  matrix[n_age, n_edu] b_age_edu;
  vector[n_state] b_state;
}
model {
  vector[N] p;
  vector[N] z_lo;
  vector[N] z_hi;
  vector[N] Xbeta;
  vector[n_state] b_state_hat;
  b_0 ~ normal(0, 100);
  b_female ~ normal(0, 100);
  b_black ~ normal(0, 100);
  b_female_black ~ normal(0, 100);
  b_age ~ normal(0, sigma_age);
  b_edu ~ normal(0, sigma_edu);
  b_region ~ normal(0, sigma_region);
  for (j in 1 : n_age) {
    for (i in 1 : n_edu) 
      b_age_edu[j, i] ~ normal(0, sigma_age_edu);
  }
  b_v_prev ~ normal(0, 100);
  for (j in 1 : n_state) 
    b_state_hat[j] = b_region[region[j]] + b_v_prev * v_prev[j];
  b_state ~ normal(b_state_hat, sigma_state);
  for (i in 1 : N) {
    Xbeta[i] = b_0 + b_female * female[i] + b_black * black[i]
               + b_female_black * female[i] * black[i] + b_age[age[i]]
               + b_edu[edu[i]] + b_age_edu[age[i], edu[i]]
               + b_state[state[i]];
    p[i] = fmax(0, fmin(1, inv_logit(Xbeta[i])));
  }
  y ~ bernoulli(p);
  for (i in 1 : N) {
    z_lo[i] = 100 * (y[i] == 0);
    z_hi[i] = 100 * (y[i] == 1);
    z[i] ~ logistic(Xbeta[i], 1) T[z_lo[i], z_hi[i]];
  }
}

  $ ../../../../../../install/default/bin/stanc --auto-format multilevel_logistic_17.4.stan
data {
  int<lower=0> N;
  int<lower=0> n_age;
  int<lower=0> n_edu;
  int<lower=0> n_region;
  int<lower=0> n_state;
  int<lower=0, upper=1> female[N];
  int<lower=0, upper=1> black[N];
  int<lower=0, upper=n_age> age[N];
  int<lower=0, upper=n_edu> edu[N];
  int<lower=0, upper=n_state> region[n_state];
  int<lower=0, upper=n_state> state[N];
  int<lower=0, upper=1> y[N];
  vector[n_state] v_prev;
}
parameters {
  real<lower=0> sigma;
  real<lower=0> sigma_age;
  real<lower=0> sigma_edu;
  real<lower=0> sigma_state;
  real<lower=0> sigma_region;
  real<lower=0> sigma_age_edu;
  real b_0;
  real b_female;
  real b_black;
  real b_female_black;
  real b_v_prev;
  vector[n_age] b_age;
  vector[n_edu] b_edu;
  vector[n_region] b_region;
  matrix[n_age, n_edu] b_age_edu;
  vector[n_state] b_hat;
}
model {
  vector[N] p;
  vector[n_state] b_state_hat;
  b_0 ~ normal(0, 100);
  b_female ~ normal(0, 100);
  b_black ~ normal(0, 100);
  b_female_black ~ normal(0, 100);
  b_age ~ normal(0, sigma_age);
  b_edu ~ normal(0, sigma_edu);
  b_region ~ normal(0, sigma_region);
  for (j in 1 : n_age) {
    for (i in 1 : n_edu) 
      b_age_edu[j, i] ~ normal(0, sigma_age_edu);
  }
  b_v_prev ~ normal(0, 100);
  for (j in 1 : n_state) 
    b_state_hat[j] = b_region[region[j]] + b_v_prev * v_prev[j];
  b_hat ~ normal(b_state_hat, sigma_state);
  for (i in 1 : N) 
    p[i] = fmax(0,
                fmin(1,
                     inv_logit(b_0 + b_female * female[i]
                               + b_black * black[i]
                               + b_female_black * female[i] * black[i]
                               + b_age[age[i]] + b_edu[edu[i]]
                               + b_age_edu[age[i], edu[i]] + b_hat[state[i]])));
  y ~ bernoulli(p);
}

  $ ../../../../../../install/default/bin/stanc --auto-format multilevel_ordered_categorical_17.6.stan
data {
  int<lower=0> N;
  int<lower=0> n_cut;
  int<lower=0> n_player;
  int<lower=0, upper=n_player> player[N];
  int<lower=0, upper=n_cut> y[N];
  vector[N] x;
}
parameters {
  vector[n_cut] mu_c;
  real mu_log_s;
  vector<lower=0>[n_cut] sigma_c;
  real<lower=0> sigma_log_s;
  matrix[n_player, 2] C;
  vector[n_player] s;
}
model {
  real mu_adj;
  matrix[N, n_cut] Q;
  matrix[N, n_cut] P;
  mu_c ~ normal(0, 1000);
  mu_log_s ~ normal(0, 100);
  for (i in 1 : n_player) {
    C[i, 1] ~ normal(mu_c[1], sigma_c[1]) T[0, C[i, 2]];
    C[i, 2] ~ normal(mu_c[2], sigma_c[1]) T[C[i, 1], 100];
    s[i] ~ lognormal(mu_log_s, sigma_log_s) T[1, 100];
  }
  for (i in 1 : N) {
    for (i_cut in 1 : n_cut) 
      Q[i, i_cut] = inv_logit((x[i] - C[player[i], i_cut]) / s[player[i]]);
    P[i, 1] = 1 - Q[i, 1];
    P[i, n_cut + 1] = Q[i, n_cut];
    for (i_cut in 2 : n_cut) 
      P[i, i_cut] = Q[i, i_cut - 1] - Q[i, i_cut];
  }
  for (i in 1 : N) 
    y[i] ~ categorical(transpose(row(P, i)));
}

  $ ../../../../../../install/default/bin/stanc --auto-format multilevel_poisson_17.5.stan
data {
  int<lower=0> N;
  int<lower=0> n_eth;
  int<lower=0> n_precint;
  int<lower=0, upper=n_precint> precint[N];
  int<lower=0, upper=n_eth> eth[N];
  vector[N] offeset;
  int<lower=0> stops[N];
}
parameters {
  real mu;
  real<lower=0> sigma_epsilon;
  real<lower=0> sigma_eth;
  real<lower=0> sigma_precint;
  vector[n_eth] b_eth;
  vector[n_precint] b_precint;
  vector[N] epsilon;
}
model {
  real mu_adj;
  vector[n_eth] b_eth_adj;
  vector[n_precint] b_precint_adj;
  vector[N] lambda;
  mu ~ normal(0, 100);
  mu_adj = mu + mean(b_eth) + mean(b_precint);
  b_eth ~ normal(0, sigma_eth);
  b_eth_adj = b_eth - mean(b_eth);
  b_precint ~ normal(0, sigma_precint);
  b_precint_adj = b_precint - mean(b_precint);
  epsilon ~ normal(0, sigma_epsilon);
  for (i in 1 : N) 
    lambda[i] = offeset[i] + mu + b_eth[eth[i]] + b_precint[precint[i]]
                + epsilon[i];
  stops ~ poisson_log(lambda);
}

  $ ../../../../../../install/default/bin/stanc --auto-format radon_correlation_17.1.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  int county[N];
}
parameters {
  real<lower=0> sigma;
  real<lower=0> sigma_a;
  real<lower=0> sigma_b;
  real mu_a;
  real mu_b;
  real<lower=-1, upper=1> rho;
  vector[2] B_temp;
}
model {
  vector[N] y_hat;
  vector[J] a;
  vector[J] b;
  matrix[2, J] B_hat;
  matrix[2, 2] Sigma_b;
  vector[2] B_hat_temp;
  matrix[2, J] B;
  mu_a ~ normal(0, 100);
  mu_b ~ normal(0, 100);
  rho ~ uniform(-1, 1);
  Sigma_b[1, 1] = pow(sigma_a, 2);
  Sigma_b[2, 2] = pow(sigma_b, 2);
  Sigma_b[1, 2] = rho * sigma_a * sigma_b;
  Sigma_b[2, 1] = Sigma_b[1, 2];
  for (j in 1 : J) {
    B_hat[1, j] = mu_a;
    B_hat[2, j] = mu_b;
    B_hat_temp[1] = mu_a;
    B_hat_temp[2] = mu_b;
    B_temp ~ multi_normal(B_hat_temp, Sigma_b);
    B[1, j] = B_temp[1];
    B[2, j] = B_temp[2];
  }
  for (j in 1 : J) {
    a[j] = B[1, j];
    b[j] = B[2, j];
  }
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + b[county[i]] * x[i];
  y ~ normal(y_hat, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto-format radon_correlation_17.2.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  int county[N];
  vector[N] u;
}
parameters {
  real<lower=0> sigma;
  real<lower=0> sigma_a;
  real<lower=0> sigma_b;
  real g_a_0;
  real g_a_1;
  real g_b_0;
  real g_b_1;
  real<lower=-1, upper=1> rho;
  vector[2] B_temp;
}
model {
  vector[N] y_hat;
  vector[J] a;
  vector[J] b;
  matrix[J, 2] B_hat;
  matrix[2, 2] Sigma_b;
  matrix[J, 2] B;
  g_a_0 ~ normal(0, 100);
  g_a_1 ~ normal(0, 100);
  g_b_0 ~ normal(0, 100);
  g_b_1 ~ normal(0, 100);
  rho ~ uniform(-1, 1);
  Sigma_b[1, 1] = pow(sigma_a, 2);
  Sigma_b[2, 2] = pow(sigma_b, 2);
  Sigma_b[1, 2] = rho * sigma_a * sigma_b;
  Sigma_b[2, 1] = Sigma_b[1, 2];
  for (j in 1 : J) {
    B_hat[j, 1] = g_a_0 + g_a_1 * u[j];
    B_hat[j, 2] = g_b_0 + g_b_1 * u[j];
    B_temp ~ multi_normal(transpose(row(B_hat, j)), Sigma_b);
    B[j, 1] = B_temp[1];
    B[j, 2] = B_temp[2];
    a[j] = B[j, 1];
    b[j] = B[j, 2];
  }
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + b[county[i]] * x[i];
  y ~ normal(y_hat, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto-format radon_multi_varying_coef_17.1.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  int<lower=0> K;
  vector[N] y;
  matrix[N, K] X;
  int county[N];
  matrix[K, K] W;
}
parameters {
  real<lower=0> sigma;
  vector[K] mu_raw;
  vector[K] xi;
  corr_matrix[K] Tau_b_raw;
  vector[K] B_raw_temp;
}
model {
  vector[N] y_hat;
  matrix[J, K] B;
  matrix[K, K] rho_b;
  matrix[K, K] Sigma_b_raw;
  vector[K] mu;
  matrix[J, K] B_raw;
  vector[K] sigma_b;
  mu_raw ~ normal(0, 100);
  xi ~ uniform(0, 100);
  mu = xi .* mu_raw;
  Tau_b_raw ~ wishart(K + 1, W);
  Sigma_b_raw = inverse(Tau_b_raw);
  for (j in 1 : J) {
    B_raw_temp ~ multi_normal(mu_raw, Sigma_b_raw);
    for (k in 1 : K) {
      B_raw[j, k] = B_raw_temp[k];
      B[j, k] = xi[k] * B_raw[j, k];
    }
  }
  for (k in 1 : K) {
    for (k_prime in 1 : K) 
      rho_b[k, k_prime] = Sigma_b_raw[k, k_prime]
                          / sqrt(Sigma_b_raw[k, k]
                                 * Sigma_b_raw[k_prime, k_prime]);
    sigma_b[k] = fabs(xi[k]) * sqrt(Sigma_b_raw[k, k]);
  }
  for (i in 1 : N) 
    y_hat[i] = dot_product(row(B, county[i]), row(X, i));
  y ~ normal(y_hat, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto-format radon_multi_varying_coef_17.2.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  int<lower=0> K;
  int<lower=0> L;
  vector[N] y;
  vector[L] U;
  matrix[N, K] X;
  int county[N];
}
parameters {
  real<lower=0> sigma;
  vector[K] xi;
  vector[K] B_raw_temp;
  matrix[K, K] W;
  corr_matrix[K] Tau_b_raw;
  matrix[K, L] G_raw;
}
model {
  vector[N] y_hat;
  matrix[J, K] B;
  matrix[K, K] rho_b;
  matrix[K, K] Sigma_b_raw;
  matrix[K, L] G;
  matrix[J, K] B_raw_hat;
  matrix[J, K] B_raw;
  vector[K] sigma_b;
  xi ~ uniform(0, 100);
  Tau_b_raw ~ wishart(K + 1, W);
  Sigma_b_raw = inverse(Tau_b_raw);
  for (k in 1 : K) 
    for (j in 1 : J) 
      B[j, k] = xi[k] * B_raw[j, k];
  for (k in 1 : K) {
    for (l in 1 : L) {
      G_raw[k, l] ~ normal(0, 100);
      G[k, l] = xi[k] + G_raw[k, l];
    }
  }
  for (j in 1 : J) 
    for (k in 1 : K) 
      B_raw_hat[j, k] = dot_product(row(G_raw, k), U);
  for (j in 1 : J) {
    B_raw_temp ~ multi_normal(transpose(row(B_raw_hat, j)), Sigma_b_raw);
    for (k in 1 : K) 
      B_raw[j, k] = B_raw_temp[k];
  }
  for (k in 1 : K) {
    sigma_b[k] = fabs(xi[k]) * sqrt(Sigma_b_raw[k, k]);
    for (k_prime in 1 : K) 
      rho_b[k, k_prime] = Sigma_b_raw[k, k_prime]
                          / sqrt(Sigma_b_raw[k, k]
                                 * Sigma_b_raw[k_prime, k_prime]);
  }
  for (i in 1 : N) 
    y_hat[i] = dot_product(row(B, county[i]), row(X, i));
  y ~ normal(y_hat, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto-format radon_vary_inter_slope_17.1.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  int county[N];
}
parameters {
  real<lower=0> sigma;
  real<lower=0> sigma_a;
  real<lower=0> sigma_b;
  vector[J] a;
  vector[J] b;
  real mu_a;
  real mu_b;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + b[county[i]] * x[i];
}
model {
  mu_a ~ normal(0, 100);
  mu_b ~ normal(0, 100);
  a ~ normal(mu_a, sigma_a);
  b ~ normal(mu_b, sigma_b);
  y ~ normal(y_hat, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto-format radon_vary_inter_slope_17.2.stan
data {
  int<lower=0> N;
  int<lower=0> n_county;
  vector[N] y;
  vector[N] u;
  int<lower=0, upper=1> x[N];
  int<lower=1, upper=n_county> county[N];
}
parameters {
  real<lower=0> sigma;
  real<lower=0> sigma_a;
  real<lower=0> sigma_b;
  real g_a_0;
  real g_a_1;
  real g_b_0;
  real g_b_1;
  vector[n_county] a;
  vector[n_county] b;
  real mu_a;
  real mu_b;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + b[county[i]] * x[i];
}
model {
  vector[N] a_hat;
  vector[N] b_hat;
  mu_a ~ normal(0, 100);
  mu_b ~ normal(0, 100);
  a ~ normal(mu_a, sigma_a);
  b ~ normal(mu_b, sigma_b);
  g_a_0 ~ normal(0, 100);
  g_a_1 ~ normal(0, 100);
  g_b_0 ~ normal(0, 100);
  g_b_1 ~ normal(0, 100);
  a_hat = g_a_0 + g_a_1 * u;
  b_hat = g_b_0 + g_b_1 * u;
  y ~ normal(y_hat, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto-format radon_wishart2_17.1.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  int county[N];
  matrix[2, 2] W;
}
parameters {
  real<lower=0> sigma;
  real mu_a_raw;
  real mu_b_raw;
  real<lower=0> xi_a;
  real<lower=0> xi_b;
  vector[2] B_raw_temp;
  corr_matrix[2] Tau_b_raw;
  real b_0;
}
model {
  vector[N] y_hat;
  vector[J] a;
  vector[J] b;
  matrix[J, 2] B_raw_hat;
  matrix[J, 2] B_raw;
  matrix[2, 2] Sigma_b_raw;
  real mu_a;
  real mu_b;
  real sigma_a;
  real sigma_b;
  real rho;
  mu_a_raw ~ normal(0, 100);
  mu_b_raw ~ normal(0, 100);
  xi_a ~ uniform(0, 100);
  xi_b ~ uniform(0, 100);
  b_0 ~ normal(0, 100);
  mu_a = xi_a * mu_a_raw;
  mu_b = xi_b * mu_b_raw;
  Tau_b_raw ~ wishart(3, W);
  Sigma_b_raw = inverse(Tau_b_raw);
  sigma_a = xi_a * sqrt(Sigma_b_raw[1, 1]);
  sigma_b = xi_b * sqrt(Sigma_b_raw[2, 2]);
  rho = Sigma_b_raw[1, 2] / sqrt(Sigma_b_raw[1, 1] * Sigma_b_raw[2, 2]);
  for (j in 1 : J) {
    B_raw_hat[j, 1] = mu_a_raw;
    B_raw_hat[j, 2] = mu_b_raw;
    B_raw_temp ~ multi_normal(transpose(row(B_raw_hat, j)), Sigma_b_raw);
    B_raw[j, 1] = B_raw_temp[1];
    B_raw[j, 2] = B_raw_temp[2];
    a[j] = xi_a * B_raw[j, 1];
    b[j] = xi_b * B_raw[j, 2];
  }
  for (i in 1 : N) 
    y_hat[i] = b_0 + a[county[i]] + b[county[i]] * x[i];
  y ~ normal(y_hat, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto-format radon_wishart_17.1.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  int county[N];
  matrix[2, 2] W;
}
parameters {
  real<lower=0> sigma;
  real mu_a_raw;
  real mu_b_raw;
  real<lower=0> xi_a;
  real<lower=0> xi_b;
  vector[2] B_raw_temp;
  corr_matrix[2] Tau_b_raw;
}
model {
  real sigma_a;
  real sigma_b;
  vector[N] y_hat;
  vector[J] a;
  vector[J] b;
  matrix[J, 2] B_raw_hat;
  matrix[2, 2] Sigma_b_raw;
  matrix[J, 2] B_raw;
  real mu_a;
  real mu_b;
  real rho;
  mu_a_raw ~ normal(0, 100);
  mu_b_raw ~ normal(0, 100);
  xi_a ~ uniform(0, 100);
  xi_b ~ uniform(0, 100);
  mu_a = xi_a * mu_a_raw;
  mu_b = xi_b * mu_b_raw;
  Tau_b_raw ~ wishart(3, W);
  Sigma_b_raw = inverse(Tau_b_raw);
  sigma_a = xi_a * sqrt(Sigma_b_raw[1, 1]);
  sigma_b = xi_b * sqrt(Sigma_b_raw[2, 2]);
  rho = Sigma_b_raw[1, 2] / sqrt(Sigma_b_raw[1, 1] * Sigma_b_raw[2, 2]);
  for (j in 1 : J) {
    B_raw_hat[j, 1] = mu_a_raw;
    B_raw_hat[j, 2] = mu_b_raw;
    B_raw_temp ~ multi_normal(transpose(row(B_raw_hat, j)), Sigma_b_raw);
    B_raw[j, 1] = B_raw_temp[1];
    B_raw[j, 2] = B_raw_temp[2];
    a[j] = xi_a * B_raw[j, 1];
    b[j] = xi_b * B_raw[j, 2];
  }
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + b[county[i]] * x[i];
  y ~ normal(y_hat, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto-format radon_wishart_17.2.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  vector[N] u;
  int county[N];
  matrix[2, 2] W;
}
parameters {
  real<lower=0> sigma;
  real mu_a_raw;
  real mu_b_raw;
  real<lower=0> xi_a;
  real<lower=0> xi_b;
  vector[2] B_raw_temp;
  corr_matrix[2] Tau_b_raw;
}
model {
  vector[N] y_hat;
  vector[J] a;
  vector[J] b;
  matrix[J, 2] B_raw_hat;
  matrix[J, 2] B_raw;
  matrix[2, 2] Sigma_b_raw;
  real g_a_0;
  real g_a_1;
  real g_b_0;
  real g_b_1;
  real sigma_a;
  real sigma_b;
  real rho;
  mu_a_raw ~ normal(0, 100);
  mu_b_raw ~ normal(0, 100);
  xi_a ~ uniform(0, 100);
  xi_b ~ uniform(0, 100);
  g_a_0 = xi_a * mu_a_raw;
  g_a_1 = xi_a * mu_a_raw;
  g_b_0 = xi_b * mu_b_raw;
  g_b_1 = xi_b * mu_b_raw;
  Tau_b_raw ~ wishart(3, W);
  Sigma_b_raw = inverse(Tau_b_raw);
  sigma_a = xi_a * sqrt(Sigma_b_raw[1, 1]);
  sigma_b = xi_b * sqrt(Sigma_b_raw[2, 2]);
  rho = Sigma_b_raw[1, 2] / sqrt(Sigma_b_raw[1, 1] * Sigma_b_raw[2, 2]);
  for (j in 1 : J) {
    B_raw_hat[j, 1] = g_a_0 + g_a_1 * u[j];
    B_raw_hat[j, 2] = g_b_0 + g_b_1 * u[j];
    B_raw_temp ~ multi_normal(transpose(row(B_raw_hat, j)), Sigma_b_raw);
    B_raw[j, 1] = B_raw_temp[1];
    B_raw[j, 2] = B_raw_temp[2];
    a[j] = xi_a * B_raw[j, 1];
    b[j] = xi_b * B_raw[j, 2];
  }
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + b[county[i]] * x[i];
  y ~ normal(y_hat, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto-format robit_17.7.stan
data {
  int<lower=0> N;
  int<lower=0> n_age;
  int<lower=0> n_edu;
  int<lower=0> n_region;
  int<lower=0> n_state;
  int<lower=0, upper=1> female[N];
  int<lower=0, upper=1> black[N];
  int<lower=0, upper=n_age> age[N];
  int<lower=0, upper=n_edu> edu[N];
  int<lower=0, upper=n_state> region[n_state];
  int<lower=0, upper=n_state> state[N];
  int<lower=0, upper=1> y[N];
  vector[N] z;
  vector[N] v_prev;
}
parameters {
  real<lower=0> sigma_age;
  real<lower=0> sigma_edu;
  real<lower=0> sigma_state;
  real<lower=0> sigma_region;
  real<lower=0> sigma_age_edu;
  real b_0;
  real b_female;
  real b_black;
  real b_female_black;
  real b_v_prev;
  real<lower=0> df_inv;
  vector[n_age] b_age;
  vector[n_edu] b_edu;
  vector[n_region] b_region;
  matrix[n_age, n_edu] b_age_edu;
  vector[n_state] b_state;
}
model {
  vector[N] p;
  vector[N] z_lo;
  vector[N] z_hi;
  vector[N] Xbeta;
  vector[n_state] b_state_hat;
  real df;
  real sigma_z;
  b_0 ~ normal(0, 100);
  b_female ~ normal(0, 100);
  b_black ~ normal(0, 100);
  b_female_black ~ normal(0, 100);
  b_age ~ normal(0, sigma_age);
  b_edu ~ normal(0, sigma_edu);
  b_region ~ normal(0, sigma_region);
  for (j in 1 : n_age) {
    for (i in 1 : n_edu) 
      b_age_edu[j, i] ~ normal(0, sigma_age_edu);
  }
  b_v_prev ~ normal(0, 100);
  for (j in 1 : n_state) 
    b_state_hat[j] = b_region[region[j]] + b_v_prev * v_prev[j];
  b_state ~ normal(b_state_hat, sigma_state);
  for (i in 1 : N) {
    Xbeta[i] = b_0 + b_female * female[i] + b_black * black[i]
               + b_female_black * female[i] * black[i] + b_age[age[i]]
               + b_edu[edu[i]] + b_age_edu[age[i], edu[i]]
               + b_state[state[i]];
    p[i] = fmax(0, fmin(1, inv_logit(Xbeta[i])));
  }
  y ~ bernoulli(p);
  df_inv ~ uniform(0, 0.5);
  df = 1 / df_inv;
  sigma_z = sqrt((df - 2) / df);
  for (i in 1 : N) {
    z_lo[i] = 100 * (y[i] == 0);
    z_hi[i] = 100 * (y[i] == 1);
    z[i] ~ student_t(df, Xbeta[i], sigma_z) T[z_lo[i], z_hi[i]];
  }
}

