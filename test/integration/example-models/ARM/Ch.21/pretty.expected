  $ ../../../../../../install/default/bin/stanc --auto_format finite_populations.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  vector[J] g;
  vector[N] y;
  vector[N] y_hat;
}
parameters {
  real<lower=0, upper=100> sigma_g;
}
transformed parameters {
  vector[J] g_hat;
  g_hat = a_0 + a_1 * u_1 + a_2 * u;
}
model {
  g ~ normal(g_hat, sigma_g);
}
generated quantities {
  vector[J] e_g;
  vector[N] e_y;
  real<lower=0> s_d;
  real<lower=0> s_g;
  real<lower=0> s_g2;
  real<lower=0> s_y;
  e_y = y - y_hat;
  s_y = sd(e);
  s_g = sd(g);
  s_d = sd(d);
  e_g = g - g_hat;
  s_g2 = sd(e_g);
}


Semantic error in 'finite_populations.stan', line 15, column 10 to column 13:
   -------------------------------------------------
    13:  
    14:    //finite population sd for when group level predictors are present
    15:    g_hat = a_0 + a_1 * u_1 + a_2 * u;
                   ^
    16:  } 
    17:  model {
   -------------------------------------------------

Identifier 'a_0' not in scope.

  $ ../../../../../../install/default/bin/stanc --auto_format multiple_comparison.stan
data {
  int<lower=0> N;
  vector[N] y;
}
parameters {
  real mu_theta;
  real<lower=0, upper=100> sigma_theta;
  vector[N] theta;
  real<lower=0, upper=100> sigma_y;
}
model {
  mu_theta ~ normal(0, 1);
  theta ~ normal(100 * mu_theta, sigma_theta);
  y ~ normal(theta, sigma_y);
}
generated quantities {
  vector[N] e_theta;
  e_theta = theta - mu_theta;
}

  $ ../../../../../../install/default/bin/stanc --auto_format r_sqr.stan
data {
  int<lower=0> N;
  int<lower=0> n_county;
  int<lower=1, upper=n_county> county[N];
  vector[N] u;
  vector[N] y;
}
parameters {
  vector[n_county] a;
  vector[n_county] b;
  matrix[j, 2] B;
  matrix[j, 2] B_hat;
  vector[2] B_hat_temp;
  vector[2] B_temp;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + b[county[i]] * x[i];
  e_y = y - y_hat;
}
model {
  sigma_y ~ uniform(0, 100);
  y ~ normal(y_hat, sigma_y);
  for (j in 1 : n_county) {
    B_hat_temp[1] = g_a_0 + g_a_1 * u[j];
    B_hat[j, 1] = B_hat_temp[1];
    B_hat_temp[2] = g_b_0 + g_b_1 * u[j];
    B_hat[j, 2] = B_hat_temp[2];
    B_temp ~ multi_normal(b_hat_temp, sigma_B);
    B_hat[j, 1] = B_temp[1];
    B_hat[j, 2] = B_temp[2];
    for (k in 1 : 2) 
      E_B[j, k] = B[j, k] - B_hat[j, k];
  }
}


Semantic error in 'r_sqr.stan', line 11, column 9 to column 10:
   -------------------------------------------------
     9:    vector[n_county] a;
    10:    vector[n_county] b;
    11:    matrix[j,2] B;
                  ^
    12:    matrix[j,2] B_hat;
    13:    vector[2] B_hat_temp;
   -------------------------------------------------

Identifier 'j' not in scope.

  $ ../../../../../../install/default/bin/stanc --auto_format radon_vary_intercept_a.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  int<lower=1, upper=J> county[N];
  vector[J] u;
  vector[N] x;
  vector[N] y;
}
parameters {
  vector[J] a;
  real b;
  vector[2] beta;
  real g_0;
  real g_1;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[J] a_hat;
  vector[J] e_a;
  vector[N] y_hat;
  for (j in 1 : J) 
    a_hat[j] = 100 * g_0 + 100 * g_1 * u[j];
  e_a = a - a_hat;
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + x[i] * b * 100;
}
model {
  g_0 ~ normal(0, 1);
  g_1 ~ normal(0, 1);
  sigma_a ~ uniform(0, 100);
  a ~ normal(a_hat, sigma_a);
  b ~ normal(0, 1);
  sigma_y ~ uniform(0, 100);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon_vary_intercept_b.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  int<lower=1, upper=J> county[N];
  vector[J] u;
  vector[N] x;
  vector[N] y;
}
parameters {
  vector[J] a;
  real b;
  vector[2] beta;
  real g_0;
  real g_1;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[J] a_hat;
  vector[J] e_a;
  vector[N] e_y;
  vector[N] y_hat;
  for (j in 1 : J) 
    a_hat[j] = 100 * g_0 + 100 * g_1 * u[j];
  e_a = a - a_hat;
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + x[i] * b * 100;
  e_y = y - y_hat;
}
model {
  g_0 ~ normal(0, 1);
  g_1 ~ normal(0, 1);
  sigma_a ~ uniform(0, 100);
  a ~ normal(a_hat, sigma_a);
  b ~ normal(0, 1);
  sigma_y ~ uniform(0, 100);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon_vary_intercept_floor.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  int<lower=1, upper=J> county[N];
  vector[N] u;
  vector[N] x;
  vector[N] y;
}
parameters {
  vector[J] a;
  vector[2] b;
  real mu_a;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + u[i] * b[1] + x[i] * b[2];
}
model {
  mu_a ~ normal(0, 1);
  a ~ normal(mu_a, sigma_a);
  b ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon_vary_intercept_floor2.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  int<lower=1, upper=J> county[N];
  vector[N] u;
  vector[N] x;
  vector[N] x_mean;
  vector[N] y;
}
parameters {
  vector[J] a;
  vector[3] b;
  real mu_a;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + u[i] * b[1] + x[i] * b[2] + x_mean[i] * b[3];
}
model {
  mu_a ~ normal(0, 1);
  a ~ normal(mu_a, sigma_a);
  b ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon_vary_intercept_floor2_chr.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  int<lower=1, upper=J> county[N];
  vector[N] u;
  vector[N] x;
  vector[N] x_mean;
  vector[N] y;
}
parameters {
  vector[3] b;
  vector[J] eta;
  real mu_a;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[J] a;
  vector[N] y_hat;
  a = mu_a + sigma_a * eta;
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + u[i] * b[1] + x[i] * b[2] + x_mean[i] * b[3];
}
model {
  mu_a ~ normal(0, 1);
  eta ~ normal(0, 1);
  b ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon_vary_intercept_floor_chr.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  int<lower=1, upper=J> county[N];
  vector[N] u;
  vector[N] x;
  vector[N] y;
}
parameters {
  vector[2] b;
  vector[J] eta;
  real mu_a;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[J] a;
  vector[N] y_hat;
  a = mu_a + sigma_a * eta;
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + u[i] * b[1] + x[i] * b[2];
}
model {
  mu_a ~ normal(0, 1);
  eta ~ normal(0, 1);
  b ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon_vary_intercept_nofloor.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  int<lower=1, upper=J> county[N];
  vector[N] u;
  vector[N] y;
}
parameters {
  vector[J] a;
  real b;
  real mu_a;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + u[i] * b * 0.1;
}
model {
  mu_a ~ normal(0, 1);
  a ~ normal(mu_a, sigma_a);
  b ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon_vary_intercept_nofloor_chr.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  int<lower=1, upper=J> county[N];
  vector[N] u;
  vector[N] y;
}
parameters {
  real b;
  vector[J] eta;
  real mu_a;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[J] a;
  vector[N] y_hat;
  a = mu_a + sigma_a * eta;
  for (i in 1 : N) 
    y_hat[i] = a[county[i]] + u[i] * b * 0.1;
}
model {
  mu_a ~ normal(0, 1);
  eta ~ normal(0, 1);
  b ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

