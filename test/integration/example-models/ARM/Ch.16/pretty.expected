  $ ../../../../../../install/default/bin/stanc --auto_format radon.1.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  int county[N];
}
parameters {
  real a[J];
  real b;
  real mu_a;
  real<lower=0> sigma_y;
  real<lower=0> sigma_a;
}
model {
  a ~ normal(mu_a, sigma_a);
  for (n in 1 : N) 
    y[n] ~ normal(a[county[n]] + b * x[n], sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon.2.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  int county[N];
  vector[J] u;
}
parameters {
  real a[J];
  real b;
  real g_0;
  real g_1;
  real<lower=0> sigma_y;
  real<lower=0> sigma_a;
}
model {
  for (j in 1 : J) 
    a[j] ~ normal(g_0 + g_1 * u[j], sigma_a);
  for (n in 1 : N) 
    y[n] ~ normal(a[county[n]] + b * x[n], sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon.2a.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  int county[N];
  vector[J] u;
}
parameters {
  real a[J];
  real b;
  real g_0;
  real g_1;
  real<lower=0> sigma_y;
  real<lower=0> sigma_a;
}
model {
  for (j in 1 : J) 
    a[j] ~ normal(g_0 + g_1 * u[j], sigma_a);
  for (n in 1 : N) 
    y[n] ~ normal(a[county[n]] + b * x[n], sigma_y);
}
generated quantities {
  real y_tilde;
  y_tilde = normal_rng(a[26] + b * 1, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon.2b.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  int county[N];
  vector[J] u;
}
parameters {
  real a[J];
  real b;
  real g_0;
  real g_1;
  real<lower=0> sigma_y;
  real<lower=0> sigma_a;
}
model {
  for (j in 1 : J) 
    a[j] ~ normal(g_0 + g_1 * u[j], sigma_a);
  for (n in 1 : N) 
    y[n] ~ normal(a[county[n]] + b * x[n], sigma_y);
}
generated quantities {
  real u_tilde;
  real a_tilde;
  real y_tilde;
  u_tilde = mean(u);
  a_tilde = normal_rng(g_0 + g_1 * u_tilde, sigma_a);
  y_tilde = normal_rng(a_tilde + b * 1, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon.3.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  int county[N];
  vector[J] u;
}
transformed data {
  real<lower=0> sigma_y;
  real<lower=0> sigma_a;
  sigma_y = 0.7;
  sigma_a = 0.4;
}
parameters {
  real a[J];
  real b;
  real g_0;
  real g_1;
}
model {
  for (j in 1 : J) 
    a[j] ~ normal(g_0 + g_1 * u[j], sigma_a);
  for (n in 1 : N) 
    y[n] ~ normal(a[county[n]] + b * x[n], sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon.nopooling.stan
data {
  int<lower=0> N;
  int<lower=0> J;
  vector[N] y;
  int<lower=0, upper=1> x[N];
  int county[N];
}
parameters {
  real a[J];
  real b;
  real<lower=0> sigma_y;
}
model {
  for (i in 1 : N) 
    y[i] ~ normal(a[county[i]] + b * x[i], sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format radon.pooling.stan
data {
  int<lower=0> N;
  vector[N] y;
  vector<lower=0, upper=1>[N] x;
}
parameters {
  real a;
  real b;
  real<lower=0> sigma_y;
}
model {
  y ~ normal(a + b * x, sigma_y);
}

