  $ ../../../../../../install/default/bin/stanc --auto_format educational_subsidy.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  vector[N] age97;
  vector[N] enroll97;
  vector[N] male;
  vector[N] poor;
  vector[J] program;
  int village[N];
  vector[N] work97;
  int<lower=0, upper=1> y[N];
}
parameters {
  real<lower=0, upper=100> sigma_a;
  real g_0;
  real g_1;
  vector[5] beta;
  real mu_beta;
  vector[J] a;
}
transformed parameters {
  vector[J] a_hat;
  vector[N] y_hat;
  for (j in 1 : J) 
    a_hat[j] = g_0 + g_1 * program[j];
  for (i in 1 : N) 
    y_hat[i] = a[village[i]] + beta[1] * enroll97[i] + beta[2] * work97[i]
               + beta[3] * poor[i] + beta[4] * male[i] + beta[5] * age97[i];
}
model {
  sigma_a ~ uniform(0, 100);
  g_0 ~ normal(0, 100);
  g_1 ~ normal(0, 100);
  a ~ normal(a_hat, sigma_a);
  beta ~ normal(0, 1);
  y ~ bernoulli_logit(y_hat);
}

  $ ../../../../../../install/default/bin/stanc --auto_format electric.stan
data {
  int<lower=0> N;
  int<lower=0> n_pair;
  int<lower=1, upper=n_pair> pair[N];
  vector[N] treatment;
  vector[N] y;
}
parameters {
  vector[n_pair] a;
  real beta;
  real mu_a;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = a[pair[i]] + beta * treatment[i];
}
model {
  mu_a ~ normal(0, 1);
  sigma_a ~ uniform(0, 100);
  sigma_y ~ uniform(0, 100);
  a ~ normal(100 * mu_a, sigma_a);
  beta ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format electric_1a.stan
data {
  int<lower=0> N;
  int<lower=0> n_pair;
  int<lower=0> n_grade;
  int<lower=0> n_grade_pair;
  int<lower=1, upper=n_grade> grade[N];
  int<lower=1, upper=n_grade_pair> grade_pair[n_pair];
  int<lower=1, upper=n_pair> pair[N];
  vector<lower=0, upper=1>[N] treatment;
  vector[N] y;
}
parameters {
  vector[n_pair] a;
  vector[n_grade] b;
  vector[n_grade_pair] mu_a;
  vector<lower=0, upper=100>[n_grade_pair] sigma_a;
  vector<lower=0, upper=100>[n_grade] sigma_y;
}
transformed parameters {
  vector[n_pair] mu_a_hat;
  vector<lower=0, upper=100>[n_pair] sigma_a_hat;
  vector<lower=0, upper=100>[N] sigma_y_hat;
  vector[N] y_hat;
  for (i in 1 : N) {
    y_hat[i] = a[pair[i]] + b[grade[i]] * treatment[i];
    sigma_y_hat[i] = sigma_y[grade[i]];
  }
  for (i in 1 : n_pair) {
    sigma_a_hat[i] = sigma_a[grade_pair[i]];
    mu_a_hat[i] = 100 * mu_a[grade_pair[i]];
  }
}
model {
  mu_a ~ normal(0, 1);
  a ~ normal(mu_a_hat, sigma_a_hat);
  b ~ normal(0, 100);
  y ~ normal(y_hat, sigma_y_hat);
}

  $ ../../../../../../install/default/bin/stanc --auto_format electric_1a_chr.stan
data {
  int<lower=0> N;
  int<lower=0> n_grade;
  int<lower=0> n_grade_pair;
  int<lower=0> n_pair;
  int<lower=1, upper=n_grade> grade[N];
  int<lower=1, upper=n_grade_pair> grade_pair[n_pair];
  int<lower=1, upper=n_pair> pair[N];
  vector[N] treatment;
  vector[N] y;
}
parameters {
  vector[n_pair] eta_a;
  vector<lower=0, upper=100>[n_grade_pair] sigma_a;
  vector<lower=0, upper=100>[n_grade] sigma_y;
  vector[n_grade_pair] mu_a;
  vector[n_grade] b;
}
transformed parameters {
  vector[n_pair] a;
  vector<lower=0>[N] sigma_y_hat;
  vector[N] y_hat;
  for (i in 1 : n_pair) 
    a[i] = 100 * mu_a[grade_pair[i]] + sigma_a[grade_pair[i]] * eta_a[i];
  for (i in 1 : N) {
    y_hat[i] = a[pair[i]] + b[grade[i]] * treatment[i];
    sigma_y_hat[i] = sigma_y[grade[i]];
  }
}
model {
  mu_a ~ normal(0, 1);
  eta_a ~ normal(0, 1);
  b ~ normal(0, 100);
  y ~ normal(y_hat, sigma_y_hat);
}

  $ ../../../../../../install/default/bin/stanc --auto_format electric_1b.stan
data {
  int<lower=0> N;
  int<lower=0> n_pair;
  int<lower=1, upper=n_pair> pair[N];
  vector[N] pre_test;
  vector<lower=0, upper=1>[N] treatment;
  vector[N] y;
}
parameters {
  vector[n_pair] a;
  vector[2] beta;
  real mu_a;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  for (i in 1 : N) 
    y_hat[i] = a[pair[i]] + beta[1] * treatment[i] + beta[2] * pre_test[i];
}
model {
  mu_a ~ normal(0, 1);
  a ~ normal(100 * mu_a, sigma_a);
  beta ~ normal(0, 100);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format electric_1b_chr.stan
data {
  int<lower=0> N;
  int<lower=0> n_pair;
  int<lower=1, upper=n_pair> pair[N];
  vector[N] pre_test;
  vector[N] treatment;
  vector[N] y;
}
parameters {
  vector[2] beta;
  vector[n_pair] eta;
  real mu_a;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  vector[n_pair] a;
  a = 100 * mu_a + sigma_a * eta;
  for (i in 1 : N) 
    y_hat[i] = a[pair[i]] + beta[1] * treatment[i] + beta[2] * pre_test[i];
}
model {
  mu_a ~ normal(0, 1);
  beta ~ normal(0, 100);
  eta ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format electric_1c.stan
data {
  int<lower=0> N;
  int<lower=0> n_grade;
  int<lower=0> n_grade_pair;
  int<lower=0> n_pair;
  int<lower=1, upper=n_grade> grade[N];
  int<lower=1, upper=n_grade_pair> grade_pair[n_pair];
  int<lower=1, upper=n_pair> pair[N];
  vector[N] pre_test;
  vector[N] treatment;
  vector[N] y;
}
parameters {
  vector[n_pair] a;
  vector[n_grade] b;
  vector[n_grade] c;
  vector[n_grade_pair] mu_a;
  vector<lower=0, upper=100>[n_grade_pair] sigma_a;
  vector<lower=0, upper=100>[n_grade] sigma_y;
}
transformed parameters {
  vector[n_pair] mu_a_hat;
  vector<lower=0, upper=100>[n_pair] sigma_a_hat;
  vector<lower=0, upper=100>[N] sigma_y_hat;
  vector[N] y_hat;
  for (i in 1 : N) {
    y_hat[i] = a[pair[i]] + b[grade[i]] * treatment[i]
               + c[grade[i]] * pre_test[i];
    sigma_y_hat[i] = sigma_y[grade[i]];
  }
  for (i in 1 : n_pair) {
    sigma_a_hat[i] = sigma_a[grade_pair[i]];
    mu_a_hat[i] = 40 * mu_a[grade_pair[i]];
  }
}
model {
  mu_a ~ normal(0, 1);
  a ~ normal(mu_a_hat, sigma_a_hat);
  b ~ normal(0, 100);
  c ~ normal(0, 100);
  y ~ normal(y_hat, sigma_y_hat);
}

  $ ../../../../../../install/default/bin/stanc --auto_format electric_1c_chr.stan
data {
  int<lower=0> N;
  int<lower=0> n_grade;
  int<lower=0> n_grade_pair;
  int<lower=0> n_pair;
  int<lower=1, upper=n_grade> grade[N];
  int<lower=1, upper=n_grade_pair> grade_pair[n_pair];
  int<lower=1, upper=n_pair> pair[N];
  vector[N] pre_test;
  vector[N] treatment;
  vector[N] y;
}
parameters {
  vector[n_pair] eta_a;
  vector[n_grade_pair] mu_a;
  vector<lower=0, upper=100>[n_grade_pair] sigma_a;
  vector<lower=0, upper=100>[n_grade] sigma_y;
  vector[n_grade] b;
  vector[n_grade] c;
}
transformed parameters {
  vector[n_pair] a;
  vector<lower=0, upper=100>[N] sigma_y_hat;
  vector[N] y_hat;
  for (i in 1 : n_pair) 
    a[i] = 50 * mu_a[grade_pair[i]] + sigma_a[grade_pair[i]] * eta_a[i];
  for (i in 1 : N) {
    y_hat[i] = a[pair[i]] + b[grade[i]] * treatment[i]
               + c[grade[i]] * pre_test[i];
    sigma_y_hat[i] = sigma_y[grade[i]];
  }
}
model {
  eta_a ~ normal(0, 1);
  mu_a ~ normal(0, 1);
  b ~ normal(0, 100);
  c ~ normal(0, 100);
  y ~ normal(y_hat, sigma_y_hat);
}

  $ ../../../../../../install/default/bin/stanc --auto_format electric_chr.stan
data {
  int<lower=0> N;
  int<lower=0> n_pair;
  int<lower=1, upper=n_pair> pair[N];
  vector[N] treatment;
  vector[N] y;
}
parameters {
  real beta;
  vector[n_pair] eta;
  real mu_a;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[N] y_hat;
  vector[n_pair] a;
  a = 100 * mu_a + sigma_a * eta;
  for (i in 1 : N) 
    y_hat[i] = a[pair[i]] + beta * treatment[i];
}
model {
  mu_a ~ normal(0, 1);
  eta ~ normal(0, 1);
  beta ~ normal(0, 1);
  y ~ normal(y_hat, sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto_format electric_multi_preds.stan
data {
  int<lower=0> N;
  vector[N] pre_test;
  vector[N] post_test;
  vector[N] treatment;
}
parameters {
  vector[3] beta;
  real<lower=0> sigma;
}
model {
  post_test ~ normal(beta[1] + beta[2] * treatment + beta[3] * pre_test,
                     sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format electric_one_pred.stan
data {
  int<lower=0> N;
  vector[N] post_test;
  vector[N] treatment;
}
parameters {
  vector[2] beta;
  real<lower=0> sigma;
}
model {
  post_test ~ normal(beta[1] + beta[2] * treatment, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto_format sesame_street1.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  int<lower=1, upper=J> siteset[N];
  vector[2] yt[N];
  vector[N] z;
}
parameters {
  vector[2] ag[J];
  real b;
  real d;
  real<lower=-1, upper=1> rho_ag;
  real<lower=-1, upper=1> rho_yt;
  vector[2] mu_ag;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_g;
  real<lower=0, upper=100> sigma_t;
  real<lower=0, upper=100> sigma_y;
}
model {
  vector[J] a;
  vector[J] g;
  matrix[2, 2] Sigma_ag;
  matrix[2, 2] Sigma_yt;
  vector[2] yt_hat[N];
  Sigma_yt[1, 1] = pow(sigma_y, 2);
  Sigma_yt[2, 2] = pow(sigma_t, 2);
  Sigma_yt[1, 2] = rho_yt * sigma_y * sigma_t;
  Sigma_yt[2, 1] = Sigma_yt[1, 2];
  Sigma_ag[1, 1] = pow(sigma_a, 2);
  Sigma_ag[2, 2] = pow(sigma_g, 2);
  Sigma_ag[1, 2] = rho_ag * sigma_a * sigma_g;
  Sigma_ag[2, 1] = Sigma_ag[1, 2];
  for (j in 1 : J) {
    a[j] = ag[j, 1];
    g[j] = ag[j, 2];
  }
  for (i in 1 : N) {
    yt_hat[i, 2] = g[siteset[i]] + d * z[i];
    yt_hat[i, 1] = a[siteset[i]] + b * yt[i, 2];
  }
  sigma_y ~ uniform(0, 100);
  sigma_t ~ uniform(0, 100);
  rho_yt ~ uniform(-1, 1);
  d ~ normal(0, 31.6);
  b ~ normal(0, 31.6);
  sigma_a ~ uniform(0, 100);
  sigma_g ~ uniform(0, 100);
  rho_ag ~ uniform(-1, 1);
  mu_ag ~ normal(0, 31.6);
  for (j in 1 : J) 
    ag[j] ~ multi_normal(mu_ag, Sigma_ag);
  for (i in 1 : N) 
    yt[i] ~ multi_normal(yt_hat[i], Sigma_yt);
}

  $ ../../../../../../install/default/bin/stanc --auto_format sesame_street2.stan
data {
  int<lower=0> J;
  int<lower=0> N;
  vector[N] pretest;
  int<lower=1, upper=J> siteset[N];
  matrix[N, 2] yt;
  vector[N] z;
}
parameters {
  matrix[J, 2] ag;
  real b;
  real d;
  vector[2] mu_ag;
  real phi_y;
  real phi_t;
  real<lower=-1, upper=1> rho_ag;
  real<lower=-1, upper=1> rho_yt;
  real<lower=0, upper=100> sigma_a;
  real<lower=0, upper=100> sigma_g;
  real<lower=0, upper=100> sigma_py;
  real<lower=0, upper=100> sigma_pt;
  real<lower=0, upper=100> sigma_t;
  real<lower=0, upper=100> sigma_y;
}
transformed parameters {
  vector[J] a;
  vector[J] g;
  cov_matrix[2] Sigma_ag;
  cov_matrix[2] Sigma_yt;
  matrix[N, 2] yt_hat;
  Sigma_yt[1, 1] = pow(sigma_y, 2);
  Sigma_yt[2, 2] = pow(sigma_t, 2);
  Sigma_yt[1, 2] = rho_yt * sigma_y * sigma_t;
  Sigma_yt[2, 1] = Sigma_yt[1, 2];
  Sigma_ag[1, 1] = pow(sigma_a, 2);
  Sigma_ag[2, 2] = pow(sigma_g, 2);
  Sigma_ag[1, 2] = rho_ag * sigma_a * sigma_g;
  Sigma_ag[2, 1] = Sigma_ag[1, 2];
  for (j in 1 : J) {
    a[j] = ag[j, 1];
    g[j] = ag[j, 2];
  }
  for (i in 1 : N) {
    yt_hat[i, 1] = a[siteset[i]] + b * d * z[i] + phi_y * pretest[i];
    yt_hat[i, 2] = g[siteset[i]] + d * z[i] + phi_t * pretest[i];
  }
}
model {
  sigma_y ~ uniform(0, 100);
  sigma_t ~ uniform(0, 100);
  rho_yt ~ uniform(-1, 1);
  d ~ normal(0, 100);
  b ~ normal(0, 100);
  phi_y ~ normal(0, sigma_py);
  phi_y ~ normal(0, sigma_pt);
  sigma_a ~ uniform(0, 100);
  sigma_g ~ uniform(0, 100);
  rho_ag ~ uniform(-1, 1);
  mu_ag[1] ~ normal(0, 100);
  mu_ag[2] ~ normal(0, 100);
  for (i in 1 : N) 
    transpose(yt[i]) ~ multi_normal(transpose(yt_hat[i]), Sigma_yt);
  for (j in 1 : J) 
    transpose(ag[j]) ~ multi_normal(mu_ag, Sigma_ag);
}

