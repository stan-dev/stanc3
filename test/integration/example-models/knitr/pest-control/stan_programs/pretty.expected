  $ ../../../../../../../install/default/bin/stanc --auto-format hier_NB_regression.stan
functions {
  int neg_binomial_2_log_safe_rng(real eta, real phi) {
    real gamma_rate = gamma_rng(phi, phi / exp(eta));
    if (gamma_rate >= exp(20.79)) 
      return -9;
    return poisson_rng(gamma_rate);
  }
}
data {
  int<lower=1> N;
  array[N] int<lower=0> complaints;
  vector<lower=0>[N] traps;
  vector[N] log_sq_foot;
  int<lower=1> K;
  int<lower=1> J;
  array[N] int<lower=1, upper=J> building_idx;
  matrix[J, K] building_data;
}
parameters {
  real<lower=0> inv_phi;
  real beta;
  vector[J] mu;
  real<lower=0> sigma_mu;
  real alpha;
  vector[K] zeta;
}
transformed parameters {
  real phi = inv(inv_phi);
}
model {
  mu ~ normal(alpha + building_data * zeta, sigma_mu);
  sigma_mu ~ normal(0, 1);
  alpha ~ normal(log(4), 1);
  zeta ~ normal(0, 1);
  beta ~ normal(-0.25, 1);
  inv_phi ~ normal(0, 1);
  complaints ~ neg_binomial_2_log(mu[building_idx] + beta * traps
                                  + log_sq_foot, phi);
}
generated quantities {
  array[N] int y_rep;
  for (n in 1 : N) {
    real eta_n = mu[building_idx[n]] + beta * traps[n] + log_sq_foot[n];
    y_rep[n] = neg_binomial_2_log_safe_rng(eta_n, phi);
  }
}

  $ ../../../../../../../install/default/bin/stanc --auto-format hier_NB_regression_ncp.stan
functions {
  int neg_binomial_2_log_safe_rng(real eta, real phi) {
    real gamma_rate = gamma_rng(phi, phi / exp(eta));
    if (gamma_rate >= exp(20.79)) 
      return -9;
    return poisson_rng(gamma_rate);
  }
}
data {
  int<lower=1> N;
  array[N] int<lower=0> complaints;
  vector<lower=0>[N] traps;
  vector[N] log_sq_foot;
  int<lower=1> K;
  int<lower=1> J;
  array[N] int<lower=1, upper=J> building_idx;
  matrix[J, K] building_data;
}
parameters {
  real<lower=0> inv_phi;
  real beta;
  vector[J] mu_raw;
  real<lower=0> sigma_mu;
  real alpha;
  vector[K] zeta;
}
transformed parameters {
  real phi = inv(inv_phi);
  vector[J] mu = alpha + building_data * zeta + sigma_mu * mu_raw;
}
model {
  mu_raw ~ normal(0, 1);
  sigma_mu ~ normal(0, 1);
  alpha ~ normal(log(4), 1);
  zeta ~ normal(0, 1);
  beta ~ normal(-0.25, 1);
  inv_phi ~ normal(0, 1);
  complaints ~ neg_binomial_2_log(mu[building_idx] + beta * traps
                                  + log_sq_foot, phi);
}
generated quantities {
  array[N] int y_rep;
  for (n in 1 : N) {
    real eta_n = mu[building_idx[n]] + beta * traps[n] + log_sq_foot[n];
    y_rep[n] = neg_binomial_2_log_safe_rng(eta_n, phi);
  }
}

  $ ../../../../../../../install/default/bin/stanc --auto-format hier_NB_regression_ncp_slopes_mod.stan
functions {
  int neg_binomial_2_log_safe_rng(real eta, real phi) {
    real gamma_rate = gamma_rng(phi, phi / exp(eta));
    if (gamma_rate >= exp(20.79)) 
      return -9;
    return poisson_rng(gamma_rate);
  }
}
data {
  int<lower=1> N;
  array[N] int<lower=0> complaints;
  vector<lower=0>[N] traps;
  vector[N] log_sq_foot;
  int<lower=1> K;
  int<lower=1> J;
  array[N] int<lower=1, upper=J> building_idx;
  matrix[J, K] building_data;
}
parameters {
  real<lower=0> inv_phi;
  vector[J] mu_raw;
  real<lower=0> sigma_mu;
  real alpha;
  vector[K] zeta;
  vector[J] kappa_raw;
  real<lower=0> sigma_kappa;
  real beta;
  vector[K] gamma;
}
transformed parameters {
  real phi = inv(inv_phi);
  vector[J] mu = alpha + building_data * zeta + sigma_mu * mu_raw;
  vector[J] kappa = beta + building_data * gamma + sigma_kappa * kappa_raw;
}
model {
  inv_phi ~ normal(0, 1);
  kappa_raw ~ normal(0, 1);
  sigma_kappa ~ normal(0, 1);
  beta ~ normal(-0.25, 1);
  gamma ~ normal(0, 1);
  mu_raw ~ normal(0, 1);
  sigma_mu ~ normal(0, 1);
  alpha ~ normal(log(4), 1);
  zeta ~ normal(0, 1);
  complaints ~ neg_binomial_2_log(mu[building_idx]
                                  + kappa[building_idx] .* traps
                                  + log_sq_foot, phi);
}
generated quantities {
  array[N] int y_rep;
  for (n in 1 : N) {
    real eta_n = mu[building_idx[n]] + kappa[building_idx[n]] * traps[n]
                 + log_sq_foot[n];
    y_rep[n] = neg_binomial_2_log_safe_rng(eta_n, phi);
  }
}

  $ ../../../../../../../install/default/bin/stanc --auto-format hier_NB_regression_ncp_slopes_mod_mos.stan
functions {
  int neg_binomial_2_log_safe_rng(real eta, real phi) {
    real gamma_rate = gamma_rng(phi, phi / exp(eta));
    if (gamma_rate >= exp(20.79)) 
      return -9;
    return poisson_rng(gamma_rate);
  }
}
data {
  int<lower=1> N;
  array[N] int<lower=0> complaints;
  vector<lower=0>[N] traps;
  vector[N] log_sq_foot;
  int<lower=1> K;
  int<lower=1> J;
  array[N] int<lower=1, upper=J> building_idx;
  matrix[J, K] building_data;
  int<lower=1> M;
  array[N] int<lower=1, upper=M> mo_idx;
}
parameters {
  real<lower=0> inv_phi;
  vector[J] mu_raw;
  real<lower=0> sigma_mu;
  real alpha;
  vector[K] zeta;
  vector[J] kappa_raw;
  real<lower=0> sigma_kappa;
  real beta;
  vector[K] gamma;
  vector[M] mo_raw;
  real<lower=0> sigma_mo;
  real<lower=0, upper=1> rho_raw;
}
transformed parameters {
  real phi = inv(inv_phi);
  vector[J] mu = alpha + building_data * zeta + sigma_mu * mu_raw;
  vector[J] kappa = beta + building_data * gamma + sigma_kappa * kappa_raw;
  real rho = 2 * rho_raw - 1;
  vector[M] mo = sigma_mo * mo_raw;
  mo[1] /= sqrt(1 - rho ^ 2);
  for (m in 2 : M) {
    mo[m] += rho * mo[m - 1];
  }
}
model {
  inv_phi ~ normal(0, 1);
  kappa_raw ~ normal(0, 1);
  sigma_kappa ~ normal(0, 1);
  beta ~ normal(-0.25, 1);
  gamma ~ normal(0, 1);
  mu_raw ~ normal(0, 1);
  sigma_mu ~ normal(0, 1);
  alpha ~ normal(log(4), 1);
  zeta ~ normal(0, 1);
  mo_raw ~ normal(0, 1);
  sigma_mo ~ normal(0, 1);
  rho_raw ~ beta(10, 5);
  complaints ~ neg_binomial_2_log(mu[building_idx]
                                  + kappa[building_idx] .* traps + mo[mo_idx]
                                  + log_sq_foot, phi);
}
generated quantities {
  array[N] int y_rep;
  for (n in 1 : N) {
    real eta_n = mu[building_idx[n]] + kappa[building_idx[n]] * traps[n]
                 + mo[mo_idx[n]] + log_sq_foot[n];
    y_rep[n] = neg_binomial_2_log_safe_rng(eta_n, phi);
  }
}

  $ ../../../../../../../install/default/bin/stanc --auto-format hier_NB_regression_ncp_slopes_mod_mos_gp.stan
functions {
  int neg_binomial_2_log_safe_rng(real eta, real phi) {
    real phi_div_exp_eta;
    real gamma_rate;
    phi_div_exp_eta = phi / exp(eta);
    gamma_rate = gamma_rng(phi, phi_div_exp_eta);
    if (gamma_rate >= exp(20.79)) 
      return -9;
    return poisson_rng(gamma_rate);
  }
}
data {
  int<lower=1> N;
  int<lower=1> M;
  int<lower=1> K;
  array[N] int complaints;
  vector[N] traps;
  int<lower=1> J;
  array[N] int<lower=1, upper=J> building_idx;
  matrix[J, K] building_data;
  vector[N] log_sq_foot;
  array[N] int<lower=1> mo_idx;
}
transformed data {
  array[M] real mo_gp_vec;
  for (m in 1 : M) 
    mo_gp_vec[m] = m;
}
parameters {
  real alpha;
  real<lower=0> sigma_mu;
  real<lower=0> sigma_kappa;
  vector[J] mu_raw;
  vector[J] kappa_raw;
  real beta;
  real<lower=0> inv_phi;
  vector[K] zeta;
  vector[K] gamma;
  vector[M] gp_raw;
  real<lower=0> gp_len;
  real<lower=0> sigma_gp;
  real<lower=0> sigma_noise;
  vector[M] mo_noise_raw;
}
transformed parameters {
  vector[J] mu = alpha + building_data * zeta + sigma_mu * mu_raw;
  vector[J] kappa = beta + building_data * gamma + sigma_kappa * kappa_raw;
  vector[M] mo_noise = sigma_noise * mo_noise_raw;
  real phi = inv(inv_phi);
  vector[M] gp_exp_quad;
  vector[M] gp;
  {
    matrix[M, M] C = cov_exp_quad(mo_gp_vec, sigma_gp, gp_len);
    real var_noise = square(sigma_noise);
    matrix[M, M] L_C;
    for (m in 1 : M) 
      C[m, m] += 1e-12;
    L_C = cholesky_decompose(C);
    gp_exp_quad = L_C * gp_raw;
  }
  gp = mo_noise + gp_exp_quad;
}
model {
  beta ~ normal(-0.25, 1);
  mu_raw ~ normal(0, 1);
  kappa_raw ~ normal(0, 1);
  sigma_mu ~ normal(0, 1);
  sigma_kappa ~ normal(0, 1);
  alpha ~ normal(log(4), 1);
  zeta ~ normal(0, 1);
  gamma ~ normal(0, 1);
  inv_phi ~ normal(0, 1);
  gp_raw ~ normal(0, 1);
  gp_len ~ gamma(10, 2);
  sigma_gp ~ normal(0, 1);
  sigma_noise ~ normal(0, 1);
  mo_noise_raw ~ normal(0, 1);
  complaints ~ neg_binomial_2_log(mu[building_idx]
                                  + kappa[building_idx] .* traps + gp[mo_idx]
                                  + log_sq_foot, phi);
}
generated quantities {
  array[N] int y_rep;
  for (n in 1 : N) 
    y_rep[n] = neg_binomial_2_log_safe_rng(mu[building_idx[n]]
                                           + kappa[building_idx[n]]
                                             * traps[n]
                                           + gp[mo_idx[n]] + log_sq_foot[n],
                                           phi);
}


Warning: in 'hier_NB_regression_ncp_slopes_mod_mos_gp.stan', line 54, column 21 to column 62: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.
  $ ../../../../../../../install/default/bin/stanc --auto-format hier_NB_regression_ncp_slopes_mod_mos_predict.stan
functions {
  int neg_binomial_2_log_safe_rng(real eta, real phi) {
    real gamma_rate = gamma_rng(phi, phi / exp(eta));
    if (gamma_rate >= exp(20.79)) 
      return -9;
    return poisson_rng(gamma_rate);
  }
}
data {
  int<lower=1> N;
  array[N] int<lower=0> complaints;
  vector<lower=0>[N] traps;
  vector[N] log_sq_foot;
  int<lower=1> K;
  int<lower=1> J;
  array[N] int<lower=1, upper=J> building_idx;
  matrix[J, K] building_data;
  int<lower=1> M;
  array[N] int<lower=1, upper=M> mo_idx;
  int<lower=1> M_forward;
  vector[J] log_sq_foot_pred;
}
transformed data {
  int N_hypo_traps = 21;
  array[N_hypo_traps] int hypo_traps;
  for (i in 1 : N_hypo_traps) 
    hypo_traps[i] = i - 1;
}
parameters {
  real<lower=0> inv_phi;
  vector[J] mu_raw;
  real<lower=0> sigma_mu;
  real alpha;
  vector[K] zeta;
  vector[J] kappa_raw;
  real<lower=0> sigma_kappa;
  real beta;
  vector[K] gamma;
  vector[M] mo_raw;
  real<lower=0> sigma_mo;
  real<lower=0, upper=1> rho_raw;
}
transformed parameters {
  real phi = inv(inv_phi);
  vector[J] mu = alpha + building_data * zeta + sigma_mu * mu_raw;
  vector[J] kappa = beta + building_data * gamma + sigma_kappa * kappa_raw;
  real rho = 2 * rho_raw - 1;
  vector[M] mo = sigma_mo * mo_raw;
  mo[1] /= sqrt(1 - rho ^ 2);
  for (m in 2 : M) {
    mo[m] += rho * mo[m - 1];
  }
}
model {
  inv_phi ~ normal(0, 1);
  kappa_raw ~ normal(0, 1);
  sigma_kappa ~ normal(0, 1);
  beta ~ normal(-0.25, 1);
  gamma ~ normal(0, 1);
  mu_raw ~ normal(0, 1);
  sigma_mu ~ normal(0, 1);
  alpha ~ normal(log(4), 1);
  zeta ~ normal(0, 1);
  mo_raw ~ normal(0, 1);
  sigma_mo ~ normal(0, 1);
  rho_raw ~ beta(10, 5);
  {
    vector[N] eta = mu[building_idx] + kappa[building_idx] .* traps
                    + mo[mo_idx] + log_sq_foot;
    complaints ~ neg_binomial_2_log(eta, phi);
  }
}
generated quantities {
  array[J, N_hypo_traps] int y_pred;
  matrix[J, N_hypo_traps] rev_pred;
  for (j in 1 : J) {
    for (i in 1 : N_hypo_traps) {
      array[M_forward] int y_pred_by_month;
      vector[M_forward] mo_forward;
      mo_forward[1] = normal_rng(rho * mo[M], sigma_mo);
      for (m in 2 : M_forward) 
        mo_forward[m] = normal_rng(rho * mo_forward[m - 1], sigma_mo);
      for (m in 1 : M_forward) {
        real eta = mu[j] + kappa[j] * hypo_traps[i] + mo_forward[m]
                   + log_sq_foot_pred[j];
        y_pred_by_month[m] = neg_binomial_2_log_safe_rng(eta, phi);
      }
      y_pred[j, i] = sum(y_pred_by_month);
      rev_pred[j, i] = -10 * y_pred[j, i];
    }
  }
}

  $ ../../../../../../../install/default/bin/stanc --auto-format hier_NB_regression_ncp_slopes_mod_resid.stan
functions {
  int neg_binomial_2_log_safe_rng(real eta, real phi) {
    real phi_div_exp_eta;
    real gamma_rate;
    phi_div_exp_eta = phi / exp(eta);
    gamma_rate = gamma_rng(phi, phi_div_exp_eta);
    if (gamma_rate >= exp(20.79)) 
      return -9;
    return poisson_rng(gamma_rate);
  }
}
data {
  int<lower=1> N;
  int<lower=1> K;
  array[N] int complaints;
  vector[N] traps;
  int<lower=1> J;
  array[N] int<lower=1, upper=J> building_idx;
  matrix[J, K] building_data;
  vector[N] log_sq_foot;
  array[N] int mo_idx;
  int M;
}
parameters {
  real alpha;
  real<lower=0> sigma_alpha;
  real<lower=0> sigma_beta;
  vector[J] std_alphas;
  vector[J] std_betas;
  real beta;
  real<lower=0> inv_prec;
  vector[K] zeta;
  vector[K] gamma;
}
transformed parameters {
  vector[J] alphas = alpha + building_data * zeta + sigma_alpha * std_alphas;
  vector[J] betas = beta + building_data * gamma + sigma_beta * std_betas;
  real prec = inv(inv_prec);
}
model {
  beta ~ normal(0, 1);
  std_alphas ~ normal(0, 1);
  std_betas ~ normal(0, 1);
  sigma_alpha ~ normal(0, 1);
  sigma_beta ~ normal(0, 1);
  alpha ~ normal(log(4), 1);
  zeta ~ normal(0, 1);
  gamma ~ normal(0, 1);
  inv_prec ~ normal(0, 1);
  complaints ~ neg_binomial_2_log(alphas[building_idx]
                                  + betas[building_idx] .* traps
                                  + log_sq_foot, prec);
}
generated quantities {
  array[N] int y_rep;
  vector[N] std_resid;
  vector[M] mo_resid = rep_vector(0, M);
  for (n in 1 : N) {
    real eta = alphas[building_idx[n]] + betas[building_idx[n]] * traps[n]
               + log_sq_foot[n];
    y_rep[n] = neg_binomial_2_log_safe_rng(eta, prec);
    std_resid[n] = (y_rep[n] - eta)
                   / sqrt(exp(eta) + exp(eta) ^ 2 * inv_prec);
    mo_resid[mo_idx[n]] = mo_resid[mo_idx[n]] + std_resid[n];
  }
  for (m in 1 : M) {
    mo_resid[m] = mo_resid[m] / 10;
  }
}

  $ ../../../../../../../install/default/bin/stanc --auto-format multiple_NB_regression.stan
functions {
  int neg_binomial_2_log_safe_rng(real eta, real phi) {
    real gamma_rate = gamma_rng(phi, phi / exp(eta));
    if (gamma_rate >= exp(20.79)) 
      return -9;
    return poisson_rng(gamma_rate);
  }
}
data {
  int<lower=1> N;
  vector<lower=0>[N] traps;
  vector<lower=0, upper=1>[N] live_in_super;
  vector[N] log_sq_foot;
  array[N] int<lower=0> complaints;
}
parameters {
  real alpha;
  real beta;
  real beta_super;
  real<lower=0> inv_phi;
}
transformed parameters {
  real phi = inv(inv_phi);
}
model {
  alpha ~ normal(log(4), 1);
  beta ~ normal(-0.25, 1);
  beta_super ~ normal(-0.5, 1);
  inv_phi ~ normal(0, 1);
  complaints ~ neg_binomial_2_log(alpha + beta * traps
                                  + beta_super * live_in_super + log_sq_foot,
                                  phi);
}
generated quantities {
  array[N] int y_rep;
  for (n in 1 : N) 
    y_rep[n] = neg_binomial_2_log_safe_rng(alpha + beta * traps[n]
                                           + beta_super * live_in_super[n]
                                           + log_sq_foot[n], phi);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format multiple_NB_regression_dgp.stan
data {
  int<lower=1> N;
}
model {

}
generated quantities {
  vector[N] log_sq_foot;
  array[N] int live_in_super;
  array[N] int traps;
  array[N] int complaints;
  real alpha = normal_rng(log(4), 0.1);
  real beta = normal_rng(-0.25, 0.1);
  real beta_super = normal_rng(-0.5, 0.1);
  real inv_phi = fabs(normal_rng(0, 1));
  for (n in 1 : N) {
    log_sq_foot[n] = normal_rng(1.5, 0.1);
    live_in_super[n] = bernoulli_rng(0.5);
    traps[n] = poisson_rng(8);
    complaints[n] = neg_binomial_2_log_rng(alpha + log_sq_foot[n]
                                           + beta * traps[n]
                                           + beta_super * live_in_super[n],
                                           inv(inv_phi));
  }
}

  $ ../../../../../../../install/default/bin/stanc --auto-format multiple_poisson_regression.stan
functions {
  int poisson_log_safe_rng(real eta) {
    real pois_rate = exp(eta);
    if (pois_rate >= exp(20.79)) 
      return -9;
    return poisson_rng(pois_rate);
  }
}
data {
  int<lower=1> N;
  array[N] int<lower=0> complaints;
  vector<lower=0>[N] traps;
  vector<lower=0, upper=1>[N] live_in_super;
  vector[N] log_sq_foot;
}
parameters {
  real alpha;
  real beta;
  real beta_super;
}
model {
  beta ~ normal(-0.25, 1);
  beta_super ~ normal(-0.5, 1);
  alpha ~ normal(log(4), 1);
  complaints ~ poisson_log(alpha + beta * traps + beta_super * live_in_super
                           + log_sq_foot);
}
generated quantities {
  array[N] int y_rep;
  for (n in 1 : N) 
    y_rep[n] = poisson_log_safe_rng(alpha + beta * traps[n]
                                    + beta_super * live_in_super[n]
                                    + log_sq_foot[n]);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format multiple_poisson_regression_dgp.stan
data {
  int<lower=1> N;
}
model {

}
generated quantities {
  vector[N] log_sq_foot;
  array[N] int live_in_super;
  array[N] int traps;
  array[N] int complaints;
  real alpha = normal_rng(log(4), 0.1);
  real beta = normal_rng(-0.25, 0.1);
  real beta_super = normal_rng(-0.5, 0.1);
  for (n in 1 : N) {
    log_sq_foot[n] = normal_rng(1.5, 0.1);
    live_in_super[n] = bernoulli_rng(0.5);
    traps[n] = poisson_rng(8);
    complaints[n] = poisson_log_rng(alpha + log_sq_foot[n] + beta * traps[n]
                                    + beta_super * live_in_super[n]);
  }
}

  $ ../../../../../../../install/default/bin/stanc --auto-format simple_poisson_regression.stan
functions {
  int poisson_log_safe_rng(real eta) {
    real pois_rate = exp(eta);
    if (pois_rate >= exp(20.79)) 
      return -9;
    return poisson_rng(pois_rate);
  }
}
data {
  int<lower=1> N;
  array[N] int<lower=0> complaints;
  vector<lower=0>[N] traps;
}
parameters {
  real alpha;
  real beta;
}
model {
  beta ~ normal(-0.25, 1);
  alpha ~ normal(log(4), 1);
  complaints ~ poisson_log(alpha + beta * traps);
}
generated quantities {
  array[N] int y_rep;
  for (n in 1 : N) 
    y_rep[n] = poisson_log_safe_rng(alpha + beta * traps[n]);
}

  $ ../../../../../../../install/default/bin/stanc --auto-format simple_poisson_regression_dgp.stan
data {
  int<lower=1> N;
  real<lower=0> mean_traps;
}
model {

}
generated quantities {
  array[N] int traps;
  array[N] int complaints;
  real alpha = normal_rng(log(4), 0.1);
  real beta = normal_rng(-0.25, 0.1);
  for (n in 1 : N) {
    traps[n] = poisson_rng(mean_traps);
    complaints[n] = poisson_log_rng(alpha + beta * traps[n]);
  }
}

