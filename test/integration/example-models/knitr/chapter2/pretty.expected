  $ ../../../../../../install/default/bin/stanc --auto-format abs_test.stan
data {
  int N;
  vector[N] y;
}
transformed data {
  vector[N] abs_y = fabs(y);
}
parameters {
  real theta;
}
model {
  y ~ normal(theta, 1);
}

  $ ../../../../../../install/default/bin/stanc --auto-format exponential.stan
data {
  int N;
  vector[N] x;
  vector[N] y;
}
parameters {
  real a;
  real b;
  real<lower=0> sigma;
}
model {
  y ~ normal(a * exp(-b * x), sigma);
  a ~ normal(0, 10);
  b ~ normal(0, 10);
  sigma ~ normal(0, 10);
}

  $ ../../../../../../install/default/bin/stanc --auto-format exponential_positive.stan
data {
  int N;
  vector[N] x;
  vector[N] y;
}
parameters {
  real<lower=0> a;
  real<lower=0> b;
  real<lower=0> sigma;
}
model {
  y ~ normal(a * exp(-b * x), sigma);
  a ~ normal(0, 10);
  b ~ normal(0, 10);
  sigma ~ normal(0, 10);
}

  $ ../../../../../../install/default/bin/stanc --auto-format exponential_positive_lognormal.stan
data {
  int N;
  vector[N] x;
  vector[N] y;
}
parameters {
  real<lower=0> a;
  real<lower=0> b;
  real<lower=0> sigma;
}
model {
  vector[N] y_pred;
  y_pred = a * exp(-b * x);
  y ~ lognormal(log(y_pred), sigma);
  a ~ normal(0, 10);
  b ~ normal(0, 10);
  sigma ~ normal(0, 10);
}

  $ ../../../../../../install/default/bin/stanc --auto-format golf1.stan
data {
  int J;
  int n[J];
  vector[J] x;
  int y[J];
  real r;
  real R;
}
parameters {
  real<lower=0> sigma;
}
model {
  vector[J] p;
  for (j in 1 : J) {
    p[j] = 2 * Phi(asin((R - r) / x[j]) / sigma) - 1;
  }
  y ~ binomial(n, p);
}
generated quantities {
  real sigma_degrees;
  sigma_degrees = (180 / pi()) * sigma;
}

  $ ../../../../../../install/default/bin/stanc --auto-format golf_logistic.stan
data {
  int J;
  int n[J];
  vector[J] x;
  int y[J];
}
parameters {
  real a;
  real b;
}
model {
  y ~ binomial_logit(n, a + b * x);
}

  $ ../../../../../../install/default/bin/stanc --auto-format mixture.stan
data {
  int K;
  int N;
  real y[N];
  real mu[K];
}
parameters {
  simplex[K] theta;
  real sigma;
}
model {
  real ps[K];
  sigma ~ cauchy(0, 2.5);
  mu ~ normal(0, 10);
  for (n in 1 : N) {
    for (k in 1 : K) {
      ps[k] = log(theta[k]) + normal_lpdf(y[n]| mu[k], sigma);
    }
    target += log_sum_exp(ps);
  }
}

  $ ../../../../../../install/default/bin/stanc --auto-format mixture_2.stan
data {
  int K;
  int N;
  real y[N];
  real mu[K];
}
parameters {
  simplex[K] theta;
  real sigma;
}
model {
  real ps[K];
  sigma ~ cauchy(0, 2.5);
  mu ~ normal(0, 10);
  for (n in 1 : N) {
    for (k in 1 : K) {
      ps[k] = log(theta[k]) + normal_lpdf(y[n]| mu[k], sigma);
    }
    target += log_sum_exp(ps);
  }
}
generated quantities {
  matrix[N, K] p;
  for (n in 1 : N) {
    vector[K] p_raw;
    for (k in 1 : K) {
      p_raw[k] = theta[k] * exp(normal_lpdf(y[n]| mu[k], sigma));
    }
    for (k in 1 : K) {
      p[n, k] = p_raw[k] / sum(p_raw);
    }
  }
}

  $ ../../../../../../install/default/bin/stanc --auto-format normal_normal.stan
data {
  real y;
  real<lower=0> sigma_y;
  real mu_0;
  real<lower=0> sigma_0;
}
parameters {
  real theta;
}
model {
  y ~ normal(theta, sigma_y);
  theta ~ normal(mu_0, sigma_0);
}

  $ ../../../../../../install/default/bin/stanc --auto-format ratings_1.stan
data {
  int N;
  vector[N] y;
  int<lower=1, upper=2> movie[N];
}
parameters {
  vector<lower=0, upper=5>[2] theta;
  real<lower=0, upper=2.5> sigma_y;
}
model {
  theta ~ normal(3, 1);
  y ~ normal(theta[movie], sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto-format ratings_2.stan
data {
  int N;
  vector[N] y;
  int J;
  int<lower=1, upper=J> movie[N];
}
parameters {
  vector<lower=0, upper=5>[J] theta;
  real<lower=0, upper=2.5> sigma_y;
}
model {
  theta ~ normal(3, 1);
  y ~ normal(theta[movie], sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto-format ratings_3.stan
data {
  int N;
  vector[N] y;
  int J;
  int K;
  int<lower=1, upper=J> movie[N];
  int<lower=1, upper=K> rater[N];
}
parameters {
  vector[J] alpha;
  vector[K] beta;
  real mu;
  real<lower=0> sigma_a;
  real<lower=0> sigma_b;
  real<lower=0> sigma_y;
}
transformed parameters {
  vector[J] a;
  a = mu + sigma_a * alpha;
}
model {
  y ~ normal(mu + sigma_a * alpha[movie] + sigma_b * beta[rater], sigma_y);
  alpha ~ normal(0, 1);
  beta ~ normal(0, 1);
}

  $ ../../../../../../install/default/bin/stanc --auto-format sum_of_exponentials.stan
data {
  int N;
  vector[N] x;
  vector[N] y;
}
parameters {
  vector<lower=0>[2] a;
  positive_ordered[2] b;
  real<lower=0> sigma;
}
model {
  vector[N] y_pred;
  y_pred = a[1] * exp(-b[1] * x) + a[2] * exp(-b[2] * x);
  y ~ lognormal(log(y_pred), sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto-format sum_of_exponentials_with_priors.stan
data {
  int N;
  vector[N] x;
  vector[N] y;
}
parameters {
  vector<lower=0>[2] a;
  positive_ordered[2] b;
  real<lower=0> sigma;
}
model {
  vector[N] y_pred;
  y_pred = a[1] * exp(-b[1] * x) + a[2] * exp(-b[2] * x);
  y ~ lognormal(log(y_pred), sigma);
  a ~ normal(0, 1);
  b ~ normal(0, 1);
  sigma ~ normal(0, 1);
}

  $ ../../../../../../install/default/bin/stanc --auto-format worldcup_first_try.stan
data {
  int N_teams;
  int N_games;
  vector[N_teams] prior_score;
  int team_1[N_games];
  int team_2[N_games];
  vector[N_games] score_1;
  vector[N_games] score_2;
  real df;
}
transformed data {
  vector[N_games] dif;
  vector[N_games] sqrt_dif;
  dif = score_1 - score_2;
  for (i in 1 : N_games) {
    sqrt_dif[i] = (step(dif[i]) - 0.5) * sqrt(fabs(dif[i]));
  }
}
parameters {
  vector[N_teams] alpha;
  real b;
  real<lower=0> sigma_a;
  real<lower=0> sigma_y;
}
transformed parameters {
  vector[N_teams] a;
  a = b * prior_score + sigma_a * alpha;
}
model {
  alpha ~ normal(0, 1);
  sqrt_dif ~ student_t(df, a[team_1] - a[team_2], sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto-format worldcup_first_try_noprior.stan
data {
  int N_teams;
  int N_games;
  vector[N_teams] prior_score;
  int team_1[N_games];
  int team_2[N_games];
  vector[N_games] score_1;
  vector[N_games] score_2;
  real df;
  real b;
}
transformed data {
  vector[N_games] dif;
  vector[N_games] sqrt_dif;
  dif = score_1 - score_2;
  for (i in 1 : N_games) {
    sqrt_dif[i] = (step(dif[i]) - 0.5) * sqrt(fabs(dif[i]));
  }
}
parameters {
  vector[N_teams] alpha;
  real<lower=0> sigma_a;
  real<lower=0> sigma_y;
}
transformed parameters {
  vector[N_teams] a;
  a = b * prior_score + sigma_a * alpha;
}
model {
  alpha ~ normal(0, 1);
  sqrt_dif ~ student_t(df, a[team_1] - a[team_2], sigma_y);
}

  $ ../../../../../../install/default/bin/stanc --auto-format worldcup_fixed.stan
data {
  int N_teams;
  int N_games;
  vector[N_teams] prior_score;
  int team_1[N_games];
  int team_2[N_games];
  vector[N_games] score_1;
  vector[N_games] score_2;
  real df;
}
transformed data {
  vector[N_games] dif;
  vector[N_games] sqrt_dif;
  dif = score_1 - score_2;
  for (i in 1 : N_games) {
    sqrt_dif[i] = 2 * (step(dif[i]) - 0.5) * sqrt(fabs(dif[i]));
  }
}
parameters {
  vector[N_teams] alpha;
  real b;
  real<lower=0> sigma_a;
  real<lower=0> sigma_y;
}
transformed parameters {
  vector[N_teams] a;
  a = b * prior_score + sigma_a * alpha;
}
model {
  alpha ~ normal(0, 1);
  sqrt_dif ~ student_t(df, a[team_1] - a[team_2], sigma_y);
}
generated quantities {
  vector[N_games] y_rep;
  vector[N_games] y_rep_original_scale;
  for (n in 1 : N_games) {
    y_rep[n] = student_t_rng(df, a[team_1[n]] - a[team_2[n]], sigma_y);
  }
  y_rep_original_scale = y_rep .* fabs(y_rep);
}

  $ ../../../../../../install/default/bin/stanc --auto-format worldcup_no_sqrt.stan
data {
  int N_teams;
  int N_games;
  vector[N_teams] prior_score;
  int team_1[N_games];
  int team_2[N_games];
  vector[N_games] score_1;
  vector[N_games] score_2;
  real df;
}
transformed data {
  vector[N_games] dif;
  dif = score_1 - score_2;
}
parameters {
  vector[N_teams] alpha;
  real b;
  real<lower=0> sigma_a;
  real<lower=0> sigma_y;
}
transformed parameters {
  vector[N_teams] a;
  a = b * prior_score + sigma_a * alpha;
}
model {
  alpha ~ normal(0, 1);
  dif ~ student_t(df, a[team_1] - a[team_2], sigma_y);
}
generated quantities {
  vector[N_games] y_rep;
  for (n in 1 : N_games) {
    y_rep[n] = student_t_rng(df, a[team_1[n]] - a[team_2[n]], sigma_y);
  }
}

  $ ../../../../../../install/default/bin/stanc --auto-format worldcup_with_replication.stan
data {
  int N_teams;
  int N_games;
  vector[N_teams] prior_score;
  int team_1[N_games];
  int team_2[N_games];
  vector[N_games] score_1;
  vector[N_games] score_2;
  real df;
}
transformed data {
  vector[N_games] dif;
  vector[N_games] sqrt_dif;
  dif = score_1 - score_2;
  for (i in 1 : N_games) {
    sqrt_dif[i] = (step(dif[i]) - 0.5) * sqrt(fabs(dif[i]));
  }
}
parameters {
  vector[N_teams] alpha;
  real b;
  real<lower=0> sigma_a;
  real<lower=0> sigma_y;
}
transformed parameters {
  vector[N_teams] a;
  a = b * prior_score + sigma_a * alpha;
}
model {
  alpha ~ normal(0, 1);
  sqrt_dif ~ student_t(df, a[team_1] - a[team_2], sigma_y);
}
generated quantities {
  vector[N_games] y_rep;
  vector[N_games] y_rep_original_scale;
  for (n in 1 : N_games) {
    y_rep[n] = student_t_rng(df, a[team_1[n]] - a[team_2[n]], sigma_y);
  }
  y_rep_original_scale = y_rep .* fabs(y_rep);
}

