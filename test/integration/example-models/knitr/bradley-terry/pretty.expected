  $ ../../../../../../install/default/bin/stanc --auto_format individual-hierarchical.stan
data {
  int<lower=0> K;
  int<lower=0> N;
  int<lower=1, upper=K> player1[N];
  int<lower=1, upper=K> player0[N];
  int<lower=0, upper=1> y[N];
}
parameters {
  real<lower=0> sigma;
  vector[K] alpha;
}
model {
  sigma ~ lognormal(0, 0.5);
  alpha ~ normal(0, sigma);
  y ~ bernoulli_logit(alpha[player1] - alpha[player0]);
}
generated quantities {
  int<lower=1, upper=K> ranking[K];
  {
    int ranked_index[K] = sort_indices_desc(alpha);
    for (k in 1 : K) 
      ranking[ranked_index[k]] = k;
  }
}

  $ ../../../../../../install/default/bin/stanc --auto_format individual-uniform.stan
data {
  int<lower=0> K;
  int<lower=0> N;
  int<lower=1, upper=K> player1[N];
  int<lower=1, upper=K> player0[N];
  int<lower=0, upper=1> y[N];
}
parameters {
  vector[K - 1] alpha_raw;
}
transformed parameters {
  vector[K] alpha = append_row(alpha_raw, -sum(alpha_raw));
}
model {
  y ~ bernoulli_logit(alpha[player1] - alpha[player0]);
}
generated quantities {
  int<lower=1, upper=K> ranked[K] = sort_indices_desc(alpha);
}

  $ ../../../../../../install/default/bin/stanc --auto_format individual.stan
data {
  int<lower=0> K;
  int<lower=0> N;
  int<lower=1, upper=K> player1[N];
  int<lower=1, upper=K> player0[N];
  int<lower=0, upper=1> y[N];
}
parameters {
  vector[K] alpha;
}
model {
  alpha ~ normal(0, 1);
  y ~ bernoulli_logit(alpha[player1] - alpha[player0]);
}
generated quantities {
  int<lower=1, upper=K> ranking[K];
  {
    int ranked_index[K] = sort_indices_desc(alpha);
    for (k in 1 : K) 
      ranking[ranked_index[k]] = k;
  }
}

  $ ../../../../../../install/default/bin/stanc --auto_format mle.stan

  $ ../../../../../../install/default/bin/stanc --auto_format team.stan
data {
  int<lower=0> K;
  int<lower=0> J;
  int<lower=0> N;
  int<lower=1, upper=K> team0[N, J];
  int<lower=1, upper=K> team1[N, J];
  int<lower=0, upper=1> y[N];
}
parameters {
  vector[K] alpha_std;
  real<lower=0> sigma;
}
transformed parameters {
  vector[K] alpha = sigma * alpha_std;
}
model {
  sigma ~ lognormal(0, 0.5);
  alpha_std ~ normal(0, 1);
  for (n in 1 : N) 
    y[n] ~ bernoulli_logit(sum(alpha[team1[n]]) - sum(alpha[team0[n]]));
}
generated quantities {
  int<lower=1, upper=K> ranking[K];
  {
    int ranked_index[K] = sort_indices_desc(alpha);
    for (k in 1 : K) 
      ranking[ranked_index[k]] = k;
  }
}

