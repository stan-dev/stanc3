  $ ../../../../../../install/default/bin/stanc --auto_format bym_predictor_only.stan
data {
  int<lower=0> N;
  int<lower=0> N_edges;
  int<lower=1, upper=N> node1[N_edges];
  int<lower=1, upper=N> node2[N_edges];
  int<lower=0> y[N];
  vector[N] x;
}
parameters {
  real beta0;
  real beta1;
  real<lower=0> tau_theta;
  real<lower=0> tau_phi;
  vector[N] theta_std;
  vector[N - 1] phi_std_raw;
}
transformed parameters {
  real<lower=0> sigma_theta = inv(sqrt(tau_theta));
  vector[N] theta = theta_std * sigma_theta;
  real<lower=0> sigma_phi = inv(sqrt(tau_phi));
  vector[N] phi;
  phi[1 : (N - 1)] = phi_std_raw;
  phi[N] = -sum(phi_std_raw);
  phi = phi * sigma_phi;
}
model {
  y ~ poisson_log(beta0 + beta1 * x + theta + phi);
  target += -0.5 * dot_self(phi[node1] - phi[node2]);
  beta0 ~ normal(0, 10);
  beta1 ~ normal(0, 5);
  theta_std ~ normal(0, 1);
  tau_theta ~ gamma(3.2761, 1.81);
  tau_phi ~ gamma(1, 1);
}
generated quantities {
  vector[N] mu = exp(beta0 + beta1 * x + phi + theta);
  real psi = sd(phi) / (sd(theta) + sd(phi));
}

  $ ../../../../../../install/default/bin/stanc --auto_format bym_predictor_plus_offset.stan
data {
  int<lower=0> N;
  int<lower=0> N_edges;
  int<lower=1, upper=N> node1[N_edges];
  int<lower=1, upper=N> node2[N_edges];
  int<lower=0> y[N];
  vector[N] x;
  vector<lower=0>[N] E;
}
transformed data {
  vector[N] log_E = log(E);
}
parameters {
  real beta0;
  real beta1;
  real<lower=0> tau_theta;
  real<lower=0> tau_phi;
  vector[N] theta_std;
  vector[N - 1] phi_std_raw;
}
transformed parameters {
  real<lower=0> sigma_theta = inv(sqrt(tau_theta));
  vector[N] theta = theta_std * sigma_theta;
  real<lower=0> sigma_phi = inv(sqrt(tau_phi));
  vector[N] phi;
  phi[1 : (N - 1)] = phi_std_raw;
  phi[N] = -sum(phi_std_raw);
  phi = phi * sigma_phi;
}
model {
  y ~ poisson_log(log_E + beta0 + beta1 * x + theta + phi);
  target += -0.5 * dot_self(phi[node1] - phi[node2]);
  beta0 ~ normal(0, 5);
  beta1 ~ normal(0, 5);
  theta_std ~ normal(0, 1);
  tau_theta ~ gamma(3.2761, 1.81);
  tau_phi ~ gamma(1, 1);
}

  $ ../../../../../../install/default/bin/stanc --auto_format sim_bym_data.stan
data {
  int<lower=0> N;
  int<lower=0> N_edges;
  int<lower=1, upper=N> node1[N_edges];
  int<lower=1, upper=N> node2[N_edges];
  vector<lower=0>[N] E;
}
transformed data {
  vector[N] log_E = log(E);
}
parameters {
  real<lower=0> tau_phi;
  vector[N - 1] phi_std_raw;
}
transformed parameters {
  real<lower=0> sigma_phi = inv(sqrt(tau_phi));
  vector[N] phi;
  phi[1 : (N - 1)] = phi_std_raw;
  phi[N] = -sum(phi_std_raw);
  phi = phi * sigma_phi;
}
model {
  target += -0.5 * dot_self(phi[node1] - phi[node2]);
  tau_phi ~ gamma(1, 1);
}
generated quantities {
  real beta0;
  real beta1;
  real<lower=0> tau_theta;
  real<lower=0> sigma_theta;
  vector[N] theta;
  vector[N] theta_std;
  vector[N] x;
  int y[N];
  beta0 = normal_rng(0, 1);
  beta1 = normal_rng(0, 1);
  for (i in 1 : N) {
    theta_std[i] = normal_rng(0, 1);
  }
  tau_theta = gamma_rng(3.2761, 1.81);
  sigma_theta = inv(sqrt(tau_theta));
  theta = theta_std * sigma_theta;
  for (i in 1 : N) {
    x[i] = normal_rng(0, 1);
    y[i] = poisson_log_rng(log_E[i] + beta0 + beta1 * x[i] + phi[i]
                           + theta[i]);
  }
}

