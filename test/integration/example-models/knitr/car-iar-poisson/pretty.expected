  $ ../../../../../../install/default/bin/stanc --auto_format bym2.stan
data {
  int<lower=0> N;
  int<lower=0> N_edges;
  int<lower=1, upper=N> node1[N_edges];
  int<lower=1, upper=N> node2[N_edges];
  int<lower=0> y[N];
  vector<lower=0>[N] E;
  int<lower=1> K;
  matrix[N, K] x;
  real<lower=0> scaling_factor;
}
transformed data {
  vector[N] log_E = log(E);
}
parameters {
  real beta0;
  vector[K] betas;
  real<lower=0> sigma;
  real<lower=0, upper=1> rho;
  vector[N] theta;
  vector[N] phi;
}
transformed parameters {
  vector[N] convolved_re;
  convolved_re = sqrt(1 - rho) * theta + sqrt(rho / scaling_factor) * phi;
}
model {
  y ~ poisson_log(log_E + beta0 + x * betas + convolved_re * sigma);
  target += -0.5 * dot_self(phi[node1] - phi[node2]);
  beta0 ~ normal(0.0, 1.0);
  betas ~ normal(0.0, 1.0);
  theta ~ normal(0.0, 1.0);
  sigma ~ normal(0, 1.0);
  rho ~ beta(0.5, 0.5);
  sum(phi) ~ normal(0, 0.001 * N);
}
generated quantities {
  real logit_rho = log(rho / (1.0 - rho));
  vector[N] eta = log_E + beta0 + x * betas + convolved_re * sigma;
  vector[N] mu = exp(eta);
}

  $ ../../../../../../install/default/bin/stanc --auto_format bym2_islands.stan
data {
  int<lower=0> N;
  int<lower=0> N_edges;
  int<lower=1, upper=N> node1[N_edges];
  int<lower=1, upper=N> node2[N_edges];
  int<lower=0> y[N];
  vector<lower=0>[N] E;
  int<lower=0, upper=N> N_singletons;
  int<lower=0, upper=N> N_components;
  int<lower=1, upper=N> nodes_per_component[N_components];
  vector[N_components] scales;
}
transformed data {
  vector[N] log_E = log(E);
  int N_connected = N - N_singletons;
  int N_con_comp = N_components - N_singletons;
  vector<lower=0>[N_connected] scaling_factor;
  int component_starts[N_components];
  int component_ends[N_components];
  int c_offset = 1;
  for (i in 1 : N_components) {
    component_starts[i] = c_offset;
    c_offset = c_offset + nodes_per_component[i];
    component_ends[i] = c_offset - 1;
  }
  for (i in 1 : N_con_comp) {
    for (j in component_starts[i] : component_ends[i]) {
      scaling_factor[j] = scales[i];
    }
  }
}
parameters {
  real beta0;
  real<lower=0> sigma;
  real<lower=0, upper=1> rho;
  vector[N_connected] theta;
  vector[N_connected] phi;
  vector[N_singletons] singletons_re;
}
transformed parameters {
  vector[N] re;
  re[1 : N_connected] = sqrt(1 - rho) * theta
                        + sqrt(rho * inv(scaling_factor)) .* phi;
  re[(N_connected + 1) : N] = singletons_re;
}
model {
  y ~ poisson_log(log_E + beta0 + re * sigma);
  target += -0.5 * dot_self(phi[node1] - phi[node2]);
  beta0 ~ normal(0.0, 2.5);
  theta ~ normal(0.0, 1.0);
  sigma ~ normal(0, 5);
  rho ~ beta(0.5, 0.5);
  singletons_re ~ normal(0.0, 1.0);
  for (i in 1 : N_components) {
    sum(phi[component_starts[i] : (component_ends[i])]) ~ normal(0,
                                                                 0.001
                                                                 * nodes_per_component[i]);
  }
}
generated quantities {
  real log_precision = -2.0 * log(sigma);
  real logit_rho = logit(rho);
  vector[N] eta = log_E + beta0 + re * sigma;
  vector[N] mu = exp(eta);
}

  $ ../../../../../../install/default/bin/stanc --auto_format bym2_offset_only.stan
data {
  int<lower=0> N;
  int<lower=0> N_edges;
  int<lower=1, upper=N> node1[N_edges];
  int<lower=1, upper=N> node2[N_edges];
  int<lower=0> y[N];
  vector<lower=0>[N] E;
  real<lower=0> scaling_factor;
}
transformed data {
  vector[N] log_E = log(E);
}
parameters {
  real beta0;
  real<lower=0> sigma;
  real<lower=0, upper=1> rho;
  vector[N] theta;
  vector[N] phi;
}
transformed parameters {
  vector[N] convolved_re;
  convolved_re = sqrt(1 - rho) * theta + sqrt(rho / scaling_factor) * phi;
}
model {
  y ~ poisson_log(log_E + beta0 + convolved_re * sigma);
  target += -0.5 * dot_self(phi[node1] - phi[node2]);
  beta0 ~ normal(0, 1);
  theta ~ normal(0, 1);
  sigma ~ normal(0, 1);
  rho ~ beta(0.5, 0.5);
  sum(phi) ~ normal(0, 0.001 * N);
}
generated quantities {
  real log_precision = -2.0 * log(sigma);
  real logit_rho = log(rho / (1.0 - rho));
  vector[N] eta = log_E + beta0 + convolved_re * sigma;
  vector[N] mu = exp(eta);
}

  $ ../../../../../../install/default/bin/stanc --auto_format bym2_predictor_plus_offset.stan
data {
  int<lower=0> N;
  int<lower=0> N_edges;
  int<lower=1, upper=N> node1[N_edges];
  int<lower=1, upper=N> node2[N_edges];
  int<lower=0> y[N];
  vector[N] x;
  vector<lower=0>[N] E;
  real<lower=0> scaling_factor;
}
transformed data {
  vector[N] log_E = log(E);
}
parameters {
  real beta0;
  real beta1;
  real<lower=0> sigma;
  real<lower=0, upper=1> rho;
  vector[N] theta;
  vector[N] phi;
}
transformed parameters {
  vector[N] convolved_re;
  convolved_re = sqrt(1 - rho) * theta + sqrt(rho / scaling_factor) * phi;
}
model {
  y ~ poisson_log(log_E + beta0 + beta1 * x + convolved_re * sigma);
  target += -0.5 * dot_self(phi[node1] - phi[node2]);
  sum(phi) ~ normal(0, 0.001 * N);
  beta0 ~ normal(0.0, 5.0);
  beta1 ~ normal(0.0, 5.0);
  theta ~ normal(0.0, 1.0);
  sigma ~ normal(0, 5);
  rho ~ beta(0.5, 0.5);
}
generated quantities {
  real log_precision = -2.0 * log(sigma);
  real logit_rho = log(rho / (1.0 - rho));
  vector[N] eta = log_E + beta0 + beta1 * x + convolved_re * sigma;
  vector[N] mu = exp(eta);
}

  $ ../../../../../../install/default/bin/stanc --auto_format bym_predictor_plus_offset.stan
data {
  int<lower=0> N;
  int<lower=0> N_edges;
  int<lower=1, upper=N> node1[N_edges];
  int<lower=1, upper=N> node2[N_edges];
  int<lower=0> y[N];
  vector[N] x;
  vector<lower=0>[N] E;
}
transformed data {
  vector[N] log_E = log(E);
}
parameters {
  real beta0;
  real beta1;
  real<lower=0> tau_theta;
  real<lower=0> tau_phi;
  vector[N] theta;
  vector[N] phi;
}
transformed parameters {
  real<lower=0> sigma_theta = inv(sqrt(tau_theta));
  real<lower=0> sigma_phi = inv(sqrt(tau_phi));
}
model {
  y ~ poisson_log(log_E + beta0 + beta1 * x + phi * sigma_phi
                  + theta * sigma_theta);
  target += -0.5 * dot_self(phi[node1] - phi[node2]);
  sum(phi) ~ normal(0, 0.001 * N);
  beta0 ~ normal(0, 5);
  beta1 ~ normal(0, 5);
  theta ~ normal(0, 1);
  tau_theta ~ gamma(3.2761, 1.81);
  tau_phi ~ gamma(1, 1);
}
generated quantities {
  vector[N] mu = exp(log_E + beta0 + beta1 * x + phi * sigma_phi
                     + theta * sigma_theta);
}

  $ ../../../../../../install/default/bin/stanc --auto_format pois.stan
data {
  int<lower=0> N;
  int<lower=0> y[N];
  vector<lower=0>[N] E;
}
transformed data {
  vector[N] log_E = log(E);
}
parameters {
  real beta0;
}
model {
  y ~ poisson_log(log_E + beta0);
  beta0 ~ normal(0.0, 2.5);
}
generated quantities {
  vector[N] eta = log_E + beta0;
  vector[N] mu = exp(eta);
}

  $ ../../../../../../install/default/bin/stanc --auto_format pois_icar.stan
data {
  int<lower=0> N;
  int<lower=0> N_edges;
  int<lower=1, upper=N> node1[N_edges];
  int<lower=1, upper=N> node2[N_edges];
  int<lower=0> y[N];
  vector<lower=0>[N] E;
}
transformed data {
  vector[N] log_E = log(E);
}
parameters {
  real beta0;
  real<lower=0> sigma;
  vector[N] phi;
}
model {
  y ~ poisson_log(log_E + beta0 + phi * sigma);
  target += -0.5 * dot_self(phi[node1] - phi[node2]);
  beta0 ~ normal(0.0, 2.5);
  sigma ~ normal(0.0, 5.0);
  sum(phi) ~ normal(0, 0.001 * N);
}
generated quantities {
  vector[N] eta = log_E + beta0 + phi * sigma;
  vector[N] mu = exp(eta);
}

  $ ../../../../../../install/default/bin/stanc --auto_format pois_re.stan
data {
  int<lower=0> N;
  int<lower=0> y[N];
  vector<lower=0>[N] E;
}
transformed data {
  vector[N] log_E = log(E);
}
parameters {
  real beta0;
  vector[N] theta;
  real<lower=0> sigma;
}
model {
  y ~ poisson_log(log_E + beta0 + theta * sigma);
  beta0 ~ normal(0.0, 2.5);
  theta ~ normal(0, 1);
  sigma ~ normal(0, 5);
}
generated quantities {
  vector[N] eta = log_E + beta0 + theta * sigma;
  vector[N] mu = exp(eta);
}

  $ ../../../../../../install/default/bin/stanc --auto_format simple_iar.stan
data {
  int<lower=0> N;
  int<lower=0> N_edges;
  int<lower=1, upper=N> node1[N_edges];
  int<lower=1, upper=N> node2[N_edges];
}
parameters {
  vector[N] phi;
  real sigma;
}
model {
  target += -0.5 * dot_self(phi[node1] - phi[node2]);
  sum(phi) ~ normal(0, 0.01 * N);
}

