  $ ../../../../../../install/default/bin/stanc --auto_format bernoulli-bandits-conjugate.stan
data {
  int<lower=1> K;
  int<lower=0> N;
  int<lower=1, upper=K> z[N];
  int<lower=0, upper=1> y[N];
}
transformed data {
  int<lower=0> successes[K] = rep_array(0, K);
  int<lower=0> trials[K] = rep_array(0, K);
  for (n in 1 : N) {
    trials[z[n]] += 1;
    successes[z[n]] += y[n];
  }
}
generated quantities {
  simplex[K] is_best;
  vector<lower=0, upper=1>[K] theta;
  for (k in 1 : K) 
    theta[k] = beta_rng(1 + successes[k], 1 + trials[k] - successes[k]);
  {
    real best_prob = max(theta);
    for (k in 1 : K) 
      is_best[k] = (theta[k] >= best_prob);
    is_best /= sum(is_best);
  }
}

  $ ../../../../../../install/default/bin/stanc --auto_format bernoulli-bandits-sufficient.stan
data {
  int<lower=1> K;
  int<lower=0> N;
  int<lower=1, upper=K> z[N];
  int<lower=0, upper=1> y[N];
}
transformed data {
  int<lower=0> successes[2] = rep_array(0, K);
  int<lower=0> trials[2] = rep_array(0, K);
  for (n in 1 : N) {
    trials[z[n]] += 1;
    successes[z[n]] += y[n];
  }
}
parameters {
  vector<lower=0, upper=1>[K] theta;
}
model {
  successes ~ binomial(trials, theta);
}
generated quantities {
  simplex[K] is_best;
  {
    real best_prob = max(theta);
    for (k in 1 : K) 
      is_best[k] = (theta[k] >= best_prob);
    is_best /= sum(is_best);
  }
}

  $ ../../../../../../install/default/bin/stanc --auto_format bernoulli-bandits.stan
data {
  int<lower=1> K;
  int<lower=0> N;
  int<lower=1, upper=K> z[N];
  int<lower=0, upper=1> y[N];
}
parameters {
  vector<lower=0, upper=1>[K] theta;
}
model {
  y ~ bernoulli(theta[z]);
}
generated quantities {
  simplex[K] is_best;
  {
    real best_prob = max(theta);
    for (k in 1 : K) 
      is_best[k] = (theta[k] >= best_prob);
    is_best /= sum(is_best);
  }
}

