  $ ../../../../../../install/default/bin/stanc --auto-format gp-fit-ARD.stan
functions {
  matrix L_cov_exp_quad_ARD(array[] vector x, real alpha, vector rho,
                            real delta) {
    int N = size(x);
    matrix[N, N] K;
    real neg_half = -0.5;
    real sq_alpha = square(alpha);
    for (i in 1 : (N - 1)) {
      K[i, i] = sq_alpha + delta;
      for (j in (i + 1) : N) {
        K[i, j] = sq_alpha * exp(neg_half * dot_self((x[i] - x[j]) ./ rho));
        K[j, i] = K[i, j];
      }
    }
    K[N, N] = sq_alpha + delta;
    return cholesky_decompose(K);
  }
}
data {
  int<lower=1> N;
  int<lower=1> D;
  array[N] vector[D] x;
  vector[N] y;
}
transformed data {
  real delta = 1e-9;
}
parameters {
  vector<lower=0>[D] rho;
  real<lower=0> alpha;
  real<lower=0> sigma;
  vector[N] eta;
}
model {
  vector[N] f;
  {
    matrix[N, N] L_K = L_cov_exp_quad_ARD(x, alpha, rho, delta);
    f = L_K * eta;
  }
  rho ~ inv_gamma(5, 5);
  alpha ~ normal(0, 1);
  sigma ~ normal(0, 1);
  eta ~ normal(0, 1);
  y ~ normal(f, sigma);
}

  $ ../../../../../../install/default/bin/stanc --auto-format gp-fit-latent.stan
data {
  int<lower=1> N;
  array[N] real x;
  vector[N] y;
}
transformed data {
  real delta = 1e-9;
}
parameters {
  real<lower=0> rho;
  real<lower=0> alpha;
  real<lower=0> sigma;
  vector[N] eta;
}
model {
  vector[N] f;
  {
    matrix[N, N] L_K;
    matrix[N, N] K = cov_exp_quad(x, alpha, rho);
    for (n in 1 : N) 
      K[n, n] = K[n, n] + delta;
    L_K = cholesky_decompose(K);
    f = L_K * eta;
  }
  rho ~ inv_gamma(5, 5);
  alpha ~ normal(0, 1);
  sigma ~ normal(0, 1);
  eta ~ normal(0, 1);
  y ~ normal(f, sigma);
}


Warning: in 'gp-fit-latent.stan', line 22, column 21 to column 48: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.
  $ ../../../../../../install/default/bin/stanc --auto-format gp-fit-logit.stan
data {
  int<lower=1> N;
  array[N] real x;
  array[N] int<lower=0, upper=1> z;
}
transformed data {
  real delta = 1e-9;
}
parameters {
  real<lower=0> rho;
  real<lower=0> alpha;
  real a;
  vector[N] eta;
}
model {
  vector[N] f;
  {
    matrix[N, N] L_K;
    matrix[N, N] K = cov_exp_quad(x, alpha, rho);
    for (n in 1 : N) 
      K[n, n] = K[n, n] + delta;
    L_K = cholesky_decompose(K);
    f = L_K * eta;
  }
  rho ~ inv_gamma(5, 5);
  alpha ~ normal(0, 1);
  a ~ normal(0, 1);
  eta ~ normal(0, 1);
  z ~ bernoulli_logit(a + f);
}


Warning: in 'gp-fit-logit.stan', line 22, column 21 to column 48: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.
  $ ../../../../../../install/default/bin/stanc --auto-format gp-fit-multi-output.stan
data {
  int<lower=1> N;
  int<lower=1> D;
  array[N] real x;
  matrix[N, D] y;
}
transformed data {
  real delta = 1e-9;
}
parameters {
  real<lower=0> rho;
  vector<lower=0>[D] alpha;
  real<lower=0> sigma;
  cholesky_factor_corr[D] L_Omega;
  matrix[N, D] eta;
}
model {
  matrix[N, D] f;
  {
    matrix[N, N] K = cov_exp_quad(x, 1.0, rho);
    matrix[N, N] L_K;
    for (n in 1 : N) 
      K[n, n] = K[n, n] + delta;
    L_K = cholesky_decompose(K);
    f = L_K * eta * diag_pre_multiply(alpha, L_Omega)';
  }
  rho ~ inv_gamma(5, 5);
  alpha ~ normal(0, 1);
  sigma ~ normal(0, 1);
  L_Omega ~ lkj_corr_cholesky(3);
  to_vector(eta) ~ normal(0, 1);
  to_vector(y) ~ normal(to_vector(f), sigma);
}
generated quantities {
  matrix[D, D] Omega;
  Omega = L_Omega * L_Omega';
}


Warning: in 'gp-fit-multi-output.stan', line 22, column 21 to column 46: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.
  $ ../../../../../../install/default/bin/stanc --auto-format gp-fit-pois.stan
data {
  int<lower=1> N;
  array[N] real x;
  array[N] int<lower=0> y;
}
transformed data {
  real delta = 1e-9;
}
parameters {
  real<lower=0> rho;
  real<lower=0> alpha;
  real a;
  vector[N] eta;
}
model {
  vector[N] f;
  {
    matrix[N, N] L_K;
    matrix[N, N] K = cov_exp_quad(x, alpha, rho);
    for (n in 1 : N) 
      K[n, n] = K[n, n] + delta;
    L_K = cholesky_decompose(K);
    f = L_K * eta;
  }
  rho ~ inv_gamma(5, 5);
  alpha ~ normal(0, 1);
  a ~ normal(0, 1);
  eta ~ normal(0, 1);
  y ~ poisson_log(a + f);
}


Warning: in 'gp-fit-pois.stan', line 22, column 21 to column 48: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.
  $ ../../../../../../install/default/bin/stanc --auto-format gp-fit.stan
data {
  int<lower=1> N;
  array[N] real x;
  vector[N] y;
}
transformed data {
  vector[N] mu = rep_vector(0, N);
}
parameters {
  real<lower=0> rho;
  real<lower=0> alpha;
  real<lower=0> sigma;
}
model {
  matrix[N, N] L_K;
  matrix[N, N] K = cov_exp_quad(x, alpha, rho);
  real sq_sigma = square(sigma);
  for (n in 1 : N) 
    K[n, n] = K[n, n] + sq_sigma;
  L_K = cholesky_decompose(K);
  rho ~ inv_gamma(5, 5);
  alpha ~ normal(0, 1);
  sigma ~ normal(0, 1);
  y ~ multi_normal_cholesky(mu, L_K);
}


Warning: in 'gp-fit.stan', line 19, column 19 to column 46: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.
  $ ../../../../../../install/default/bin/stanc --auto-format gp-predict-analytic.stan
functions {
  vector gp_pred_rng(array[] real x2, vector y1, array[] real x1, real alpha,
                     real rho, real sigma, real delta) {
    int N1 = rows(y1);
    int N2 = size(x2);
    vector[N2] f2;
    {
      matrix[N1, N1] L_K;
      vector[N1] L_div_y1;
      matrix[N1, N2] k_x1_x2;
      matrix[N1, N2] L_div_k_x1_x2;
      vector[N2] f2_mu;
      matrix[N2, N2] cov_f2;
      matrix[N2, N2] diag_delta;
      matrix[N1, N1] K;
      K = cov_exp_quad(x1, alpha, rho);
      for (n in 1 : N1) 
        K[n, n] = K[n, n] + square(sigma);
      L_K = cholesky_decompose(K);
      L_div_y1 = mdivide_left_tri_low(L_K, y1);
      k_x1_x2 = cov_exp_quad(x1, x2, alpha, rho);
      L_div_k_x1_x2 = mdivide_left_tri_low(L_K, k_x1_x2);
      f2_mu = L_div_k_x1_x2' * L_div_y1;
      cov_f2 = cov_exp_quad(x2, alpha, rho) - L_div_k_x1_x2' * L_div_k_x1_x2;
      diag_delta = diag_matrix(rep_vector(delta, N2));
      f2 = multi_normal_rng(f2_mu, cov_f2 + diag_delta);
    }
    return f2;
  }
}
data {
  int<lower=1> N1;
  array[N1] real x1;
  vector[N1] y1;
  int<lower=1> N2;
  array[N2] real x2;
}
transformed data {
  vector[N1] mu = rep_vector(0, N1);
  real delta = 1e-9;
}
parameters {
  real<lower=0> rho;
  real<lower=0> alpha;
  real<lower=0> sigma;
}
model {
  matrix[N1, N1] L_K;
  {
    matrix[N1, N1] K = cov_exp_quad(x1, alpha, rho);
    real sq_sigma = square(sigma);
    for (n1 in 1 : N1) 
      K[n1, n1] = K[n1, n1] + sq_sigma;
    L_K = cholesky_decompose(K);
  }
  rho ~ inv_gamma(5, 5);
  alpha ~ normal(0, 1);
  sigma ~ normal(0, 1);
  y1 ~ multi_normal_cholesky(mu, L_K);
}
generated quantities {
  vector[N2] f2;
  vector[N2] y2;
  f2 = gp_pred_rng(x2, y1, x1, alpha, rho, sigma, delta);
  for (n2 in 1 : N2) 
    y2[n2] = normal_rng(f2[n2], sigma);
}


Warning: in 'gp-predict-analytic.stan', line 24, column 12 to column 40: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.

Warning: in 'gp-predict-analytic.stan', line 29, column 18 to column 50: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.

Warning: in 'gp-predict-analytic.stan', line 32, column 17 to column 45: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.

Warning: in 'gp-predict-analytic.stan', line 59, column 23 to column 51: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.
  $ ../../../../../../install/default/bin/stanc --auto-format gp-predict-logit.stan
data {
  int<lower=1> N1;
  array[N1] real x1;
  array[N1] int<lower=0, upper=1> z1;
  int<lower=1> N2;
  array[N2] real x2;
}
transformed data {
  real delta = 1e-9;
  int<lower=1> N = N1 + N2;
  array[N] real x;
  for (n1 in 1 : N1) 
    x[n1] = x1[n1];
  for (n2 in 1 : N2) 
    x[N1 + n2] = x2[n2];
}
parameters {
  real<lower=0> rho;
  real<lower=0> alpha;
  real a;
  vector[N] eta;
}
transformed parameters {
  vector[N] f;
  {
    matrix[N, N] L_K;
    matrix[N, N] K = cov_exp_quad(x, alpha, rho);
    for (n in 1 : N) 
      K[n, n] = K[n, n] + delta;
    L_K = cholesky_decompose(K);
    f = L_K * eta;
  }
}
model {
  rho ~ inv_gamma(5, 5);
  alpha ~ normal(0, 1);
  a ~ normal(0, 1);
  eta ~ normal(0, 1);
  z1 ~ bernoulli_logit(a + f[1 : N1]);
}
generated quantities {
  array[N2] int z2;
  for (n2 in 1 : N2) 
    z2[n2] = bernoulli_logit_rng(a + f[N1 + n2]);
}


Warning: in 'gp-predict-logit.stan', line 29, column 21 to column 48: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.
  $ ../../../../../../install/default/bin/stanc --auto-format gp-predict.stan
data {
  int<lower=1> N1;
  array[N1] real x1;
  vector[N1] y1;
  int<lower=1> N2;
  array[N2] real x2;
}
transformed data {
  real delta = 1e-9;
  int<lower=1> N = N1 + N2;
  array[N] real x;
  for (n1 in 1 : N1) 
    x[n1] = x1[n1];
  for (n2 in 1 : N2) 
    x[N1 + n2] = x2[n2];
}
parameters {
  real<lower=0> rho;
  real<lower=0> alpha;
  real<lower=0> sigma;
  vector[N] eta;
}
transformed parameters {
  vector[N] f;
  {
    matrix[N, N] L_K;
    matrix[N, N] K = cov_exp_quad(x, alpha, rho);
    for (n in 1 : N) 
      K[n, n] = K[n, n] + delta;
    L_K = cholesky_decompose(K);
    f = L_K * eta;
  }
}
model {
  rho ~ inv_gamma(5, 5);
  alpha ~ normal(0, 1);
  sigma ~ normal(0, 1);
  eta ~ normal(0, 1);
  y1 ~ normal(f[1 : N1], sigma);
}
generated quantities {
  vector[N2] y2;
  for (n2 in 1 : N2) 
    y2[n2] = normal_rng(f[N1 + n2], sigma);
}


Warning: in 'gp-predict.stan', line 29, column 21 to column 48: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.
  $ ../../../../../../install/default/bin/stanc --auto-format gp-sim-cholesky.stan
data {
  int<lower=1> N;
  array[N] real x;
}
transformed data {
  vector[N] mu = rep_vector(0, N);
  matrix[N, N] L;
  {
    matrix[N, N] K = cov_exp_quad(x, 1.0, 1.0);
    for (n in 1 : N) 
      K[n, n] = K[n, n] + 0.1;
    L = cholesky_decompose(K);
  }
}
parameters {
  vector[N] eta;
}
model {
  eta ~ normal(0, 1);
}
generated quantities {
  vector[N] y;
  y = mu + L * eta;
}


Warning: in 'gp-sim-cholesky.stan', line 14, column 21 to column 46: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.
  $ ../../../../../../install/default/bin/stanc --auto-format gp-sim-multi-output.stan
data {
  int<lower=1> N;
  int<lower=1> D;
  array[N] real x;
}
transformed data {
  real delta = 1e-9;
  real<lower=0> rho = 1.0;
  vector<lower=0>[D] alpha = rep_vector(1.0, D);
  real<lower=0> sigma = sqrt(0.1);
}
parameters {
  cholesky_factor_corr[D] L_Omega;
  matrix[N, D] eta;
  matrix[N, D] y;
}
model {
  matrix[N, D] f;
  {
    matrix[N, N] K = cov_exp_quad(x, 1.0, rho);
    matrix[N, N] L_K;
    for (n in 1 : N) 
      K[n, n] = K[n, n] + delta;
    L_K = cholesky_decompose(K);
    f = L_K * eta * diag_pre_multiply(alpha, L_Omega)';
  }
  L_Omega ~ lkj_corr_cholesky(3);
  to_vector(eta) ~ normal(0, 1);
  to_vector(y) ~ normal(to_vector(f), sigma);
}
generated quantities {
  matrix[D, D] Omega;
  Omega = L_Omega * L_Omega';
}


Warning: in 'gp-sim-multi-output.stan', line 23, column 21 to column 46: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.
  $ ../../../../../../install/default/bin/stanc --auto-format gp-sim-multi.stan
data {
  int<lower=1> N;
  int<lower=1> D;
  array[N] vector[D] x;
}
transformed data {
  matrix[N, N] K = cov_exp_quad(x, 1.0, 1.0);
  vector[N] mu = rep_vector(0, N);
  for (n in 1 : N) 
    K[n, n] = K[n, n] + 0.1;
}
parameters {
  vector[N] y;
}
model {
  y ~ multi_normal(mu, K);
}


Warning: in 'gp-sim-multi.stan', line 11, column 19 to column 44: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.
  $ ../../../../../../install/default/bin/stanc --auto-format gp-sim-naive.stan
data {
  int<lower=1> N;
  array[N] real x;
}
transformed data {
  matrix[N, N] K;
  vector[N] mu = rep_vector(0, N);
  for (i in 1 : (N - 1)) {
    K[i, i] = 1 + 0.1;
    for (j in (i + 1) : N) {
      K[i, j] = exp(-0.5 * pow(x[i] - x[j], 2));
      K[j, i] = K[i, j];
    }
  }
  K[N, N] = 1 + 0.1;
}
parameters {
  vector[N] y;
}
model {
  y ~ multi_normal(mu, K);
}

  $ ../../../../../../install/default/bin/stanc --auto-format gp-sim.stan
data {
  int<lower=1> N;
  array[N] real x;
}
transformed data {
  matrix[N, N] K = cov_exp_quad(x, 1.0, 1.0);
  vector[N] mu = rep_vector(0, N);
  for (n in 1 : N) 
    K[n, n] = K[n, n] + 0.1;
}
parameters {
  vector[N] y;
}
model {
  y ~ multi_normal(mu, K);
}


Warning: in 'gp-sim.stan', line 10, column 19 to column 44: cov_exp_quad is deprecated and will be removed in the future. Use gp_exp_quad_cov instead.
