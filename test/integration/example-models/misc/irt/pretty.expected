  $ ../../../../../../install/default/bin/stanc --auto_format irt.stan
data {
  int<lower=1> J;
  int<lower=1> K;
  int<lower=1> N;
  int<lower=1, upper=J> jj[N];
  int<lower=1, upper=K> kk[N];
  int<lower=0, upper=1> y[N];
}
parameters {
  real delta;
  real alpha[J];
  real beta[K];
}
model {
  alpha ~ normal(0, 1);
  beta ~ normal(0, 1);
  delta ~ normal(.75, 1);
  for (n in 1 : N) 
    y[n] ~ bernoulli_logit(alpha[jj[n]] - beta[kk[n]] + delta);
}

  $ ../../../../../../install/default/bin/stanc --auto_format irt2.stan
data {
  int<lower=1> J;
  int<lower=1> K;
  int<lower=1> N;
  int<lower=1, upper=J> jj[N];
  int<lower=1, upper=K> kk[N];
  int<lower=0, upper=1> y[N];
}
parameters {
  real delta;
  real alpha[J];
  real beta[K];
  real log_gamma[K];
}
model {
  alpha ~ normal(0, 1);
  beta ~ normal(0, 1);
  delta ~ normal(0.75, 1);
  log_gamma ~ normal(0, 1);
  for (n in 1 : N) 
    y[n] ~ bernoulli_logit(exp(log_gamma[kk[n]])
                           * (alpha[jj[n]] - beta[kk[n]] + delta));
}

  $ ../../../../../../install/default/bin/stanc --auto_format irt2_multilevel.stan
data {
  int<lower=1> J;
  int<lower=1> K;
  int<lower=1> N;
  int<lower=1, upper=J> jj[N];
  int<lower=1, upper=K> kk[N];
  int<lower=0, upper=1> y[N];
}
parameters {
  real delta;
  real alpha[J];
  real beta[K];
  real log_gamma[K];
  real<lower=0> sigma_alpha;
  real<lower=0> sigma_beta;
  real<lower=0> sigma_gamma;
}
model {
  alpha ~ normal(0, sigma_alpha);
  beta ~ normal(0, sigma_beta);
  log_gamma ~ normal(0, sigma_gamma);
  delta ~ cauchy(0, 5);
  sigma_alpha ~ cauchy(0, 5);
  sigma_beta ~ cauchy(0, 5);
  sigma_gamma ~ cauchy(0, 5);
  for (n in 1 : N) 
    y[n] ~ bernoulli_logit(exp(log_gamma[kk[n]])
                           * (alpha[jj[n]] - beta[kk[n]] + delta));
}

  $ ../../../../../../install/default/bin/stanc --auto_format irt_multilevel.stan
data {
  int<lower=1> J;
  int<lower=1> K;
  int<lower=1> N;
  int<lower=1, upper=J> jj[N];
  int<lower=1, upper=K> kk[N];
  int<lower=0, upper=1> y[N];
}
parameters {
  real delta;
  real alpha[J];
  real beta[K];
  real<lower=0> sigma_alpha;
  real<lower=0> sigma_beta;
}
model {
  alpha ~ normal(0, sigma_alpha);
  beta ~ normal(0, sigma_beta);
  delta ~ normal(.75, 1);
  for (n in 1 : N) 
    y[n] ~ bernoulli_logit(alpha[jj[n]] - beta[kk[n]] + delta);
}

