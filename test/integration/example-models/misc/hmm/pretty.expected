  $ ../../../../../../install/default/bin/stanc --auto_format hmm-analytic.stan
data {
  int<lower=1> K;
  int<lower=1> V;
  int<lower=0> T;
  int<lower=1, upper=V> w[T];
  int<lower=1, upper=K> z[T];
  vector<lower=0>[K] alpha;
  vector<lower=0>[V] beta;
}
transformed data {
  vector<lower=0>[K] alpha_post[K];
  vector<lower=0>[V] beta_post[K];
  for (k in 1 : K) 
    alpha_post[k] <- alpha;
  for (t in 2 : T) 
    alpha_post[z[t - 1], z[t]] <- alpha_post[z[t - 1], z[t]] + 1;
  for (k in 1 : K) 
    beta_post[k] <- beta;
  for (t in 1 : T) 
    beta_post[z[t], w[t]] <- beta_post[z[t], w[t]] + 1;
}
parameters {
  simplex[K] theta[K];
  simplex[V] phi[K];
}
model {
  for (k in 1 : K) 
    theta[k] ~ dirichlet(alpha_post[k]);
  for (k in 1 : K) 
    phi[k] ~ dirichlet(beta_post[k]);
}


Warning: deprecated language construct used in 'hmm-analytic.stan', line 14, column 19:
   -------------------------------------------------
    12:    vector<lower=0>[V] beta_post[K];
    13:    for (k in 1:K) 
    14:      alpha_post[k] <- alpha;
                            ^
    15:    for (t in 2:T)
    16:      alpha_post[z[t-1],z[t]] <- alpha_post[z[t-1],z[t]] + 1;
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-analytic.stan', line 16, column 29:
   -------------------------------------------------
    14:      alpha_post[k] <- alpha;
    15:    for (t in 2:T)
    16:      alpha_post[z[t-1],z[t]] <- alpha_post[z[t-1],z[t]] + 1;
                                      ^
    17:    for (k in 1:K)
    18:      beta_post[k] <- beta;
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-analytic.stan', line 18, column 18:
   -------------------------------------------------
    16:      alpha_post[z[t-1],z[t]] <- alpha_post[z[t-1],z[t]] + 1;
    17:    for (k in 1:K)
    18:      beta_post[k] <- beta;
                           ^
    19:    for (t in 1:T)
    20:      beta_post[z[t],w[t]] <- beta_post[z[t],w[t]] + 1;
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-analytic.stan', line 20, column 26:
   -------------------------------------------------
    18:      beta_post[k] <- beta;
    19:    for (t in 1:T)
    20:      beta_post[z[t],w[t]] <- beta_post[z[t],w[t]] + 1;
                                   ^
    21:  }
    22:  parameters {
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.

  $ ../../../../../../install/default/bin/stanc --auto_format hmm-semisup.stan
data {
  int<lower=1> K;
  int<lower=1> V;
  int<lower=0> T;
  int<lower=1> T_unsup;
  int<lower=1, upper=V> w[T];
  int<lower=1, upper=K> z[T];
  int<lower=1, upper=V> u[T_unsup];
  vector<lower=0>[K] alpha;
  vector<lower=0>[V] beta;
}
parameters {
  simplex[K] theta[K];
  simplex[V] phi[K];
}
model {
  for (k in 1 : K) 
    theta[k] ~ dirichlet(alpha);
  for (k in 1 : K) 
    phi[k] ~ dirichlet(beta);
  for (t in 1 : T) 
    w[t] ~ categorical(phi[z[t]]);
  for (t in 2 : T) 
    z[t] ~ categorical(theta[z[t - 1]]);
  {
    real acc[K];
    real gamma[T_unsup, K];
    for (k in 1 : K) 
      gamma[1, k] <- log(phi[k, u[1]]);
    for (t in 2 : T_unsup) {
      for (k in 1 : K) {
        for (j in 1 : K) 
          acc[j] <- gamma[t - 1, j] + log(theta[j, k]) + log(phi[k, u[t]]);
        gamma[t, k] <- log_sum_exp(acc);
      }
    }
    increment_log_prob(log_sum_exp(gamma[T_unsup]));
  }
}
generated quantities {
  int<lower=1, upper=K> y_star[T_unsup];
  real log_p_y_star;
  {
    int back_ptr[T_unsup, K];
    real best_logp[T_unsup, K];
    real best_total_logp;
    for (k in 1 : K) 
      best_logp[1, K] <- log(phi[k, u[1]]);
    for (t in 2 : T_unsup) {
      for (k in 1 : K) {
        best_logp[t, k] <- negative_infinity();
        for (j in 1 : K) {
          real logp;
          logp <- best_logp[t - 1, j] + log(theta[j, k]) + log(phi[k, u[t]]);
          if (logp > best_logp[t, k]) {
            back_ptr[t, k] <- j;
            best_logp[t, k] <- logp;
          }
        }
      }
    }
    log_p_y_star <- max(best_logp[T_unsup]);
    for (k in 1 : K) 
      if (best_logp[T_unsup, k] == log_p_y_star) 
        y_star[T_unsup] <- k;
    for (t in 1 : (T_unsup - 1)) 
      y_star[T_unsup - t] <- back_ptr[T_unsup - t + 1, y_star[T_unsup - t + 1]];
  }
}


Warning: deprecated language construct used in 'hmm-semisup.stan', line 31, column 18:
   -------------------------------------------------
    29:      real gamma[T_unsup,K];
    30:      for (k in 1:K)
    31:        gamma[1,k] <- log(phi[k,u[1]]);
                           ^
    32:      for (t in 2:T_unsup) {
    33:        for (k in 1:K) {
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-semisup.stan', line 35, column 18:
   -------------------------------------------------
    33:        for (k in 1:K) {
    34:          for (j in 1:K)
    35:            acc[j] <- gamma[t-1,j] + log(theta[j,k]) + log(phi[k,u[t]]);
                           ^
    36:          gamma[t,k] <- log_sum_exp(acc);
    37:        }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-semisup.stan', line 36, column 20:
   -------------------------------------------------
    34:          for (j in 1:K)
    35:            acc[j] <- gamma[t-1,j] + log(theta[j,k]) + log(phi[k,u[t]]);
    36:          gamma[t,k] <- log_sum_exp(acc);
                             ^
    37:        }
    38:      }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-semisup.stan', line 39, column 21:
   -------------------------------------------------
    37:        }
    38:      }
    39:      increment_log_prob(log_sum_exp(gamma[T_unsup]));
                              ^
    40:    }
    41:  }
   -------------------------------------------------

increment_log_prob(...); is deprecated and will be removed in the future. Use target += ...; instead.


Warning: deprecated language construct used in 'hmm-semisup.stan', line 51, column 22:
   -------------------------------------------------
    49:      real best_total_logp;
    50:      for (k in 1:K)
    51:        best_logp[1,K] <- log(phi[k,u[1]]);
                               ^
    52:      for (t in 2:T_unsup) {
    53:        for (k in 1:K) {
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-semisup.stan', line 54, column 24:
   -------------------------------------------------
    52:      for (t in 2:T_unsup) {
    53:        for (k in 1:K) {
    54:          best_logp[t,k] <- negative_infinity();
                                 ^
    55:          for (j in 1:K) {
    56:            real logp;
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-semisup.stan', line 57, column 16:
   -------------------------------------------------
    55:          for (j in 1:K) {
    56:            real logp;
    57:            logp <- best_logp[t-1,j] + log(theta[j,k]) + log(phi[k,u[t]]);
                         ^
    58:            if (logp > best_logp[t,k]) {
    59:              back_ptr[t,k] <- j;
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-semisup.stan', line 59, column 27:
   -------------------------------------------------
    57:            logp <- best_logp[t-1,j] + log(theta[j,k]) + log(phi[k,u[t]]);
    58:            if (logp > best_logp[t,k]) {
    59:              back_ptr[t,k] <- j;
                                    ^
    60:              best_logp[t,k] <- logp;
    61:            }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-semisup.stan', line 60, column 28:
   -------------------------------------------------
    58:            if (logp > best_logp[t,k]) {
    59:              back_ptr[t,k] <- j;
    60:              best_logp[t,k] <- logp;
                                     ^
    61:            }
    62:          }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-semisup.stan', line 65, column 18:
   -------------------------------------------------
    63:        }
    64:      }
    65:      log_p_y_star <- max(best_logp[T_unsup]);
                           ^
    66:      for (k in 1:K)
    67:        if (best_logp[T_unsup,k] == log_p_y_star)
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-semisup.stan', line 68, column 25:
   -------------------------------------------------
    66:      for (k in 1:K)
    67:        if (best_logp[T_unsup,k] == log_p_y_star)
    68:          y_star[T_unsup] <- k;
                                  ^
    69:      for (t in 1:(T_unsup - 1))
    70:        y_star[T_unsup - t] <- back_ptr[T_unsup - t + 1, 
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-semisup.stan', line 70, column 27:
   -------------------------------------------------
    68:          y_star[T_unsup] <- k;
    69:      for (t in 1:(T_unsup - 1))
    70:        y_star[T_unsup - t] <- back_ptr[T_unsup - t + 1, 
                                    ^
    71:                                        y_star[T_unsup - t + 1]];
    72:    }
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.

  $ ../../../../../../install/default/bin/stanc --auto_format hmm-sufficient.stan
data {
  int<lower=1> K;
  int<lower=1> V;
  int<lower=0> T;
  int<lower=1, upper=V> w[T];
  int<lower=1, upper=K> z[T];
  vector<lower=0>[K] alpha;
  vector<lower=0>[V] beta;
}
transformed data {
  int<lower=0> trans[K, K];
  int<lower=0> emit[K, V];
  for (k1 in 1 : K) 
    for (k2 in 1 : K) 
      trans[k1, k2] <- 0;
  for (t in 2 : T) 
    trans[z[t - 1], z[t]] <- 1 + trans[z[t - 1], z[t]];
  for (k in 1 : K) 
    for (v in 1 : V) 
      emit[k, v] <- 0;
  for (t in 1 : T) 
    emit[z[t], w[t]] <- 1 + emit[z[t], w[t]];
}
parameters {
  simplex[K] theta[K];
  simplex[V] phi[K];
}
model {
  for (k in 1 : K) 
    theta[k] ~ dirichlet(alpha);
  for (k in 1 : K) 
    phi[k] ~ dirichlet(beta);
  for (k in 1 : K) 
    trans[k] ~ multinomial(theta[k]);
  for (k in 1 : K) 
    emit[k] ~ multinomial(phi[k]);
}


Warning: deprecated language construct used in 'hmm-sufficient.stan', line 15, column 20:
   -------------------------------------------------
    13:    for (k1 in 1:K) 
    14:      for (k2 in 1:K)
    15:        trans[k1,k2] <- 0;
                             ^
    16:    for (t in 2:T)
    17:      trans[z[t - 1], z[t]] <- 1 + trans[z[t - 1], z[t]];
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-sufficient.stan', line 17, column 27:
   -------------------------------------------------
    15:        trans[k1,k2] <- 0;
    16:    for (t in 2:T)
    17:      trans[z[t - 1], z[t]] <- 1 + trans[z[t - 1], z[t]];
                                    ^
    18:    for (k in 1:K)
    19:      for (v in 1:V)
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-sufficient.stan', line 20, column 17:
   -------------------------------------------------
    18:    for (k in 1:K)
    19:      for (v in 1:V)
    20:        emit[k,v] <- 0;
                          ^
    21:    for (t in 1:T)
    22:      emit[z[t], w[t]] <- 1 + emit[z[t], w[t]];
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.


Warning: deprecated language construct used in 'hmm-sufficient.stan', line 22, column 22:
   -------------------------------------------------
    20:        emit[k,v] <- 0;
    21:    for (t in 1:T)
    22:      emit[z[t], w[t]] <- 1 + emit[z[t], w[t]];
                               ^
    23:  }
    24:  parameters {
   -------------------------------------------------

assignment operator <- is deprecated in the Stan language; use = instead.

  $ ../../../../../../install/default/bin/stanc --auto_format hmm.stan
data {
  int<lower=1> K;
  int<lower=1> V;
  int<lower=0> T;
  int<lower=1, upper=V> w[T];
  int<lower=1, upper=K> z[T];
  vector<lower=0>[K] alpha;
  vector<lower=0>[V] beta;
}
parameters {
  simplex[K] theta[K];
  simplex[V] phi[K];
}
model {
  for (k in 1 : K) 
    theta[k] ~ dirichlet(alpha);
  for (k in 1 : K) 
    phi[k] ~ dirichlet(beta);
  for (t in 1 : T) 
    w[t] ~ categorical(phi[z[t]]);
  for (t in 2 : T) 
    z[t] ~ categorical(theta[z[t - 1]]);
}

